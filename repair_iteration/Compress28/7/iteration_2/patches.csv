bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  numToRead);	  return(numToRead    >=    0)?    -1    :(int)Math.floor(numToRead);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
2	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.floor(buf,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.floor(buf,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.floor(buf,  numToRead);	  return(numToRead    >=    0)?    -1    :(int)Math.floor(numToRead);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
3	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset,  numToRead);	  return(numToRead    >=    0)?    -1    :(int)Math.floor(numToRead);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
4	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.floor(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.floor(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.floor(buf,  offset,  numToRead);	  return(numToRead    >=    0)?    -1    :(int)Math.floor(numToRead);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
5	[BUG]  [BUGGY]  return(numToRead  >  0)?  -1  :(int)Math.floor(numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >  0)?  -1  :(int)Math.floor(numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >  0)?  -1  :(int)Math.floor(numToRead);	  return(numToRead    >=    0)?    -1    :(int)Math.floor(numToRead);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
6	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.ceil(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.ceil(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.ceil(buf,  offset,  numToRead);	  return(numToRead    >=    0)?    -1    :(int)Math.floor(numToRead);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
7	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  offset,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  offset,  totalRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
8	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  totalRead);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  totalRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
9	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(12,  totalRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(12,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(12,  totalRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
10	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(10.0,  totalRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(10.0,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(10.0,  totalRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
11	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(20,  totalRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(20,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(20,  totalRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
12	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset,  entrySize);	  return(numToRead    <    0)?    -1    :(int)Math.floor(buf,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
13	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  entryOffset);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  entryOffset);	  return(numToRead    <    0)?    -1    :(int)Math.floor(buf,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
14	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset,  entryOffset);	  return(numToRead    <    0)?    -1    :(int)Math.floor(buf,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
15	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.floor(buf,  entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.floor(buf,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.floor(buf,  entryOffset);	  return(numToRead    <    0)?    -1    :(int)Math.floor(buf,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
16	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  entrySize);	  return(numToRead    <    0)?    -1    :(int)Math.floor(buf,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
17	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);	  return(numToRead    <    0)?    -1    :(int)Math.floor(buf,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
18	[BUG]  [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.pow(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.pow(buf,  offset,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  ==  0)?  -1  :(int)Math.pow(buf,  offset,  totalRead);	  return(entrySize    ==    0)?    -1    :(int)Math.pow(10,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
19	[BUG]  [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.pow(10,  entryOffset);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.pow(10,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  ==  0)?  -1  :(int)Math.pow(10,  entryOffset);	  return(entrySize    ==    0)?    -1    :(int)Math.pow(10,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
20	[BUG]  [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.pow(buf,  totalRead);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.pow(buf,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  ==  0)?  -1  :(int)Math.pow(buf,  totalRead);	  return(entrySize    ==    0)?    -1    :(int)Math.pow(10,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
21	[BUG]  [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.pow(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.pow(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  ==  0)?  -1  :(int)Math.pow(buf,  offset,  numToRead);	  return(entrySize    ==    0)?    -1    :(int)Math.pow(10,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
22	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.pow(10,  entryOffset);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.pow(10,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.pow(10,  entryOffset);	  return(entrySize    ==    0)?    -1    :(int)Math.pow(10,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
23	[BUG]  [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getKey());  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getKey());  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getKey());  }	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    currEntry.setHitEOF(currEntry.getKey());    }    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
24	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getKey());  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getKey());  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getKey());  }	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    currEntry.setHitEOF(currEntry.getKey());    }    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
25	[BUG]  [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getKey()  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getKey()  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getKey()	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    currEntry.setHitEOF(currEntry.getKey());    }    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
26	[BUG]  [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getKey());  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getKey());  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getKey());	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    currEntry.setHitEOF(currEntry.getKey());    }    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
27	[BUG]  [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(entrySize);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(entrySize);  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(entrySize);  }	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    currEntry.setHitEOF(currEntry.getKey());    }    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
28	[BUG]  [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    currEntry.setHitEOF(currEntry.getKey());    }    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
29	[BUG]  [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getValue());  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getValue());  }	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    currEntry.setHitEOF(currEntry.getKey());    }    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
30	[BUG]  [BUGGY]  ||  entrySize  >  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  ||  entrySize  >  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	||  entrySize  >  0)  {  throw  new  IllegalStateException( " ");  }	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
31	[BUG]  [BUGGY]  readNow()  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  readNow()  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	readNow()  {  throw  new  IllegalStateException( " ");  }	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
32	[BUG]  [BUGGY]  allowSkip(0L)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  allowSkip(0L)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	allowSkip(0L)  {  throw  new  IllegalStateException( " ");  }	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
33	[BUG]  [BUGGY]  ||  entrySize  >  0)  {  throw  new  IllegalStateException( " ".getMessage());  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  ||  entrySize  >  0)  {  throw  new  IllegalStateException( " ".getMessage());  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	||  entrySize  >  0)  {  throw  new  IllegalStateException( " ".getMessage());  }	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
34	[BUG]  [BUGGY]  ||  entrySize  >  0)  {  throw  new  IllegalStateException( " ".);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  ||  entrySize  >  0)  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	||  entrySize  >  0)  {  throw  new  IllegalStateException( " ".);  }	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
35	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.rint(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.rint(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(byte)Math.rint(buf,  offset,  entrySize);	  return(numToRead    <    0)?    -1    :(byte)Math.rint(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
36	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(byte)Math.rint(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(byte)Math.rint(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(byte)Math.rint(buf,  offset,  numToRead);	  return(numToRead    <    0)?    -1    :(byte)Math.rint(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
37	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.rint(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.rint(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(byte)Math.rint(buf,  offset,  numToRead,  hasHitEOF);	  return(numToRead    <    0)?    -1    :(byte)Math.rint(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
38	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(byte)Math.rint(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  -1  :(byte)Math.rint(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(byte)Math.rint(buf,  offset,  numToRead);	  return(numToRead    <    0)?    -1    :(byte)Math.rint(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
39	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.rint(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.rint(buf,  offset,  numToRead  +  1);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(byte)Math.rint(buf,  offset,  numToRead  +  1);	  return(numToRead    <    0)?    -1    :(byte)Math.rint(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
40	[BUG]  [BUGGY]  return(numToRead  >  0)?  -1  :(byte)Math.rint(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >  0)?  -1  :(byte)Math.rint(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >  0)?  -1  :(byte)Math.rint(buf,  offset,  numToRead);	  return(numToRead    <    0)?    -1    :(byte)Math.rint(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
41	[BUG]  [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  totalRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  totalRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  ==  0)record(buf,  offset,  totalRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
42	[BUG]  [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset!=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset!=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset!=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
43	[BUG]  [BUGGY]  if(numToRead  <  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead  <  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  <  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
44	[BUG]  [BUGGY]  if(numToRead!=  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead!=  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead!=  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
45	[BUG]  [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  <  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  <  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  <  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
46	[BUG]  [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >>  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >>  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >>  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
47	[BUG]  [BUGGY]  return(numToRead  ==  0)?  1  :  -1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  1  :  -1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  1  :  -1;	  return(numToRead    ==    0)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
48	[BUG]  [BUGGY]  return(numToRead  >=  0)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  1  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  1  :  0;	  return(numToRead    ==    0)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
49	[BUG]  [BUGGY]  return(numToRead  ==  0)?  1L  :  0;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  1L  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  1L  :  0;	  return(numToRead    ==    0)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
50	[BUG]  [BUGGY]  return(numToRead!=  0)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead!=  0)?  1  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead!=  0)?  1  :  0;	  return(numToRead    ==    0)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
51	[BUG]  [BUGGY]  return(totalRead  ==  0)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  ==  0)?  1  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  ==  0)?  1  :  0;	  return(numToRead    ==    0)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
52	[BUG]  [BUGGY]  return(numToRead  ==  0)?  2  :  0;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  2  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  2  :  0;	  return(numToRead    ==    0)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
53	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize);	  return(numToRead    >=    0)?    -1    :(int)Math.rint(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
54	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead  +  1);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead  +  1);	  return(numToRead    >=    0)?    -1    :(int)Math.rint(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
55	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  offset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  offset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  offset);	  throw    new    IllegalStateException(   "Can    not    read    EOF    from    file:   "    +    offset);    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
56	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf);	  throw    new    IllegalStateException(   "Can    not    read    EOF    from    file:   "    +    offset);    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
57	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  offset);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  offset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	Throwables.throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  offset);	  throw    new    IllegalStateException(   "Can    not    read    EOF    from    file:   "    +    offset);    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
58	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  entryOffset);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  entryOffset);	  throw    new    IllegalStateException(   "Can    not    read    EOF    from    file:   "    +    offset);    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
59	[BUG]  [BUGGY]  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  offset);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  offset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  offset);	  throw    new    IllegalStateException(   "Can    not    read    EOF    from    file:   "    +    offset);    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
60	[BUG]  [BUGGY]  return(entrySize  <  0)?  -1  :(int)Math.ceil(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  <  0)?  -1  :(int)Math.ceil(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  <  0)?  -1  :(int)Math.ceil(buf,  offset,  numToRead);	  return(entrySize    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
61	[BUG]  [BUGGY]  return(entrySize  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  numToRead,  hasHitEOF);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  numToRead,  hasHitEOF);	  return(entrySize    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
62	[BUG]  [BUGGY]  return(entrySize  <  =  0)?  -1  :(int)Math.ceil(buf,  offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  <  =  0)?  -1  :(int)Math.ceil(buf,  offset  +  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  <  =  0)?  -1  :(int)Math.ceil(buf,  offset  +  numToRead);	  return(entrySize    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
63	[BUG]  [BUGGY]  return(numRecords  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numRecords  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numRecords  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize);	  return(entrySize    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
64	[BUG]  [BUGGY]  return(entrySize  <  0)?  -1  :(int)Math.ceil(buf,  offset,  entryOffset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  <  0)?  -1  :(int)Math.ceil(buf,  offset,  entryOffset  +  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  <  0)?  -1  :(int)Math.ceil(buf,  offset,  entryOffset  +  numToRead);	  return(entrySize    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
65	[BUG]  [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  ==  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);	  return(totalRead    >=    0)?    -1    :(int)Math.rint(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
66	[BUG]  [BUGGY]  return(totalRead  >=  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  >=  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  >=  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);	  return(totalRead    >=    0)?    -1    :(int)Math.rint(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
67	[BUG]  [BUGGY]  return(numToRead  >>  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >>  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >>  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize);	  return(totalRead    >=    0)?    -1    :(int)Math.rint(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
68	[BUG]  [BUGGY]  return(numToRead!=  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead!=  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead!=  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize);	  return(totalRead    >=    0)?    -1    :(int)Math.rint(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
69	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  ' "  +  buf.length  + "'. ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  ' "  +  buf.length  + "'. ");  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  ' "  +  buf.length  + "'. ");	  throw    new    IllegalStateException(   "   ".getMessage());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
70	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  ' "  +  buf.getName());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  ' "  +  buf.getName());  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  ' "  +  buf.getName());	  throw    new    IllegalStateException(   "   ".getMessage());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
71	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  ' "  +  buf.length  + "'  entry  size: "  +  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  ' "  +  buf.length  + "'  entry  size: "  +  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  ' "  +  buf.length  + "'  entry  size: "  +  numToRead);	  throw    new    IllegalStateException(   "   ".getMessage());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
72	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  ' "  +  buf.length  + "'  with  entry  offset: "  +  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  ' "  +  buf.length  + "'  with  entry  offset: "  +  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  ' "  +  buf.length  + "'  with  entry  offset: "  +  numToRead);	  throw    new    IllegalStateException(   "   ".getMessage());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
73	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  ' "  +  buf.length  + "'  for  entry  size: "  +  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  ' "  +  buf.length  + "'  for  entry  size: "  +  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  ' "  +  buf.length  + "'  for  entry  size: "  +  numToRead);	  throw    new    IllegalStateException(   "   ".getMessage());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
74	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  ' "  +  buf.length  + "'  with  entrySize: "  +  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  ' "  +  buf.length  + "'  with  entrySize: "  +  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  ' "  +  buf.length  + "'  with  entrySize: "  +  numToRead);	  throw    new    IllegalStateException(   "   ".getMessage());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
75	[BUG]  [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.pow(10,  entryOffset);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.pow(10,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >=  0)?  -1  :(int)Math.pow(10,  entryOffset);	  return(entrySize    >=    0)?    -1    :(int)Math.pow(10,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
76	[BUG]  [BUGGY]  return(entrySize  >  0)?  -1  :(int)Math.pow(10,  totalRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  >  0)?  -1  :(int)Math.pow(10,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >  0)?  -1  :(int)Math.pow(10,  totalRead);	  return(entrySize    >=    0)?    -1    :(int)Math.pow(10,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
77	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.pow(10,  entryOffset);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.pow(10,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.pow(10,  entryOffset);	  return(entrySize    >=    0)?    -1    :(int)Math.pow(10,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
78	[BUG]  [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.pow(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.pow(buf,  offset,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >=  0)?  -1  :(int)Math.pow(buf,  offset,  totalRead);	  return(entrySize    >=    0)?    -1    :(int)Math.pow(10,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
79	[BUG]  [BUGGY]  return(numToRead  ==  entryOffset)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  entryOffset)?  -1  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  entryOffset)?  -1  :  0;	  return(numToRead    >    entryOffset)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
80	[BUG]  [BUGGY]  return(numToRead  >=  entryOffset)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  entryOffset)?  -1  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  entryOffset)?  -1  :  0;	  return(numToRead    >    entryOffset)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
81	[BUG]  [BUGGY]  return(numToRead  <  entryOffset)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  entryOffset)?  -1  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  entryOffset)?  -1  :  0;	  return(numToRead    >    entryOffset)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
82	[BUG]  [BUGGY]  return(entrySize  >=  numToRead)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  >=  numToRead)?  -1  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >=  numToRead)?  -1  :  0;	  return(numToRead    >=    entrySize)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
83	[BUG]  [BUGGY]  return(entrySize  >>  numToRead)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  >>  numToRead)?  -1  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >>  numToRead)?  -1  :  0;	  return(numToRead    >=    entrySize)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
84	[BUG]  [BUGGY]  return(entryOffset  >=  numToRead)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entryOffset  >=  numToRead)?  -1  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entryOffset  >=  numToRead)?  -1  :  0;	  return(numToRead    >=    entrySize)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
85	[BUG]  [BUGGY]  return(numToRead  >>  entrySize)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >>  entrySize)?  -1  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >>  entrySize)?  -1  :  0;	  return(numToRead    >=    entrySize)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
86	[BUG]  [BUGGY]  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF    &&    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
87	[BUG]  [BUGGY]  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF    &&    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
88	[BUG]  [BUGGY]  ||  hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  ||  hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	||  hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF    &&    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
89	[BUG]  [BUGGY]  ||!hasHitEOF  &&  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  ||!hasHitEOF  &&  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	||!hasHitEOF  &&  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF    &&    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
90	[BUG]  [BUGGY]  hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF    &&    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
91	[BUG]  [BUGGY]  if(!hasHitEOF  &&  entryOffset  >=  totalRead)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(!hasHitEOF  &&  entryOffset  >=  totalRead)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(!hasHitEOF  &&  entryOffset  >=  totalRead)  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF    &&    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
92	[BUG]  [BUGGY]  if(!hasHitEOF  &&  entryOffset  >=  numToRead)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(!hasHitEOF  &&  entryOffset  >=  numToRead)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(!hasHitEOF  &&  entryOffset  >=  numToRead)  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF    &&    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
93	[BUG]  [BUGGY]  return(entrySize  >=  numToRead)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  >=  numToRead)?  -1  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >=  numToRead)?  -1  :  1;	  return(numToRead    >=    entrySize)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
94	[BUG]  [BUGGY]  return(entryOffset  >=  numToRead)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entryOffset  >=  numToRead)?  -1  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entryOffset  >=  numToRead)?  -1  :  1;	  return(numToRead    >=    entrySize)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
95	[BUG]  [BUGGY]  return(entrySize  >>  numToRead)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  >>  numToRead)?  -1  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >>  numToRead)?  -1  :  1;	  return(numToRead    >=    entrySize)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
96	[BUG]  [BUGGY]  return(numToRead  >=  entryOffset)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  entryOffset)?  -1  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  entryOffset)?  -1  :  1;	  return(numToRead    >=    entrySize)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
97	[BUG]  [BUGGY]  return(numToRead  >>  entrySize)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >>  entrySize)?  -1  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >>  entrySize)?  -1  :  1;	  return(numToRead    >=    entrySize)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
98	[BUG]  [BUGGY]  return(numToRead  >>  0)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >>  0)?  -1  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >>  0)?  -1  :  1;	  return(numToRead    >=    0)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
99	[BUG]  [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.pow(10,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.pow(10,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >=  0)?  -1  :(int)Math.pow(10,  numToRead);	  return(numToRead    >=    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
100	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.pow(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.pow(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.pow(buf,  offset,  entrySize);	  return(numToRead    >=    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
101	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.pow(10,  totalRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.pow(10,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.pow(10,  totalRead);	  return(numToRead    >=    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
102	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.pow(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.pow(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.pow(buf,  offset,  entrySize);	  return(numToRead    >=    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
103	[BUG]  [BUGGY]  return(numToRead  >=  0)?  0  :  totalRead;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  0  :  totalRead;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  0  :  totalRead;	  return(totalRead    >=    0)?    0    :    totalRead;    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
104	[BUG]  [BUGGY]  return(totalRead  >  0)?  0  :  totalRead;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  >  0)?  0  :  totalRead;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  >  0)?  0  :  totalRead;	  return(totalRead    >=    0)?    0    :    totalRead;    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
105	[BUG]  [BUGGY]  return(totalRead  >=  0)?  0  :  entrySize;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  >=  0)?  0  :  entrySize;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  >=  0)?  0  :  entrySize;	  return(totalRead    >=    0)?    0    :    totalRead;    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
106	[BUG]  [BUGGY]  return(totalRead  >=  0)?  0  :  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  >=  0)?  0  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  >=  0)?  0  :  1;	  return(totalRead    >=    0)?    0    :    totalRead;    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
107	[BUG]  [BUGGY]  return(totalRead  >=  0)?  0  :  0;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  >=  0)?  0  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  >=  0)?  0  :  0;	  return(totalRead    >=    0)?    0    :    totalRead;    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
108	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  offset,  numToRead  +  1);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  offset,  numToRead  +  1);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
109	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  offset  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  offset  +  1);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  offset  +  1);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
110	[BUG]  [BUGGY]  return(numToRead  <  0)?  1  :(int)Math.pow(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  1  :(int)Math.pow(buf,  offset,  numToRead  +  1);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  1  :(int)Math.pow(buf,  offset,  numToRead  +  1);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
111	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  offset+numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  offset+numToRead  +  1);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  offset+numToRead  +  1);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
112	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.pow(10,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.pow(10,  numToRead  +  1);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.pow(10,  numToRead  +  1);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
113	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.pow(10,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.pow(10,  numToRead  +  1);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(byte)Math.pow(10,  numToRead  +  1);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
114	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.pow(10,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.pow(10,  numToRead  +  1);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.pow(10,  numToRead  +  1);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
115	[BUG]  [BUGGY]  int  currEntrySize  =  currEntry.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  currEntry.read(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  currEntry.read(buf,  offset,  entrySize);	  int    currEntrySize    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
116	[BUG]  [BUGGY]  int  currEntrySize  =  currEntry.read(buf,  offset,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  currEntry.read(buf,  offset,  numToRead,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  currEntry.read(buf,  offset,  numToRead,  entrySize);	  int    currEntrySize    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
117	[BUG]  [BUGGY]  int  currEntrySize  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);	  int    currEntrySize    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
118	[BUG]  [BUGGY]  int  currEntrySize  =  currEntry.read(buf,  offset,  numToRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  currEntry.read(buf,  offset,  numToRead,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  currEntry.read(buf,  offset,  numToRead,  entryOffset);	  int    currEntrySize    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
119	[BUG]  [BUGGY]  int  currEntrySize  =  currEntry.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  currEntry.read(buf,  offset,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  currEntry.read(buf,  offset,  totalRead);	  int    currEntrySize    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
120	[BUG]  [BUGGY]  int  currEntrySize  =  currEntry.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  currEntry.read(buf,  offset,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  currEntry.read(buf,  offset,  entryOffset);	  int    currEntrySize    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
121	[BUG]  [BUGGY]  return(numToRead  <  0)?  1  :(int)Math.rint(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  1  :(int)Math.rint(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  1  :(int)Math.rint(buf,  offset,  entrySize);	  return(numToRead    <    0)?    1    :(int)Math.rint(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
122	[BUG]  [BUGGY]  return(numToRead  ==  0)?  1  :(int)Math.rint(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  1  :(int)Math.rint(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  1  :(int)Math.rint(buf,  offset,  numToRead);	  return(numToRead    <    0)?    1    :(int)Math.rint(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
123	[BUG]  [BUGGY]  return(numToRead  <  0)?  1  :(byte)Math.rint(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  1  :(byte)Math.rint(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  1  :(byte)Math.rint(buf,  offset,  numToRead);	  return(numToRead    <    0)?    1    :(int)Math.rint(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
124	[BUG]  [BUGGY]  return(numToRead  >=  0)?  1  :(int)Math.rint(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  1  :(int)Math.rint(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  1  :(int)Math.rint(buf,  offset,  numToRead);	  return(numToRead    <    0)?    1    :(int)Math.rint(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
125	[BUG]  [BUGGY]  return(numToRead  <  1)?  1  :(int)Math.rint(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  1)?  1  :(int)Math.rint(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  1)?  1  :(int)Math.rint(buf,  offset,  numToRead);	  return(numToRead    <    0)?    1    :(int)Math.rint(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
126	[BUG]  [BUGGY]  return(numToRead  <  =  0)?  1  :(int)Math.rint(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  =  0)?  1  :(int)Math.rint(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  =  0)?  1  :(int)Math.rint(buf,  offset,  numToRead);	  return(numToRead    <    0)?    1    :(int)Math.rint(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
127	[BUG]  [BUGGY]  return(numToRead  <  0)?  1  :(int)Math.rint(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  1  :(int)Math.rint(buf,  offset,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  1  :(int)Math.rint(buf,  offset,  totalRead);	  return(numToRead    <    0)?    1    :(int)Math.rint(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
128	[BUG]  [BUGGY]  return(numToRead  ==  0)?  0  :  totalRead;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  0  :  totalRead;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  0  :  totalRead;	  return(totalRead    ==    0)?    0    :    totalRead;    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
129	[BUG]  [BUGGY]  return(totalRead  ==  0)?  0  :  entrySize;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  ==  0)?  0  :  entrySize;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  ==  0)?  0  :  entrySize;	  return(totalRead    ==    0)?    0    :    totalRead;    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
130	[BUG]  [BUGGY]  return(totalRead  ==  0)?  0  :  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  ==  0)?  0  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  ==  0)?  0  :  1;	  return(totalRead    ==    0)?    0    :    totalRead;    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
131	[BUG]  [BUGGY]  return(totalRead  ==  0)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  ==  0)?  0  :  buf.length;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  ==  0)?  0  :  buf.length;	  return(totalRead    ==    0)?    0    :    totalRead;    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
132	[BUG]  [BUGGY]  return(totalRead  ==  0)?  0  :  0;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  ==  0)?  0  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  ==  0)?  0  :  0;	  return(totalRead    ==    0)?    0    :    totalRead;    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
133	[BUG]  [BUGGY]  return(totalRead  ==  0)?  0  :  numToRead;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  ==  0)?  0  :  numToRead;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  ==  0)?  0  :  numToRead;	  return(totalRead    ==    0)?    0    :    totalRead;    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
134	[BUG]  [BUGGY]  return(entrySize  <  numToRead)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  <  numToRead)?  -1  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  <  numToRead)?  -1  :  0;	  return(numToRead    <    entrySize)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
135	[BUG]  [BUGGY]  return(entryOffset  <  numToRead)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entryOffset  <  numToRead)?  -1  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entryOffset  <  numToRead)?  -1  :  0;	  return(numToRead    <    entrySize)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
136	[BUG]  [BUGGY]  return(numToRead  <  entrySize)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  entrySize)?  1  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  entrySize)?  1  :  0;	  return(numToRead    <    entrySize)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
137	[BUG]  [BUGGY]  int  currEntrySize  =  entryOffset.getSize();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  entryOffset.getSize();  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  entryOffset.getSize();	  int    currEntrySize    =    currEntry.getSize();    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
138	[BUG]  [BUGGY]  int  currEntrySize  =  this.currEntry.getSize();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  this.currEntry.getSize();  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  this.currEntry.getSize();	  int    currEntrySize    =    currEntry.getSize();    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
139	[BUG]  [BUGGY]  int  currEntrySize  =  entrySize.getSize();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  entrySize.getSize();  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  entrySize.getSize();	  int    currEntrySize    =    currEntry.getSize();    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
140	[BUG]  [BUGGY]  long  currEntrySize  =  currEntry.getSize();  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  long  currEntrySize  =  currEntry.getSize();  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	long  currEntrySize  =  currEntry.getSize();	  int    currEntrySize    =    currEntry.getSize();    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
141	[BUG]  [BUGGY]  int  currEntrySize  =  currEntry.getSize()  +  1;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  currEntry.getSize()  +  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  currEntry.getSize()  +  1;	  int    currEntrySize    =    currEntry.getSize();    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
142	[BUG]  [BUGGY]  int  currEntrySize  =  i.getSize();  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  i.getSize();  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  i.getSize();	  int    currEntrySize    =    currEntry.getSize();    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
143	[BUG]  [BUGGY]  int  currEntrySize  =  currEntry.getSize()  -  1;  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  currEntry.getSize()  -  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  currEntry.getSize()  -  1;	  int    currEntrySize    =    currEntry.getSize();    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
144	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  totalRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  totalRead);	  return(entrySize    ==    0)?    -1    :(int)Math.floor(offset    +    totalRead);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
145	[BUG]  [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.ceil(buf,  offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.ceil(buf,  offset  +  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  ==  0)?  -1  :(int)Math.ceil(buf,  offset  +  numToRead);	  return(entrySize    ==    0)?    -1    :(int)Math.floor(offset    +    totalRead);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
146	[BUG]  [BUGGY]  return(entrySize  ==  0)?  1  :(int)Math.floor(buf,  offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  ==  0)?  1  :(int)Math.floor(buf,  offset  +  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  ==  0)?  1  :(int)Math.floor(buf,  offset  +  numToRead);	  return(entrySize    ==    0)?    -1    :(int)Math.floor(offset    +    totalRead);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
147	[BUG]  [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.pow(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.pow(buf,  offset,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  ==  0)?  -1  :(int)Math.pow(buf,  offset,  entryOffset);	  return(totalRead    ==    0)?    -1    :(int)Math.pow(10,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
148	[BUG]  [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.pow(buf,  entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.pow(buf,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  ==  0)?  -1  :(int)Math.pow(buf,  entryOffset);	  return(totalRead    ==    0)?    -1    :(int)Math.pow(10,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
149	[BUG]  [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.pow(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.pow(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  ==  0)?  -1  :(int)Math.pow(buf,  offset,  entrySize);	  return(totalRead    ==    0)?    -1    :(int)Math.pow(10,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
150	[BUG]  [BUGGY]  return(numToRead  >  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize);	  return(numToRead    >=    0)?    -1    :(int)Math.rint(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
151	[BUG]  [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    buffer[i]    =    is.read(buf,    offset,    i);    }    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
152	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    buffer[i]    =    is.read(buf,    offset,    i);    }    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
153	[BUG]  [BUGGY]  if(entrySize  >  entryOffset)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entrySize  >  entryOffset)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  >  entryOffset)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    buffer[i]    =    is.read(buf,    offset,    i);    }    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
154	[BUG]  [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  0);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  0);  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  0);  }	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    buffer[i]    =    is.read(buf,    offset,    i);    }    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
155	[BUG]  [BUGGY]  if(entrySize  >  entryOffset)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  0);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entrySize  >  entryOffset)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  0);  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  >  entryOffset)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  0);  }	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    buffer[i]    =    is.read(buf,    offset,    i);    }    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
156	[BUG]  [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    buffer[i]    =    is.read(buf,    offset,    i);    }    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
157	[BUG]  [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    buffer[i]    =    is.read(buf,    offset,    i);    }    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
158	[BUG]  [BUGGY]  return(entrySize  >  entryOffset)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  >  entryOffset)?  -1  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >  entryOffset)?  -1  :  1;	  return(entryOffset    >    entrySize)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
159	[BUG]  [BUGGY]  return(entryOffset  <  entrySize)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entryOffset  <  entrySize)?  -1  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entryOffset  <  entrySize)?  -1  :  1;	  return(entryOffset    >    entrySize)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
160	[BUG]  [BUGGY]  return(entryOffset  >  0)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entryOffset  >  0)?  -1  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entryOffset  >  0)?  -1  :  1;	  return(entryOffset    >    entrySize)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
161	[BUG]  [BUGGY]  return(entryOffset  >=  entrySize)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entryOffset  >=  entrySize)?  -1  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entryOffset  >=  entrySize)?  -1  :  1;	  return(entryOffset    >    entrySize)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
162	[BUG]  [BUGGY]  return(entryOffset  ==  entrySize)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entryOffset  ==  entrySize)?  -1  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entryOffset  ==  entrySize)?  -1  :  1;	  return(entryOffset    >    entrySize)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
163	[BUG]  [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead);	  return(totalRead    >=    0)?    -1    :(int)Math.floor(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
164	[BUG]  [BUGGY]  return(totalRead  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead);	  return(totalRead    >=    0)?    -1    :(int)Math.floor(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
165	[BUG]  [BUGGY]  return(numToRead  >>  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >>  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >>  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);	  return(totalRead    >=    0)?    -1    :(int)Math.floor(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
166	[BUG]  [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  ==  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);	  return(entrySize    >=    0)?    -1    :(int)Math.rint(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
167	[BUG]  [BUGGY]  return(entrySize  >  0)?  -1  :(int)Math.rint(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  >  0)?  -1  :(int)Math.rint(buf,  offset,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >  0)?  -1  :(int)Math.rint(buf,  offset,  totalRead);	  return(entrySize    >=    0)?    -1    :(int)Math.rint(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
168	[BUG]  [BUGGY]  return(entrySize  <  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  <  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  <  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);	  return(entrySize    >=    0)?    -1    :(int)Math.rint(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
169	[BUG]  [BUGGY]  return(entrySize!=  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize!=  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize!=  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);	  return(entrySize    >=    0)?    -1    :(int)Math.rint(buf,    offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
170	[BUG]  [BUGGY]  return(entrySize  ==  numToRead)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  ==  numToRead)?  -1  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  ==  numToRead)?  -1  :  1;	  return(numToRead    ==    entrySize)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
171	[BUG]  [BUGGY]  return(entryOffset  ==  numToRead)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entryOffset  ==  numToRead)?  -1  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entryOffset  ==  numToRead)?  -1  :  1;	  return(numToRead    ==    entrySize)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
172	[BUG]  [BUGGY]  return(numToRead  ==  entryOffset)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  entryOffset)?  -1  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  entryOffset)?  -1  :  1;	  return(numToRead    ==    entrySize)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
173	[BUG]  [BUGGY]  return(numToRead  ==  entrySize)?  0  :  1;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  entrySize)?  0  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  entrySize)?  0  :  1;	  return(numToRead    ==    entrySize)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
174	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :  4;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :  4;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :  4;	  return(numToRead    ==    0)?    -1    :    2;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
175	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :  3;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :  3;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :  3;	  return(numToRead    ==    0)?    -1    :    2;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
176	[BUG]  [BUGGY]  return(numToRead  ==  0)?  1  :  2;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  1  :  2;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  1  :  2;	  return(numToRead    ==    0)?    -1    :    2;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
177	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.floor(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.floor(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(byte)Math.floor(buf,  offset,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.floor(buf,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
178	[BUG]  [BUGGY]  return(numToRead  <  0)?  1  :(int)Math.floor(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  1  :(int)Math.floor(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  1  :(int)Math.floor(buf,  offset,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.floor(buf,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
179	[BUG]  [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  totalRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  totalRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  ==  0)record(buf,  offset,  totalRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
180	[BUG]  [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset!=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset!=  entrySize)  {  return  0;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset!=  entrySize)  {  return  0;  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
181	[BUG]  [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  <  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  <  entrySize)  {  return  0;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  <  entrySize)  {  return  0;  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
182	[BUG]  [BUGGY]  if(numToRead!=  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead!=  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead!=  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
183	[BUG]  [BUGGY]  if(numToRead  <  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead  <  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  <  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
184	[BUG]  [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >  entrySize)  {  return  0;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >  entrySize)  {  return  0;  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
185	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  offset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  offset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  offset);	  throw    new    IllegalStateException(   "Can    not    read    EOF    file:   "    +    buf);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
186	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  entryOffset);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  entryOffset);	  throw    new    IllegalStateException(   "Can    not    read    EOF    file:   "    +    buf);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
187	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  totalRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  totalRead);	  throw    new    IllegalStateException(   "Can    not    read    EOF    file:   "    +    buf);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
188	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  hasHitEOF);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  hasHitEOF);	  throw    new    IllegalStateException(   "Can    not    read    EOF    file:   "    +    buf);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
189	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	Throwables.throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf);	  throw    new    IllegalStateException(   "Can    not    read    EOF    file:   "    +    buf);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
190	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  entrySize);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  entrySize);	  throw    new    IllegalStateException(   "Can    not    read    EOF    file:   "    +    buf);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
191	[BUG]  [BUGGY]  return(numToRead  <  =  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  =  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  =  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize);	  return(numToRead    <    =    0)?    -1    :(int)Math.rint(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
192	[BUG]  [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  totalRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  totalRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  ==  0)record(buf,  offset,  totalRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
193	[BUG]  [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset!=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset!=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset!=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
194	[BUG]  [BUGGY]  if(numToRead  <  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead  <  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  <  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
195	[BUG]  [BUGGY]  if(numToRead!=  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead!=  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead!=  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
196	[BUG]  [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  <  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  <  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  <  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
197	[BUG]  [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
198	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: ");  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: ");  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	Throwables.throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: ");	  throw    new    IllegalStateException(   "Can    not    read    EOF,    expecting    entry    offset:   ");    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
199	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  size: ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  size: ");  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  size: ");	  throw    new    IllegalStateException(   "Can    not    read    EOF,    expecting    entry    offset:   ");    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
200	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: "  +  getHitEOF());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: "  +  getHitEOF());  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: "  +  getHitEOF());	  throw    new    IllegalStateException(   "Can    not    read    EOF,    expecting    entry    offset:   ");    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
201	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: "  +  numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: "  +  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: "  +  numToRead);	  throw    new    IllegalStateException(   "Can    not    read    EOF,    expecting    entry    offset:   ");    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
202	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: "  +  buf.length);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: "  +  buf.length);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: "  +  buf.length);	  throw    new    IllegalStateException(   "Can    not    read    EOF,    expecting    entry    offset:   ");    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
203	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: "  +  length);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: "  +  length);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: "  +  length);	  throw    new    IllegalStateException(   "Can    not    read    EOF,    expecting    entry    offset:   ");    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
204	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  offset,  entrySize);	  throw    new    IllegalStateException(   "Can    not    read    EOF    from    file:   "    +    buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
205	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	Throwables.throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  offset,  numToRead);	  throw    new    IllegalStateException(   "Can    not    read    EOF    from    file:   "    +    buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
206	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  offset,  entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  offset,  entrySize,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  offset,  entrySize,  numToRead);	  throw    new    IllegalStateException(   "Can    not    read    EOF    from    file:   "    +    buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
207	[BUG]  [BUGGY]  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  offset,  entrySize);	  throw    new    IllegalStateException(   "Can    not    read    EOF    from    file:   "    +    buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
208	[BUG]  [BUGGY]  if(numToRead  <  0)  {  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead  <  0)  {  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  offset,  numToRead);  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  <  0)  {  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  offset,  numToRead);  }	  throw    new    IllegalStateException(   "Can    not    read    EOF    from    file:   "    +    buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
209	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  offset,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  offset,  entryOffset);	  throw    new    IllegalStateException(   "Can    not    read    EOF    from    file:   "    +    buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
210	[BUG]  [BUGGY]  return(numToRead!=  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead!=  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead!=  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);	  return(entrySize    >=    0)?    -1    :(int)Math.floor(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
211	[BUG]  [BUGGY]  return(entrySize  >  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  >  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead);	  return(entrySize    >=    0)?    -1    :(int)Math.floor(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
212	[BUG]  [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.floor(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.floor(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >=  0)?  -1  :(int)Math.floor(buf,  offset,  numToRead);	  return(entrySize    >=    0)?    -1    :(int)Math.floor(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
213	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.ceil(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.ceil(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.ceil(buf,  offset,  entrySize);	  return(numToRead    ==    0)?    -1    :(int)Math.ceil(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
214	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.ceil(buf,  offset  +  1,  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.ceil(buf,  offset  +  1,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.ceil(buf,  offset  +  1,  entrySize);	  return(numToRead    ==    0)?    -1    :(int)Math.ceil(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
215	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize,  hasHitEOF);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize,  hasHitEOF);	  return(numToRead    ==    0)?    -1    :(int)Math.ceil(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
216	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.ceil(buf,  offset  +  numRecords);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.ceil(buf,  offset  +  numRecords);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.ceil(buf,  offset  +  numRecords);	  return(numToRead    ==    0)?    -1    :(int)Math.ceil(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
217	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.ceil(buf,  offset  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.ceil(buf,  offset  +  1);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.ceil(buf,  offset  +  1);	  return(numToRead    ==    0)?    -1    :(int)Math.ceil(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
218	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(byte)Math.ceil(buf,  offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(byte)Math.ceil(buf,  offset  +  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(byte)Math.ceil(buf,  offset  +  entrySize);	  return(numToRead    ==    0)?    -1    :(int)Math.ceil(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
219	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset  +  1,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset  +  1,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset  +  1,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.floor(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
220	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset,  totalRead  +  numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset,  totalRead  +  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset,  totalRead  +  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.floor(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
221	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.floor(buf,  offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.floor(buf,  offset  +  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(byte)Math.floor(buf,  offset  +  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.floor(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
222	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset  +  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset  +  1);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset  +  1);	  return(numToRead    <    0)?    -1    :(int)Math.floor(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
223	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead,  entrySize);	  return(numToRead    <    0)?    -1    :(int)Math.floor(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
224	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead,  hasHitEOF);	  return(numToRead!=    0)?    -1    :(int)Math.rint(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
225	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.rint(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.rint(buf,  offset,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.rint(buf,  offset,  totalRead);	  return(numToRead!=    0)?    -1    :(int)Math.rint(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
226	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.ceil(buf,  offset  +  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.ceil(buf,  offset  +  entryOffset,  hasHitEOF);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.ceil(buf,  offset  +  entryOffset,  hasHitEOF);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
227	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  1,  hasHitEOF);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  1,  hasHitEOF);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
228	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.ceil(buf,  offset  +  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.ceil(buf,  offset  +  entryOffset,  hasHitEOF);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.ceil(buf,  offset  +  entryOffset,  hasHitEOF);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
229	[BUG]  [BUGGY]  return(numToRead  <  0)?  1  :(int)Math.ceil(buf,  offset  +  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  1  :(int)Math.ceil(buf,  offset  +  entrySize,  hasHitEOF);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  1  :(int)Math.ceil(buf,  offset  +  entrySize,  hasHitEOF);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
230	[BUG]  [BUGGY]  return(numToRead  >  0)?  -1  :(int)Math.ceil(buf,  offset  +  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >  0)?  -1  :(int)Math.ceil(buf,  offset  +  entryOffset,  hasHitEOF);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >  0)?  -1  :(int)Math.ceil(buf,  offset  +  entryOffset,  hasHitEOF);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
231	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  1,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  1,  entrySize,  hasHitEOF);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  1,  entrySize,  hasHitEOF);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    1,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
232	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  1,  totalRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  1,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  1,  totalRead);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    1,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
233	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  1,  entryOffset);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  1,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  1,  entryOffset);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    1,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
234	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.ceil(buf,  offset  +  1,  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.ceil(buf,  offset  +  1,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.ceil(buf,  offset  +  1,  entrySize);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    1,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
235	[BUG]  [BUGGY]  return(entrySize  >  0)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  >  0)?  -1  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >  0)?  -1  :  1;	  return(entrySize    >    numToRead)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
236	[BUG]  [BUGGY]  return(entrySize  <  numToRead)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  <  numToRead)?  -1  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  <  numToRead)?  -1  :  1;	  return(entrySize    >    numToRead)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
237	[BUG]  [BUGGY]  return(numToRead  >  entrySize)?  1  :  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >  entrySize)?  1  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >  entrySize)?  1  :  1;	  return(entrySize    >    numToRead)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
238	[BUG]  [BUGGY]  if(entrySize  >  entryOffset)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entrySize  >  entryOffset)  {  return  0;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  >  entryOffset)  {  return  0;  }	  if(entrySize    >    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
239	[BUG]  [BUGGY]  if(entrySize  >  totalRead)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entrySize  >  totalRead)  {  return  0;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  >  totalRead)  {  return  0;  }	  if(entrySize    >    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
240	[BUG]  [BUGGY]  if(entrySize  >  0)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entrySize  >  0)  {  return  0;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  >  0)  {  return  0;  }	  if(entrySize    >    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
241	[BUG]  [BUGGY]  if(entrySize  <  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entrySize  <  entrySize)  {  return  0;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  <  entrySize)  {  return  0;  }	  if(entrySize    >    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
242	[BUG]  [BUGGY]  if(entryOffset  >  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entryOffset  >  entrySize)  {  return  0;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entryOffset  >  entrySize)  {  return  0;  }	  if(entrySize    >    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
243	[BUG]  [BUGGY]  if(entrySize  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entrySize  >=  entrySize)  {  return  0;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  >=  entrySize)  {  return  0;  }	  if(entrySize    >    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
244	[BUG]  [BUGGY]  entrySize  >  entryOffset)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  entrySize  >  entryOffset)  {  return  0;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	entrySize  >  entryOffset)  {  return  0;  }	  if(entrySize    >    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
245	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  ch  =  is.read(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	ch  =  is.read(buf,  offset,  entrySize);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
246	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  ch  =  is.read(buf,  offset,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	ch  =  is.read(buf,  offset,  totalRead);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
247	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  ch  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	ch  =  is.read(buf,  offset,  numToRead,  hasHitEOF);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
248	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  ch  =  is.read(buf,  offset,  numToRead,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	ch  =  is.read(buf,  offset,  numToRead,  entrySize);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
249	[BUG]  [BUGGY]  ch  =  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  ch  =  currEntry.read(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	ch  =  currEntry.read(buf,  offset,  numToRead);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
250	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  ch  =  is.read(buf,  offset,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	ch  =  is.read(buf,  offset,  entryOffset);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
251	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.pow(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.pow(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(byte)Math.pow(buf,  offset,  numToRead);	  return(numToRead    <    0)?    -1    :(byte)Math.pow(10,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
252	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.pow(10,  totalRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.pow(10,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(byte)Math.pow(10,  totalRead);	  return(numToRead    <    0)?    -1    :(byte)Math.pow(10,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
253	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.pow(10,  entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.pow(10,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(byte)Math.pow(10,  entrySize);	  return(numToRead    <    0)?    -1    :(byte)Math.pow(10,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
254	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.pow(10.0,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.pow(10.0,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(byte)Math.pow(10.0,  numToRead);	  return(numToRead    <    0)?    -1    :(byte)Math.pow(10,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
255	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.pow(20,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.pow(20,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(byte)Math.pow(20,  numToRead);	  return(numToRead    <    0)?    -1    :(byte)Math.pow(10,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
256	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.pow(12,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.pow(12,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(byte)Math.pow(12,  numToRead);	  return(numToRead    <    0)?    -1    :(byte)Math.pow(10,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
257	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.pow(1,  numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.pow(1,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(byte)Math.pow(1,  numToRead);	  return(numToRead    <    0)?    -1    :(byte)Math.pow(10,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
258	[BUG]  [BUGGY]  return(numToRead  >  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);	  return(totalRead    >    0)?    -1    :(int)Math.floor(offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
259	[BUG]  [BUGGY]  return(totalRead  >  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  >  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  >  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);	  return(totalRead    >    0)?    -1    :(int)Math.floor(offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
260	[BUG]  [BUGGY]  return(entrySize  >  0)?  -1  :(int)Math.floor(offset  +  totalRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  >  0)?  -1  :(int)Math.floor(offset  +  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >  0)?  -1  :(int)Math.floor(offset  +  totalRead);	  return(totalRead    >    0)?    -1    :(int)Math.floor(offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
261	[BUG]  [BUGGY]  return(entrySize  >  0)?  -1  :(int)Math.floor(buf,  offset  +  totalRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  >  0)?  -1  :(int)Math.floor(buf,  offset  +  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >  0)?  -1  :(int)Math.floor(buf,  offset  +  totalRead);	  return(totalRead    >    0)?    -1    :(int)Math.floor(offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
262	[BUG]  [BUGGY]  return(totalRead  <  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  <  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  <  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);	  return(totalRead    >    0)?    -1    :(int)Math.floor(offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
263	[BUG]  [BUGGY]  return(numToRead  ==  0)?  0  :  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  0  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  0  :  1;	  return(numToRead    <    0)?    0    :    1;    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
264	[BUG]  [BUGGY]  return(numToRead  >=  0)?  0  :  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  0  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  0  :  1;	  return(numToRead    <    0)?    0    :    1;    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
265	[BUG]  [BUGGY]  return(numToRead  <  0)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  1  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  1  :  0;	  return(numToRead    <    0)?    0    :    1;    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
266	[BUG]  [BUGGY]  return(numToRead  >  0)?  0  :  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >  0)?  0  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >  0)?  0  :  1;	  return(numToRead    <    0)?    0    :    1;    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
267	[BUG]  [BUGGY]  return(numToRead  <  1)?  0  :  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  1)?  0  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  1)?  0  :  1;	  return(numToRead    <    0)?    0    :    1;    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
268	[BUG]  [BUGGY]  return(numToRead  <  =  0)?  0  :  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  =  0)?  0  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  =  0)?  0  :  1;	  return(numToRead    <    0)?    0    :    1;    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
269	[BUG]  [BUGGY]  return(entrySize  >  0)?  -1  :(int)Math.floor(offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  >  0)?  -1  :(int)Math.floor(offset  +  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >  0)?  -1  :(int)Math.floor(offset  +  entrySize);	  return(entrySize    >=    0)?    -1    :(int)Math.floor(offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
270	[BUG]  [BUGGY]  return(entrySize  <  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  <  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  <  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);	  return(entrySize    >=    0)?    -1    :(int)Math.floor(offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
271	[BUG]  [BUGGY]  return(entrySize  >  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  >  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);	  return(entrySize    >=    0)?    -1    :(int)Math.floor(offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
272	[BUG]  [BUGGY]  return(entrySize  >>  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  >>  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >>  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);	  return(entrySize    >=    0)?    -1    :(int)Math.floor(offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
273	[BUG]  [BUGGY]  return(entrySize!=  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize!=  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize!=  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);	  return(entrySize    >=    0)?    -1    :(int)Math.floor(offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
274	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(16,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(16,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(16,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(20,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
275	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.pow(20,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.pow(20,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.pow(20,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(20,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
276	[BUG]  [BUGGY]  return(numToRead!=  0)?  -1  :(int)Math.pow(10,  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead!=  0)?  -1  :(int)Math.pow(10,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead!=  0)?  -1  :(int)Math.pow(10,  entrySize);	  return(entrySize!=    0)?    -1    :(int)Math.pow(10,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
277	[BUG]  [BUGGY]  this.currEntry  =  currEntry.getKey();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  this.currEntry  =  currEntry.getKey();  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	this.currEntry  =  currEntry.getKey();	  this.currEntry    =    currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
278	[BUG]  [BUGGY]  this.currEntry  =  currEntry.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  this.currEntry  =  currEntry.getValue()  +  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	this.currEntry  =  currEntry.getValue()  +  1;	  this.currEntry    =    currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
279	[BUG]  [BUGGY]  this.currEntry  =  currEntry.getCurrentEntry();  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  this.currEntry  =  currEntry.getCurrentEntry();  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	this.currEntry  =  currEntry.getCurrentEntry();	  this.currEntry    =    currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
280	[BUG]  [BUGGY]  this.currEntry  =  currEntry.read();  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  this.currEntry  =  currEntry.read();  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	this.currEntry  =  currEntry.read();	  this.currEntry    =    currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
281	[BUG]  [BUGGY]  this.currEntry  =  currEntry.getNext();  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  this.currEntry  =  currEntry.getNext();  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	this.currEntry  =  currEntry.getNext();	  this.currEntry    =    currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
282	[BUG]  [BUGGY]  this.currEntry  =  currEntry.getURI();  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  this.currEntry  =  currEntry.getURI();  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	this.currEntry  =  currEntry.getURI();	  this.currEntry    =    currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
283	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  totalRead  +  numRecords);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  totalRead  +  numRecords);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  totalRead  +  numRecords);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
284	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  1);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  1);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
285	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  numToRead  +  numRecords);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  numToRead  +  numRecords);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  numToRead  +  numRecords);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
286	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.ceil(buf,  offset  +  numRecords);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.ceil(buf,  offset  +  numRecords);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.ceil(buf,  offset  +  numRecords);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
287	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.floor(buf,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.floor(buf,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(byte)Math.floor(buf,  numToRead);	  return(numToRead    <    0)?    -1    :(byte)Math.floor(numToRead);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
288	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.ceil(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.ceil(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(byte)Math.ceil(buf,  offset,  numToRead);	  return(numToRead    <    0)?    -1    :(byte)Math.floor(numToRead);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
289	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.log(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.log(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(byte)Math.log(buf,  offset,  numToRead);	  return(numToRead    <    0)?    -1    :(byte)Math.floor(numToRead);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
290	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.floor(buf,  entryOffset);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.floor(buf,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(byte)Math.floor(buf,  entryOffset);	  return(numToRead    <    0)?    -1    :(byte)Math.floor(numToRead);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
291	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(byte)Math.floor(numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  -1  :(byte)Math.floor(numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(byte)Math.floor(numToRead);	  return(numToRead    <    0)?    -1    :(byte)Math.floor(numToRead);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
292	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.ceil(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.ceil(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.ceil(buf,  offset,  entrySize);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
293	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.ceil(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.ceil(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(byte)Math.ceil(buf,  offset,  entrySize);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
294	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  entrySize,  hasHitEOF);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  entrySize,  hasHitEOF);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
295	[BUG]  [BUGGY]  return(numToRead  <  0)?  1  :(int)Math.ceil(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  1  :(int)Math.ceil(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  1  :(int)Math.ceil(buf,  offset,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
296	[BUG]  [BUGGY]  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(!hasHitEOF)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
297	[BUG]  [BUGGY]  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(!hasHitEOF)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
298	[BUG]  [BUGGY]  if(!hasHitEOF  ||  entryOffset!=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(!hasHitEOF  ||  entryOffset!=  entrySize)  {  return  0;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(!hasHitEOF  ||  entryOffset!=  entrySize)  {  return  0;  }	  if(!hasHitEOF)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
299	[BUG]  [BUGGY]  if(!hasHitEOF  ||  entryOffset  ==  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(!hasHitEOF  ||  entryOffset  ==  entrySize)  {  return  0;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(!hasHitEOF  ||  entryOffset  ==  entrySize)  {  return  0;  }	  if(!hasHitEOF)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
300	[BUG]  [BUGGY]  if(hasHitEOF)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(hasHitEOF)  {  return  0;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(hasHitEOF)  {  return  0;  }	  if(!hasHitEOF)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
301	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  offset,  entrySize);	  throw    new    IllegalStateException(   "Can    not    read    EOF    file:   "    +    buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
302	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	Throwables.throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  offset,  numToRead);	  throw    new    IllegalStateException(   "Can    not    read    EOF    file:   "    +    buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
303	[BUG]  [BUGGY]  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  offset,  entrySize);	  throw    new    IllegalStateException(   "Can    not    read    EOF    file:   "    +    buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
304	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  offset,  entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  offset,  entrySize,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  offset,  entrySize,  numToRead);	  throw    new    IllegalStateException(   "Can    not    read    EOF    file:   "    +    buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
305	[BUG]  [BUGGY]  if(numToRead  <  0)  {  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead  <  0)  {  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  offset,  numToRead);  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  <  0)  {  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  offset,  numToRead);  }	  throw    new    IllegalStateException(   "Can    not    read    EOF    file:   "    +    buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
306	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  entryOffset,  totalRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  entryOffset,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  entryOffset,  totalRead);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entrySize,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
307	[BUG]  [BUGGY]  return(entrySize  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  numToRead,  totalRead);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  numToRead,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  numToRead,  totalRead);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entrySize,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
308	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize,  numRecords);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize,  numRecords);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize,  numRecords);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entrySize,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
309	[BUG]  [BUGGY]  return(entrySize  <  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  <  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  <  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead);	  return(entrySize    >=    0)?    -1    :(int)Math.floor(buf,    offset    +    totalRead);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
310	[BUG]  [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.pow(10,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.pow(10,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  ==  0)?  -1  :(int)Math.pow(10,  numToRead);	  return(numToRead    ==    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
311	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.pow(10.0,  entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.pow(10.0,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.pow(10.0,  entrySize);	  return(numToRead    ==    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
312	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.pow(20,  entrySize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.pow(20,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.pow(20,  entrySize);	  return(numToRead    ==    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
313	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.pow(12,  entrySize);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.pow(12,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.pow(12,  entrySize);	  return(numToRead    ==    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
314	[BUG]  [BUGGY]  return(numToRead  <  1)?  1  :  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  1)?  1  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  1)?  1  :  1;	  return(numToRead    <    0)?    1    :    1;    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
315	[BUG]  [BUGGY]  return(numToRead  >=  0)?  1  :  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  1  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  1  :  1;	  return(numToRead    <    0)?    1    :    1;    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
316	[BUG]  [BUGGY]  return(numToRead  <  =  0)?  1  :  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  =  0)?  1  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  =  0)?  1  :  1;	  return(numToRead    <    0)?    1    :    1;    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
317	[BUG]  [BUGGY]  return(numToRead  >  0)?  1  :  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >  0)?  1  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >  0)?  1  :  1;	  return(numToRead    <    0)?    1    :    1;    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
318	[BUG]  [BUGGY]  return(numToRead  <  0)?  1  :  -1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  1  :  -1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  1  :  -1;	  return(numToRead    <    0)?    1    :    1;    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
319	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Can  not  read  EOF  from  file: ");  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Can  not  read  EOF  from  file: ");  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	Throwables.throw  new  IllegalStateException( "Can  not  read  EOF  from  file: ");	  throw    new    IllegalStateException(   "Can    not    read    EOF    from    file:   ");    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
320	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: ",  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: ",  hasHitEOF);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  from  file: ",  hasHitEOF);	  throw    new    IllegalStateException(   "Can    not    read    EOF    from    file:   ");    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
321	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  name);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  name);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  name);	  throw    new    IllegalStateException(   "Can    not    read    EOF    from    file:   ");    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
322	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  getName());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  getName());  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  getName());	  throw    new    IllegalStateException(   "Can    not    read    EOF    from    file:   ");    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
323	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize,  hasHitEOF);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize,  hasHitEOF);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
324	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize,  hasHitEOF,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize,  hasHitEOF,  hasHitEOF);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize,  hasHitEOF,  hasHitEOF);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
325	[BUG]  [BUGGY]  return(numToRead  ==  0)?  2  :  1;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  2  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  2  :  1;	  return(numToRead    ==    0)?    1    :    1;    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
326	[BUG]  [BUGGY]  return(totalRead  ==  0)?  1  :  1;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  ==  0)?  1  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  ==  0)?  1  :  1;	  return(numToRead    ==    0)?    1    :    1;    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
327	[BUG]  [BUGGY]  int  currEntrySize  =  entrySize;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  entrySize;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  entrySize;	  int    currEntrySize    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
328	[BUG]  [BUGGY]  int  currEntrySize  =  entryOffset.length;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  entryOffset.length;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  entryOffset.length;	  int    currEntrySize    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
329	[BUG]  [BUGGY]  int  currEntrySize  =  currEntry.length  -  1;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  currEntry.length  -  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  currEntry.length  -  1;	  int    currEntrySize    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
330	[BUG]  [BUGGY]  int  currEntrySize  =  this.currEntry.length;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  this.currEntry.length;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  this.currEntry.length;	  int    currEntrySize    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
331	[BUG]  [BUGGY]  int  currEntrySize  =  currEntry.length  +  1;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  currEntry.length  +  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  currEntry.length  +  1;	  int    currEntrySize    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
332	[BUG]  [BUGGY]  long  currEntrySize  =  currEntry.length;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  long  currEntrySize  =  currEntry.length;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	long  currEntrySize  =  currEntry.length;	  int    currEntrySize    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
333	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.ceil(buf,  offset  +  entryOffset,  entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.ceil(buf,  offset  +  entryOffset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.ceil(buf,  offset  +  entryOffset,  entrySize);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
334	[BUG]  [BUGGY]  return(entrySize  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  numToRead,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  numToRead,  entrySize);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
335	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
336	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  -1  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :  0;	  return(numToRead    ==    0)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
337	[BUG]  [BUGGY]  return(numToRead!=  0)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead!=  0)?  -1  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead!=  0)?  -1  :  0;	  return(numToRead    ==    0)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
338	[BUG]  [BUGGY]  return(totalRead  ==  0)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  ==  0)?  -1  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  ==  0)?  -1  :  0;	  return(numToRead    ==    0)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
339	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :  0L;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :  0L;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :  0L;	  return(numToRead    ==    0)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
340	[BUG]  [BUGGY]  return(entrySize  >  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  >  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize);	  return(entrySize    >=    0)?    -1    :(int)Math.rint(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
341	[BUG]  [BUGGY]  return(entrySize  >>  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  >>  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >>  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);	  return(entrySize    >=    0)?    -1    :(int)Math.rint(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
342	[BUG]  [BUGGY]  if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  totalRead  =  is.read(buf,  offset,  entryOffset);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  totalRead  =  is.read(buf,  offset,  entryOffset);  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  totalRead  =  is.read(buf,  offset,  entryOffset);  }	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    offset,    entrySize);    totalRead    =    is.read(buf,    offset,    entryOffset);    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
343	[BUG]  [BUGGY]  readNow  =  is.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  readNow  =  is.read(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	readNow  =  is.read(buf,  offset,  entrySize);	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    offset,    entrySize);    totalRead    =    is.read(buf,    offset,    entryOffset);    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
344	[BUG]  [BUGGY]  ||  entrySize  >  0  ||  hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  ||  entrySize  >  0  ||  hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	||  entrySize  >  0  ||  hasHitEOF)  {  throw  new  IllegalStateException( " ");  }	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    offset,    entrySize);    totalRead    =    is.read(buf,    offset,    entryOffset);    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
345	[BUG]  [BUGGY]  ||  entrySize  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  totalRead  =  is.read(buf,  offset,  entryOff  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  ||  entrySize  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  totalRead  =  is.read(buf,  offset,  entryOff  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	||  entrySize  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  totalRead  =  is.read(buf,  offset,  entryOff	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    offset,    entrySize);    totalRead    =    is.read(buf,    offset,    entryOffset);    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
346	[BUG]  [BUGGY]  ||  entrySize  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  totalRead  =  is.read(buf,  offset,  entryOffset);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  ||  entrySize  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  totalRead  =  is.read(buf,  offset,  entryOffset);  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	||  entrySize  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  totalRead  =  is.read(buf,  offset,  entryOffset);  }	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    offset,    entrySize);    totalRead    =    is.read(buf,    offset,    entryOffset);    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
347	[BUG]  [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	readNow  =  is.read(buf,  offset,  numToRead);	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    offset,    entrySize);    totalRead    =    is.read(buf,    offset,    entrySize);    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
348	[BUG]  [BUGGY]  ||  entrySize  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  totalRead  =  is.read(buf,  offset,  entry  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  ||  entrySize  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  totalRead  =  is.read(buf,  offset,  entry  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	||  entrySize  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  totalRead  =  is.read(buf,  offset,  entry	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    offset,    entrySize);    totalRead    =    is.read(buf,    offset,    entrySize);    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
349	[BUG]  [BUGGY]  ||  entrySize  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  totalRead  =  is.read(buf,  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  ||  entrySize  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  totalRead  =  is.read(buf,  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	||  entrySize  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  totalRead  =  is.read(buf,	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    offset,    entrySize);    totalRead    =    is.read(buf,    offset,    entrySize);    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
350	[BUG]  [BUGGY]  ||  entrySize  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  totalRead  =  is.read(buf,  offset  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  ||  entrySize  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  totalRead  =  is.read(buf,  offset  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	||  entrySize  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  totalRead  =  is.read(buf,  offset	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    offset,    entrySize);    totalRead    =    is.read(buf,    offset,    entrySize);    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
351	[BUG]  [BUGGY]  return(numToRead  >  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize);	  return(numToRead    >=    0)?    -1    :(int)Math.ceil(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
352	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.ceil(buf,  offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.ceil(buf,  offset  +  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.ceil(buf,  offset  +  numToRead);	  return(numToRead    >=    0)?    -1    :(int)Math.ceil(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
353	[BUG]  [BUGGY]  return(entrySize  ==  numToRead)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  ==  numToRead)?  -1  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  ==  numToRead)?  -1  :  0;	  return(numToRead    ==    entrySize)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
354	[BUG]  [BUGGY]  return(entryOffset  ==  numToRead)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entryOffset  ==  numToRead)?  -1  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entryOffset  ==  numToRead)?  -1  :  0;	  return(numToRead    ==    entrySize)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
355	[BUG]  [BUGGY]  return(entryOffset  ==  entrySize)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entryOffset  ==  entrySize)?  -1  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entryOffset  ==  entrySize)?  -1  :  0;	  return(numToRead    ==    entrySize)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
356	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  0,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  0,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(12,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
357	[BUG]  [BUGGY]  return(numToRead  <  0)?  1  :(int)Math.pow(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  1  :(int)Math.pow(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  1  :(int)Math.pow(buf,  offset,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(12,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
358	[BUG]  [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  totalRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  totalRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  ==  0)record(buf,  offset,  totalRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
359	[BUG]  [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset!=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset!=  entrySize)  {  return  0;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset!=  entrySize)  {  return  0;  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
360	[BUG]  [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  >  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  >  entrySize)  {  return  0;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  >  entrySize)  {  return  0;  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
361	[BUG]  [BUGGY]  if(numToRead  <  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead  <  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  <  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
362	[BUG]  [BUGGY]  if(numToRead!=  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead!=  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead!=  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
363	[BUG]  [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  <  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  <  entrySize)  {  return  0;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  <  entrySize)  {  return  0;  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
364	[BUG]  [BUGGY]  int  ch  =  currEntry.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  ch  =  currEntry.read(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  ch  =  currEntry.read(buf,  offset,  entrySize);	  int    ch    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
365	[BUG]  [BUGGY]  int  ch  =  currEntry.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  ch  =  currEntry.read(buf,  offset,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  ch  =  currEntry.read(buf,  offset,  totalRead);	  int    ch    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
366	[BUG]  [BUGGY]  int  ch  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  ch  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  ch  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);	  int    ch    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
367	[BUG]  [BUGGY]  char  ch  =  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  char  ch  =  currEntry.read(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	char  ch  =  currEntry.read(buf,  offset,  numToRead);	  int    ch    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
368	[BUG]  [BUGGY]  int  ch  =  currEntry.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  ch  =  currEntry.read(buf,  offset,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  ch  =  currEntry.read(buf,  offset,  entryOffset);	  int    ch    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
369	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  a  block  entry: "  +  getHitEOF());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  a  block  entry: "  +  getHitEOF());  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  a  block  entry: "  +  getHitEOF());	  throw    new    IllegalStateException(   "Can    not    read    a    block    entry:   ");    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
370	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Can  not  read  a  block  entry: ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Can  not  read  a  block  entry: ");  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	Throwables.throw  new  IllegalStateException( "Can  not  read  a  block  entry: ");	  throw    new    IllegalStateException(   "Can    not    read    a    block    entry:   ");    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
371	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  a  block  entry: "  +  entryOffset);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  a  block  entry: "  +  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  a  block  entry: "  +  entryOffset);	  throw    new    IllegalStateException(   "Can    not    read    a    block    entry:   ");    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
372	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  a  block  entry: "  +  offset);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  a  block  entry: "  +  offset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  a  block  entry: "  +  offset);	  throw    new    IllegalStateException(   "Can    not    read    a    block    entry:   ");    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
373	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  a  block  entry: "  +  getName());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  a  block  entry: "  +  getName());  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  a  block  entry: "  +  getName());	  throw    new    IllegalStateException(   "Can    not    read    a    block    entry:   ");    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
374	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  a  block  entry: "  +  buf);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  a  block  entry: "  +  buf);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  a  block  entry: "  +  buf);	  throw    new    IllegalStateException(   "Can    not    read    a    block    entry:   ");    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
375	[BUG]  [BUGGY]  return(numToRead  ==  0)?  1  :(int)Math.rint(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  1  :(int)Math.rint(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  1  :(int)Math.rint(buf,  offset,  entrySize);	  return(numToRead    ==    0)?    -1    :(int)Math.rint(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
376	[BUG]  [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  is.read(buf,  offset,  entrySize);	  int    currEntrySize    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
377	[BUG]  [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  numToRead,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  is.read(buf,  offset,  numToRead,  entrySize);	  int    currEntrySize    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
378	[BUG]  [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  is.read(buf,  offset,  numToRead,  hasHitEOF);	  int    currEntrySize    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
379	[BUG]  [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  is.read(buf,  offset,  entryOffset);	  int    currEntrySize    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
380	[BUG]  [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  numToRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  numToRead,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  is.read(buf,  offset,  numToRead,  entryOffset);	  int    currEntrySize    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
381	[BUG]  [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  is.read(buf,  offset,  totalRead);	  int    currEntrySize    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
382	[BUG]  [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.floor(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.floor(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  ==  0)?  -1  :(int)Math.floor(buf,  offset,  numToRead);	  return(entrySize    ==    0)?    -1    :(int)Math.floor(buf,    offset    +    totalRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
383	[BUG]  [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.floor(buf,  offset,  numToRead  +  totalRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.floor(buf,  offset,  numToRead  +  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  ==  0)?  -1  :(int)Math.floor(buf,  offset,  numToRead  +  totalRead);	  return(entrySize    ==    0)?    -1    :(int)Math.floor(buf,    offset    +    totalRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
384	[BUG]  [BUGGY]  return(entrySize  ==  0)?  -1  :(byte)Math.floor(buf,  offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  ==  0)?  -1  :(byte)Math.floor(buf,  offset  +  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  ==  0)?  -1  :(byte)Math.floor(buf,  offset  +  numToRead);	  return(entrySize    ==    0)?    -1    :(int)Math.floor(buf,    offset    +    totalRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
385	[BUG]  [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.floor(buf,  offset,  entrySize  +  totalRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.floor(buf,  offset,  entrySize  +  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  ==  0)?  -1  :(int)Math.floor(buf,  offset,  entrySize  +  totalRead);	  return(entrySize    ==    0)?    -1    :(int)Math.floor(buf,    offset    +    totalRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
386	[BUG]  [BUGGY]  return(offset  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(offset  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(offset  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);	  return(entrySize    ==    0)?    -1    :(int)Math.floor(buf,    offset    +    totalRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
387	[BUG]  [BUGGY]  return(numToRead  >  0)?  1  :(int)Math.rint(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >  0)?  1  :(int)Math.rint(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >  0)?  1  :(int)Math.rint(buf,  offset,  entrySize);	  return(numToRead    >    0)?    -1    :(int)Math.rint(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
388	[BUG]  [BUGGY]  return(entrySize  >>  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  >>  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >>  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead);	  return(entrySize    >=    0)?    -1    :(int)Math.floor(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
389	[BUG]  [BUGGY]  return(entrySize!=  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize!=  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize!=  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead);	  return(entrySize    >=    0)?    -1    :(int)Math.floor(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
390	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getValue());  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getValue());  }	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    currEntry.setHitEOF(currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
391	[BUG]  [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getValu  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getValu  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getValu	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    currEntry.setHitEOF(currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
392	[BUG]  [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getValue()  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getValue()  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getValue()	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    currEntry.setHitEOF(currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
393	[BUG]  [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getValue());  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getValue());  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getValue());	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    currEntry.setHitEOF(currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
394	[BUG]  [BUGGY]  return(numToRead  {  0)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  {  0)?  -1  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  {  0)?  -1  :  1;	  return(numToRead    <    =    0)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
395	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  totalRead  +  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  totalRead  +  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  totalRead  +  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
396	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  1,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  1,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  1,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
397	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.ceil(buf,  offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.ceil(buf,  offset  +  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(byte)Math.ceil(buf,  offset  +  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
398	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  entrySize  +  numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  entrySize  +  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  entrySize  +  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
399	[BUG]  [BUGGY]  return(numToRead  >  0)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >  0)?  1  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >  0)?  1  :  0;	  return(numToRead    >    0)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
400	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  entrySize);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
401	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.ceil(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.ceil(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.ceil(buf,  offset,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
402	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  totalRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  totalRead);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
403	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf.length  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf.length  +  1);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf.length  +  1);	  throw    new    IllegalStateException(   "Can    not    read    EOF    file:   "    +    buf.length);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
404	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf.length  +  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf.length  +  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf.length  +  entrySize);	  throw    new    IllegalStateException(   "Can    not    read    EOF    file:   "    +    buf.length);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
405	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf.length);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf.length);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	Throwables.throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf.length);	  throw    new    IllegalStateException(   "Can    not    read    EOF    file:   "    +    buf.length);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
406	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf.length  +  offset);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf.length  +  offset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf.length  +  offset);	  throw    new    IllegalStateException(   "Can    not    read    EOF    file:   "    +    buf.length);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
407	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf.length,  entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf.length,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf.length,  entrySize);	  throw    new    IllegalStateException(   "Can    not    read    EOF    file:   "    +    buf.length);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
408	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf.length  + ",  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf.length  + ",  hasHitEOF);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf.length  + ",  hasHitEOF);	  throw    new    IllegalStateException(   "Can    not    read    EOF    file:   "    +    buf.length);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
409	[BUG]  [BUGGY]  return(int)(totalRead  ==  0)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(int)(totalRead  ==  0)?  -1  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(int)(totalRead  ==  0)?  -1  :  1;	  return(totalRead    ==    0)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
410	[BUG]  [BUGGY]  return(totalRead  ==  0)?  -1  :  2;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  ==  0)?  -1  :  2;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  ==  0)?  -1  :  2;	  return(totalRead    ==    0)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
411	[BUG]  [BUGGY]  return(totalRead  ==  0)?  -1  :  1L;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  ==  0)?  -1  :  1L;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  ==  0)?  -1  :  1L;	  return(totalRead    ==    0)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
412	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  entryOffset);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
413	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  totalRead  +  entryOffset);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  totalRead  +  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  totalRead  +  entryOffset);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
414	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  numToRead  +  entryOffset);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  numToRead  +  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  numToRead  +  entryOffset);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
415	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.ceil(buf,  offset  +  entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.ceil(buf,  offset  +  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.ceil(buf,  offset  +  entryOffset);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
416	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  entrySize  +  entryOffset);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  entrySize  +  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  entrySize  +  entryOffset);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
417	[BUG]  [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.pow(buf,  entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.pow(buf,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  ==  0)?  -1  :(int)Math.pow(buf,  entrySize);	  return(totalRead    ==    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
418	[BUG]  [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.pow(10.0,  entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.pow(10.0,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  ==  0)?  -1  :(int)Math.pow(10.0,  entrySize);	  return(totalRead    ==    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
419	[BUG]  [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead,  hasHitEOF);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead,  hasHitEOF);	  return(entrySize    ==    0)?    -1    :(int)Math.floor(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
420	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entryOffset);	  return(entrySize    ==    0)?    -1    :(int)Math.floor(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
421	[BUG]  [BUGGY]  return(numToRead  ==  0)?  1  :(int)Math.floor(buf,  offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  1  :(int)Math.floor(buf,  offset  +  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  1  :(int)Math.floor(buf,  offset  +  entrySize);	  return(entrySize    ==    0)?    -1    :(int)Math.floor(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
422	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset,  totalRead);	  return(numToRead    <    0)?    -1    :(int)Math.floor(buf,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
423	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.floor(buf,  totalRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.floor(buf,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(byte)Math.floor(buf,  totalRead);	  return(numToRead    <    0)?    -1    :(int)Math.floor(buf,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
424	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  totalRead);	  return(numToRead    <    0)?    -1    :(int)Math.floor(buf,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
425	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  totalRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  totalRead);	  return(numToRead    <    0)?    -1    :(int)Math.floor(buf,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
426	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.floor(buf,  totalRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.floor(buf,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.floor(buf,  totalRead);	  return(numToRead    <    0)?    -1    :(int)Math.floor(buf,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
427	[BUG]  [BUGGY]  return(numToRead  <  0)?  1  :(int)Math.floor(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  1  :(int)Math.floor(buf,  offset,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  1  :(int)Math.floor(buf,  offset,  totalRead);	  return(numToRead    <    0)?    -1    :(int)Math.floor(buf,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
428	[BUG]  [BUGGY]  Throwables.throw  new  IOException( " ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  Throwables.throw  new  IOException( " ");  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	Throwables.throw  new  IOException( " ");	  throw    new    IOException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
429	[BUG]  [BUGGY]  throw  new  IOException( "Can  not  read  the  curr  entry: "  +  buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IOException( "Can  not  read  the  curr  entry: "  +  buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IOException( "Can  not  read  the  curr  entry: "  +  buf,  offset,  numToRead);	  throw    new    IOException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
430	[BUG]  [BUGGY]  throw  new  IOException( "Unexpected  entry  size: ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IOException( "Unexpected  entry  size: ");  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IOException( "Unexpected  entry  size: ");	  throw    new    IOException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
431	[BUG]  [BUGGY]  throw  new  IOException( "Can  not  read  EOF  from  file: "  +  buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IOException( "Can  not  read  EOF  from  file: "  +  buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IOException( "Can  not  read  EOF  from  file: "  +  buf,  offset,  numToRead);	  throw    new    IOException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
432	[BUG]  [BUGGY]  throw  new  IOException( "Unexpected  entry  size: "  +  buf.length);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IOException( "Unexpected  entry  size: "  +  buf.length);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IOException( "Unexpected  entry  size: "  +  buf.length);	  throw    new    IOException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
433	[BUG]  [BUGGY]  return(numToRead  <  0)?  0  :  buf.length  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  0  :  buf.length  +  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  0  :  buf.length  +  1;	  return(numToRead    <    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
434	[BUG]  [BUGGY]  return(numToRead  ==  0)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  0  :  buf.length;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  0  :  buf.length;	  return(numToRead    <    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
435	[BUG]  [BUGGY]  return(buf  <  0)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(buf  <  0)?  0  :  buf.length;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(buf  <  0)?  0  :  buf.length;	  return(numToRead    <    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
436	[BUG]  [BUGGY]  return(numToRead  >=  0)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  0  :  buf.length;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  0  :  buf.length;	  return(numToRead    <    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
437	[BUG]  [BUGGY]  return(numToRead  <  =  0)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  =  0)?  0  :  buf.length;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  =  0)?  0  :  buf.length;	  return(numToRead    <    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
438	[BUG]  [BUGGY]  return(numToRead  >  0)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >  0)?  0  :  buf.length;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >  0)?  0  :  buf.length;	  return(numToRead    <    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
439	[BUG]  [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  entrySize);  return  currEntrySize;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  entrySize);  return  currEntrySize;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  is.read(buf,  offset,  entrySize);  return  currEntrySize;	  int    currEntrySize    =    is.read(buf,    offset,    numToRead);    return    currEntrySize;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
440	[BUG]  [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  totalRead);  return  currEntrySize;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  totalRead);  return  currEntrySize;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  is.read(buf,  offset,  totalRead);  return  currEntrySize;	  int    currEntrySize    =    is.read(buf,    offset,    numToRead);    return    currEntrySize;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
441	[BUG]  [BUGGY]  byte  currEntrySize  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  byte  currEntrySize  =  is.read(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	byte  currEntrySize  =  is.read(buf,  offset,  numToRead);	  int    currEntrySize    =    is.read(buf,    offset,    numToRead);    return    currEntrySize;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
442	[BUG]  [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  numToRead);  return  currEntrySize  +  1;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  numToRead);  return  currEntrySize  +  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  is.read(buf,  offset,  numToRead);  return  currEntrySize  +  1;	  int    currEntrySize    =    is.read(buf,    offset,    numToRead);    return    currEntrySize;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
443	[BUG]  [BUGGY]  return(numToRead  <  totalRead)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  totalRead)?  -1  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  totalRead)?  -1  :  0;	  return(numToRead    >    totalRead)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
444	[BUG]  [BUGGY]  return(numToRead  ==  totalRead)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  totalRead)?  -1  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  totalRead)?  -1  :  0;	  return(numToRead    >    totalRead)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
445	[BUG]  [BUGGY]  return(numToRead  >=  totalRead)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  totalRead)?  -1  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  totalRead)?  -1  :  0;	  return(numToRead    >    totalRead)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
446	[BUG]  [BUGGY]  return(numToRead  <  =  totalRead)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  =  totalRead)?  -1  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  =  totalRead)?  -1  :  0;	  return(numToRead    >    totalRead)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
447	[BUG]  [BUGGY]  return(numToRead  <  =  0)?  -1  :  2;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  =  0)?  -1  :  2;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  =  0)?  -1  :  2;	  return(numToRead    <    0)?    -1    :    2;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
448	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :  2;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  -1  :  2;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :  2;	  return(numToRead    <    0)?    -1    :    2;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
449	[BUG]  [BUGGY]  return(numToRead  <  1)?  -1  :  2;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  1)?  -1  :  2;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  1)?  -1  :  2;	  return(numToRead    <    0)?    -1    :    2;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
450	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset,  entrySize);	  return(numToRead    ==    0)?    -1    :(int)Math.floor(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
451	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  numRecords);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  numRecords);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  numRecords);	  return(numToRead    ==    0)?    -1    :(int)Math.floor(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
452	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  1,  entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  1,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  1,  entrySize);	  return(numToRead    ==    0)?    -1    :(int)Math.floor(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
453	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead);	  return(numToRead    ==    0)?    -1    :(int)Math.floor(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
454	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize,  hasHitEOF);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize,  hasHitEOF);	  return(numToRead    ==    0)?    -1    :(int)Math.floor(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
455	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize,  numRecords);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize,  numRecords);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize,  numRecords);	  return(numToRead    ==    0)?    -1    :(int)Math.floor(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
456	[BUG]  [BUGGY]  While(!hasHitEOF  &&  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  While(!hasHitEOF  &&  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	While(!hasHitEOF  &&  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
457	[BUG]  [BUGGY]  ||  hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  ||  hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	||  hasHitEOF)  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
458	[BUG]  [BUGGY]  while(!hasHitEOF  &&  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  while(!hasHitEOF  &&  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	while(!hasHitEOF  &&  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
459	[BUG]  [BUGGY]  while(!hasHitEOF  &&  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  while(!hasHitEOF  &&  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	while(!hasHitEOF  &&  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
460	[BUG]  [BUGGY]  While(!hasHitEOF  &&  entryOffset!=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  While(!hasHitEOF  &&  entryOffset!=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	While(!hasHitEOF  &&  entryOffset!=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
461	[BUG]  [BUGGY]  pendingTarEntry()  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  pendingTarEntry()  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	pendingTarEntry()  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
462	[BUG]  [BUGGY]  While(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  While(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	While(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
463	[BUG]  [BUGGY]  return(entrySize  >  0)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  >  0)?  -1  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >  0)?  -1  :  0;	  return(entrySize    >    numToRead)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
464	[BUG]  [BUGGY]  return(numToRead  >  entrySize)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >  entrySize)?  1  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >  entrySize)?  1  :  0;	  return(entrySize    >    numToRead)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
465	[BUG]  [BUGGY]  return(numToRead  <  1)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  1)?  -1  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  1)?  -1  :  0;	  return(numToRead    <    1)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
466	[BUG]  [BUGGY]  return(numToRead  <  1)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  1)?  1  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  1)?  1  :  0;	  return(numToRead    <    1)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
467	[BUG]  [BUGGY]  return(numToRead  >=  1)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  1)?  -1  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  1)?  -1  :  1;	  return(numToRead    <    1)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
468	[BUG]  [BUGGY]  return(numToRead  <  1)?  -1  :  1L;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  1)?  -1  :  1L;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  1)?  -1  :  1L;	  return(numToRead    <    1)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
469	[BUG]  [BUGGY]  ||  entrySize  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  ||  entrySize  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	||  entrySize  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  }	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    offset,    entrySize);    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
470	[BUG]  [BUGGY]  ||  entrySize  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  ||  entrySize  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	||  entrySize  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    offset,    entrySize);    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
471	[BUG]  [BUGGY]  ||  entrySize  <  SMALL_BUFFER_SIZE)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  ||  entrySize  <  SMALL_BUFFER_SIZE)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	||  entrySize  <  SMALL_BUFFER_SIZE)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  }	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    offset,    entrySize);    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
472	[BUG]  [BUGGY]  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  }	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    offset,    entrySize);    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
473	[BUG]  [BUGGY]  ||  entrySize  <  SMALL_BUFFER_SIZE)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  ||  entrySize  <  SMALL_BUFFER_SIZE)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	||  entrySize  <  SMALL_BUFFER_SIZE)  {  throw  new  IllegalStateException( " ");  }	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    offset,    entrySize);    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
474	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(byte)Math.floor(numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(byte)Math.floor(numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(byte)Math.floor(numToRead);	  return(numToRead    ==    0)?    -1    :(int)Math.floor(numToRead);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
475	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.log(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.log(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.log(buf,  offset,  numToRead);	  return(numToRead    ==    0)?    -1    :(int)Math.floor(numToRead);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
476	[BUG]  [BUGGY]  return(numToRead  <  0)?  1  :(int)Math.ceil(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  1  :(int)Math.ceil(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  1  :(int)Math.ceil(buf,  offset,  entrySize);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
477	[BUG]  [BUGGY]  return(numToRead  >  0)?  -1  :(int)Math.ceil(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >  0)?  -1  :(int)Math.ceil(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >  0)?  -1  :(int)Math.ceil(buf,  offset,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
478	[BUG]  [BUGGY]  return(numToRead  >  0)?  -1  :(int)Math.pow(10,  entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >  0)?  -1  :(int)Math.pow(10,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >  0)?  -1  :(int)Math.pow(10,  entrySize);	  return(totalRead    >    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
479	[BUG]  [BUGGY]  return(totalRead  >  0)?  -1  :(int)Math.pow(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  >  0)?  -1  :(int)Math.pow(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  >  0)?  -1  :(int)Math.pow(buf,  offset,  entrySize);	  return(totalRead    >    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
480	[BUG]  [BUGGY]  return(totalRead  <  0)?  -1  :(int)Math.pow(10,  entrySize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  <  0)?  -1  :(int)Math.pow(10,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  <  0)?  -1  :(int)Math.pow(10,  entrySize);	  return(totalRead    >    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
481	[BUG]  [BUGGY]  return(totalRead  >  0)?  -1  :(int)Math.pow(buf,  entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  >  0)?  -1  :(int)Math.pow(buf,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  >  0)?  -1  :(int)Math.pow(buf,  entrySize);	  return(totalRead    >    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
482	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead);	  return(numToRead    >=    0)?    -1    :(int)Math.floor(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
483	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.floor(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.floor(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.floor(buf,  offset,  entrySize);	  return(numToRead    >=    0)?    -1    :(int)Math.floor(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
484	[BUG]  [BUGGY]  return(entrySize  >  numToRead)?  0  :  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  >  numToRead)?  0  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >  numToRead)?  0  :  1;	  return(numToRead    >    entrySize)?    0    :    1;    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
485	[BUG]  [BUGGY]  return(numToRead  <  entrySize)?  0  :  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  entrySize)?  0  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  entrySize)?  0  :  1;	  return(numToRead    >    entrySize)?    0    :    1;    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
486	[BUG]  [BUGGY]  return(numToRead  >=  entrySize)?  0  :  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  entrySize)?  0  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  entrySize)?  0  :  1;	  return(numToRead    >    entrySize)?    0    :    1;    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
487	[BUG]  [BUGGY]  return(numToRead  >  entryOffset)?  0  :  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >  entryOffset)?  0  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >  entryOffset)?  0  :  1;	  return(numToRead    >    entrySize)?    0    :    1;    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
488	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  1L,  numToRead);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  1L,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  1L,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(1L,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
489	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(1L,  totalRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(1L,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(1L,  totalRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(1L,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
490	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.pow(1L,  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.pow(1L,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(byte)Math.pow(1L,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(1L,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
491	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(1L,  entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(1L,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(1L,  entrySize);	  return(numToRead    <    0)?    -1    :(int)Math.pow(1L,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
492	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  offset  +  1L,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  offset  +  1L,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  offset  +  1L,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(1L,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
493	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.pow(1L,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.pow(1L,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.pow(1L,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(1L,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
494	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".getMessage());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".getMessage());  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	Throwables.throw  new  IllegalStateException( " ".getMessage());	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
495	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ",  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ",  hasHitEOF);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	Throwables.throw  new  IllegalStateException( " ",  hasHitEOF);	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
496	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".length);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".length);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	Throwables.throw  new  IllegalStateException( " ".length);	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
497	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Can  not  read  a  curr  entry. ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Can  not  read  a  curr  entry. ");  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	Throwables.throw  new  IllegalStateException( "Can  not  read  a  curr  entry. ");	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
498	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Can  not  read  a  curr  entry: "  +  buf);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Can  not  read  a  curr  entry: "  +  buf);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	Throwables.throw  new  IllegalStateException( "Can  not  read  a  curr  entry: "  +  buf);	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
499	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Recorded  entry  size: "  +  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Recorded  entry  size: "  +  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	Throwables.throw  new  IllegalStateException( "Recorded  entry  size: "  +  numToRead);	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
500	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf.length  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf.length  +  1);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf.length  +  1);	  throw    new    IllegalStateException(   "Can    not    read    EOF    from    file:   "    +    buf.length);    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
501	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf.length  +  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf.length  +  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf.length  +  entrySize);	  throw    new    IllegalStateException(   "Can    not    read    EOF    from    file:   "    +    buf.length);    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
502	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf.length);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf.length);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	Throwables.throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf.length);	  throw    new    IllegalStateException(   "Can    not    read    EOF    from    file:   "    +    buf.length);    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
503	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf.length,  entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf.length,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf.length,  entrySize);	  throw    new    IllegalStateException(   "Can    not    read    EOF    from    file:   "    +    buf.length);    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
504	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf.length  +  offset);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf.length  +  offset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf.length  +  offset);	  throw    new    IllegalStateException(   "Can    not    read    EOF    from    file:   "    +    buf.length);    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
505	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  offset  +  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  offset  +  numToRead);	  throw    new    IllegalStateException(   "Can    not    read    EOF    from    file:   "    +    buf.length);    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
506	[BUG]  [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.floor(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.floor(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  ==  0)?  -1  :(int)Math.floor(buf,  offset,  entrySize);	  return(totalRead    ==    0)?    -1    :(int)Math.floor(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
507	[BUG]  [BUGGY]  return(int)Math.floor(buf,  offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(int)Math.floor(buf,  offset  +  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(int)Math.floor(buf,  offset  +  numToRead);	  return(totalRead    ==    0)?    -1    :(int)Math.floor(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
508	[BUG]  [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize,  numToRead);	  return(totalRead    ==    0)?    -1    :(int)Math.floor(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
509	[BUG]  [BUGGY]  return(entrySize  >  0)?  -1  :(int)Math.pow(10,  entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  >  0)?  -1  :(int)Math.pow(10,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >  0)?  -1  :(int)Math.pow(10,  entrySize);	  return(entrySize    >=    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
510	[BUG]  [BUGGY]  return(entrySize!=  0)?  -1  :(int)Math.pow(10,  entryOffset);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize!=  0)?  -1  :(int)Math.pow(10,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize!=  0)?  -1  :(int)Math.pow(10,  entryOffset);	  return(entrySize    >=    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
511	[BUG]  [BUGGY]  return(entrySize  <  0)?  -1  :(int)Math.pow(10,  entryOffset);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  <  0)?  -1  :(int)Math.pow(10,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  <  0)?  -1  :(int)Math.pow(10,  entryOffset);	  return(entrySize    >=    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
512	[BUG]  [BUGGY]  return(entrySize  >>  0)?  -1  :(int)Math.pow(10,  entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  >>  0)?  -1  :(int)Math.pow(10,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >>  0)?  -1  :(int)Math.pow(10,  entryOffset);	  return(entrySize    >=    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
513	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.rint(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.rint(buf,  offset,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.rint(buf,  offset,  totalRead);	  return(entrySize    >=    0)?    -1    :(int)Math.rint(offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
514	[BUG]  [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.rint(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.rint(buf,  offset,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  ==  0)?  -1  :(int)Math.rint(buf,  offset,  totalRead);	  return(entrySize    >=    0)?    -1    :(int)Math.rint(offset,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
515	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  offset,  entrySize);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
516	[BUG]  [BUGGY]  return(entrySize  <  0)?  -1  :(int)Math.pow(10,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  <  0)?  -1  :(int)Math.pow(10,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  <  0)?  -1  :(int)Math.pow(10,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
517	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  entrySize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  entrySize);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
518	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(10.0,  entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(10.0,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(10.0,  entrySize);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
519	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(20,  entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(20,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(20,  entrySize);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
520	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize  +  1);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize  +  1);	  return(numToRead    ==    0)?    -1    :(int)Math.rint(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
521	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(byte)Math.rint(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(byte)Math.rint(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(byte)Math.rint(buf,  offset,  entrySize);	  return(numToRead    ==    0)?    -1    :(int)Math.rint(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
522	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize,  hasHitEOF);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize,  hasHitEOF);	  return(numToRead    ==    0)?    -1    :(int)Math.rint(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
523	[BUG]  [BUGGY]  While(currEntry!=  null  &&  currEntry.length  >  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  While(currEntry!=  null  &&  currEntry.length  >  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	While(currEntry!=  null  &&  currEntry.length  >  0)  {  throw  new  IllegalStateException( " ");  }	  if(currEntry    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
524	[BUG]  [BUGGY]  While(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  While(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	While(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(currEntry    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
525	[BUG]  [BUGGY]  safeTarEntry()  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  safeTarEntry()  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	safeTarEntry()  {  throw  new  IllegalStateException( " ");  }	  if(currEntry    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
526	[BUG]  [BUGGY]  While(currEntry  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  While(currEntry  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	While(currEntry  ==  null)  {  throw  new  IllegalStateException( " ");  }	  if(currEntry    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
527	[BUG]  [BUGGY]  While(currEntry!=  null)  {  currEntry  =  currEntry.getValue();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  While(currEntry!=  null)  {  currEntry  =  currEntry.getValue();  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	While(currEntry!=  null)  {  currEntry  =  currEntry.getValue();	  if(currEntry    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
528	[BUG]  [BUGGY]  While(currEntry!=  null)  {  throw  new  IllegalStateException( " ".getMessage());  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  While(currEntry!=  null)  {  throw  new  IllegalStateException( " ".getMessage());  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	While(currEntry!=  null)  {  throw  new  IllegalStateException( " ".getMessage());  }	  if(currEntry    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
529	[BUG]  [BUGGY]  While(currEntry!=  null)  {  currEntry  =  currEntry.getKey();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  While(currEntry!=  null)  {  currEntry  =  currEntry.getKey();  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	While(currEntry!=  null)  {  currEntry  =  currEntry.getKey();	  if(currEntry    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
530	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.log(buf,  offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.log(buf,  offset  +  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.log(buf,  offset  +  entrySize);	  return(numToRead    ==    0)?    -1    :(int)Math.floor(offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
531	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(byte)Math.floor(offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(byte)Math.floor(offset  +  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(byte)Math.floor(offset  +  entrySize);	  return(numToRead    ==    0)?    -1    :(int)Math.floor(offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
532	[BUG]  [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.floor(offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.floor(offset  +  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  ==  0)?  -1  :(int)Math.floor(offset  +  numToRead);	  return(numToRead    ==    0)?    -1    :(int)Math.floor(offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
533	[BUG]  [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.floor(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.floor(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  ==  0)?  -1  :(int)Math.floor(buf,  offset,  entrySize);	  return(entrySize    ==    0)?    -1    :(int)Math.floor(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
534	[BUG]  [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.floor(buf,  offset,  entryOffset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.floor(buf,  offset,  entryOffset  +  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  ==  0)?  -1  :(int)Math.floor(buf,  offset,  entryOffset  +  entrySize);	  return(entrySize    ==    0)?    -1    :(int)Math.floor(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
535	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  ch  =  is.read(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  ch  =  is.read(buf,  offset,  entrySize);	  int    ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
536	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  ch  =  is.read(buf,  offset,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  ch  =  is.read(buf,  offset,  totalRead);	  int    ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
537	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  ch  =  is.read(buf,  offset,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  ch  =  is.read(buf,  offset,  entryOffset);	  int    ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
538	[BUG]  [BUGGY]  char  ch  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  char  ch  =  is.read(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	char  ch  =  is.read(buf,  offset,  numToRead);	  int    ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
539	[BUG]  [BUGGY]  Integer  ch  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  Integer  ch  =  is.read(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	Integer  ch  =  is.read(buf,  offset,  numToRead);	  int    ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
540	[BUG]  [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  numToRead);  if(currEntrySize  >  0)  {  return  currEntrySize;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  numToRead);  if(currEntrySize  >  0)  {  return  currEntrySize;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  is.read(buf,  offset,  numToRead);  if(currEntrySize  >  0)  {  return  currEntrySize;  }	  int    currEntrySize    =    is.read(buf,    offset,    entrySize);    if(currEntrySize    >    0)    {    return    currEntrySize;    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
541	[BUG]  [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  numToRead);  if(currEntrySize  <  0)  {  return  currEntrySize;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  numToRead);  if(currEntrySize  <  0)  {  return  currEntrySize;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  is.read(buf,  offset,  numToRead);  if(currEntrySize  <  0)  {  return  currEntrySize;  }	  int    currEntrySize    =    is.read(buf,    offset,    entrySize);    if(currEntrySize    >    0)    {    return    currEntrySize;    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
542	[BUG]  [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  entryOffset);  if(currEntrySize  >  0)  {  return  currEntrySize;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  entryOffset);  if(currEntrySize  >  0)  {  return  currEntrySize;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  is.read(buf,  offset,  entryOffset);  if(currEntrySize  >  0)  {  return  currEntrySize;  }	  int    currEntrySize    =    is.read(buf,    offset,    entrySize);    if(currEntrySize    >    0)    {    return    currEntrySize;    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
543	[BUG]  [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  numToRead);  if(currEntrySize  >=  0)  {  return  currEntrySize;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  numToRead);  if(currEntrySize  >=  0)  {  return  currEntrySize;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  is.read(buf,  offset,  numToRead);  if(currEntrySize  >=  0)  {  return  currEntrySize;  }	  int    currEntrySize    =    is.read(buf,    offset,    entrySize);    if(currEntrySize    >    0)    {    return    currEntrySize;    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
544	[BUG]  [BUGGY]  Integer  currEntrySize  =  is.read(buf,  offset,  numToRead);  if(currEntrySize  >  0)  {  return  currEntrySize;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  Integer  currEntrySize  =  is.read(buf,  offset,  numToRead);  if(currEntrySize  >  0)  {  return  currEntrySize;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	Integer  currEntrySize  =  is.read(buf,  offset,  numToRead);  if(currEntrySize  >  0)  {  return  currEntrySize;  }	  int    currEntrySize    =    is.read(buf,    offset,    entrySize);    if(currEntrySize    >    0)    {    return    currEntrySize;    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
545	[BUG]  [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  numToRead);  if(currEntrySize  ==  0)  {  return  currEntrySize;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  numToRead);  if(currEntrySize  ==  0)  {  return  currEntrySize;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  is.read(buf,  offset,  numToRead);  if(currEntrySize  ==  0)  {  return  currEntrySize;  }	  int    currEntrySize    =    is.read(buf,    offset,    entrySize);    if(currEntrySize    >    0)    {    return    currEntrySize;    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
546	[BUG]  [BUGGY]  int  currEntrySize  =  rest.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  rest.read(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  rest.read(buf,  offset,  numToRead);	  int    currEntrySize    =    i.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
547	[BUG]  [BUGGY]  Integer  currEntrySize  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  Integer  currEntrySize  =  is.read(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	Integer  currEntrySize  =  is.read(buf,  offset,  numToRead);	  int    currEntrySize    =    i.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
548	[BUG]  [BUGGY]  long  currEntrySize  =  i.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  long  currEntrySize  =  i.read(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	long  currEntrySize  =  i.read(buf,  offset,  numToRead);	  int    currEntrySize    =    i.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
549	[BUG]  [BUGGY]  byte  currEntrySize  =  i.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  byte  currEntrySize  =  i.read(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	byte  currEntrySize  =  i.read(buf,  offset,  numToRead);	  int    currEntrySize    =    i.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
550	[BUG]  [BUGGY]  int  currEntrySize  =  i.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  i.read(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  i.read(buf,  offset,  entrySize);	  int    currEntrySize    =    i.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
551	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  offset,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  offset,  entryOffset);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
552	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  entryOffset);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  entryOffset);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
553	[BUG]  [BUGGY]  return(i  ==  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(i  ==  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(i  ==  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);	  return(totalRead    ==    0)?    -1    :(int)Math.rint(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
554	[BUG]  [BUGGY]  return(int)Math.rint(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(int)Math.rint(buf,  offset,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(int)Math.rint(buf,  offset,  totalRead);	  return(totalRead    ==    0)?    -1    :(int)Math.rint(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
555	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getLength());  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getLength());  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getLength());  }	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    currEntry.setHitEOF(currEntry.getLength());    }    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
556	[BUG]  [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getLength());  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getLength());  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getLength());  }	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    currEntry.setHitEOF(currEntry.getLength());    }    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
557	[BUG]  [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getLength());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getLength());  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getLength());	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    currEntry.setHitEOF(currEntry.getLength());    }    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
558	[BUG]  [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getLength()  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getLength()  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getLength()	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    currEntry.setHitEOF(currEntry.getLength());    }    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
559	[BUG]  [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.get  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.get  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.get	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    currEntry.setHitEOF(currEntry.getLength());    }    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
560	[BUG]  [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getUpperBound());  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getUpperBound());  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getUpperBound());  }	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    currEntry.setHitEOF(currEntry.getLength());    }    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
561	[BUG]  [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getId());  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getId());  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getId());  }	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    currEntry.setHitEOF(currEntry.getId());    }    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
562	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getId());  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getId());  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getId());  }	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    currEntry.setHitEOF(currEntry.getId());    }    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
563	[BUG]  [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getI  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getI  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getI	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    currEntry.setHitEOF(currEntry.getId());    }    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
564	[BUG]  [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getId());  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getId());  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getId());	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    currEntry.setHitEOF(currEntry.getId());    }    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
565	[BUG]  [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getId()  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getId()  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getId()	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    currEntry.setHitEOF(currEntry.getId());    }    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
566	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(0,  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(0,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(0,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(1,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
567	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(2,  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(2,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(2,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(1,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
568	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.pow(1,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.pow(1,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.pow(1,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(1,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
569	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.pow(1,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.pow(1,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.pow(1,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(1,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
570	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(100.0,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(100.0,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(100.0,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10.0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
571	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(20.0,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(20.0,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(20.0,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10.0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
572	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.pow(10.0,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.pow(10.0,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.pow(10.0,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10.0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
573	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(10.0,  entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(10.0,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(10.0,  entryOffset);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10.0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
574	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.log(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.log(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.log(buf,  offset,  entrySize);	  return(numToRead    <    0)?    -1    :(int)Math.log(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
575	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.log(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.log(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.log(buf,  offset,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.log(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
576	[BUG]  [BUGGY]  return(numToRead  <  0)?  1  :(int)Math.log(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  1  :(int)Math.log(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  1  :(int)Math.log(buf,  offset,  entrySize);	  return(numToRead    <    0)?    -1    :(int)Math.log(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
577	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.log(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.log(buf,  offset,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.log(buf,  offset,  totalRead);	  return(numToRead    <    0)?    -1    :(int)Math.log(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
578	[BUG]  [BUGGY]  return(numToRead  <  entryOffset)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  entryOffset)?  -1  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  entryOffset)?  -1  :  1;	  return(numToRead    <    entrySize)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
579	[BUG]  [BUGGY]  return(entryOffset  <  numToRead)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entryOffset  <  numToRead)?  -1  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entryOffset  <  numToRead)?  -1  :  1;	  return(numToRead    <    entrySize)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
580	[BUG]  [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  ==  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize);	  return(entrySize    ==    0)?    -1    :(int)Math.floor(offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
581	[BUG]  [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.log(buf,  offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.log(buf,  offset  +  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  ==  0)?  -1  :(int)Math.log(buf,  offset  +  entrySize);	  return(entrySize    ==    0)?    -1    :(int)Math.floor(offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
582	[BUG]  [BUGGY]  return(entrySize  ==  0)?  1  :(int)Math.floor(buf,  offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  ==  0)?  1  :(int)Math.floor(buf,  offset  +  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  ==  0)?  1  :(int)Math.floor(buf,  offset  +  entrySize);	  return(entrySize    ==    0)?    -1    :(int)Math.floor(offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
583	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1L  :  1L;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1L  :  1L;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1L  :  1L;	  return(numToRead    ==    0)?    -1    :    1L;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
584	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: "  +  entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: "  +  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: "  +  entrySize);	  throw    new    IllegalStateException(   "Can    not    read    EOF,    expecting    entry    offset:   "    +    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
585	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: "  +  entryOffset);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: "  +  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	Throwables.throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: "  +  entryOffset);	  throw    new    IllegalStateException(   "Can    not    read    EOF,    expecting    entry    offset:   "    +    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
586	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: "  +  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: "  +  entryOffset  +  1);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: "  +  entryOffset  +  1);	  throw    new    IllegalStateException(   "Can    not    read    EOF,    expecting    entry    offset:   "    +    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
587	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: "  +  entryOffset  + ",  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: "  +  entryOffset  + ",  hasHitEOF);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: "  +  entryOffset  + ",  hasHitEOF);	  throw    new    IllegalStateException(   "Can    not    read    EOF,    expecting    entry    offset:   "    +    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
588	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  size: "  +  entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  size: "  +  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  size: "  +  entryOffset);	  throw    new    IllegalStateException(   "Can    not    read    EOF,    expecting    entry    offset:   "    +    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
589	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  totalRead);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  totalRead);	  return(entrySize    >=    0)?    -1    :(int)Math.floor(offset    +    totalRead);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
590	[BUG]  [BUGGY]  return(numToRead  <  =  0)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  =  0)?  -1  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  =  0)?  -1  :  0;	  return(numToRead    <    0)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
591	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.pow(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.pow(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.pow(buf,  offset,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
592	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.pow(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.pow(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.pow(buf,  offset,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
593	[BUG]  [BUGGY]  return(numToRead  <  0)?  1  :(int)Math.pow(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  1  :(int)Math.pow(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  1  :(int)Math.pow(buf,  offset,  entrySize);	  return(numToRead    <    0)?    -1    :(int)Math.pow(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
594	[BUG]  [BUGGY]  return(numToRead  >  0)?  -1  :(int)Math.pow(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >  0)?  -1  :(int)Math.pow(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >  0)?  -1  :(int)Math.pow(buf,  offset,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
595	[BUG]  [BUGGY]  return(numToRead  <  =  entrySize)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  =  entrySize)?  -1  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  =  entrySize)?  -1  :  0;	  return(numToRead    <    entrySize)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
596	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  entrySize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  entrySize);	  throw    new    IllegalStateException(   "Can    not    read    EOF    from    file:   "    +    offset);    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
597	[BUG]  [BUGGY]  return(numToRead  >  0)?  -1  :(int)Math.floor(offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >  0)?  -1  :(int)Math.floor(offset  +  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >  0)?  -1  :(int)Math.floor(offset  +  entrySize);	  return(numToRead    >=    0)?    -1    :(int)Math.floor(offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
598	[BUG]  [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.floor(offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.floor(offset  +  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >=  0)?  -1  :(int)Math.floor(offset  +  numToRead);	  return(numToRead    >=    0)?    -1    :(int)Math.floor(offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
599	[BUG]  [BUGGY]  return(totalRead  >=  0)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  >=  0)?  -1  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  >=  0)?  -1  :  1;	  return(numToRead    >=    0)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
600	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(20,  entryOffset);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(20,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(20,  entryOffset);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
601	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(1L,  entryOffset);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(1L,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(1L,  entryOffset);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
602	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  ch  =  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	ch  =  is.read(buf,  offset,  numToRead  +  1);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
603	[BUG]  [BUGGY]  return(numToRead  >  0)?  1  :(int)Math.rint(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >  0)?  1  :(int)Math.rint(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >  0)?  1  :(int)Math.rint(buf,  offset,  numToRead);	  return(numToRead    <    0)?    1    :(int)Math.rint(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
604	[BUG]  [BUGGY]  return(numToRead  <  0)?  1  :(int)Math.rint(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  1  :(int)Math.rint(buf,  offset,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  1  :(int)Math.rint(buf,  offset,  entryOffset);	  return(numToRead    <    0)?    1    :(int)Math.rint(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
605	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset);	  return(numToRead    <    0)?    -1    :(int)Math.floor(buf,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
606	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  ' "  +  buf.getText());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  ' "  +  buf.getText());  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  ' "  +  buf.getText());	  throw    new    IllegalStateException(   "   ".getMessage());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
607	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  ' "  +  buf.getLength());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  ' "  +  buf.getLength());  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  ' "  +  buf.getLength());	  throw    new    IllegalStateException(   "   ".getMessage());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
608	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf.getName());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf.getName());  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf.getName());	  throw    new    IllegalStateException(   "   ".getMessage());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
609	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  ' "  +  buf.getBytes());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  ' "  +  buf.getBytes());  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  ' "  +  buf.getBytes());	  throw    new    IllegalStateException(   "   ".getMessage());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
610	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  ' "  +  buf.getFullName());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  ' "  +  buf.getFullName());  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  ' "  +  buf.getFullName());	  throw    new    IllegalStateException(   "   ".getMessage());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
611	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.pow(10.0,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.pow(10.0,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.pow(10.0,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10.0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
612	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(10.0,  buf);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(10.0,  buf);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(10.0,  buf);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10.0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
613	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(1,  totalRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(1,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(1,  totalRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
614	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.ceil(buf,  offset  +  entryOffset,  entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.ceil(buf,  offset  +  entryOffset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.ceil(buf,  offset  +  entryOffset,  entrySize);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
615	[BUG]  [BUGGY]  if(!hasHitEOF  &&  entryOffset  >  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(!hasHitEOF  &&  entryOffset  >  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(!hasHitEOF  &&  entryOffset  >  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF    &&    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
616	[BUG]  [BUGGY]  if(!hasHitEOF  &&  entryOffset  ==  totalRead)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(!hasHitEOF  &&  entryOffset  ==  totalRead)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(!hasHitEOF  &&  entryOffset  ==  totalRead)  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF    &&    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
617	[BUG]  [BUGGY]  if(entrySize!=  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entrySize!=  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize!=  0)  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF    &&    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
618	[BUG]  [BUGGY]  ||!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  ||!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	||!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
619	[BUG]  [BUGGY]  allowReset)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  allowReset)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	allowReset)  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
620	[BUG]  [BUGGY]  safeTarEntry();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  safeTarEntry();  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	safeTarEntry();	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
621	[BUG]  [BUGGY]  safeTarEntry(currEntry,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  safeTarEntry(currEntry,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	safeTarEntry(currEntry,  offset,  numToRead);	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
622	[BUG]  [BUGGY]  wires.add(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  wires.add(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	wires.add(buf,  offset,  numToRead);	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
623	[BUG]  [BUGGY]  ||!hasHitEOF)  {  throw  new  IllegalStateException( " ".);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  ||!hasHitEOF)  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	||!hasHitEOF)  {  throw  new  IllegalStateException( " ".);  }	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
624	[BUG]  [BUGGY]  return(totalRead  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize,  numToRead);	  return(totalRead    >=    0)?    -1    :(int)Math.floor(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
625	[BUG]  [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  entrySize);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  entrySize);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  ==  0)record(buf,  offset,  entrySize);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
626	[BUG]  [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  -1);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  -1);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  ==  0)record(buf,  offset,  -1);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
627	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  1,  numRecords);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  1,  numRecords);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  1,  numRecords);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
628	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.ceil(buf,  offset  +  numRecords);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.ceil(buf,  offset  +  numRecords);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(byte)Math.ceil(buf,  offset  +  numRecords);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
629	[BUG]  [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.pow(10,  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.pow(10,  entryOffset  +  1);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  ==  0)?  -1  :(int)Math.pow(10,  entryOffset  +  1);	  return(totalRead    ==    0)?    -1    :(int)Math.pow(10,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
630	[BUG]  [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.pow(20,  entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.pow(20,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  ==  0)?  -1  :(int)Math.pow(20,  entryOffset);	  return(totalRead    ==    0)?    -1    :(int)Math.pow(10,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
631	[BUG]  [BUGGY]  int  currEntrySize  =  currEntry.getUpperBound();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  currEntry.getUpperBound();  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  currEntry.getUpperBound();	  int    currEntrySize    =    currEntry.getSize();    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
632	[BUG]  [BUGGY]  int  currEntrySize  =  currEntry.getRecordSize();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  currEntry.getRecordSize();  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  currEntry.getRecordSize();	  int    currEntrySize    =    currEntry.getSize();    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
633	[BUG]  [BUGGY]  int  currEntrySize  =  currEntry.getCurrentSize();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  currEntry.getCurrentSize();  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  currEntry.getCurrentSize();	  int    currEntrySize    =    currEntry.getSize();    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
634	[BUG]  [BUGGY]  handleMissingRecord(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  handleMissingRecord(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	handleMissingRecord(buf,  offset,  numToRead);	  throw    new    IOException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
635	[BUG]  [BUGGY]  throw  new  IOException( "Can  not  read  EOF  file: "  +  buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IOException( "Can  not  read  EOF  file: "  +  buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IOException( "Can  not  read  EOF  file: "  +  buf,  offset,  numToRead);	  throw    new    IOException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
636	[BUG]  [BUGGY]  throw  new  IOException( "Can  not  read  EOF  file: "  +  buf.length);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IOException( "Can  not  read  EOF  file: "  +  buf.length);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IOException( "Can  not  read  EOF  file: "  +  buf.length);	  throw    new    IOException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
637	[BUG]  [BUGGY]  throw  new  IOException( "Can  not  read  EOF  for  file: "  +  buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IOException( "Can  not  read  EOF  for  file: "  +  buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IOException( "Can  not  read  EOF  for  file: "  +  buf,  offset,  numToRead);	  throw    new    IOException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
638	[BUG]  [BUGGY]  throw  new  IOException( "Can  not  read  EOF  for  file: "  +  buf.length);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IOException( "Can  not  read  EOF  for  file: "  +  buf.length);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IOException( "Can  not  read  EOF  for  file: "  +  buf.length);	  throw    new    IOException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
639	[BUG]  [BUGGY]  return(numToRead  +  entrySize)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  +  entrySize)?  -1  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  +  entrySize)?  -1  :  1;	  return(numToRead    >=    entrySize)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
640	[BUG]  [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.pow(20,  entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.pow(20,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  ==  0)?  -1  :(int)Math.pow(20,  entrySize);	  return(totalRead    ==    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
641	[BUG]  [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.pow(10,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.pow(10,  entrySize  +  1);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  ==  0)?  -1  :(int)Math.pow(10,  entrySize  +  1);	  return(totalRead    ==    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
642	[BUG]  [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.pow(10,  totalRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.pow(10,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  ==  0)?  -1  :(int)Math.pow(10,  totalRead);	  return(totalRead    ==    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
643	[BUG]  [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize,  hasHitEOF);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize,  hasHitEOF);	  return(totalRead    ==    0)?    -1    :(int)Math.floor(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
644	[BUG]  [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entryOffset);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entryOffset);	  return(totalRead    ==    0)?    -1    :(int)Math.floor(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
645	[BUG]  [BUGGY]  if(entrySize  >  0)  {  throw  new  IllegalStateException( " ".getMessage());  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entrySize  >  0)  {  throw  new  IllegalStateException( " ".getMessage());  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  >  0)  {  throw  new  IllegalStateException( " ".getMessage());  }	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
646	[BUG]  [BUGGY]  if(entrySize  >  0)  {  throw  new  IllegalStateException( " ".);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entrySize  >  0)  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  >  0)  {  throw  new  IllegalStateException( " ".);  }	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
647	[BUG]  [BUGGY]  int  currEntrySize  =  currEntry.length  +  numToRead;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  currEntry.length  +  numToRead;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  currEntry.length  +  numToRead;	  int    currEntrySize    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
648	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(1,  entrySize);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(1,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(1,  entrySize);	  return(numToRead    <    0)?    -1    :(int)Math.pow(1,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
649	[BUG]  [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.log(buf,  offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.log(buf,  offset  +  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  ==  0)?  -1  :(int)Math.log(buf,  offset  +  numToRead);	  return(entrySize    ==    0)?    -1    :(int)Math.floor(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
650	[BUG]  [BUGGY]  if(hasHitEOF  ||!entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(hasHitEOF  ||!entrySize)  {  return  0;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(hasHitEOF  ||!entrySize)  {  return  0;  }	  if(!hasHitEOF)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
651	[BUG]  [BUGGY]  if(!hasHitEOF)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(!hasHitEOF)  {  return  -1;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(!hasHitEOF)  {  return  -1;  }	  if(!hasHitEOF)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
652	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.pow(10,  totalRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.pow(10,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.pow(10,  totalRead);	  return(numToRead    >=    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
653	[BUG]  [BUGGY]  return(totalRead  >=  0)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  >=  0)?  0  :  buf.length;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  >=  0)?  0  :  buf.length;	  return(totalRead    >=    0)?    0    :    totalRead;    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
654	[BUG]  [BUGGY]  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf);	  throw    new    IllegalStateException(   "Can    not    read    EOF    from    file:   ");    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
655	[BUG]  [BUGGY]  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf.length);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf.length);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf.length);	  throw    new    IllegalStateException(   "Can    not    read    EOF    from    file:   ");    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
656	[BUG]  [BUGGY]  return(entrySize  >>  0)?  -1  :(int)Math.floor(buf,  offset  +  totalRead);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  >>  0)?  -1  :(int)Math.floor(buf,  offset  +  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >>  0)?  -1  :(int)Math.floor(buf,  offset  +  totalRead);	  return(entrySize    >=    0)?    -1    :(int)Math.floor(offset    +    totalRead);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
657	[BUG]  [BUGGY]  return(entryOffset  >  numToRead)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entryOffset  >  numToRead)?  -1  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entryOffset  >  numToRead)?  -1  :  1;	  return(numToRead    >    entryOffset)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
658	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize,  totalRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize,  totalRead);	  return(numToRead    ==    0)?    -1    :(int)Math.ceil(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
659	[BUG]  [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.pow(1L,  entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.pow(1L,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >=  0)?  -1  :(int)Math.pow(1L,  entrySize);	  return(entrySize    >=    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
660	[BUG]  [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.pow(20,  entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.pow(20,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >=  0)?  -1  :(int)Math.pow(20,  entrySize);	  return(entrySize    >=    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
661	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(10,  totalRead  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(10,  totalRead  +  1);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(10,  totalRead  +  1);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
662	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(1L,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(1L,  numToRead  +  1);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(1L,  numToRead  +  1);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
663	[BUG]  [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getLength());  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getLength());  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getLength());  }	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    currEntry.setHitEOF(currEntry.getLength());    }    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
664	[BUG]  [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getLength());  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getLength());  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  >  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getLength());  }	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    currEntry.setHitEOF(currEntry.getLength());    }    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
665	[BUG]  [BUGGY]  if(entrySize  >  0)  {  throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: "  +  entryOffset);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entrySize  >  0)  {  throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: "  +  entryOffset);  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  >  0)  {  throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: "  +  entryOffset);  }	  throw    new    IllegalStateException(   "Can    not    read    EOF,    expecting    entry    offset:   "    +    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
666	[BUG]  [BUGGY]  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: "  +  entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: "  +  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: "  +  entrySize);	  throw    new    IllegalStateException(   "Can    not    read    EOF,    expecting    entry    offset:   "    +    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
667	[BUG]  [BUGGY]  return(totalRead  <  0)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  <  0)?  -1  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  <  0)?  -1  :  0;	  return(numToRead    <    0)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
668	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.pow(1L,  entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.pow(1L,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.pow(1L,  entrySize);	  return(numToRead    ==    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
669	[BUG]  [BUGGY]  return(numToRead  <  0)?  1  :(byte)Math.rint(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  1  :(byte)Math.rint(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  1  :(byte)Math.rint(buf,  offset,  entrySize);	  return(numToRead    <    0)?    -1    :(byte)Math.rint(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
670	[BUG]  [BUGGY]  return(numToRead!=  0)?  -1  :(byte)Math.rint(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead!=  0)?  -1  :(byte)Math.rint(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead!=  0)?  -1  :(byte)Math.rint(buf,  offset,  numToRead);	  return(numToRead    <    0)?    -1    :(byte)Math.rint(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
671	[BUG]  [BUGGY]  return(numToRead  <  =  0)?  -1  :(byte)Math.rint(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  =  0)?  -1  :(byte)Math.rint(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  =  0)?  -1  :(byte)Math.rint(buf,  offset,  numToRead);	  return(numToRead    <    0)?    -1    :(byte)Math.rint(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
672	[BUG]  [BUGGY]  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf.length);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf.length);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf.length);	  throw    new    IllegalStateException(   "Can    not    read    EOF    file:   "    +    buf.length);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
673	[BUG]  [BUGGY]  if(buf!=  null)  {  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf.length);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(buf!=  null)  {  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf.length);  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(buf!=  null)  {  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf.length);  }	  throw    new    IllegalStateException(   "Can    not    read    EOF    file:   "    +    buf.length);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
674	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(32,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(32,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(32,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(20,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
675	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(40,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(40,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(40,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(20,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
676	[BUG]  [BUGGY]  logger.warning( "Can  not  read  EOF  file: "  +  buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  logger.warning( "Can  not  read  EOF  file: "  +  buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	logger.warning( "Can  not  read  EOF  file: "  +  buf,  offset,  numToRead);	  throw    new    IllegalStateException(   "Can    not    read    EOF    file:   "    +    buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
677	[BUG]  [BUGGY]  return(numToRead  >  0)?  -1  :  2;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >  0)?  -1  :  2;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >  0)?  -1  :  2;	  return(numToRead    <    0)?    -1    :    2;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
678	[BUG]  [BUGGY]  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  hasHitEOF);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  hasHitEOF);	  throw    new    IllegalStateException(   "Can    not    read    EOF    file:   "    +    buf);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
679	[BUG]  [BUGGY]  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  totalRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  totalRead);	  throw    new    IllegalStateException(   "Can    not    read    EOF    file:   "    +    buf);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
680	[BUG]  [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  is.read(buf,  offset,  numToRead  +  1);	  int    currEntrySize    =    is.read(buf,    offset,    numToRead);    return    currEntrySize;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
681	[BUG]  [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  numToRead  +  1);  return  currEntrySize;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  numToRead  +  1);  return  currEntrySize;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  is.read(buf,  offset,  numToRead  +  1);  return  currEntrySize;	  int    currEntrySize    =    is.read(buf,    offset,    numToRead);    return    currEntrySize;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
682	[BUG]  [BUGGY]  return(numToRead  >>  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >>  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >>  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);	  return(numToRead    >    0)?    -1    :(int)Math.rint(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
683	[BUG]  [BUGGY]  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(hasHitEOF  ||  entryOffset  >=  entrySize)  {	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    offset,    entrySize);    totalRead    =    is.read(buf,    offset,    entrySize);    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
684	[BUG]  [BUGGY]  readNow  >  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  readNow  >  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	readNow  >  0)  {  throw  new  IllegalStateException( " ");  }	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    offset,    entrySize);    totalRead    =    is.read(buf,    offset,    entrySize);    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
685	[BUG]  [BUGGY]  readNow(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  readNow(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	readNow(buf,  offset,  numToRead);	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    offset,    entrySize);    totalRead    =    is.read(buf,    offset,    entrySize);    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
686	[BUG]  [BUGGY]  read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  read(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	read(buf,  offset,  numToRead);	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    offset,    entrySize);    totalRead    =    is.read(buf,    offset,    entrySize);    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
687	[BUG]  [BUGGY]  readNow();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  readNow();  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	readNow();	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    offset,    entrySize);    totalRead    =    is.read(buf,    offset,    entrySize);    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
688	[BUG]  [BUGGY]  return(numToRead  >  recordSize)?  0  :  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >  recordSize)?  0  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >  recordSize)?  0  :  1;	  return(numToRead    >    entrySize)?    0    :    1;    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
689	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset);	  return(numToRead    ==    0)?    -1    :(int)Math.floor(numToRead);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
690	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ",  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ",  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	Throwables.throw  new  IllegalStateException( " ",  numToRead);	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
691	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	Throwables.throw  new  IllegalStateException( " ".);	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
692	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ")  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ")  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	Throwables.throw  new  IllegalStateException( " ")	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
693	[BUG]  [BUGGY]  return(numToRead  ==  1)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  1)?  -1  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  1)?  -1  :  1;	  return(numToRead    <    1)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
694	[BUG]  [BUGGY]  return(numToRead  >  1)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >  1)?  -1  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >  1)?  -1  :  1;	  return(numToRead    <    1)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
695	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.rint(buf,  offset,  numRecords);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.rint(buf,  offset,  numRecords);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.rint(buf,  offset,  numRecords);	  return(numToRead    ==    0)?    -1    :(int)Math.rint(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
696	[BUG]  [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.pow(1L,  totalRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.pow(1L,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  ==  0)?  -1  :(int)Math.pow(1L,  totalRead);	  return(entrySize    ==    0)?    -1    :(int)Math.pow(10,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
697	[BUG]  [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.pow(20,  totalRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.pow(20,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  ==  0)?  -1  :(int)Math.pow(20,  totalRead);	  return(entrySize    ==    0)?    -1    :(int)Math.pow(10,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
698	[BUG]  [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getValue());  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getValue());  }	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    currEntry.setHitEOF(currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
699	[BUG]  [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getValue());  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  >  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getValue());  }	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    currEntry.setHitEOF(currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
700	[BUG]  [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getKey());  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getKey());  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getKey());  }	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    currEntry.setHitEOF(currEntry.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
701	[BUG]  [BUGGY]  return(numToRead!=  0)?  -1  :(int)Math.ceil(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead!=  0)?  -1  :(int)Math.ceil(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead!=  0)?  -1  :(int)Math.ceil(buf,  offset,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
702	[BUG]  [BUGGY]  return(entrySize  <  0)?  -1  :(int)Math.floor(buf,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  <  0)?  -1  :(int)Math.floor(buf,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  <  0)?  -1  :(int)Math.floor(buf,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.floor(buf,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
703	[BUG]  [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getKey());  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getKey());  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  >  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getKey());  }	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    currEntry.setHitEOF(currEntry.getKey());    }    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
704	[BUG]  [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  0);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  is.read(buf,  offset,  0);	  int    currEntrySize    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
705	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  entryOffset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  entryOffset  +  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  entryOffset  +  entrySize);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
706	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.ceil(buf,  offset  +  entryOffset);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.ceil(buf,  offset  +  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.ceil(buf,  offset  +  entryOffset);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
707	[BUG]  [BUGGY]  return(totalRead!=  0)?  -1  :(int)Math.pow(10,  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead!=  0)?  -1  :(int)Math.pow(10,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead!=  0)?  -1  :(int)Math.pow(10,  entrySize);	  return(entrySize!=    0)?    -1    :(int)Math.pow(10,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
708	[BUG]  [BUGGY]  return(numToRead!=  0)?  -1  :(int)Math.pow(10,  entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead!=  0)?  -1  :(int)Math.pow(10,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead!=  0)?  -1  :(int)Math.pow(10,  entryOffset);	  return(entrySize!=    0)?    -1    :(int)Math.pow(10,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
709	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  ch  =  is.read(buf,  offset,  numToRead,  hasHitEOF);	  int    ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
710	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  ch  =  is.read(buf,  offset,  numToRead  +  1);	  int    ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
711	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  ch  =  is.read(buf,  offset,  numToRead,  entrySize);	  int    ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
712	[BUG]  [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  totalRead);  if(currEntrySize  >  0)  {  return  currEntrySize;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  totalRead);  if(currEntrySize  >  0)  {  return  currEntrySize;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  is.read(buf,  offset,  totalRead);  if(currEntrySize  >  0)  {  return  currEntrySize;  }	  int    currEntrySize    =    is.read(buf,    offset,    entrySize);    if(currEntrySize    >    0)    {    return    currEntrySize;    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
713	[BUG]  [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  0);  if(currEntrySize  >  0)  {  return  currEntrySize;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  0);  if(currEntrySize  >  0)  {  return  currEntrySize;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  is.read(buf,  offset,  0);  if(currEntrySize  >  0)  {  return  currEntrySize;  }	  int    currEntrySize    =    is.read(buf,    offset,    entrySize);    if(currEntrySize    >    0)    {    return    currEntrySize;    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
714	[BUG]  [BUGGY]  return(numToRead  >  0)?  -1  :(int)Math.floor(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >  0)?  -1  :(int)Math.floor(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >  0)?  -1  :(int)Math.floor(buf,  offset,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.floor(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
715	[BUG]  [BUGGY]  return(numToRead  <  0)?  1  :(int)Math.floor(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  1  :(int)Math.floor(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  1  :(int)Math.floor(buf,  offset,  entrySize);	  return(numToRead    <    0)?    -1    :(int)Math.floor(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
716	[BUG]  [BUGGY]  if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  }	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    offset,    entrySize);    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
717	[BUG]  [BUGGY]  return(totalRead!=  0)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead!=  0)?  -1  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead!=  0)?  -1  :  1;	  return(numToRead!=    0)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
718	[BUG]  [BUGGY]  logger.warning( "Can  not  read  EOF  from  file: "  +  buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  logger.warning( "Can  not  read  EOF  from  file: "  +  buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	logger.warning( "Can  not  read  EOF  from  file: "  +  buf,  offset,  numToRead);	  throw    new    IllegalStateException(   "Can    not    read    EOF    from    file:   "    +    buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
719	[BUG]  [BUGGY]  this.currEntry  =  currEntry.getRawEntry();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  this.currEntry  =  currEntry.getRawEntry();  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	this.currEntry  =  currEntry.getRawEntry();	  this.currEntry    =    currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
720	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  entry  size: ");  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  entry  size: ");  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  entry  size: ");	  throw    new    IllegalStateException(   "Can    not    read    EOF,    expecting    entry    offset:   ");    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
721	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  entry  offset: ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  entry  offset: ");  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  entry  offset: ");	  throw    new    IllegalStateException(   "Can    not    read    EOF,    expecting    entry    offset:   ");    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
722	[BUG]  [BUGGY]  return(entrySize  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  1,  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  1,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  1,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    1,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
723	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  entrySize  +  1);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  entrySize  +  1);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
724	[BUG]  [BUGGY]  return(numToRead  >  0)?  -1  :(int)Math.ceil(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >  0)?  -1  :(int)Math.ceil(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >  0)?  -1  :(int)Math.ceil(buf,  offset,  entrySize);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
725	[BUG]  [BUGGY]  return(entryOffset  >  entrySize)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entryOffset  >  entrySize)?  -1  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entryOffset  >  entrySize)?  -1  :  0;	  return(entryOffset    >    entrySize)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
726	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(0L,  numToRead);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(0L,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(0L,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(1L,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
727	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(1L  +  1,  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(1L  +  1,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(1L  +  1,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(1L,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
728	[BUG]  [BUGGY]  return(totalRead  ==  0)?  -1  :(byte)Math.rint(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  ==  0)?  -1  :(byte)Math.rint(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  ==  0)?  -1  :(byte)Math.rint(buf,  offset,  numToRead);	  return(totalRead    ==    0)?    -1    :(int)Math.rint(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
729	[BUG]  [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  ==  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize);	  return(totalRead    ==    0)?    -1    :(int)Math.rint(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
730	[BUG]  [BUGGY]  return(numToRead!=  0)?  -1  :(int)Math.ceil(buf,  offset  +  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead!=  0)?  -1  :(int)Math.ceil(buf,  offset  +  entryOffset,  hasHitEOF);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead!=  0)?  -1  :(int)Math.ceil(buf,  offset  +  entryOffset,  hasHitEOF);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
731	[BUG]  [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  -1);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  -1);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  ==  0)record(buf,  offset,  -1);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
732	[BUG]  [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  entrySize);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  entrySize);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  ==  0)record(buf,  offset,  entrySize);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
733	[BUG]  [BUGGY]  int  currEntrySize  =  currEntry.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  currEntry.read(buf,  offset,  numToRead  +  1);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  currEntry.read(buf,  offset,  numToRead  +  1);	  int    currEntrySize    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
734	[BUG]  [BUGGY]  return(totalRead  >  0)?  -1  :(int)Math.pow(10,  entryOffset);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  >  0)?  -1  :(int)Math.pow(10,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  >  0)?  -1  :(int)Math.pow(10,  entryOffset);	  return(totalRead    >    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
735	[BUG]  [BUGGY]  return(int  >  0)?  -1  :(int)Math.pow(10,  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(int  >  0)?  -1  :(int)Math.pow(10,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(int  >  0)?  -1  :(int)Math.pow(10,  entrySize);	  return(totalRead    >    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
736	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :  1L  +  1;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :  1L  +  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :  1L  +  1;	  return(numToRead    ==    0)?    -1    :    1L;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
737	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(12,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
738	[BUG]  [BUGGY]  return(numToRead!=  0)?  -1  :(int)Math.pow(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead!=  0)?  -1  :(int)Math.pow(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead!=  0)?  -1  :(int)Math.pow(buf,  offset,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
739	[BUG]  [BUGGY]  return(numToRead  >  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize,  hasHitEOF);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize,  hasHitEOF);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
740	[BUG]  [BUGGY]  return(buf.length  <  0)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(buf.length  <  0)?  0  :  buf.length;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(buf.length  <  0)?  0  :  buf.length;	  return(numToRead    <    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
741	[BUG]  [BUGGY]  if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  offset,  entryOffset);  totalRead  =  is.read(buf,  offset,  entrySize);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  offset,  entryOffset);  totalRead  =  is.read(buf,  offset,  entrySize);  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  offset,  entryOffset);  totalRead  =  is.read(buf,  offset,  entrySize);  }	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    offset,    entrySize);    totalRead    =    is.read(buf,    offset,    entryOffset);    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
742	[BUG]  [BUGGY]  if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  offset,  entryLimit);  totalRead  =  is.read(buf,  offset,  entryOffset);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  offset,  entryLimit);  totalRead  =  is.read(buf,  offset,  entryOffset);  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  offset,  entryLimit);  totalRead  =  is.read(buf,  offset,  entryOffset);  }	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    offset,    entrySize);    totalRead    =    is.read(buf,    offset,    entryOffset);    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
743	[BUG]  [BUGGY]  if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  offset,  entryHitEOF);  totalRead  =  is.read(buf,  offset,  entryOffset);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  offset,  entryHitEOF);  totalRead  =  is.read(buf,  offset,  entryOffset);  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  offset,  entryHitEOF);  totalRead  =  is.read(buf,  offset,  entryOffset);  }	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    offset,    entrySize);    totalRead    =    is.read(buf,    offset,    entryOffset);    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
744	[BUG]  [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  -1);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  -1);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  ==  0)record(buf,  offset,  -1);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
745	[BUG]  [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  numToRead  +  1);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  numToRead  +  1);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  ==  0)record(buf,  offset,  numToRead  +  1);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
746	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.cos(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.cos(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.cos(buf,  offset,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.log(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
747	[BUG]  [BUGGY]  return(totalRead  <  0)?  1  :  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  <  0)?  1  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  <  0)?  1  :  1;	  return(numToRead    <    0)?    1    :    1;    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
748	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.floor(buf,  offset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.floor(buf,  offset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(byte)Math.floor(buf,  offset);	  return(numToRead    <    0)?    -1    :(byte)Math.floor(numToRead);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
749	[BUG]  [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  entrySize);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  entrySize);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  ==  0)record(buf,  offset,  entrySize);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
750	[BUG]  [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  -1);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  -1);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  ==  0)record(buf,  offset,  -1);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
751	[BUG]  [BUGGY]  return(totalRead  <  0)?  0  :  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  <  0)?  0  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  <  0)?  0  :  1;	  return(numToRead    <    0)?    0    :    1;    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
752	[BUG]  [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getId());  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getId());  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getId());  }	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    currEntry.setHitEOF(currEntry.getId());    }    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
753	[BUG]  [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getId());  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getId());  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  >  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getId());  }	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    currEntry.setHitEOF(currEntry.getId());    }    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
754	[BUG]  [BUGGY]  if(buf!=  null)  {  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf.length);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(buf!=  null)  {  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf.length);  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(buf!=  null)  {  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf.length);  }	  throw    new    IllegalStateException(   "Can    not    read    EOF    from    file:   "    +    buf.length);    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
755	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf.length,  totalRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf.length,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf.length,  totalRead);	  throw    new    IllegalStateException(   "Can    not    read    EOF    from    file:   "    +    buf.length);    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
756	[BUG]  [BUGGY]  return(entryOffset  >  numToRead)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entryOffset  >  numToRead)?  -1  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entryOffset  >  numToRead)?  -1  :  0;	  return(numToRead    >    entryOffset)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
757	[BUG]  [BUGGY]  read()  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  read()  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	read()  {  throw  new  IllegalStateException( " ");  }	  if(currEntry    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
758	[BUG]  [BUGGY]  wires.put(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  wires.put(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	wires.put(buf,  offset,  numToRead);	  if(currEntry    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
759	[BUG]  [BUGGY]  safeTarEntry(currEntry);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  safeTarEntry(currEntry);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	safeTarEntry(currEntry);	  if(currEntry    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
760	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
761	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.ceil(buf,  numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.ceil(buf,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.ceil(buf,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
762	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize,  totalRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize,  totalRead);	  return(numToRead    >=    0)?    -1    :(int)Math.floor(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
763	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize,  hasHitEOF);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize,  hasHitEOF);	  return(numToRead    >=    0)?    -1    :(int)Math.floor(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
764	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize,  totalRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize,  totalRead);	  return(numToRead    >=    0)?    -1    :(int)Math.floor(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
765	[BUG]  [BUGGY]  return(entryOffset  >=  entrySize)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entryOffset  >=  entrySize)?  -1  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entryOffset  >=  entrySize)?  -1  :  0;	  return(numToRead    >=    entrySize)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
766	[BUG]  [BUGGY]  return(numToRead  +  entrySize)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  +  entrySize)?  -1  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  +  entrySize)?  -1  :  0;	  return(numToRead    >=    entrySize)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
767	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.ceil(buf,  offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.ceil(buf,  offset  +  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.ceil(buf,  offset  +  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
768	[BUG]  [BUGGY]  if(entrySize  >  access)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entrySize  >  access)  {  return  0;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  >  access)  {  return  0;  }	  if(entrySize    >    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
769	[BUG]  [BUGGY]  Entry  <?>  currEntry  =  entryOffset?  entrySize  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  Entry  <?>  currEntry  =  entryOffset?  entrySize  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	Entry  <?>  currEntry  =  entryOffset?  entrySize  :  0;	  if(entrySize    >    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
770	[BUG]  [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.ceil(buf,  offset  +  totalRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.ceil(buf,  offset  +  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  ==  0)?  -1  :(int)Math.ceil(buf,  offset  +  totalRead);	  return(entrySize    ==    0)?    -1    :(int)Math.floor(offset    +    totalRead);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
771	[BUG]  [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.ceil(buf,  offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.ceil(buf,  offset  +  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >=  0)?  -1  :(int)Math.ceil(buf,  offset  +  numToRead);	  return(numToRead    >=    0)?    -1    :(int)Math.ceil(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
772	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize,  totalRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize,  totalRead);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entrySize,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
773	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize,  available);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize,  available);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize,  available);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entrySize,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
774	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.pow(0,  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.pow(0,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(byte)Math.pow(0,  numToRead);	  return(numToRead    <    0)?    -1    :(byte)Math.pow(10,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
775	[BUG]  [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >=  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize);	  return(entrySize    >=    0)?    -1    :(int)Math.floor(offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
776	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(byte)Math.floor(buf,  offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(byte)Math.floor(buf,  offset  +  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(byte)Math.floor(buf,  offset  +  entrySize);	  return(numToRead    ==    0)?    -1    :(int)Math.floor(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
777	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize,  numToRead);	  return(numToRead    ==    0)?    -1    :(int)Math.floor(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
778	[BUG]  [BUGGY]  if(entrySize  >  0)  {  throw  new  IllegalStateException( "Can  not  read  a  block  entry: ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entrySize  >  0)  {  throw  new  IllegalStateException( "Can  not  read  a  block  entry: ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  >  0)  {  throw  new  IllegalStateException( "Can  not  read  a  block  entry: ");  }	  throw    new    IllegalStateException(   "Can    not    read    a    block    entry:   ");    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
779	[BUG]  [BUGGY]  new  IllegalStateException( "Can  not  read  a  block  entry: ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  new  IllegalStateException( "Can  not  read  a  block  entry: ");  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	new  IllegalStateException( "Can  not  read  a  block  entry: ");	  throw    new    IllegalStateException(   "Can    not    read    a    block    entry:   ");    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
780	[BUG]  [BUGGY]  new  IllegalStateException( "Can  not  read  a  block  entry: "  +  getHitEOF());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  new  IllegalStateException( "Can  not  read  a  block  entry: "  +  getHitEOF());  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	new  IllegalStateException( "Can  not  read  a  block  entry: "  +  getHitEOF());	  throw    new    IllegalStateException(   "Can    not    read    a    block    entry:   ");    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
781	[BUG]  [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    buffer[i]    =    is.read(buf,    offset,    i);    }    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
782	[BUG]  [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  >  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    buffer[i]    =    is.read(buf,    offset,    i);    }    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
783	[BUG]  [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  0);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  0);  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  0);  }	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    buffer[i]    =    is.read(buf,    offset,    i);    }    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
784	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.rint(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.rint(buf,  offset,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.rint(buf,  offset,  entryOffset);	  return(numToRead    ==    0)?    -1    :(int)Math.rint(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
785	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  totalRead,  entrySize);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  totalRead,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  totalRead,  entrySize);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entrySize,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
786	[BUG]  [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getName());  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getName());  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getName());  }	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    currEntry.setHitEOF(currEntry.getId());    }    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
787	[BUG]  [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getEdge());  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getEdge());  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getEdge());  }	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    currEntry.setHitEOF(currEntry.getId());    }    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
788	[BUG]  [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getName());  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getName());  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  entrySize  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getName());  }	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    currEntry.setHitEOF(currEntry.getId());    }    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
789	[BUG]  [BUGGY]  return(numToRead  <  0)?  2  :  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  2  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  2  :  1;	  return(numToRead    <    0)?    1    :    1;    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
790	[BUG]  [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.pow(1,  entryOffset);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.pow(1,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  ==  0)?  -1  :(int)Math.pow(1,  entryOffset);	  return(entrySize    ==    0)?    -1    :(int)Math.pow(10,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
791	[BUG]  [BUGGY]  throw  new  IOException( "Can  not  read  EOF  for  path: ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IOException( "Can  not  read  EOF  for  path: ");  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IOException( "Can  not  read  EOF  for  path: ");	  throw    new    IOException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
792	[BUG]  [BUGGY]  throw  new  IOException( "Can  not  read  EOF  from  file: ");  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IOException( "Can  not  read  EOF  from  file: ");  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IOException( "Can  not  read  EOF  from  file: ");	  throw    new    IOException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
793	[BUG]  [BUGGY]  throw  new  IOException( "Can  not  read  EOF  for  path: "  +  offset);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IOException( "Can  not  read  EOF  for  path: "  +  offset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IOException( "Can  not  read  EOF  for  path: "  +  offset);	  throw    new    IOException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
794	[BUG]  [BUGGY]  throw  new  IOException( "Can  not  read  EOF  for  path: "  +  fileName);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IOException( "Can  not  read  EOF  for  path: "  +  fileName);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IOException( "Can  not  read  EOF  for  path: "  +  fileName);	  throw    new    IOException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
795	[BUG]  [BUGGY]  throw  new  IOException( "Can  not  read  EOF  or  EOF  file. ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IOException( "Can  not  read  EOF  or  EOF  file. ");  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IOException( "Can  not  read  EOF  or  EOF  file. ");	  throw    new    IOException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
796	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.pow(10,  entryOffset);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.pow(10,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(byte)Math.pow(10,  entryOffset);	  return(numToRead    <    0)?    -1    :(byte)Math.pow(10,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
797	[BUG]  [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getUpperBound());  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getUpperBound());  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getUpperBound());  }	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    currEntry.setHitEOF(currEntry.getLength());    }    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
798	[BUG]  [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  --i)  {  currEntry.setHitEOF(currEntry.getLength());  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  --i)  {  currEntry.setHitEOF(currEntry.getLength());  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  --i)  {  currEntry.setHitEOF(currEntry.getLength());  }	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    currEntry.setHitEOF(currEntry.getLength());    }    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
799	[BUG]  [BUGGY]  return(entrySize  >  entrySize)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  >  entrySize)?  -1  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >  entrySize)?  -1  :  1;	  return(entrySize    >    numToRead)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
800	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entryOffset,  entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entryOffset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entryOffset,  entrySize);	  return(numToRead    ==    0)?    -1    :(int)Math.floor(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
801	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  entryOffset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  entryOffset  +  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  entryOffset  +  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
802	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.rint(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.rint(buf,  offset,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.rint(buf,  offset,  entryOffset);	  return(numToRead    >=    0)?    -1    :(int)Math.rint(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
803	[BUG]  [BUGGY]  return(numToRead  >  0)?  -1  :(int)Math.ceil(buf,  offset  +  1,  entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >  0)?  -1  :(int)Math.ceil(buf,  offset  +  1,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >  0)?  -1  :(int)Math.ceil(buf,  offset  +  1,  entrySize);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    1,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
804	[BUG]  [BUGGY]  return(entrySize  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  numToRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  numToRead,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  numToRead,  entryOffset);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entryOffset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
805	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  entrySize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  entrySize);	  throw    new    IllegalStateException(   "Can    not    read    EOF    file:   "    +    buf);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
806	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  entryOffset);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  entryOffset);	  throw    new    IllegalStateException(   "Can    not    read    EOF    file:   "    +    buf);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
807	[BUG]  [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.floor(buf,  offset,  entryOffset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.floor(buf,  offset,  entryOffset  +  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  ==  0)?  -1  :(int)Math.floor(buf,  offset,  entryOffset  +  numToRead);	  return(entrySize    ==    0)?    -1    :(int)Math.floor(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
808	[BUG]  [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead,  entryOffset);	  return(entrySize    ==    0)?    -1    :(int)Math.floor(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
809	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset  +  1,  totalRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset  +  1,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset  +  1,  totalRead);	  return(numToRead    <    0)?    -1    :(int)Math.floor(buf,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
810	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(20,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(20,  numToRead  +  1);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(20,  numToRead  +  1);	  return(numToRead    <    0)?    -1    :(int)Math.pow(20,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
811	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset  +  1,  entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset  +  1,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset  +  1,  entrySize);	  return(numToRead    <    0)?    -1    :(int)Math.floor(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
812	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset,  entrySize  +  numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset,  entrySize  +  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset,  entrySize  +  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.floor(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
813	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset,  entryOffset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset,  entryOffset  +  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset,  entryOffset  +  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.floor(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
814	[BUG]  [BUGGY]  this.currEntry  =  currEntry.getRawParent();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  this.currEntry  =  currEntry.getRawParent();  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	this.currEntry  =  currEntry.getRawParent();	  this.currEntry    =    currEntry.getValue();    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
815	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  totalRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  totalRead,  hasHitEOF);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  totalRead,  hasHitEOF);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
816	[BUG]  [BUGGY]  return(totalRead  ==  0)?  0  :  entryOffset;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  ==  0)?  0  :  entryOffset;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  ==  0)?  0  :  entryOffset;	  return(totalRead    ==    0)?    0    :    totalRead;    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
817	[BUG]  [BUGGY]  return(totalRead  ==  0)?  0  :  offset;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  ==  0)?  0  :  offset;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  ==  0)?  0  :  offset;	  return(totalRead    ==    0)?    0    :    totalRead;    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
818	[BUG]  [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.pow(10,  entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.pow(10,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  ==  0)?  -1  :(int)Math.pow(10,  entrySize);	  return(entrySize    >=    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
819	[BUG]  [BUGGY]  return(entryOffset  <  entrySize)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entryOffset  <  entrySize)?  -1  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entryOffset  <  entrySize)?  -1  :  0;	  return(numToRead    <    entrySize)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
820	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.rint(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.rint(buf,  offset,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(byte)Math.rint(buf,  offset,  entryOffset);	  return(numToRead    <    0)?    -1    :(byte)Math.rint(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
821	[BUG]  [BUGGY]  return(int)Math.rint(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(int)Math.rint(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(int)Math.rint(buf,  offset,  numToRead);	  return(totalRead    ==    0)?    -1    :(int)Math.rint(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
822	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Can  not  read  a  cached  entry. ");  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Can  not  read  a  cached  entry. ");  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	Throwables.throw  new  IllegalStateException( "Can  not  read  a  cached  entry. ");	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
823	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Can  not  read  a  string  entry. ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Can  not  read  a  string  entry. ");  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	Throwables.throw  new  IllegalStateException( "Can  not  read  a  string  entry. ");	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
824	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Can  not  read  a  curr  entry: ");  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Can  not  read  a  curr  entry: ");  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	Throwables.throw  new  IllegalStateException( "Can  not  read  a  curr  entry: ");	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
825	[BUG]  [BUGGY]  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  offset,  numToRead);  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  offset,  numToRead);  }	  throw    new    IllegalStateException(   "Can    not    read    EOF    from    file:   "    +    buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
826	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  Throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	Throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  offset,  entrySize);	  throw    new    IllegalStateException(   "Can    not    read    EOF    from    file:   "    +    buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
827	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(10,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(10,  entrySize  +  1);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(10,  entrySize  +  1);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
828	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(10,  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(10,  entryOffset  +  1);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(10,  entryOffset  +  1);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
829	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(12,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(12,  numToRead  +  1);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(12,  numToRead  +  1);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
830	[BUG]  [BUGGY]  int  currEntrySize  =  currEntry.getSize()  +  entryOffset;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  currEntry.getSize()  +  entryOffset;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  currEntry.getSize()  +  entryOffset;	  int    currEntrySize    =    currEntry.getSize();    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
831	[BUG]  [BUGGY]  int  currEntrySize  =  entry.getSize();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  entry.getSize();  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  entry.getSize();	  int    currEntrySize    =    currEntry.getSize();    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
832	[BUG]  [BUGGY]  return(entrySize  >  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  >  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);	  return(entrySize    >=    0)?    -1    :(int)Math.rint(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
833	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  file);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  file);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  file);	  throw    new    IllegalStateException(   "Can    not    read    EOF    from    file:   ");    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
834	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  getHitEOF());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  getHitEOF());  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  getHitEOF());	  throw    new    IllegalStateException(   "Can    not    read    EOF    from    file:   ");    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
835	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  toString());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  toString());  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  toString());	  throw    new    IllegalStateException(   "Can    not    read    EOF    from    file:   ");    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
836	[BUG]  [BUGGY]  return(entrySize  ==  EOF)?  -1  :(int)Math.floor(buf,  offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  ==  EOF)?  -1  :(int)Math.floor(buf,  offset  +  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  ==  EOF)?  -1  :(int)Math.floor(buf,  offset  +  numToRead);	  return(entrySize    ==    0)?    -1    :(int)Math.floor(buf,    offset    +    totalRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
837	[BUG]  [BUGGY]  Integer  currEntry  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getKey());  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  Integer  currEntry  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getKey());  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	Integer  currEntry  =  entryOffset  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getKey());  }	  if(entrySize    >    entrySize)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    currEntry.setHitEOF(currEntry.getKey());    }    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
838	[BUG]  [BUGGY]  int  ch  =  hasHitEOF?  currEntry.read(buf,  offset,  numToRead):  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  ch  =  hasHitEOF?  currEntry.read(buf,  offset,  numToRead):  currEntry.read(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  ch  =  hasHitEOF?  currEntry.read(buf,  offset,  numToRead):  currEntry.read(buf,  offset,  numToRead);	  int    ch    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
839	[BUG]  [BUGGY]  Integer  ch  =  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  Integer  ch  =  currEntry.read(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	Integer  ch  =  currEntry.read(buf,  offset,  numToRead);	  int    ch    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
840	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  entry  offset: "  +  entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  entry  offset: "  +  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  entry  offset: "  +  entrySize);	  throw    new    IllegalStateException(   "Can    not    read    EOF,    expecting    entry    offset:   "    +    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
841	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: "  +  entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  Throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: "  +  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	Throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: "  +  entrySize);	  throw    new    IllegalStateException(   "Can    not    read    EOF,    expecting    entry    offset:   "    +    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
842	[BUG]  [BUGGY]  long  currEntrySize  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  long  currEntrySize  =  is.read(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	long  currEntrySize  =  is.read(buf,  offset,  numToRead);	  int    currEntrySize    =    i.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
843	[BUG]  [BUGGY]  char  currEntrySize  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  char  currEntrySize  =  is.read(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	char  currEntrySize  =  is.read(buf,  offset,  numToRead);	  int    currEntrySize    =    i.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
844	[BUG]  [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entryOffset,  entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entryOffset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entryOffset,  entrySize);	  return(totalRead    ==    0)?    -1    :(int)Math.floor(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
845	[BUG]  [BUGGY]  return(entrySize  ==  0)?  1  :(int)Math.pow(10,  totalRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  ==  0)?  1  :(int)Math.pow(10,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  ==  0)?  1  :(int)Math.pow(10,  totalRead);	  return(totalRead    ==    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
846	[BUG]  [BUGGY]  Entry  <?>  currEntry  =  entrySize?  entryOffset  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  Entry  <?>  currEntry  =  entrySize?  entryOffset  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	Entry  <?>  currEntry  =  entrySize?  entryOffset  :  0;	  if(entrySize    >    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
847	[BUG]  [BUGGY]  int  currEntrySize  =  currEntry.length  -  entryOffset;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  currEntry.length  -  entryOffset;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  currEntry.length  -  entryOffset;	  int    currEntrySize    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
848	[BUG]  [BUGGY]  int  currEntrySize  =  entry.length;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  entry.length;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  entry.length;	  int    currEntrySize    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
849	[BUG]  [BUGGY]  int  currEntrySize  =  entryOffset;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  entryOffset;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  entryOffset;	  int    currEntrySize    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
850	[BUG]  [BUGGY]  return(entrySize  >  entryOffset)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  >  entryOffset)?  -1  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >  entryOffset)?  -1  :  0;	  return(numToRead    >    entryOffset)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
851	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  entrySize  +  numRecords);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  entrySize  +  numRecords);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  entrySize  +  numRecords);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
852	[BUG]  [BUGGY]  return(numToRead  >  0)?  -1  :(int)Math.ceil(buf,  offset  +  numRecords);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >  0)?  -1  :(int)Math.ceil(buf,  offset  +  numRecords);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >  0)?  -1  :(int)Math.ceil(buf,  offset  +  numRecords);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
853	[BUG]  [BUGGY]  return(entryOffset  >  entrySize)?  0  :  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entryOffset  >  entrySize)?  0  :  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entryOffset  >  entrySize)?  0  :  1;	  return(entryOffset    >    entrySize)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
854	[BUG]  [BUGGY]  if(numToRead  >  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead  >  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  >  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
855	[BUG]  [BUGGY]  if(numToRead  >=  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead  >=  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  >=  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
856	[BUG]  [BUGGY]  if(entrySize  ==  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entrySize  ==  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  ==  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
857	[BUG]  [BUGGY]  if(entrySize  ==  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entrySize  ==  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  ==  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
858	[BUG]  [BUGGY]  if(numToRead  >  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead  >  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  >  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
859	[BUG]  [BUGGY]  if(numToRead  >=  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead  >=  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  >=  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
860	[BUG]  [BUGGY]  return(entrySize  >  entrySize)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  >  entrySize)?  -1  :  0;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >  entrySize)?  -1  :  0;	  return(entrySize    >    numToRead)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
861	[BUG]  [BUGGY]  if(numToRead  >  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead  >  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  >  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
862	[BUG]  [BUGGY]  if(numToRead  >=  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead  >=  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  >=  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
863	[BUG]  [BUGGY]  if(entrySize  ==  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entrySize  ==  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  ==  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(hasHitEOF    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
864	[BUG]  [BUGGY]  if(entrySize  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entryOffset,  entrySize);  totalRead  =  is.read(buf,  offset,  entryOffset);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entrySize  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entryOffset,  entrySize);  totalRead  =  is.read(buf,  offset,  entryOffset);  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entryOffset,  entrySize);  totalRead  =  is.read(buf,  offset,  entryOffset);  }	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    offset,    entrySize);    totalRead    =    is.read(buf,    offset,    entryOffset);    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
865	[BUG]  [BUGGY]  readNow  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  totalRead  =  is.read(buf,  offset,  entryOffset);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  readNow  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  totalRead  =  is.read(buf,  offset,  entryOffset);  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	readNow  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  totalRead  =  is.read(buf,  offset,  entryOffset);  }	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    offset,    entrySize);    totalRead    =    is.read(buf,    offset,    entryOffset);    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
866	[BUG]  [BUGGY]  ||  hasHitEOF  &&  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  ||  hasHitEOF  &&  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	||  hasHitEOF  &&  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF    &&    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
867	[BUG]  [BUGGY]  if(entrySize  >=  entryOffset)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entrySize  >=  entryOffset)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  >=  entryOffset)  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF    &&    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
868	[BUG]  [BUGGY]  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF    &&    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
869	[BUG]  [BUGGY]  if(!hasHitEOF  &&  entryOffset  <  totalRead)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(!hasHitEOF  &&  entryOffset  <  totalRead)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(!hasHitEOF  &&  entryOffset  <  totalRead)  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF    &&    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
870	[BUG]  [BUGGY]  &&  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  &&  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	&&  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF    &&    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
871	[BUG]  [BUGGY]  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  offset,  numToRead);  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  offset,  numToRead);  }	  throw    new    IllegalStateException(   "Can    not    read    EOF    file:   "    +    buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
872	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  offset,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  offset,  entryOffset);	  throw    new    IllegalStateException(   "Can    not    read    EOF    file:   "    +    buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
873	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  [Delete]  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	[Delete]	  if(currEntry    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
874	[BUG]  [BUGGY]  read()  {  throw  new  IllegalStateException( "No  entry  size( ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  read()  {  throw  new  IllegalStateException( "No  entry  size( ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	read()  {  throw  new  IllegalStateException( "No  entry  size( ");  }	  if(currEntry    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
875	[BUG]  [BUGGY]  read()  {  throw  new  IllegalStateException( "Tar  entry  must  be  initialized. ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  read()  {  throw  new  IllegalStateException( "Tar  entry  must  be  initialized. ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	read()  {  throw  new  IllegalStateException( "Tar  entry  must  be  initialized. ");  }	  if(currEntry    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
876	[BUG]  [BUGGY]  readNow()  {  throw  new  IllegalStateException( "No  entry  size( ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  readNow()  {  throw  new  IllegalStateException( "No  entry  size( ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	readNow()  {  throw  new  IllegalStateException( "No  entry  size( ");  }	  if(currEntry    ==    null)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
877	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize,  numToRead);	  return(numToRead    >=    0)?    -1    :(int)Math.floor(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
878	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  1,  entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  1,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  1,  entrySize);	  return(numToRead    >=    0)?    -1    :(int)Math.floor(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
879	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize,  numToRead);	  return(numToRead    >=    0)?    -1    :(int)Math.floor(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
880	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  entryOffset,  entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  entryOffset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  entryOffset,  entrySize);	  return(numToRead    >=    0)?    -1    :(int)Math.floor(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
881	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :  1L;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :  1L;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :  1L;	  return(numToRead    ==    0)?    -1    :    1L;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
882	[BUG]  [BUGGY]  if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  totalRead  =  is.read(buf,  offset,  entrySize);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  totalRead  =  is.read(buf,  offset,  entrySize);  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  >  0)  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  totalRead  =  is.read(buf,  offset,  entrySize);  }	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    offset,    entrySize);    totalRead    =    is.read(buf,    offset,    entrySize);    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
883	[BUG]  [BUGGY]  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  totalRead  =  is.read(buf,  offset,  entrySize);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  totalRead  =  is.read(buf,  offset,  entrySize);  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  totalRead  =  is.read(buf,  offset,  entrySize);  }	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    offset,    entrySize);    totalRead    =    is.read(buf,    offset,    entrySize);    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
884	[BUG]  [BUGGY]  readNow  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  totalRead  =  is.read(buf,  offset,  entrySize);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  readNow  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  totalRead  =  is.read(buf,  offset,  entrySize);  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	readNow  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  totalRead  =  is.read(buf,  offset,  entrySize);  }	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    offset,    entrySize);    totalRead    =    is.read(buf,    offset,    entrySize);    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
885	[BUG]  [BUGGY]  return(totalRead  <  0)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(totalRead  <  0)?  0  :  buf.length;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  <  0)?  0  :  buf.length;	  return(totalRead    >=    0)?    0    :    totalRead;    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
886	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  a  string  entry. ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  a  string  entry. ");  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  a  string  entry. ");	  throw    new    IllegalStateException(   "   ".getMessage());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
887	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  a  block  entry: "  +  getClass().getName());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  a  block  entry: "  +  getClass().getName());  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  a  block  entry: "  +  getClass().getName());	  throw    new    IllegalStateException(   "   ".getMessage());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
888	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  a  block  entry: "  +  buf.getName());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  a  block  entry: "  +  buf.getName());  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  a  block  entry: "  +  buf.getName());	  throw    new    IllegalStateException(   "   ".getMessage());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
889	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  a  block  entry: "  +  buf.toString());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  a  block  entry: "  +  buf.toString());  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  a  block  entry: "  +  buf.toString());	  throw    new    IllegalStateException(   "   ".getMessage());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
890	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  a  block  entry: "  +  buf.getLength());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  a  block  entry: "  +  buf.getLength());  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  a  block  entry: "  +  buf.getLength());	  throw    new    IllegalStateException(   "   ".getMessage());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
891	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset  +  entryOffset);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset  +  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset  +  entryOffset);	  return(numToRead    <    0)?    -1    :(int)Math.floor(buf,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
892	[BUG]  [BUGGY]  return(entrySize  <  0)?  -1  :(int)Math.floor(buf,  entryOffset);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  <  0)?  -1  :(int)Math.floor(buf,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  <  0)?  -1  :(int)Math.floor(buf,  entryOffset);	  return(numToRead    <    0)?    -1    :(int)Math.floor(buf,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
893	[BUG]  [BUGGY]  return(entrySize  <  0)?  -1  :(int)Math.floor(buf,  offset);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  <  0)?  -1  :(int)Math.floor(buf,  offset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  <  0)?  -1  :(int)Math.floor(buf,  offset);	  return(numToRead    <    0)?    -1    :(int)Math.floor(buf,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
894	[BUG]  [BUGGY]  return(numToRead  >  0)?  -1  :(int)Math.ceil(buf,  offset  +  entryOffset);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >  0)?  -1  :(int)Math.ceil(buf,  offset  +  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >  0)?  -1  :(int)Math.ceil(buf,  offset  +  entryOffset);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
895	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.rint(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.rint(buf,  offset,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.rint(buf,  offset,  entryOffset);	  return(numToRead    <    0)?    -1    :(int)Math.rint(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
896	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(1,  entryOffset);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(1,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(1,  entryOffset);	  return(numToRead    <    0)?    -1    :(int)Math.pow(1,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
897	[BUG]  [BUGGY]  return(numToRead  >  0)?  -1  :(int)Math.pow(1,  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >  0)?  -1  :(int)Math.pow(1,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >  0)?  -1  :(int)Math.pow(1,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(1,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
898	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.floor(buf,  offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.floor(buf,  offset  +  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(byte)Math.floor(buf,  offset  +  entrySize);	  return(numToRead    <    0)?    -1    :(byte)Math.floor(numToRead);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
899	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.floor(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.floor(buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(byte)Math.floor(buf,  offset,  entrySize);	  return(numToRead    <    0)?    -1    :(byte)Math.floor(numToRead);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
900	[BUG]  [BUGGY]  while(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  while(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	while(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
901	[BUG]  [BUGGY]  allowSkip(shouldReset)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  allowSkip(shouldReset)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	allowSkip(shouldReset)  {  throw  new  IllegalStateException( " ");  }	  if(!hasHitEOF)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
902	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf.length,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf.length,  hasHitEOF);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf.length,  hasHitEOF);	  throw    new    IllegalStateException(   "Can    not    read    EOF    file:   "    +    buf.length);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
903	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  offset  +  length);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  offset  +  length);	  throw    new    IllegalStateException(   "Can    not    read    EOF    file:   "    +    buf.length);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
904	[BUG]  [BUGGY]  allowSkip( ")  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  allowSkip( ")  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	allowSkip( ")  {  throw  new  IllegalStateException( " ");  }	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
905	[BUG]  [BUGGY]  allowSkip(false)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  allowSkip(false)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	allowSkip(false)  {  throw  new  IllegalStateException( " ");  }	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
906	[BUG]  [BUGGY]  ||  entrySize  >  SMALL_BUFFER_SIZE)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  ||  entrySize  >  SMALL_BUFFER_SIZE)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	||  entrySize  >  SMALL_BUFFER_SIZE)  {  throw  new  IllegalStateException( " ");  }	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
907	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  a  block  entry: "  +  entrySize);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  a  block  entry: "  +  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  a  block  entry: "  +  entrySize);	  throw    new    IllegalStateException(   "Can    not    read    a    block    entry:   ");    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
908	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  throw  new  IllegalStateException( "Can  not  read  a  block  entry: ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entrySize  >  entrySize)  {  throw  new  IllegalStateException( "Can  not  read  a  block  entry: ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  >  entrySize)  {  throw  new  IllegalStateException( "Can  not  read  a  block  entry: ");  }	  throw    new    IllegalStateException(   "Can    not    read    a    block    entry:   ");    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
909	[BUG]  [BUGGY]  new  IllegalStateException( "Can  not  read  a  block  entry: "  +  entryOffset);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  new  IllegalStateException( "Can  not  read  a  block  entry: "  +  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	new  IllegalStateException( "Can  not  read  a  block  entry: "  +  entryOffset);	  throw    new    IllegalStateException(   "Can    not    read    a    block    entry:   ");    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
910	[BUG]  [BUGGY]  allowSkip(int  i,  hasHitEOF))  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  allowSkip(int  i,  hasHitEOF))  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	allowSkip(int  i,  hasHitEOF))  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  }	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    offset,    entrySize);    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
911	[BUG]  [BUGGY]  readNow()  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  readNow()  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	readNow()  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  }	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    offset,    entrySize);    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
912	[BUG]  [BUGGY]  allowSkip(int  i,  hasHitEOF  ||  entryOffset  >  entrySize))  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  allowSkip(int  i,  hasHitEOF  ||  entryOffset  >  entrySize))  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	allowSkip(int  i,  hasHitEOF  ||  entryOffset  >  entrySize))  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  }	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    offset,    entrySize);    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
913	[BUG]  [BUGGY]  allowSkip(int  i,  hasHitEOF))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  allowSkip(int  i,  hasHitEOF))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	allowSkip(int  i,  hasHitEOF))  {  throw  new  IllegalStateException( " ");  }	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    offset,    entrySize);    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
914	[BUG]  [BUGGY]  allowSkip(int  i,  hasHitEOF))  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  allowSkip(int  i,  hasHitEOF))  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	allowSkip(int  i,  hasHitEOF))  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);	  if(entrySize    >    0)    {    throw    new    IllegalStateException(   "   ");    }    else    {    System.arraycopy(buf,    offset,    buf,    offset,    entrySize);    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
915	[BUG]  [BUGGY]  return(numToRead  >  0)?  -1  :(int)Math.pow(10.0,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >  0)?  -1  :(int)Math.pow(10.0,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >  0)?  -1  :(int)Math.pow(10.0,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10.0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
916	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(16,  totalRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(16,  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(16,  totalRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
917	[BUG]  [BUGGY]  if(entrySize  ==  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(entrySize  ==  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  ==  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
918	[BUG]  [BUGGY]  if(numToRead  >  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead  >  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  >  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
919	[BUG]  [BUGGY]  if(numToRead  >=  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  if(numToRead  >=  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  >=  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(numToRead    ==    0)record(buf,    offset,    numToRead);    if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
920	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  offset  +  length);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  offset  +  length);	  throw    new    IllegalStateException(   "Can    not    read    EOF    from    file:   "    +    buf.length);    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
921	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  entryOffset);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  entryOffset);	  throw    new    IllegalStateException(   "Can    not    read    EOF    from    file:   "    +    buf.length);    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
922	[BUG]  [BUGGY]  return(entrySize  <  0)?  -1  :(int)Math.floor(buf,  offset  +  totalRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(entrySize  <  0)?  -1  :(int)Math.floor(buf,  offset  +  totalRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  <  0)?  -1  :(int)Math.floor(buf,  offset  +  totalRead);	  return(entrySize    ==    0)?    -1    :(int)Math.floor(offset    +    totalRead);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
923	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.pow(10,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.pow(10,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.pow(10,  numToRead);	  return(numToRead    >=    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
924	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.pow(10,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.pow(10,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.pow(10,  numToRead);	  return(numToRead    ==    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
925	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.pow(1,  entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.pow(1,  entrySize);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.pow(1,  entrySize);	  return(numToRead    ==    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
926	[BUG]  [BUGGY]  Integer  currEntrySize  =  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  Integer  currEntrySize  =  currEntry.read(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	Integer  currEntrySize  =  currEntry.read(buf,  offset,  numToRead);	  int    currEntrySize    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
927	[BUG]  [BUGGY]  byte  currEntrySize  =  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  byte  currEntrySize  =  currEntry.read(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	byte  currEntrySize  =  currEntry.read(buf,  offset,  numToRead);	  int    currEntrySize    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
928	[BUG]  [BUGGY]  long  currEntrySize  =  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  long  currEntrySize  =  currEntry.read(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	long  currEntrySize  =  currEntry.read(buf,  offset,  numToRead);	  int    currEntrySize    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
929	[BUG]  [BUGGY]  int  currEntrySize  =  this.currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  int  currEntrySize  =  this.currEntry.read(buf,  offset,  numToRead);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  this.currEntry.read(buf,  offset,  numToRead);	  int    currEntrySize    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
930	[BUG]  [BUGGY]  return(numToRead  <  0)?  0  :  buf.length  -  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  return(numToRead  <  0)?  0  :  buf.length  -  1;  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  0  :  buf.length  -  1;	  return(numToRead    <    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
931	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  entry  offset: "  +  entryOffset);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {      [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  entry  offset: "  +  entryOffset);  [BUGGY]      }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  entry  offset: "  +  entryOffset);	  throw    new    IllegalStateException(   "Can    not    read    EOF,    expecting    entry    offset:   ");    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
