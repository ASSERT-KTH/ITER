bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  offset,  numToRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(buf,  offset,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
2	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(10,  totalRead);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(10,  totalRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(10,  totalRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
3	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.pow(10,  numToRead);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.pow(10,  numToRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(byte)Math.pow(10,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
4	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(10.0,  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(10.0,  numToRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(10.0,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
5	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(10,  entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(10,  entrySize);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(10,  entrySize);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
6	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(20,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(20,  numToRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(20,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
7	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(12,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(12,  numToRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(12,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
8	[BUG]  [BUGGY]  return(entrySize  >  numToRead)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(entrySize  >  numToRead)?  -1  :  1;  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >  numToRead)?  -1  :  1;	  return(numToRead    >    entrySize)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
9	[BUG]  [BUGGY]  return(numToRead  <  entrySize)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  entrySize)?  -1  :  1;  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  entrySize)?  -1  :  1;	  return(numToRead    >    entrySize)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
10	[BUG]  [BUGGY]  return(numToRead  >  0)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  >  0)?  -1  :  1;  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >  0)?  -1  :  1;	  return(numToRead    >    entrySize)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
11	[BUG]  [BUGGY]  return(numToRead  ==  entrySize)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  ==  entrySize)?  -1  :  1;  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  entrySize)?  -1  :  1;	  return(numToRead    >    entrySize)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
12	[BUG]  [BUGGY]  return(numToRead  >=  entrySize)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  >=  entrySize)?  -1  :  1;  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  entrySize)?  -1  :  1;	  return(numToRead    >    entrySize)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
13	[BUG]  [BUGGY]  return(numToRead  >  entryOffset)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  >  entryOffset)?  -1  :  1;  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >  entryOffset)?  -1  :  1;	  return(numToRead    >    entrySize)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
14	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  numToRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.floor(numToRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
15	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset,  numToRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.floor(numToRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
16	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  numToRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.floor(numToRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
17	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.floor(numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.floor(numToRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(byte)Math.floor(numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.floor(numToRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
18	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.floor(numToRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
19	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  numToRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.floor(numToRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
20	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.log(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.log(buf,  offset,  numToRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.log(buf,  offset,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.floor(numToRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
21	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize);	  return(totalRead    >=    0)?    -1    :(int)Math.rint(offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
22	[BUG]  [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.rint(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.rint(buf,  offset,  totalRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >=  0)?  -1  :(int)Math.rint(buf,  offset,  totalRead);	  return(totalRead    >=    0)?    -1    :(int)Math.rint(offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
23	[BUG]  [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >=  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize);	  return(totalRead    >=    0)?    -1    :(int)Math.rint(offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
24	[BUG]  [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  ==  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize);	  return(totalRead    >=    0)?    -1    :(int)Math.rint(offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
25	[BUG]  [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.rint(offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.rint(offset,  totalRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >=  0)?  -1  :(int)Math.rint(offset,  totalRead);	  return(totalRead    >=    0)?    -1    :(int)Math.rint(offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
26	[BUG]  [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >=  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);	  return(totalRead    >=    0)?    -1    :(int)Math.rint(offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
27	[BUG]  [BUGGY]  return(totalRead  >=  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(totalRead  >=  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  >=  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize);	  return(totalRead    >=    0)?    -1    :(int)Math.rint(offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
28	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);	  return(totalRead    ==    0)?    -1    :(int)Math.floor(offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
29	[BUG]  [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);	  return(totalRead    ==    0)?    -1    :(int)Math.floor(offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
30	[BUG]  [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.floor(offset  +  totalRead);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.floor(offset  +  totalRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  ==  0)?  -1  :(int)Math.floor(offset  +  totalRead);	  return(totalRead    ==    0)?    -1    :(int)Math.floor(offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
31	[BUG]  [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead);	  return(totalRead    ==    0)?    -1    :(int)Math.floor(offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
32	[BUG]  [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  totalRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  totalRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  totalRead);	  return(totalRead    ==    0)?    -1    :(int)Math.floor(offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
33	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.floor(offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.floor(offset  +  entrySize);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.floor(offset  +  entrySize);	  return(totalRead    ==    0)?    -1    :(int)Math.floor(offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
34	[BUG]  [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  ==  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);	  return(totalRead    ==    0)?    -1    :(int)Math.floor(offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
35	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  entrySize);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset,  entrySize);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
36	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  1,  entrySize);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  1,  entrySize);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  1,  entrySize);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
37	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize,  hasHitEOF);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize,  hasHitEOF);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
38	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
39	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  numToRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
40	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  numRecords);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  numRecords);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  numRecords);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
41	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
42	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	Throwables.throw  new  IllegalStateException( " ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
43	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".getMessage());  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  throw  new  IllegalStateException( " ".getMessage());  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( " ".getMessage());	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
44	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  offset,  numToRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf,  offset,  numToRead);	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
45	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf.length);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf.length);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf.length);	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
46	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  offset,  numToRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf,  offset,  numToRead);	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
47	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  file: "  +  buf);	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
48	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);	  return(totalRead    >=    0)?    -1    :(int)Math.floor(offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
49	[BUG]  [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.floor(offset  +  totalRead);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.floor(offset  +  totalRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >=  0)?  -1  :(int)Math.floor(offset  +  totalRead);	  return(totalRead    >=    0)?    -1    :(int)Math.floor(offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
50	[BUG]  [BUGGY]  return(totalRead  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(totalRead  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);	  return(totalRead    >=    0)?    -1    :(int)Math.floor(offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
51	[BUG]  [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  numToRead);	  return(totalRead    >=    0)?    -1    :(int)Math.floor(offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
52	[BUG]  [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  totalRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  totalRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  totalRead);	  return(totalRead    >=    0)?    -1    :(int)Math.floor(offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
53	[BUG]  [BUGGY]  return(entrySize  >  numToRead)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(entrySize  >  numToRead)?  -1  :  0;  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >  numToRead)?  -1  :  0;	  return(numToRead    >    entrySize)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
54	[BUG]  [BUGGY]  return(numToRead  >  0)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  >  0)?  -1  :  0;  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >  0)?  -1  :  0;	  return(numToRead    >    entrySize)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
55	[BUG]  [BUGGY]  return(numToRead  <  entrySize)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  entrySize)?  -1  :  0;  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  entrySize)?  -1  :  0;	  return(numToRead    >    entrySize)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
56	[BUG]  [BUGGY]  return(numToRead  ==  entrySize)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  ==  entrySize)?  -1  :  0;  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  entrySize)?  -1  :  0;	  return(numToRead    >    entrySize)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
57	[BUG]  [BUGGY]  return(numToRead  >=  entrySize)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  >=  entrySize)?  -1  :  0;  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  entrySize)?  -1  :  0;	  return(numToRead    >    entrySize)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
58	[BUG]  [BUGGY]  return(numToRead  >  entryOffset)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  >  entryOffset)?  -1  :  0;  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >  entryOffset)?  -1  :  0;	  return(numToRead    >    entrySize)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
59	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.rint(offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
60	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.rint(offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
61	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.rint(offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
62	[BUG]  [BUGGY]  return(numToRead  <  0)?  1  :(int)Math.rint(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  0)?  1  :(int)Math.rint(buf,  offset,  numToRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  1  :(int)Math.rint(buf,  offset,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.rint(offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
63	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.rint(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  0)?  -1  :(byte)Math.rint(buf,  offset,  numToRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(byte)Math.rint(buf,  offset,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.rint(offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
64	[BUG]  [BUGGY]  return(numToRead  >  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  >  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.rint(offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
65	[BUG]  [BUGGY]  return(numToRead  <  =  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  =  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  =  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.rint(offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
66	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  >=  0)?  -1  :  1;  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :  1;	  return(numToRead    <    0)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
67	[BUG]  [BUGGY]  return(numToRead  <  =  0)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  =  0)?  -1  :  1;  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  =  0)?  -1  :  1;	  return(numToRead    <    0)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
68	[BUG]  [BUGGY]  return(numToRead  <  1)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  1)?  -1  :  1;  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  1)?  -1  :  1;	  return(numToRead    <    0)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
69	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :  2;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  0)?  -1  :  2;  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :  2;	  return(numToRead    <    0)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
70	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :  2;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  ==  0)?  -1  :  2;  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :  2;	  return(numToRead    ==    0)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
71	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  ==  0)?  -1  :  0;  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :  0;	  return(numToRead    ==    0)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
72	[BUG]  [BUGGY]  return(numToRead  ==  0)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  ==  0)?  1  :  0;  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  1  :  0;	  return(numToRead    ==    0)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
73	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :  1L;  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  ==  0)?  -1  :  1L;  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :  1L;	  return(numToRead    ==    0)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
74	[BUG]  [BUGGY]  return(numToRead  ==  0)?  1  :  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  ==  0)?  1  :  1;  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  1  :  1;	  return(numToRead    ==    0)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
75	[BUG]  [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }	  return    0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
76	[BUG]  [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  return    0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
77	[BUG]  [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  return    0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
78	[BUG]  [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(numToRead  ==  0)record(buf,  offset,  numToRead);  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  0;  }	  return    0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
79	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  ch  =  is.read(buf,  offset,  numToRead);	  return    0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
80	[BUG]  [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.pow(10,  totalRead);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.pow(10,  totalRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >=  0)?  -1  :(int)Math.pow(10,  totalRead);	  return(totalRead    >=    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
81	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.pow(10,  entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.pow(10,  entrySize);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.pow(10,  entrySize);	  return(totalRead    >=    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
82	[BUG]  [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.pow(10,  entryOffset);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.pow(10,  entryOffset);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  ==  0)?  -1  :(int)Math.pow(10,  entryOffset);	  return(totalRead    >=    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
83	[BUG]  [BUGGY]  return(entrySize  >>  0)?  -1  :(int)Math.pow(10,  totalRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(entrySize  >>  0)?  -1  :(int)Math.pow(10,  totalRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >>  0)?  -1  :(int)Math.pow(10,  totalRead);	  return(totalRead    >=    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
84	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.pow(10,  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.pow(10,  entrySize);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.pow(10,  entrySize);	  return(totalRead    >=    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
85	[BUG]  [BUGGY]  return(totalRead  >=  0)?  -1  :(int)Math.pow(10,  entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(totalRead  >=  0)?  -1  :(int)Math.pow(10,  entryOffset);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  >=  0)?  -1  :(int)Math.pow(10,  entryOffset);	  return(totalRead    >=    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
86	[BUG]  [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.pow(10,  totalRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.pow(10,  totalRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  ==  0)?  -1  :(int)Math.pow(10,  totalRead);	  return(totalRead    >=    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
87	[BUG]  [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  numToRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
88	[BUG]  [BUGGY]  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
89	[BUG]  [BUGGY]  if(!hasHitEOF  &&  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  if(!hasHitEOF  &&  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(!hasHitEOF  &&  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
90	[BUG]  [BUGGY]  int  currEntrySize  =  i.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  int  currEntrySize  =  i.read(buf,  offset,  numToRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  i.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
91	[BUG]  [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  numToRead);  return  currEntrySize;  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  numToRead);  return  currEntrySize;  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  is.read(buf,  offset,  numToRead);  return  currEntrySize;	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
92	[BUG]  [BUGGY]  this.currEntry  =  currEntry.getValue();  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  this.currEntry  =  currEntry.getValue();  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	this.currEntry  =  currEntry.getValue();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
93	[BUG]  [BUGGY]  return(numToRead  >  totalRead)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  >  totalRead)?  -1  :  0;  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >  totalRead)?  -1  :  0;	  return(numToRead    >    entrySize)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
94	[BUG]  [BUGGY]  return(totalRead  ==  0)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(totalRead  ==  0)?  -1  :  1;  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  ==  0)?  -1  :  1;	  return(numToRead    ==    0)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
95	[BUG]  [BUGGY]  return(numToRead!=  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead!=  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead!=  0)?  -1  :(int)Math.rint(buf,  offset,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.rint(offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
96	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize,  totalRead);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize,  totalRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  entrySize,  totalRead);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
97	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  entryOffset,  entrySize);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  entryOffset,  entrySize);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  entryOffset,  entrySize);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
98	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.floor(offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.floor(offset  +  entrySize);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.floor(offset  +  entrySize);	  return(totalRead    >=    0)?    -1    :(int)Math.floor(offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
99	[BUG]  [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.floor(offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.floor(offset  +  entrySize);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >=  0)?  -1  :(int)Math.floor(offset  +  entrySize);	  return(totalRead    >=    0)?    -1    :(int)Math.floor(offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
100	[BUG]  [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >=  0)?  -1  :(int)Math.floor(buf,  offset  +  entrySize);	  return(totalRead    >=    0)?    -1    :(int)Math.floor(offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
101	[BUG]  [BUGGY]  int  ch  =  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  int  ch  =  currEntry.read(buf,  offset,  numToRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  ch  =  currEntry.read(buf,  offset,  numToRead);	  return    0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
102	[BUG]  [BUGGY]  if(!hasHitEOF)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  if(!hasHitEOF)  {  return  0;  }  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(!hasHitEOF)  {  return  0;  }	  return    0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
103	[BUG]  [BUGGY]  return(totalRead  >=  0)?  0  :  totalRead;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(totalRead  >=  0)?  0  :  totalRead;  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  >=  0)?  0  :  totalRead;	  return    0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
104	[BUG]  [BUGGY]  return(totalRead  ==  0)?  0  :  totalRead;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(totalRead  ==  0)?  0  :  totalRead;  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  ==  0)?  0  :  totalRead;	  return    0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
105	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  totalRead);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  totalRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  totalRead);	  return(numToRead    <    0)?    -1    :(int)Math.floor(numToRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
106	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.floor(numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.floor(numToRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.floor(numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.floor(numToRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
107	[BUG]  [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.floor(numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  >=  0)?  -1  :(int)Math.floor(numToRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >=  0)?  -1  :(int)Math.floor(numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.floor(numToRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
108	[BUG]  [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  ==  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  ==  0)?  -1  :(int)Math.rint(buf,  offset,  entrySize);	  return(totalRead    >=    0)?    -1    :(int)Math.rint(offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
109	[BUG]  [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.floor(offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(entrySize  ==  0)?  -1  :(int)Math.floor(offset  +  entrySize);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  ==  0)?  -1  :(int)Math.floor(offset  +  entrySize);	  return(totalRead    ==    0)?    -1    :(int)Math.floor(offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
110	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(1L,  numToRead);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(1L,  numToRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(1L,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
111	[BUG]  [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.pow(10,  entrySize);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(totalRead  ==  0)?  -1  :(int)Math.pow(10,  entrySize);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  ==  0)?  -1  :(int)Math.pow(10,  entrySize);	  return(totalRead    >=    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
112	[BUG]  [BUGGY]  return(totalRead  >  0)?  -1  :(int)Math.pow(10,  entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(totalRead  >  0)?  -1  :(int)Math.pow(10,  entrySize);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  >  0)?  -1  :(int)Math.pow(10,  entrySize);	  return(totalRead    >=    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
113	[BUG]  [BUGGY]  return(entrySize!=  0)?  -1  :(int)Math.pow(10,  totalRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(entrySize!=  0)?  -1  :(int)Math.pow(10,  totalRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize!=  0)?  -1  :(int)Math.pow(10,  totalRead);	  return(totalRead    >=    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
114	[BUG]  [BUGGY]  if(entrySize  >  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  if(entrySize  >  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  >  0)  {  throw  new  IllegalStateException( " ");  }	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
115	[BUG]  [BUGGY]  if(currEntry  ==  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  if(currEntry  ==  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(currEntry  ==  null)  {  throw  new  IllegalStateException( " ");  }	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
116	[BUG]  [BUGGY]  if(entrySize  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  totalRead  =  is.read(buf,  offset,  entrySize);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  if(entrySize  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  totalRead  =  is.read(buf,  offset,  entrySize);  }  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  totalRead  =  is.read(buf,  offset,  entrySize);  }	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
117	[BUG]  [BUGGY]  if(entrySize  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  totalRead  =  is.read(buf,  offset,  entryOffset);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  if(entrySize  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  totalRead  =  is.read(buf,  offset,  entryOffset);  }  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  totalRead  =  is.read(buf,  offset,  entryOffset);  }	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
118	[BUG]  [BUGGY]  if(entrySize  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  if(entrySize  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  }  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  >  0)  {  throw  new  IllegalStateException( " ");  }  else  {  System.arraycopy(buf,  offset,  buf,  offset,  entrySize);  }	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
119	[BUG]  [BUGGY]  return(numToRead!=  0)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead!=  0)?  -1  :  1;  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead!=  0)?  -1  :  1;	  return(numToRead    <    0)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
120	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  0)?  -1  :  0;  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :  0;	  return(numToRead    <    0)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
121	[BUG]  [BUGGY]  int  currEntrySize  =  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  int  currEntrySize  =  currEntry.read(buf,  offset,  numToRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  currEntry.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
122	[BUG]  [BUGGY]  int  currEntrySize  =  currEntry.length;  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  int  currEntrySize  =  currEntry.length;  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  currEntry.length;	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
123	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  ch  =  is.read(buf,  offset,  numToRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	ch  =  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
124	[BUG]  [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  entrySize);  if(currEntrySize  >  0)  {  return  currEntrySize;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  entrySize);  if(currEntrySize  >  0)  {  return  currEntrySize;  }  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  is.read(buf,  offset,  entrySize);  if(currEntrySize  >  0)  {  return  currEntrySize;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
125	[BUG]  [BUGGY]  int  currEntrySize  =  currEntry.getSize();  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  int  currEntrySize  =  currEntry.getSize();  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	int  currEntrySize  =  currEntry.getSize();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
126	[BUG]  [BUGGY]  return(totalRead  >  0)?  -1  :(int)Math.floor(offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(totalRead  >  0)?  -1  :(int)Math.floor(offset  +  entrySize);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(totalRead  >  0)?  -1  :(int)Math.floor(offset  +  entrySize);	  return(totalRead    >=    0)?    -1    :(int)Math.floor(offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
127	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  entryOffset);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  entryOffset);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.floor(buf,  entryOffset);	  return(numToRead    <    0)?    -1    :(int)Math.floor(numToRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
128	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  a  block  entry: ");  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  throw  new  IllegalStateException( "Can  not  read  a  block  entry: ");  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  a  block  entry: ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
129	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: "  +  entryOffset);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: "  +  entryOffset);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: "  +  entryOffset);	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
130	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: ");  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: ");  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  from  file: ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
131	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf.length);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf.length);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  buf.length);	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
132	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: ");  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: ");  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF,  expecting  entry  offset: ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
133	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  offset);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  offset);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IllegalStateException( "Can  not  read  EOF  from  file: "  +  offset);	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
134	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  if(entrySize  >  entrySize)  {  return  0;  }  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  >  entrySize)  {  return  0;  }	  return    0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
135	[BUG]  [BUGGY]  return(numToRead  <  0)?  0  :  1;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  0)?  0  :  1;  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  0  :  1;	  return    0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
136	[BUG]  [BUGGY]  throw  new  IOException( " ");  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  throw  new  IOException( " ");  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	throw  new  IOException( " ");	  return    0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
137	[BUG]  [BUGGY]  return(numToRead  <  0)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  0)?  0  :  buf.length;  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  0  :  buf.length;	  return    0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
138	[BUG]  [BUGGY]  return(numToRead  >  entrySize)?  0  :  1;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  >  entrySize)?  0  :  1;  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  >  entrySize)?  0  :  1;	  return    0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
139	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(10,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(10,  numToRead  +  1);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(10,  numToRead  +  1);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
140	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(1,  numToRead);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(1,  numToRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(1,  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
141	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(10,  entryOffset);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.pow(10,  entryOffset);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.pow(10,  entryOffset);	  return(numToRead    <    0)?    -1    :(int)Math.pow(10,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
142	[BUG]  [BUGGY]  return(entrySize  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(entrySize  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  numToRead);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  numToRead);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
143	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  entryOffset,  hasHitEOF);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  entryOffset,  hasHitEOF);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
144	[BUG]  [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  entryOffset);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  entryOffset);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  -1  :(int)Math.ceil(buf,  offset  +  entryOffset);	  return(numToRead    <    0)?    -1    :(int)Math.ceil(buf,    offset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
145	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getLength());  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  if(entrySize  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getLength());  }  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getLength());  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
146	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getKey());  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  if(entrySize  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getKey());  }  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getKey());  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
147	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getValue());  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  if(entrySize  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getValue());  }  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getValue());  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
148	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  if(entrySize  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
149	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getId());  }  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  if(entrySize  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getId());  }  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	if(entrySize  >  entrySize)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  currEntry.setHitEOF(currEntry.getId());  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
150	[BUG]  [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.pow(10,  entrySize);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(entrySize  >=  0)?  -1  :(int)Math.pow(10,  entrySize);  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entrySize  >=  0)?  -1  :(int)Math.pow(10,  entrySize);	  return(totalRead    >=    0)?    -1    :(int)Math.pow(10,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
151	[BUG]  [BUGGY]  return(numToRead  <  0)?  1  :  1;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(numToRead  <  0)?  1  :  1;  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(numToRead  <  0)?  1  :  1;	  return(numToRead    <    0)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
152	[BUG]  [BUGGY]  return(entryOffset  >  entrySize)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {    [BUGGY]  return(entryOffset  >  entrySize)?  -1  :  1;  [BUGGY]    }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	573	573	1	replace	return(entryOffset  >  entrySize)?  -1  :  1;	  return(numToRead    >    entrySize)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
