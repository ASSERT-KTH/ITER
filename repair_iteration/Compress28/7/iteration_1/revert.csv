projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return-1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>entrySize)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>entrySize)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead>=0)?-1:(int)Math.rint(offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead>=0)?-1:(int)Math.floor(offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?-1:(int)Math.floor(offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead>=0)?-1:(int)Math.pow(10,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(10,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.rint(offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.floor(numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(10,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(byte)Math.pow(10,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(10.0,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(10,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(20,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(12,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>numToRead)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<entrySize)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>0)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==entrySize)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=entrySize)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>entryOffset)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.floor(buf,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.floor(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(byte)Math.floor(numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.floor(buf,offset+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.log(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.rint(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>=0)?-1:(int)Math.rint(buf,offset,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>=0)?-1:(int)Math.rint(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?-1:(int)Math.rint(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>=0)?-1:(int)Math.rint(offset,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>=0)?-1:(int)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead>=0)?-1:(int)Math.rint(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.floor(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?-1:(int)Math.floor(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?-1:(int)Math.floor(offset+totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?-1:(int)Math.floor(buf,offset+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?-1:(int)Math.floor(buf,offset+totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.floor(offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?-1:(int)Math.floor(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset+1,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset+entrySize,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.ceil(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset+numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.ceil(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573Throwables.thrownewIllegalStateException("");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("".getMessage());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfile:"+buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfile:"+buf.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfromfile:"+buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfile:"+buf);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.floor(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>=0)?-1:(int)Math.floor(offset+totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead>=0)?-1:(int)Math.floor(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>=0)?-1:(int)Math.floor(buf,offset+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>=0)?-1:(int)Math.floor(buf,offset+totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>numToRead)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>0)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<entrySize)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==entrySize)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=entrySize)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>entryOffset)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?1:(int)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(byte)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>0)?-1:(int)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<=0)?-1:(int)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<=0)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<1)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:2;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:2;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:1L;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead==0)record(buf,offset,numToRead);if(hasHitEOF||entryOffset>=entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead==0)record(buf,offset,numToRead);if(hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead==0)record(buf,offset,numToRead);if(!hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead==0)record(buf,offset,numToRead);if(!hasHitEOF||entryOffset>=entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intch=is.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>=0)?-1:(int)Math.pow(10,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.pow(10,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?-1:(int)Math.pow(10,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>>0)?-1:(int)Math.pow(10,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.pow(10,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead>=0)?-1:(int)Math.pow(10,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?-1:(int)Math.pow(10,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=is.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(!hasHitEOF){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(!hasHitEOF&&entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=i.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=is.read(buf,offset,numToRead);returncurrEntrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573this.currEntry=currEntry.getValue();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>totalRead)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead!=0)?-1:(int)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset+entrySize,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset+entryOffset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.floor(offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>=0)?-1:(int)Math.floor(offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>=0)?-1:(int)Math.floor(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intch=currEntry.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(!hasHitEOF){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead>=0)?0:totalRead;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?0:totalRead;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.floor(buf,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.floor(numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.floor(numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.rint(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?-1:(int)Math.floor(offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(1L,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?-1:(int)Math.pow(10,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead>0)?-1:(int)Math.pow(10,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize!=0)?-1:(int)Math.pow(10,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>0){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(currEntry==null){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>0){thrownewIllegalStateException("");}else{System.arraycopy(buf,offset,buf,offset,entrySize);totalRead=is.read(buf,offset,entrySize);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>0){thrownewIllegalStateException("");}else{System.arraycopy(buf,offset,buf,offset,entrySize);totalRead=is.read(buf,offset,entryOffset);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>0){thrownewIllegalStateException("");}else{System.arraycopy(buf,offset,buf,offset,entrySize);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead!=0)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=currEntry.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=currEntry.length;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573ch=is.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=is.read(buf,offset,entrySize);if(currEntrySize>0){returncurrEntrySize;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=currEntry.getSize();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead>0)?-1:(int)Math.floor(offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.floor(buf,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("Cannotreadablockentry:");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOF,expectingentryoffset:"+entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfromfile:");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfromfile:"+buf.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOF,expectingentryoffset:");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfromfile:"+offset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?0:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIOException("");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?0:buf.length;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>entrySize)?0:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(10,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(1,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(10,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize<0)?-1:(int)Math.ceil(buf,offset+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset+entryOffset,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset+entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>entrySize){for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getLength());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>entrySize){for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getKey());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>entrySize){for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getValue());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>entrySize){for(inti=0,len=buf.length;i<len;++i){buffer[i]=is.read(buf,offset,i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>entrySize){for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getId());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>=0)?-1:(int)Math.pow(10,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entryOffset>entrySize)?-1:1;
