projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return-1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>entrySize)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>entrySize)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead>=0)?-1:(int)Math.rint(offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead>=0)?-1:(int)Math.floor(offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?-1:(int)Math.floor(offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead>=0)?-1:(int)Math.pow(10,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(10,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.rint(offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.floor(numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(10,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(byte)Math.pow(10,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(10.0,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(10,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(20,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(12,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>numToRead)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<entrySize)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>0)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==entrySize)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=entrySize)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>entryOffset)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.floor(buf,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.floor(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(byte)Math.floor(numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.floor(buf,offset+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.log(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.rint(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>=0)?-1:(int)Math.rint(buf,offset,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>=0)?-1:(int)Math.rint(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?-1:(int)Math.rint(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>=0)?-1:(int)Math.rint(offset,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>=0)?-1:(int)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead>=0)?-1:(int)Math.rint(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.floor(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?-1:(int)Math.floor(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?-1:(int)Math.floor(offset+totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?-1:(int)Math.floor(buf,offset+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?-1:(int)Math.floor(buf,offset+totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.floor(offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?-1:(int)Math.floor(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset+1,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset+entrySize,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.ceil(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset+numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.ceil(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573Throwables.thrownewIllegalStateException("");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("".getMessage());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfile:"+buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfile:"+buf.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfromfile:"+buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfile:"+buf);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.floor(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>=0)?-1:(int)Math.floor(offset+totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead>=0)?-1:(int)Math.floor(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>=0)?-1:(int)Math.floor(buf,offset+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>=0)?-1:(int)Math.floor(buf,offset+totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>numToRead)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>0)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<entrySize)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==entrySize)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=entrySize)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>entryOffset)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?1:(int)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(byte)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>0)?-1:(int)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<=0)?-1:(int)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<=0)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<1)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:2;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:2;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:1L;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead==0)record(buf,offset,numToRead);if(hasHitEOF||entryOffset>=entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead==0)record(buf,offset,numToRead);if(hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead==0)record(buf,offset,numToRead);if(!hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead==0)record(buf,offset,numToRead);if(!hasHitEOF||entryOffset>=entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intch=is.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>=0)?-1:(int)Math.pow(10,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.pow(10,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?-1:(int)Math.pow(10,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>>0)?-1:(int)Math.pow(10,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.pow(10,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead>=0)?-1:(int)Math.pow(10,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?-1:(int)Math.pow(10,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=is.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(!hasHitEOF){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(!hasHitEOF&&entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=i.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=is.read(buf,offset,numToRead);returncurrEntrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573this.currEntry=currEntry.getValue();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>totalRead)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead!=0)?-1:(int)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset+entrySize,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset+entryOffset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.floor(offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>=0)?-1:(int)Math.floor(offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>=0)?-1:(int)Math.floor(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intch=currEntry.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(!hasHitEOF){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead>=0)?0:totalRead;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?0:totalRead;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.floor(buf,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.floor(numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.floor(numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.rint(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?-1:(int)Math.floor(offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(1L,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?-1:(int)Math.pow(10,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead>0)?-1:(int)Math.pow(10,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize!=0)?-1:(int)Math.pow(10,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>0){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(currEntry==null){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>0){thrownewIllegalStateException("");}else{System.arraycopy(buf,offset,buf,offset,entrySize);totalRead=is.read(buf,offset,entrySize);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>0){thrownewIllegalStateException("");}else{System.arraycopy(buf,offset,buf,offset,entrySize);totalRead=is.read(buf,offset,entryOffset);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>0){thrownewIllegalStateException("");}else{System.arraycopy(buf,offset,buf,offset,entrySize);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead!=0)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=currEntry.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=currEntry.length;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573ch=is.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=is.read(buf,offset,entrySize);if(currEntrySize>0){returncurrEntrySize;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=currEntry.getSize();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead>0)?-1:(int)Math.floor(offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.floor(buf,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("Cannotreadablockentry:");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOF,expectingentryoffset:"+entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfromfile:");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfromfile:"+buf.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOF,expectingentryoffset:");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfromfile:"+offset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?0:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIOException("");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?0:buf.length;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>entrySize)?0:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(10,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(1,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(10,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize<0)?-1:(int)Math.ceil(buf,offset+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset+entryOffset,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset+entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>entrySize){for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getLength());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>entrySize){for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getKey());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>entrySize){for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getValue());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>entrySize){for(inti=0,len=buf.length;i<len;++i){buffer[i]=is.read(buf,offset,i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>entrySize){for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getId());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>=0)?-1:(int)Math.pow(10,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entryOffset>entrySize)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.floor(buf,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.floor(buf,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.floor(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.floor(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>0)?-1:(int)Math.floor(numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.ceil(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(buf,offset,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(buf,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(12,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(10.0,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(20,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.floor(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.floor(buf,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.floor(buf,offset,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.floor(buf,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.floor(buf,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.floor(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?-1:(int)Math.pow(buf,offset,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?-1:(int)Math.pow(10,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?-1:(int)Math.pow(buf,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?-1:(int)Math.pow(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.pow(10,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intentrySize=entryOffset>entrySize){for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getKey());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getKey());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intentrySize=entryOffset>entrySize){for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getKey()
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intentrySize=entryOffset>entrySize){for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getKey());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intentrySize=entryOffset>entrySize){for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(entrySize);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intentrySize=entryOffset>entrySize){for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intentrySize=entryOffset>entrySize){for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getValue());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573||entrySize>0){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573readNow(){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573allowSkip(0L){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573||entrySize>0){thrownewIllegalStateException("".getMessage());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573||entrySize>0){thrownewIllegalStateException("".);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(byte)Math.rint(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(byte)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(byte)Math.rint(buf,offset,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(byte)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(byte)Math.rint(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>0)?-1:(byte)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead==0)record(buf,offset,totalRead);if(hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead==0)record(buf,offset,numToRead);if(hasHitEOF||entryOffset!=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead<0)record(buf,offset,numToRead);if(hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead!=0)record(buf,offset,numToRead);if(hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead==0)record(buf,offset,numToRead);if(hasHitEOF||entryOffset<entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead==0)record(buf,offset,numToRead);if(hasHitEOF||entryOffset>>entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?1:-1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?1L:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead!=0)?1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?2:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.rint(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.rint(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfromfile:"+buf,offset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfromfile:"+buf);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573Throwables.thrownewIllegalStateException("CannotreadEOFfromfile:"+offset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfromfile:"+entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573newIllegalStateException("CannotreadEOFfromfile:"+buf,offset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize<0)?-1:(int)Math.ceil(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize<0)?-1:(int)Math.ceil(buf,offset+numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize<=0)?-1:(int)Math.ceil(buf,offset+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numRecords<0)?-1:(int)Math.ceil(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize<0)?-1:(int)Math.ceil(buf,offset,entryOffset+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?-1:(int)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead>=0)?-1:(int)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>>0)?-1:(int)Math.rint(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead!=0)?-1:(int)Math.rint(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("Cannotread'"+buf.length+"'.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("Cannotread'"+buf.getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("Cannotread'"+buf.length+"'entrysize:"+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("Cannotread'"+buf.length+"'withentryoffset:"+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("Cannotread'"+buf.length+"'forentrysize:"+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("Cannotread'"+buf.length+"'withentrySize:"+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>=0)?-1:(int)Math.pow(10,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>0)?-1:(int)Math.pow(10,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.pow(10,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>=0)?-1:(int)Math.pow(buf,offset,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==entryOffset)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=entryOffset)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<entryOffset)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>=numToRead)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>>numToRead)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entryOffset>=numToRead)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>>entrySize)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(!hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573||hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573||!hasHitEOF&&entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(!hasHitEOF&&entryOffset>=totalRead){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(!hasHitEOF&&entryOffset>=numToRead){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>=numToRead)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entryOffset>=numToRead)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>>numToRead)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=entryOffset)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>>entrySize)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>>0)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>=0)?-1:(int)Math.pow(10,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.pow(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.pow(10,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.pow(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?0:totalRead;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead>0)?0:totalRead;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead>=0)?0:entrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead>=0)?0:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead>=0)?0:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(buf,offset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?1:(int)Math.pow(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(buf,offset+numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.pow(10,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(byte)Math.pow(10,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.pow(10,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=currEntry.read(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=currEntry.read(buf,offset,numToRead,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=currEntry.read(buf,offset,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=currEntry.read(buf,offset,numToRead,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=currEntry.read(buf,offset,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=currEntry.read(buf,offset,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?1:(int)Math.rint(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?1:(int)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?1:(byte)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?1:(int)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<1)?1:(int)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<=0)?1:(int)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?1:(int)Math.rint(buf,offset,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?0:totalRead;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?0:entrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?0:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?0:buf.length;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?0:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?0:numToRead;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize<numToRead)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entryOffset<numToRead)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<entrySize)?1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=entryOffset.getSize();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=this.currEntry.getSize();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=entrySize.getSize();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573longcurrEntrySize=currEntry.getSize();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=currEntry.getSize()+1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=i.getSize();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=currEntry.getSize()-1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.floor(buf,offset+totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?-1:(int)Math.ceil(buf,offset+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?1:(int)Math.floor(buf,offset+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?-1:(int)Math.pow(buf,offset,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?-1:(int)Math.pow(buf,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?-1:(int)Math.pow(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>0)?-1:(int)Math.rint(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intentrySize=entryOffset>entrySize){for(inti=0,len=buf.length;i<len;++i){buffer[i]=is.read(buf,offset,i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573for(inti=0,len=buf.length;i<len;++i){buffer[i]=is.read(buf,offset,i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>entryOffset){for(inti=0,len=buf.length;i<len;++i){buffer[i]=is.read(buf,offset,i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intentrySize=entryOffset>entrySize){for(inti=0,len=buf.length;i<len;++i){buffer[i]=is.read(buf,offset,0);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>entryOffset){for(inti=0,len=buf.length;i<len;++i){buffer[i]=is.read(buf,offset,0);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intentrySize=entryOffset>entrySize){for(inti=0,len=buf.length;i<len;++i){buffer[i]=is.read(buf,offset,i
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intentrySize=entryOffset>entrySize){for(inti=0,len=buf.length;i<len;++i){buffer[i]=is.read(buf,offset,numToRead);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>entryOffset)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entryOffset<entrySize)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entryOffset>0)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entryOffset>=entrySize)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entryOffset==entrySize)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?-1:(int)Math.floor(buf,offset+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead>=0)?-1:(int)Math.floor(buf,offset+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>>0)?-1:(int)Math.floor(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?-1:(int)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>0)?-1:(int)Math.rint(buf,offset,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize<0)?-1:(int)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize!=0)?-1:(int)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==numToRead)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entryOffset==numToRead)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==entryOffset)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==entrySize)?0:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:4;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:3;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?1:2;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(byte)Math.floor(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?1:(int)Math.floor(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead==0)record(buf,offset,totalRead);if(hasHitEOF||entryOffset>=entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead==0)record(buf,offset,numToRead);if(hasHitEOF||entryOffset!=entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead==0)record(buf,offset,numToRead);if(hasHitEOF||entryOffset<entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead!=0)record(buf,offset,numToRead);if(hasHitEOF||entryOffset>=entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead<0)record(buf,offset,numToRead);if(hasHitEOF||entryOffset>=entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead==0)record(buf,offset,numToRead);if(hasHitEOF||entryOffset>entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfile:"+buf,offset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfile:"+buf,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfile:"+buf,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfile:"+buf,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573Throwables.thrownewIllegalStateException("CannotreadEOFfile:"+buf);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfile:"+buf,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<=0)?-1:(int)Math.rint(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead==0)record(buf,offset,totalRead);if(!hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead==0)record(buf,offset,numToRead);if(!hasHitEOF||entryOffset!=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead<0)record(buf,offset,numToRead);if(!hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead!=0)record(buf,offset,numToRead);if(!hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead==0)record(buf,offset,numToRead);if(!hasHitEOF||entryOffset<entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead==0)record(buf,offset,numToRead);if(!hasHitEOF||entryOffset==entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573Throwables.thrownewIllegalStateException("CannotreadEOF,expectingentryoffset:");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOF,expectingentrysize:");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOF,expectingentryoffset:"+getHitEOF());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOF,expectingentryoffset:"+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOF,expectingentryoffset:"+buf.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOF,expectingentryoffset:"+length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfromfile:"+buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573Throwables.thrownewIllegalStateException("CannotreadEOFfromfile:"+buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfromfile:"+buf,offset,entrySize,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573newIllegalStateException("CannotreadEOFfromfile:"+buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead<0){thrownewIllegalStateException("CannotreadEOFfromfile:"+buf,offset,numToRead);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfromfile:"+buf,offset,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead!=0)?-1:(int)Math.floor(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>0)?-1:(int)Math.floor(buf,offset+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>=0)?-1:(int)Math.floor(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.ceil(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.ceil(buf,offset+1,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.ceil(buf,offset+entrySize,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.ceil(buf,offset+numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.ceil(buf,offset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(byte)Math.ceil(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.floor(buf,offset+1,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.floor(buf,offset,totalRead+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(byte)Math.floor(buf,offset+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.floor(buf,offset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.floor(buf,offset+numToRead,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.rint(buf,offset,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.rint(buf,offset,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.ceil(buf,offset+entryOffset,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset+1,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.ceil(buf,offset+entryOffset,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?1:(int)Math.ceil(buf,offset+entrySize,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>0)?-1:(int)Math.ceil(buf,offset+entryOffset,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset+1,entrySize,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset+1,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset+1,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.ceil(buf,offset+1,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>0)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize<numToRead)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>entrySize)?1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>entryOffset){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>totalRead){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>0){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize<entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entryOffset>entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>=entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573entrySize>entryOffset){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573ch=is.read(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573ch=is.read(buf,offset,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573ch=is.read(buf,offset,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573ch=is.read(buf,offset,numToRead,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573ch=currEntry.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573ch=is.read(buf,offset,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(byte)Math.pow(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(byte)Math.pow(10,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(byte)Math.pow(10,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(byte)Math.pow(10.0,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(byte)Math.pow(20,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(byte)Math.pow(12,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(byte)Math.pow(1,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>0)?-1:(int)Math.floor(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead>0)?-1:(int)Math.floor(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>0)?-1:(int)Math.floor(offset+totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>0)?-1:(int)Math.floor(buf,offset+totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead<0)?-1:(int)Math.floor(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?0:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?0:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>0)?0:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<1)?0:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<=0)?0:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>0)?-1:(int)Math.floor(offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize<0)?-1:(int)Math.floor(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>0)?-1:(int)Math.floor(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>>0)?-1:(int)Math.floor(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize!=0)?-1:(int)Math.floor(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(16,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.pow(20,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead!=0)?-1:(int)Math.pow(10,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573this.currEntry=currEntry.getKey();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573this.currEntry=currEntry.getValue()+1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573this.currEntry=currEntry.getCurrentEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573this.currEntry=currEntry.read();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573this.currEntry=currEntry.getNext();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573this.currEntry=currEntry.getURI();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset,totalRead+numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset,numToRead+numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.ceil(buf,offset+numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(byte)Math.floor(buf,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(byte)Math.ceil(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(byte)Math.log(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(byte)Math.floor(buf,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(byte)Math.floor(numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.ceil(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(byte)Math.ceil(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset,entrySize,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?1:(int)Math.ceil(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(!hasHitEOF||entryOffset>=entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(hasHitEOF||entryOffset>=entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(!hasHitEOF||entryOffset!=entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(!hasHitEOF||entryOffset==entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(hasHitEOF){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfile:"+buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573Throwables.thrownewIllegalStateException("CannotreadEOFfile:"+buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573newIllegalStateException("CannotreadEOFfile:"+buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfile:"+buf,offset,entrySize,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead<0){thrownewIllegalStateException("CannotreadEOFfile:"+buf,offset,numToRead);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset+entryOffset,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize<0)?-1:(int)Math.ceil(buf,offset+numToRead,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset+entrySize,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize<0)?-1:(int)Math.floor(buf,offset+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?-1:(int)Math.pow(10,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.pow(10.0,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.pow(20,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.pow(12,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<1)?1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<=0)?1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>0)?1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?1:-1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573Throwables.thrownewIllegalStateException("CannotreadEOFfromfile:");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfromfile:",hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfromfile:"+name);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfromfile:"+getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.ceil(buf,offset+entrySize,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset+entrySize,hasHitEOF,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?2:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=entrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=entryOffset.length;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=currEntry.length-1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=this.currEntry.length;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=currEntry.length+1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573longcurrEntrySize=currEntry.length;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.ceil(buf,offset+entryOffset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize<0)?-1:(int)Math.ceil(buf,offset+numToRead,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset+entrySize,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead!=0)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:0L;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>0)?-1:(int)Math.rint(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>>0)?-1:(int)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>0){System.arraycopy(buf,offset,buf,offset,entrySize);totalRead=is.read(buf,offset,entryOffset);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573readNow=is.read(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573||entrySize>0||hasHitEOF){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573||entrySize>0){thrownewIllegalStateException("");}else{System.arraycopy(buf,offset,buf,offset,entrySize);totalRead=is.read(buf,offset,entryOff
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573||entrySize>0){thrownewIllegalStateException("");}else{System.arraycopy(buf,offset,buf,offset,entrySize);totalRead=is.read(buf,offset,entryOffset);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573readNow=is.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573||entrySize>0){thrownewIllegalStateException("");}else{System.arraycopy(buf,offset,buf,offset,entrySize);totalRead=is.read(buf,offset,entry
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573||entrySize>0){thrownewIllegalStateException("");}else{System.arraycopy(buf,offset,buf,offset,entrySize);totalRead=is.read(buf,
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573||entrySize>0){thrownewIllegalStateException("");}else{System.arraycopy(buf,offset,buf,offset,entrySize);totalRead=is.read(buf,offset
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>0)?-1:(int)Math.ceil(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.ceil(buf,offset+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==numToRead)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entryOffset==numToRead)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entryOffset==entrySize)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(buf,0,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?1:(int)Math.pow(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead==0)record(buf,offset,totalRead);if(!hasHitEOF||entryOffset>=entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead==0)record(buf,offset,numToRead);if(!hasHitEOF||entryOffset!=entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead==0)record(buf,offset,numToRead);if(!hasHitEOF||entryOffset>entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead<0)record(buf,offset,numToRead);if(!hasHitEOF||entryOffset>=entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead!=0)record(buf,offset,numToRead);if(!hasHitEOF||entryOffset>=entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead==0)record(buf,offset,numToRead);if(!hasHitEOF||entryOffset<entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intch=currEntry.read(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intch=currEntry.read(buf,offset,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intch=currEntry.read(buf,offset,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573charch=currEntry.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intch=currEntry.read(buf,offset,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("Cannotreadablockentry:"+getHitEOF());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573Throwables.thrownewIllegalStateException("Cannotreadablockentry:");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("Cannotreadablockentry:"+entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("Cannotreadablockentry:"+offset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("Cannotreadablockentry:"+getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("Cannotreadablockentry:"+buf);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?1:(int)Math.rint(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=is.read(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=is.read(buf,offset,numToRead,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=is.read(buf,offset,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=is.read(buf,offset,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=is.read(buf,offset,numToRead,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=is.read(buf,offset,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?-1:(int)Math.floor(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?-1:(int)Math.floor(buf,offset,numToRead+totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?-1:(byte)Math.floor(buf,offset+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?-1:(int)Math.floor(buf,offset,entrySize+totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(offset==0)?-1:(int)Math.floor(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>0)?1:(int)Math.rint(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>>0)?-1:(int)Math.floor(buf,offset+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize!=0)?-1:(int)Math.floor(buf,offset+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getValue());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intentrySize=entryOffset>entrySize){for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getValu
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intentrySize=entryOffset>entrySize){for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getValue()
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intentrySize=entryOffset>entrySize){for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getValue());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead{0)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset,totalRead+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset+1,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(byte)Math.ceil(buf,offset+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset,entrySize+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>0)?1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.ceil(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfile:"+buf.length+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfile:"+buf.length+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573Throwables.thrownewIllegalStateException("CannotreadEOFfile:"+buf.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfile:"+buf.length+offset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfile:"+buf.length,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfile:"+buf.length+",hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(int)(totalRead==0)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?-1:2;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?-1:1L;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset,totalRead+entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset,numToRead+entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.ceil(buf,offset+entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset,entrySize+entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?-1:(int)Math.pow(buf,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?-1:(int)Math.pow(10.0,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?-1:(int)Math.floor(buf,offset+numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.floor(buf,offset+entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?1:(int)Math.floor(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.floor(buf,offset,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(byte)Math.floor(buf,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.floor(buf,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.floor(buf,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?1:(int)Math.floor(buf,offset,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573Throwables.thrownewIOException("");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIOException("Cannotreadthecurrentry:"+buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIOException("Unexpectedentrysize:");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIOException("CannotreadEOFfromfile:"+buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIOException("Unexpectedentrysize:"+buf.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?0:buf.length+1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?0:buf.length;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(buf<0)?0:buf.length;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?0:buf.length;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<=0)?0:buf.length;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>0)?0:buf.length;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=is.read(buf,offset,entrySize);returncurrEntrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=is.read(buf,offset,totalRead);returncurrEntrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573bytecurrEntrySize=is.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=is.read(buf,offset,numToRead);returncurrEntrySize+1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<totalRead)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==totalRead)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=totalRead)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<=totalRead)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<=0)?-1:2;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:2;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<1)?-1:2;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.floor(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.floor(buf,offset+numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.floor(buf,offset+1,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.floor(buf,offset+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.floor(buf,offset+entrySize,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.floor(buf,offset+entrySize,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573While(!hasHitEOF&&entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573||hasHitEOF){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573while(!hasHitEOF&&entryOffset>=entrySize){thrownewIllegalStateException("");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573while(!hasHitEOF&&entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573While(!hasHitEOF&&entryOffset!=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573pendingTarEntry(){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573While(!hasHitEOF){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>0)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>entrySize)?1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<1)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<1)?1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=1)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<1)?-1:1L;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573||entrySize>0){thrownewIllegalStateException("");}else{System.arraycopy(buf,offset,buf,offset,entrySize);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573||entrySize>0){thrownewIllegalStateException("");}else{System.arraycopy(buf,offset,buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573||entrySize<SMALL_BUFFER_SIZE){thrownewIllegalStateException("");}else{System.arraycopy(buf,offset,buf,offset,entrySize);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573||entryOffset>=entrySize){thrownewIllegalStateException("");}else{System.arraycopy(buf,offset,buf,offset,entrySize);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573||entrySize<SMALL_BUFFER_SIZE){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(byte)Math.floor(numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.log(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?1:(int)Math.ceil(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>0)?-1:(int)Math.ceil(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>0)?-1:(int)Math.pow(10,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead>0)?-1:(int)Math.pow(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead<0)?-1:(int)Math.pow(10,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead>0)?-1:(int)Math.pow(buf,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.floor(buf,offset+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.floor(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>numToRead)?0:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<entrySize)?0:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=entrySize)?0:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>entryOffset)?0:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(buf,1L,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(1L,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(byte)Math.pow(1L,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(1L,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(buf,offset+1L,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.pow(1L,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573Throwables.thrownewIllegalStateException("".getMessage());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573Throwables.thrownewIllegalStateException("",hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573Throwables.thrownewIllegalStateException("".length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573Throwables.thrownewIllegalStateException("Cannotreadacurrentry.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573Throwables.thrownewIllegalStateException("Cannotreadacurrentry:"+buf);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573Throwables.thrownewIllegalStateException("Recordedentrysize:"+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfromfile:"+buf.length+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfromfile:"+buf.length+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573Throwables.thrownewIllegalStateException("CannotreadEOFfromfile:"+buf.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfromfile:"+buf.length,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfromfile:"+buf.length+offset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfromfile:"+buf,offset+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?-1:(int)Math.floor(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(int)Math.floor(buf,offset+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?-1:(int)Math.floor(buf,offset+entrySize,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>0)?-1:(int)Math.pow(10,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize!=0)?-1:(int)Math.pow(10,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize<0)?-1:(int)Math.pow(10,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>>0)?-1:(int)Math.pow(10,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.rint(buf,offset,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?-1:(int)Math.rint(buf,offset,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize<0)?-1:(int)Math.pow(10,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(buf,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(10.0,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(20,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.rint(buf,offset,entrySize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(byte)Math.rint(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.rint(buf,offset,entrySize,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573While(currEntry!=null&&currEntry.length>0){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573While(currEntry!=null){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573safeTarEntry(){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573While(currEntry==null){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573While(currEntry!=null){currEntry=currEntry.getValue();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573While(currEntry!=null){thrownewIllegalStateException("".getMessage());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573While(currEntry!=null){currEntry=currEntry.getKey();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.log(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(byte)Math.floor(offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?-1:(int)Math.floor(offset+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?-1:(int)Math.floor(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?-1:(int)Math.floor(buf,offset,entryOffset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intch=is.read(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intch=is.read(buf,offset,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intch=is.read(buf,offset,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573charch=is.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573Integerch=is.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=is.read(buf,offset,numToRead);if(currEntrySize>0){returncurrEntrySize;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=is.read(buf,offset,numToRead);if(currEntrySize<0){returncurrEntrySize;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=is.read(buf,offset,entryOffset);if(currEntrySize>0){returncurrEntrySize;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=is.read(buf,offset,numToRead);if(currEntrySize>=0){returncurrEntrySize;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573IntegercurrEntrySize=is.read(buf,offset,numToRead);if(currEntrySize>0){returncurrEntrySize;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=is.read(buf,offset,numToRead);if(currEntrySize==0){returncurrEntrySize;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=rest.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573IntegercurrEntrySize=is.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573longcurrEntrySize=i.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573bytecurrEntrySize=i.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=i.read(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(buf,offset,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(buf,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(i==0)?-1:(int)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(int)Math.rint(buf,offset,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getLength());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intentrySize=entryOffset>entrySize){for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getLength());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intentrySize=entryOffset>entrySize){for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getLength());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intentrySize=entryOffset>entrySize){for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getLength()
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intentrySize=entryOffset>entrySize){for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.get
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intentrySize=entryOffset>entrySize){for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getUpperBound());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intentrySize=entryOffset>entrySize){for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getId());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getId());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intentrySize=entryOffset>entrySize){for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getI
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intentrySize=entryOffset>entrySize){for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getId());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intentrySize=entryOffset>entrySize){for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getId()
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(0,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(2,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.pow(1,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.pow(1,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(100.0,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(20.0,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.pow(10.0,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(10.0,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.log(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.log(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?1:(int)Math.log(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.log(buf,offset,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<entryOffset)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entryOffset<numToRead)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?-1:(int)Math.ceil(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?-1:(int)Math.log(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?1:(int)Math.floor(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1L:1L;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOF,expectingentryoffset:"+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573Throwables.thrownewIllegalStateException("CannotreadEOF,expectingentryoffset:"+entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOF,expectingentryoffset:"+entryOffset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOF,expectingentryoffset:"+entryOffset+",hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOF,expectingentrysize:"+entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.floor(buf,offset+totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<=0)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.pow(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.pow(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?1:(int)Math.pow(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>0)?-1:(int)Math.pow(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<=entrySize)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfromfile:"+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>0)?-1:(int)Math.floor(offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>=0)?-1:(int)Math.floor(offset+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead>=0)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(20,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(1L,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573ch=is.read(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>0)?1:(int)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?1:(int)Math.rint(buf,offset,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.floor(buf,offset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("Cannotread'"+buf.getText());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("Cannotread'"+buf.getLength());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfile:"+buf.getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("Cannotread'"+buf.getBytes());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("Cannotread'"+buf.getFullName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.pow(10.0,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(10.0,buf);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(1,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.ceil(buf,offset+entryOffset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(!hasHitEOF&&entryOffset>entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(!hasHitEOF&&entryOffset==totalRead){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize!=0){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573||!hasHitEOF){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573allowReset){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573safeTarEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573safeTarEntry(currEntry,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573wires.add(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573||!hasHitEOF){thrownewIllegalStateException("".);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead>=0)?-1:(int)Math.floor(buf,offset+entrySize,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead==0)record(buf,offset,entrySize);if(hasHitEOF||entryOffset>=entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead==0)record(buf,offset,-1);if(hasHitEOF||entryOffset>=entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset+1,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(byte)Math.ceil(buf,offset+numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?-1:(int)Math.pow(10,entryOffset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?-1:(int)Math.pow(20,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=currEntry.getUpperBound();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=currEntry.getRecordSize();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=currEntry.getCurrentSize();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573handleMissingRecord(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIOException("CannotreadEOFfile:"+buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIOException("CannotreadEOFfile:"+buf.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIOException("CannotreadEOFforfile:"+buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIOException("CannotreadEOFforfile:"+buf.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead+entrySize)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?-1:(int)Math.pow(20,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?-1:(int)Math.pow(10,entrySize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?-1:(int)Math.pow(10,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?-1:(int)Math.floor(buf,offset+entrySize,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?-1:(int)Math.floor(buf,offset+entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>0){thrownewIllegalStateException("".getMessage());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>0){thrownewIllegalStateException("".);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=currEntry.length+numToRead;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(1,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?-1:(int)Math.log(buf,offset+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(hasHitEOF||!entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(!hasHitEOF){return-1;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.pow(10,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead>=0)?0:buf.length;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573newIllegalStateException("CannotreadEOFfromfile:"+buf);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573newIllegalStateException("CannotreadEOFfromfile:"+buf.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>>0)?-1:(int)Math.floor(buf,offset+totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entryOffset>numToRead)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.ceil(buf,offset+entrySize,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>=0)?-1:(int)Math.pow(1L,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>=0)?-1:(int)Math.pow(20,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(10,totalRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(1L,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entryOffset>entrySize){for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getLength());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>0){for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getLength());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>0){thrownewIllegalStateException("CannotreadEOF,expectingentryoffset:"+entryOffset);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573newIllegalStateException("CannotreadEOF,expectingentryoffset:"+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead<0)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.pow(1L,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?1:(byte)Math.rint(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead!=0)?-1:(byte)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<=0)?-1:(byte)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573newIllegalStateException("CannotreadEOFfile:"+buf.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(buf!=null){thrownewIllegalStateException("CannotreadEOFfile:"+buf.length);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(32,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(40,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573logger.warning("CannotreadEOFfile:"+buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>0)?-1:2;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573newIllegalStateException("CannotreadEOFfile:"+buf,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573newIllegalStateException("CannotreadEOFfile:"+buf,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=is.read(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=is.read(buf,offset,numToRead+1);returncurrEntrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>>0)?-1:(int)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(hasHitEOF||entryOffset>=entrySize){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573readNow>0){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573readNow(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573readNow();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>recordSize)?0:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.floor(buf,offset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573Throwables.thrownewIllegalStateException("",numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573Throwables.thrownewIllegalStateException("".);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573Throwables.thrownewIllegalStateException("")
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==1)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>1)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.rint(buf,offset,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?-1:(int)Math.pow(1L,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?-1:(int)Math.pow(20,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entryOffset>entrySize){for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getValue());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>0){for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getValue());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entryOffset>entrySize){for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getKey());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead!=0)?-1:(int)Math.ceil(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize<0)?-1:(int)Math.floor(buf,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>0){for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getKey());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=is.read(buf,offset,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset,entryOffset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.ceil(buf,offset+entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead!=0)?-1:(int)Math.pow(10,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead!=0)?-1:(int)Math.pow(10,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intch=is.read(buf,offset,numToRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intch=is.read(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intch=is.read(buf,offset,numToRead,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=is.read(buf,offset,totalRead);if(currEntrySize>0){returncurrEntrySize;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=is.read(buf,offset,0);if(currEntrySize>0){returncurrEntrySize;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>0)?-1:(int)Math.floor(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?1:(int)Math.floor(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>0){System.arraycopy(buf,offset,buf,offset,entrySize);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead!=0)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573logger.warning("CannotreadEOFfromfile:"+buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573this.currEntry=currEntry.getRawEntry();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOF,expectingentryentrysize:");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOF,expectingentryentryoffset:");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize<0)?-1:(int)Math.ceil(buf,offset+1,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset,entrySize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>0)?-1:(int)Math.ceil(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entryOffset>entrySize)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(0L,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(1L+1,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?-1:(byte)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?-1:(int)Math.rint(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead!=0)?-1:(int)Math.ceil(buf,offset+entryOffset,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead==0)record(buf,offset,-1);if(!hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead==0)record(buf,offset,entrySize);if(!hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=currEntry.read(buf,offset,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead>0)?-1:(int)Math.pow(10,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(int>0)?-1:(int)Math.pow(10,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:1L+1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(buf,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead!=0)?-1:(int)Math.pow(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>0)?-1:(int)Math.ceil(buf,offset+entrySize,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(buf.length<0)?0:buf.length;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>0){System.arraycopy(buf,offset,buf,offset,entryOffset);totalRead=is.read(buf,offset,entrySize);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>0){System.arraycopy(buf,offset,buf,offset,entryLimit);totalRead=is.read(buf,offset,entryOffset);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>0){System.arraycopy(buf,offset,buf,offset,entryHitEOF);totalRead=is.read(buf,offset,entryOffset);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead==0)record(buf,offset,-1);if(!hasHitEOF||entryOffset>=entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead==0)record(buf,offset,numToRead+1);if(!hasHitEOF||entryOffset>=entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.cos(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead<0)?1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(byte)Math.floor(buf,offset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead==0)record(buf,offset,entrySize);if(hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead==0)record(buf,offset,-1);if(hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead<0)?0:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entryOffset>entrySize){for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getId());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>0){for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getId());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(buf!=null){thrownewIllegalStateException("CannotreadEOFfromfile:"+buf.length);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfromfile:"+buf.length,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entryOffset>numToRead)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573read(){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573wires.put(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573safeTarEntry(currEntry);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.ceil(buf,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.floor(buf,offset+entrySize,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.floor(buf,offset+entrySize,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.floor(buf,offset+entrySize,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entryOffset>=entrySize)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead+entrySize)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.ceil(buf,offset+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>access){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573Entry<?>currEntry=entryOffset?entrySize:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?-1:(int)Math.ceil(buf,offset+totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>=0)?-1:(int)Math.ceil(buf,offset+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.ceil(buf,offset+entrySize,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset+entrySize,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(byte)Math.pow(0,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>=0)?-1:(int)Math.ceil(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(byte)Math.floor(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.floor(buf,offset+entrySize,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>0){thrownewIllegalStateException("Cannotreadablockentry:");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573newIllegalStateException("Cannotreadablockentry:");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573newIllegalStateException("Cannotreadablockentry:"+getHitEOF());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entryOffset>entrySize){for(inti=0,len=buf.length;i<len;++i){buffer[i]=is.read(buf,offset,i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>0){for(inti=0,len=buf.length;i<len;++i){buffer[i]=is.read(buf,offset,i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entryOffset>entrySize){for(inti=0,len=buf.length;i<len;++i){buffer[i]=is.read(buf,offset,0);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.rint(buf,offset,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset+totalRead,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entryOffset>entrySize){for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getName());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entryOffset>entrySize){for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getEdge());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intentrySize=entryOffset>entrySize){for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getName());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?2:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?-1:(int)Math.pow(1,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIOException("CannotreadEOFforpath:");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIOException("CannotreadEOFfromfile:");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIOException("CannotreadEOFforpath:"+offset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIOException("CannotreadEOFforpath:"+fileName);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIOException("CannotreadEOForEOFfile.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(byte)Math.pow(10,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entryOffset>entrySize){for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getUpperBound());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entryOffset>entrySize){for(inti=0,len=buf.length;i<len;--i){currEntry.setHitEOF(currEntry.getLength());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>entrySize)?-1:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.floor(buf,offset+entryOffset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset,entryOffset+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.rint(buf,offset,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>0)?-1:(int)Math.ceil(buf,offset+1,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize<0)?-1:(int)Math.ceil(buf,offset+numToRead,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfile:"+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfile:"+entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?-1:(int)Math.floor(buf,offset,entryOffset+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?-1:(int)Math.floor(buf,offset+numToRead,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.floor(buf,offset+1,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(20,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.floor(buf,offset+1,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.floor(buf,offset,entrySize+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.floor(buf,offset,entryOffset+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573this.currEntry=currEntry.getRawParent();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset+totalRead,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?0:entryOffset;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?0:offset;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?-1:(int)Math.pow(10,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entryOffset<entrySize)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(byte)Math.rint(buf,offset,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(int)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573Throwables.thrownewIllegalStateException("Cannotreadacachedentry.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573Throwables.thrownewIllegalStateException("Cannotreadastringentry.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573Throwables.thrownewIllegalStateException("Cannotreadacurrentry:");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("CannotreadEOFfromfile:"+buf,offset,numToRead);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573ThrownewIllegalStateException("CannotreadEOFfromfile:"+buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(10,entrySize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(10,entryOffset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(12,numToRead+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=currEntry.getSize()+entryOffset;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=entry.getSize();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>0)?-1:(int)Math.rint(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfromfile:"+file);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfromfile:"+getHitEOF());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfromfile:"+toString());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==EOF)?-1:(int)Math.floor(buf,offset+numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573IntegercurrEntry=entryOffset>entrySize){for(inti=0,len=buf.length;i<len;++i){currEntry.setHitEOF(currEntry.getKey());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intch=hasHitEOF?currEntry.read(buf,offset,numToRead):currEntry.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573Integerch=currEntry.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOF,expectingentryentryoffset:"+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573ThrownewIllegalStateException("CannotreadEOF,expectingentryoffset:"+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573longcurrEntrySize=is.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573charcurrEntrySize=is.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead==0)?-1:(int)Math.floor(buf,offset+entryOffset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize==0)?1:(int)Math.pow(10,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573Entry<?>currEntry=entrySize?entryOffset:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=currEntry.length-entryOffset;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=entry.length;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=entryOffset;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>entryOffset)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.ceil(buf,offset,entrySize+numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>0)?-1:(int)Math.ceil(buf,offset+numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entryOffset>entrySize)?0:1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead>0)record(buf,offset,numToRead);if(!hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead>=0)record(buf,offset,numToRead);if(!hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize==0)record(buf,offset,numToRead);if(!hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize==0)record(buf,offset,numToRead);if(hasHitEOF||entryOffset>=entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead>0)record(buf,offset,numToRead);if(hasHitEOF||entryOffset>=entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead>=0)record(buf,offset,numToRead);if(hasHitEOF||entryOffset>=entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize>entrySize)?-1:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead>0)record(buf,offset,numToRead);if(hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead>=0)record(buf,offset,numToRead);if(hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize==0)record(buf,offset,numToRead);if(hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>0){thrownewIllegalStateException("");}else{System.arraycopy(buf,offset,buf,offset,entryOffset,entrySize);totalRead=is.read(buf,offset,entryOffset);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573readNow>0){thrownewIllegalStateException("");}else{System.arraycopy(buf,offset,buf,offset,entrySize);totalRead=is.read(buf,offset,entryOffset);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573||hasHitEOF&&entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>=entryOffset){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(!hasHitEOF&&entryOffset<totalRead){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573&&entryOffset>=entrySize){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("CannotreadEOFfile:"+buf,offset,numToRead);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfile:"+buf,offset,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573[Delete]
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573read(){thrownewIllegalStateException("Noentrysize(");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573read(){thrownewIllegalStateException("Tarentrymustbeinitialized.");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573readNow(){thrownewIllegalStateException("Noentrysize(");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.floor(buf,offset+entrySize,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.floor(buf,offset+1,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.floor(buf,offset+entrySize,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.floor(buf,offset+entryOffset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:1L;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>0){System.arraycopy(buf,offset,buf,offset,entrySize);totalRead=is.read(buf,offset,entrySize);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(hasHitEOF||entryOffset>=entrySize){thrownewIllegalStateException("");}else{System.arraycopy(buf,offset,buf,offset,entrySize);totalRead=is.read(buf,offset,entrySize);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573readNow>0){thrownewIllegalStateException("");}else{System.arraycopy(buf,offset,buf,offset,entrySize);totalRead=is.read(buf,offset,entrySize);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(totalRead<0)?0:buf.length;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("Cannotreadastringentry.");
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("Cannotreadablockentry:"+getClass().getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("Cannotreadablockentry:"+buf.getName());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("Cannotreadablockentry:"+buf.toString());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("Cannotreadablockentry:"+buf.getLength());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.floor(buf,offset+entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize<0)?-1:(int)Math.floor(buf,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize<0)?-1:(int)Math.floor(buf,offset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>0)?-1:(int)Math.ceil(buf,offset+entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.rint(buf,offset,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(1,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>0)?-1:(int)Math.pow(1,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(byte)Math.floor(buf,offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(byte)Math.floor(buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573while(!hasHitEOF){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573allowSkip(shouldReset){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfile:"+buf.length,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfile:"+buf,offset+length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573allowSkip("){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573allowSkip(false){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573||entrySize>SMALL_BUFFER_SIZE){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("Cannotreadablockentry:"+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize>entrySize){thrownewIllegalStateException("Cannotreadablockentry:");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573newIllegalStateException("Cannotreadablockentry:"+entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573allowSkip(inti,hasHitEOF)){thrownewIllegalStateException("");}else{System.arraycopy(buf,offset,buf,offset,entrySize);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573readNow(){thrownewIllegalStateException("");}else{System.arraycopy(buf,offset,buf,offset,entrySize);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573allowSkip(inti,hasHitEOF||entryOffset>entrySize)){thrownewIllegalStateException("");}else{System.arraycopy(buf,offset,buf,offset,entrySize);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573allowSkip(inti,hasHitEOF)){thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573allowSkip(inti,hasHitEOF)){thrownewIllegalStateException("");}else{System.arraycopy(buf,offset,buf,offset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>0)?-1:(int)Math.pow(10.0,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?-1:(int)Math.pow(16,totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(entrySize==0)record(buf,offset,numToRead);if(!hasHitEOF||entryOffset>=entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead>0)record(buf,offset,numToRead);if(!hasHitEOF||entryOffset>=entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573if(numToRead>=0)record(buf,offset,numToRead);if(!hasHitEOF||entryOffset>=entrySize){return0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfromfile:"+buf,offset+length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOFfromfile:"+buf,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(entrySize<0)?-1:(int)Math.floor(buf,offset+totalRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead>=0)?-1:(int)Math.pow(10,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.pow(10,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead==0)?-1:(int)Math.pow(1,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573IntegercurrEntrySize=currEntry.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573bytecurrEntrySize=currEntry.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573longcurrEntrySize=currEntry.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573intcurrEntrySize=this.currEntry.read(buf,offset,numToRead);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573return(numToRead<0)?0:buf.length-1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java573thrownewIllegalStateException("CannotreadEOF,expectingentryentryoffset:"+entryOffset);
