bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  long  available  =  entrySize  /  numToSkip;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  entrySize  /  numToSkip;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  /  numToSkip;	  long    available    =    entrySize    /    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
2	[BUG]  [BUGGY]  long  available  =  entryOffset  /  entrySize;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  entryOffset  /  entrySize;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryOffset  /  entrySize;	  long    available    =    entrySize    /    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
3	[BUG]  [BUGGY]  long  available  =  numToSkip  /  entryOffset;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  numToSkip  /  entryOffset;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  numToSkip  /  entryOffset;	  long    available    =    entrySize    /    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
4	[BUG]  [BUGGY]  long  available  =  entrySize  /  blockSize;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  entrySize  /  blockSize;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  /  blockSize;	  long    available    =    entrySize    /    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
5	[BUG]  [BUGGY]  long  available  =  entrySize  /  recordSize;  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  entrySize  /  recordSize;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  /  recordSize;	  long    available    =    entrySize    /    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
6	[BUG]  [BUGGY]  long  available  =  entryOffset  /  size;  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  entryOffset  /  size;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryOffset  /  size;	  long    available    =    entrySize    /    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
7	[BUG]  [BUGGY]  long  available  =  numToSkip  -  entrySize;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  numToSkip  -  entrySize;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  numToSkip  -  entrySize;	  long    available    =    entrySize    -    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
8	[BUG]  [BUGGY]  long  available  =  entrySize  -  numToSkip  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  entrySize  -  numToSkip  +  1;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  -  numToSkip  +  1;	  long    available    =    entrySize    -    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
9	[BUG]  [BUGGY]  long  available  =  this.entrySize  -  numToSkip;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  this.entrySize  -  numToSkip;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entrySize  -  numToSkip;	  long    available    =    entrySize    -    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
10	[BUG]  [BUGGY]  long  available  =  entryOffset  -  numToSkip;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  entryOffset  -  numToSkip;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryOffset  -  numToSkip;	  long    available    =    entrySize    -    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
11	[BUG]  [BUGGY]  long  available  =  entrySize  -  numToSkip,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  entrySize  -  numToSkip,  hasHitEOF;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  -  numToSkip,  hasHitEOF;	  long    available    =    entrySize    -    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
12	[BUG]  [BUGGY]  long  available  =  entryOffset  -  this.entrySize;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  entryOffset  -  this.entrySize;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryOffset  -  this.entrySize;	  long    available    =    this.entrySize    -    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
13	[BUG]  [BUGGY]  long  available  =  entrySize  -  this.entrySize;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  entrySize  -  this.entrySize;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  -  this.entrySize;	  long    available    =    this.entrySize    -    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
14	[BUG]  [BUGGY]  long  available  =  entrySize  -  this.entryOffset;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  entrySize  -  this.entryOffset;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  -  this.entryOffset;	  long    available    =    this.entrySize    -    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
15	[BUG]  [BUGGY]  long  available  =  entrySize  -  this.blockSize;  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  entrySize  -  this.blockSize;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  -  this.blockSize;	  long    available    =    this.entrySize    -    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
16	[BUG]  [BUGGY]  long  available  =  this.entrySize  /  entryOffset;  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  this.entrySize  /  entryOffset;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entrySize  /  entryOffset;	  long    available    =    this.entrySize    -    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
17	[BUG]  [BUGGY]  long  available  =  numToSkip  -  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  numToSkip  -  1;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  numToSkip  -  1;	  long    available    =    entrySize    -    1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
18	[BUG]  [BUGGY]  long  available  =  entrySize  -  1L;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  entrySize  -  1L;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  -  1L;	  long    available    =    entrySize    -    1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
19	[BUG]  [BUGGY]  long  available  =  entrySize  /  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  entrySize  /  1;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  /  1;	  long    available    =    entrySize    -    1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
20	[BUG]  [BUGGY]  long  available  =  entryOffset  -  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  entryOffset  -  1;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryOffset  -  1;	  long    available    =    entrySize    -    1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
21	[BUG]  [BUGGY]  long  available  =  this.entrySize  -  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  this.entrySize  -  1;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entrySize  -  1;	  long    available    =    entrySize    -    1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
22	[BUG]  [BUGGY]  long  available  =  entrySize  -  2;  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  entrySize  -  2;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  -  2;	  long    available    =    entrySize    -    1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
23	[BUG]  [BUGGY]  int  available  =  getOffset(numToSkip);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  int  available  =  getOffset(numToSkip);  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  getOffset(numToSkip);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
24	[BUG]  [BUGGY]  int  available  =  getOffset();  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  int  available  =  getOffset();  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  getOffset();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
25	[BUG]  [BUGGY]  InputStream  is  =  this.currEntry.getInputStream();  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  InputStream  is  =  this.currEntry.getInputStream();  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	InputStream  is  =  this.currEntry.getInputStream();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
26	[BUG]  [BUGGY]  InputStream  is  =  getInputStream();  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  InputStream  is  =  getInputStream();  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	InputStream  is  =  getInputStream();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
27	[BUG]  [BUGGY]  int  available  =  getVersion();  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  int  available  =  getVersion();  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  getVersion();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
28	[BUG]  [BUGGY]  byte[]  available  =  getAvailableFields();  [CE]  illegal  start  of  type  [FE]                                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  byte[]  available  =  getAvailableFields();  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	byte[]  available  =  getAvailableFields();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
29	[BUG]  [BUGGY]  int  available  =  getOffset(numToSkip).length();  [CE]  illegal  start  of  type  [FE]                                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  int  available  =  getOffset(numToSkip).length();  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  getOffset(numToSkip).length();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
30	[BUG]  [BUGGY]  long  available  =  entrySize  -  getEntryOffset();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  entrySize  -  getEntryOffset();  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  -  getEntryOffset();	  long    available    =    entryOffset    -    entrySize;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
31	[BUG]  [BUGGY]  long  available  =  entrySize  -  blockSize;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  entrySize  -  blockSize;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  -  blockSize;	  long    available    =    entryOffset    -    entrySize;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
32	[BUG]  [BUGGY]  long  available  =  entrySize  *  numToSkip;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  entrySize  *  numToSkip;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  *  numToSkip;	  long    available    =    entrySize    *    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
33	[BUG]  [BUGGY]  long  available  =  entryOffset  *  entrySize;  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  entryOffset  *  entrySize;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryOffset  *  entrySize;	  long    available    =    entrySize    *    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
34	[BUG]  [BUGGY]  long  available  =  entryOffset  *  numToSkip;  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  entryOffset  *  numToSkip;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryOffset  *  numToSkip;	  long    available    =    entrySize    *    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
35	[BUG]  [BUGGY]  long  available  =  numToSkip  *  entryOffset;  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  numToSkip  *  entryOffset;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  numToSkip  *  entryOffset;	  long    available    =    entrySize    *    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
36	[BUG]  [BUGGY]  long  available  =  entrySize  *  recordSize;  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  entrySize  *  recordSize;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  *  recordSize;	  long    available    =    entrySize    *    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
37	[BUG]  [BUGGY]  long  available  =  entrySize  *  this.blockSize;  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  entrySize  *  this.blockSize;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  *  this.blockSize;	  long    available    =    entrySize    *    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
38	[BUG]  [BUGGY]  int  available  =  numToSkip  -  entryOffset;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  int  available  =  numToSkip  -  entryOffset;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  numToSkip  -  entryOffset;	  long    available    =    numToSkip    -    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
39	[BUG]  [BUGGY]  long  available  =  entryStart  -  numToSkip;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  entryStart  -  numToSkip;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryStart  -  numToSkip;	  long    available    =    numToSkip    -    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
40	[BUG]  [BUGGY]  long  available  =  numToSkip  -  recordSize;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  numToSkip  -  recordSize;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  numToSkip  -  recordSize;	  long    available    =    entrySize    -    recordSize;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
41	[BUG]  [BUGGY]  long  available  =  entryOffset  -  recordSize;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  entryOffset  -  recordSize;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryOffset  -  recordSize;	  long    available    =    entrySize    -    recordSize;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
42	[BUG]  [BUGGY]  long  available  =  this.entrySize  -  recordSize;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  this.entrySize  -  recordSize;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entrySize  -  recordSize;	  long    available    =    entrySize    -    recordSize;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
43	[BUG]  [BUGGY]  long  available  =  entrySize  -  this.entryLimit;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  entrySize  -  this.entryLimit;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  -  this.entryLimit;	  long    available    =    this.entrySize    -    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
44	[BUG]  [BUGGY]  int  numToSkip  =  IOUtils.skip(available,  numToSkip);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  int  numToSkip  =  IOUtils.skip(available,  numToSkip);  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  IOUtils.skip(available,  numToSkip);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
45	[BUG]  [BUGGY]  int  numToSkip  =  IOUtils.skip(available);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  int  numToSkip  =  IOUtils.skip(available);  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  IOUtils.skip(available);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
46	[BUG]  [BUGGY]  int  hasHitEOF  =  is.hasHitEOF();  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  int  hasHitEOF  =  is.hasHitEOF();  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  hasHitEOF  =  is.hasHitEOF();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
47	[BUG]  [BUGGY]  int  hasHitEOF  =  is.hasHitEOF?  getHitEOF()  :  0;  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  int  hasHitEOF  =  is.hasHitEOF?  getHitEOF()  :  0;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  hasHitEOF  =  is.hasHitEOF?  getHitEOF()  :  0;	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
48	[BUG]  [BUGGY]  int  numToSkip  =  is.read();  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  int  numToSkip  =  is.read();  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  is.read();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
49	[BUG]  [BUGGY]  long  available  =  entrySize  -  numToSkip  +  2;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  entrySize  -  numToSkip  +  2;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  -  numToSkip  +  2;	  long    available    =    entrySize    -    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
50	[BUG]  [BUGGY]  long  available  =  recordSize  -  entrySize;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  recordSize  -  entrySize;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  recordSize  -  entrySize;	  long    available    =    entrySize    -    recordSize;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
51	[BUG]  [BUGGY]  long  available  =  entrySize  *  RecordSize;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  entrySize  *  RecordSize;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  *  RecordSize;	  long    available    =    entrySize    *    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
52	[BUG]  [BUGGY]  long  available  =  entrySize  -  getEntryOffset;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  entrySize  -  getEntryOffset;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  -  getEntryOffset;	  long    available    =    entryOffset    -    entrySize;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
53	[BUG]  [BUGGY]  Long  available  =  entrySize  -  numToSkip;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  Long  available  =  entrySize  -  numToSkip;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	Long  available  =  entrySize  -  numToSkip;	  long    available    =    numToSkip    -    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
54	[BUG]  [BUGGY]  long  available  =  entrySize  *  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  entrySize  *  1;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  *  1;	  long    available    =    entrySize    -    1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
55	[BUG]  [BUGGY]  long  available  =  entrySize  /  this.blockSize;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  entrySize  /  this.blockSize;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  /  this.blockSize;	  long    available    =    entrySize    /    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
56	[BUG]  [BUGGY]  long  available  =  entryStart  -  entrySize;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  entryStart  -  entrySize;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryStart  -  entrySize;	  long    available    =    entryOffset    -    entrySize;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
57	[BUG]  [BUGGY]  long  available  =  entrySize  -  this.entryStart;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  entrySize  -  this.entryStart;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  -  this.entryStart;	  long    available    =    this.entrySize    -    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
58	[BUG]  [BUGGY]  int  entrySize  =  getEntrySize();  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  int  entrySize  =  getEntrySize();  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  entrySize  =  getEntrySize();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
59	[BUG]  [BUGGY]  int  entryOffset  =  getEntrySize();  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  int  entryOffset  =  getEntrySize();  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  entryOffset  =  getEntrySize();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
60	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntry(numToSkip);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  Integer  entryOffset  =  getEntry(numToSkip);  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	Integer  entryOffset  =  getEntry(numToSkip);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
61	[BUG]  [BUGGY]  int  numToSkip  =  this.getEntrySize();  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  int  numToSkip  =  this.getEntrySize();  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  this.getEntrySize();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
62	[BUG]  [BUGGY]  int  numToSkip  =  IOUtils.size();  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  int  numToSkip  =  IOUtils.size();  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  IOUtils.size();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
63	[BUG]  [BUGGY]  long  available  =  entrySize  *  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {    [BUGGY]  long  available  =  entrySize  *  SMALL_BUFFER_SIZE;  [BUGGY]    numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  *  SMALL_BUFFER_SIZE;	  long    available    =    entrySize    *    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
