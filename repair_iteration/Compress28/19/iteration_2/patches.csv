bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  InputStream  is  =  this.currEntry.getInputStream(numToSkip);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  InputStream  is  =  this.currEntry.getInputStream(numToSkip);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	InputStream  is  =  this.currEntry.getInputStream(numToSkip);	  InputStream    is    =    this.currEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
2	[BUG]  [BUGGY]  InputStream  is  =  this.currEntry.getErrorStream();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  InputStream  is  =  this.currEntry.getErrorStream();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	InputStream  is  =  this.currEntry.getErrorStream();	  InputStream    is    =    this.currEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
3	[BUG]  [BUGGY]  InputStream  is  =  this.currEntry.getRecordSize();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  InputStream  is  =  this.currEntry.getRecordSize();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	InputStream  is  =  this.currEntry.getRecordSize();	  InputStream    is    =    this.currEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
4	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getInputStream();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  InputStream  is  =  currEntry.getInputStream();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	InputStream  is  =  currEntry.getInputStream();	  InputStream    is    =    this.currEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
5	[BUG]  [BUGGY]  InputStream  is  =  this.currEntry.getOutputStream();  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  InputStream  is  =  this.currEntry.getOutputStream();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	InputStream  is  =  this.currEntry.getOutputStream();	  InputStream    is    =    this.currEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
6	[BUG]  [BUGGY]  InputStream  is  =  this.currEntry.getInputStream(),  numToSkip);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  InputStream  is  =  this.currEntry.getInputStream(),  numToSkip);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	InputStream  is  =  this.currEntry.getInputStream(),  numToSkip);	  InputStream    is    =    this.currEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
7	[BUG]  [BUGGY]  long  available  =  entrySize  /  this.entrySize;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  /  this.entrySize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  /  this.entrySize;	  long    available    =    this.entrySize    /    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
8	[BUG]  [BUGGY]  long  available  =  entryOffset  /  this.entrySize;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entryOffset  /  this.entrySize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryOffset  /  this.entrySize;	  long    available    =    this.entrySize    /    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
9	[BUG]  [BUGGY]  long  available  =  entrySize  /  this.entryOffset;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  /  this.entryOffset;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  /  this.entryOffset;	  long    available    =    this.entrySize    /    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
10	[BUG]  [BUGGY]  long  available  =  this.entrySize  /  numToSkip;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.entrySize  /  numToSkip;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entrySize  /  numToSkip;	  long    available    =    this.entrySize    /    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
11	[BUG]  [BUGGY]  long  available  =  entrySize  /  this.entryLength;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  /  this.entryLength;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  /  this.entryLength;	  long    available    =    this.entrySize    /    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
12	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntry(numToSkip,  available);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  getEntry(numToSkip,  available);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	Integer  entryOffset  =  getEntry(numToSkip,  available);	  Integer    entryOffset    =    getEntry(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
13	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntry(numToSkip  +  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  getEntry(numToSkip  +  1);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	Integer  entryOffset  =  getEntry(numToSkip  +  1);	  Integer    entryOffset    =    getEntry(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
14	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntry(numToSkip  -  1);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  getEntry(numToSkip  -  1);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	Integer  entryOffset  =  getEntry(numToSkip  -  1);	  Integer    entryOffset    =    getEntry(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
15	[BUG]  [BUGGY]  Long  entryOffset  =  getEntry(numToSkip);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  Long  entryOffset  =  getEntry(numToSkip);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	Long  entryOffset  =  getEntry(numToSkip);	  Integer    entryOffset    =    getEntry(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
16	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntryCount(numToSkip);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  getEntryCount(numToSkip);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	Integer  entryOffset  =  getEntryCount(numToSkip);	  Integer    entryOffset    =    getEntry(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
17	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntry(numToSkip)+  1;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  getEntry(numToSkip)+  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	Integer  entryOffset  =  getEntry(numToSkip)+  1;	  Integer    entryOffset    =    getEntry(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
18	[BUG]  [BUGGY]  int  available  =  entrySize  -  numToSkip;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  entrySize  -  numToSkip;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  entrySize  -  numToSkip;	  int    available    =    numToSkip    -    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
19	[BUG]  [BUGGY]  int  available  =  entryOffset  -  numToSkip;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  entryOffset  -  numToSkip;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  entryOffset  -  numToSkip;	  int    available    =    numToSkip    -    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
20	[BUG]  [BUGGY]  int  available  =  numToSkip  -  entrySize;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  numToSkip  -  entrySize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  numToSkip  -  entrySize;	  int    available    =    numToSkip    -    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
21	[BUG]  [BUGGY]  long  available  =  this.entryOffset  -  numToSkip;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.entryOffset  -  numToSkip;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entryOffset  -  numToSkip;	  long    available    =    entryOffset    -    recordSize;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
22	[BUG]  [BUGGY]  long  available  =  entryOffset  /  recordSize;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entryOffset  /  recordSize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryOffset  /  recordSize;	  long    available    =    entryOffset    -    recordSize;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
23	[BUG]  [BUGGY]  long  available  =  numToSkip  -  this.entrySize;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  numToSkip  -  this.entrySize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  numToSkip  -  this.entrySize;	  long    available    =    entryOffset    -    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
24	[BUG]  [BUGGY]  long  available  =  this.entryOffset  -  entrySize;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.entryOffset  -  entrySize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entryOffset  -  entrySize;	  long    available    =    entryOffset    -    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
25	[BUG]  [BUGGY]  long  available  =  entryOffset  -  this.blockSize;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entryOffset  -  this.blockSize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryOffset  -  this.blockSize;	  long    available    =    entryOffset    -    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
26	[BUG]  [BUGGY]  Long  available  =  this.entrySize  -  entryOffset;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  Long  available  =  this.entrySize  -  entryOffset;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	Long  available  =  this.entrySize  -  entryOffset;	  long    available    =    entryOffset    -    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
27	[BUG]  [BUGGY]  long  available  =  numToSkip  *  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  numToSkip  *  SMALL_BUFFER_SIZE;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  numToSkip  *  SMALL_BUFFER_SIZE;	  long    available    =    entrySize    *    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
28	[BUG]  [BUGGY]  long  available  =  entrySize  /  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  /  SMALL_BUFFER_SIZE;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  /  SMALL_BUFFER_SIZE;	  long    available    =    entrySize    *    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
29	[BUG]  [BUGGY]  long  available  =  entrySize  *  SMALL_BUFFER_SIZE  +  1;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  *  SMALL_BUFFER_SIZE  +  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  *  SMALL_BUFFER_SIZE  +  1;	  long    available    =    entrySize    *    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
30	[BUG]  [BUGGY]  long  available  =  entryOffset  *  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entryOffset  *  SMALL_BUFFER_SIZE;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryOffset  *  SMALL_BUFFER_SIZE;	  long    available    =    entrySize    *    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
31	[BUG]  [BUGGY]  long  available  =  SMALL_BUFFER_SIZE  *  entrySize;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  SMALL_BUFFER_SIZE  *  entrySize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  SMALL_BUFFER_SIZE  *  entrySize;	  long    available    =    entrySize    *    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
32	[BUG]  [BUGGY]  long  available  =  this.entrySize  *  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.entrySize  *  SMALL_BUFFER_SIZE;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entrySize  *  SMALL_BUFFER_SIZE;	  long    available    =    entrySize    *    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
33	[BUG]  [BUGGY]  long  available  =  entrySize  *  SMALL_BUFFER_SIZE  +  2;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  *  SMALL_BUFFER_SIZE  +  2;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  *  SMALL_BUFFER_SIZE  +  2;	  long    available    =    entrySize    *    SMALL_BUFFER_SIZE;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
34	[BUG]  [BUGGY]  long  available  =  entrySize  -  1L  +  1L;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  -  1L  +  1L;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  -  1L  +  1L;	  long    available    =    entrySize    -    1L;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
35	[BUG]  [BUGGY]  long  available  =  entrySize  /  1L;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  /  1L;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  /  1L;	  long    available    =    entrySize    -    1L;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
36	[BUG]  [BUGGY]  long  available  =  numToSkip  -  1L;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  numToSkip  -  1L;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  numToSkip  -  1L;	  long    available    =    entrySize    -    1L;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
37	[BUG]  [BUGGY]  long  available  =  entrySize  -  1L  +  1;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  -  1L  +  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  -  1L  +  1;	  long    available    =    entrySize    -    1L;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
38	[BUG]  [BUGGY]  long  available  =  this.entrySize  -  1L;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.entrySize  -  1L;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entrySize  -  1L;	  long    available    =    entrySize    -    1L;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
39	[BUG]  [BUGGY]  long  available  =  entryOffset  -  1L;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entryOffset  -  1L;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryOffset  -  1L;	  long    available    =    entryOffset    -    1;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
40	[BUG]  [BUGGY]  long  available  =  entryOffset  /  1;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entryOffset  /  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryOffset  /  1;	  long    available    =    entryOffset    -    1;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
41	[BUG]  [BUGGY]  long  available  =  numToSkip  *  entrySize;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  numToSkip  *  entrySize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  numToSkip  *  entrySize;	  long    available    =    entryOffset    *    entrySize;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
42	[BUG]  [BUGGY]  long  available  =  entryOffset  +  entrySize;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entryOffset  +  entrySize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryOffset  +  entrySize;	  long    available    =    entryOffset    *    entrySize;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
43	[BUG]  [BUGGY]  long  available  =  numToSkip  *  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  numToSkip  *  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  numToSkip  *  1;	  long    available    =    entrySize    *    1;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
44	[BUG]  [BUGGY]  long  available  =  entrySize  *  2;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  *  2;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  *  2;	  long    available    =    entrySize    *    1;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
45	[BUG]  [BUGGY]  long  available  =  entryOffset  *  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entryOffset  *  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryOffset  *  1;	  long    available    =    entrySize    *    1;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
46	[BUG]  [BUGGY]  long  available  =  entrySize  *  4;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  *  4;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  *  4;	  long    available    =    entrySize    *    1;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
47	[BUG]  [BUGGY]  long  available  =  entrySize  *  1L;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  *  1L;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  *  1L;	  long    available    =    entrySize    *    1;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
48	[BUG]  [BUGGY]  long  available  =  entrySize  *  3;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  *  3;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  *  3;	  long    available    =    entrySize    *    1;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
49	[BUG]  [BUGGY]  long  available  =  this.entrySize  -  numToSkip  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.entrySize  -  numToSkip  +  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entrySize  -  numToSkip  +  1;	  long    available    =    this.entrySize    -    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
50	[BUG]  [BUGGY]  long  available  =  this.entrySize  *  numToSkip;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.entrySize  *  numToSkip;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entrySize  *  numToSkip;	  long    available    =    this.entrySize    -    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
51	[BUG]  [BUGGY]  long  available  =  this.length  -  numToSkip;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.length  -  numToSkip;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.length  -  numToSkip;	  long    available    =    this.entrySize    -    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
52	[BUG]  [BUGGY]  long  available  =  this.entrySize  -  entryStart;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.entrySize  -  entryStart;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entrySize  -  entryStart;	  long    available    =    entrySize    -    this.entryStart;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
53	[BUG]  [BUGGY]  long  available  =  this.entrySize  -  entrySize;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.entrySize  -  entrySize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entrySize  -  entrySize;	  long    available    =    entrySize    -    this.entryStart;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
54	[BUG]  [BUGGY]  long  available  =  this.entryStart  -  entrySize;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.entryStart  -  entrySize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entryStart  -  entrySize;	  long    available    =    entrySize    -    this.entryStart;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
55	[BUG]  [BUGGY]  long  available  =  numToSkip  -  this.entryStart;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  numToSkip  -  this.entryStart;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  numToSkip  -  this.entryStart;	  long    available    =    entrySize    -    this.entryStart;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
56	[BUG]  [BUGGY]  long  available  =  this.entrySize  -  this.entryStart;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.entrySize  -  this.entryStart;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entrySize  -  this.entryStart;	  long    available    =    entrySize    -    this.entryStart;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
57	[BUG]  [BUGGY]  long  available  =  this.entryEnd  -  entrySize;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.entryEnd  -  entrySize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entryEnd  -  entrySize;	  long    available    =    entrySize    -    this.entryStart;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
58	[BUG]  [BUGGY]  long  available  =  this.blockSize  -  entrySize;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.blockSize  -  entrySize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.blockSize  -  entrySize;	  long    available    =    entrySize    -    this.blockSize;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
59	[BUG]  [BUGGY]  long  available  =  numToSkip  -  this.blockSize;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  numToSkip  -  this.blockSize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  numToSkip  -  this.blockSize;	  long    available    =    entrySize    -    this.blockSize;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
60	[BUG]  [BUGGY]  long  available  =  entrySize  -  this.blockSize  +  1;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  -  this.blockSize  +  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  -  this.blockSize  +  1;	  long    available    =    entrySize    -    this.blockSize;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
61	[BUG]  [BUGGY]  int  available  =  entrySize  -  this.blockSize;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  entrySize  -  this.blockSize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  entrySize  -  this.blockSize;	  long    available    =    entrySize    -    this.blockSize;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
62	[BUG]  [BUGGY]  int  hasHitEOF  =  is.hashCode();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  is.hashCode();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  hasHitEOF  =  is.hashCode();	  int    hasHitEOF    =    is.hasHitEOF();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
63	[BUG]  [BUGGY]  int  hasHitEOF  =  available.hasHitEOF();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  available.hasHitEOF();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  hasHitEOF  =  available.hasHitEOF();	  int    hasHitEOF    =    is.hasHitEOF();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
64	[BUG]  [BUGGY]  int  hasHitEOF  =  is.length();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  is.length();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  hasHitEOF  =  is.length();	  int    hasHitEOF    =    is.hasHitEOF();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
65	[BUG]  [BUGGY]  int  hasHitEOF  =  available.hashCode();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  available.hashCode();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  hasHitEOF  =  available.hashCode();	  int    hasHitEOF    =    is.hasHitEOF();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
66	[BUG]  [BUGGY]  int  hasHitEOF  =  available.size();  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  available.size();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  hasHitEOF  =  available.size();	  int    hasHitEOF    =    is.hasHitEOF();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
67	[BUG]  [BUGGY]  int  hasHitEOF  =  available.length;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  available.length;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  hasHitEOF  =  available.length;	  int    hasHitEOF    =    is.hasHitEOF();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
68	[BUG]  [BUGGY]  int  hasHitEOF  =  is.read();  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  is.read();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  hasHitEOF  =  is.read();	  int    hasHitEOF    =    is.hasHitEOF();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
69	[BUG]  [BUGGY]  long  available  =  numToSkip  /  recordSize;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  numToSkip  /  recordSize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  numToSkip  /  recordSize;	  long    available    =    numToSkip    -    recordSize;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
70	[BUG]  [BUGGY]  long  available  =  numToSkip  -  blockSize;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  numToSkip  -  blockSize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  numToSkip  -  blockSize;	  long    available    =    numToSkip    -    recordSize;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
71	[BUG]  [BUGGY]  long  available  =  numToSkip  *  recordSize;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  numToSkip  *  recordSize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  numToSkip  *  recordSize;	  long    available    =    numToSkip    -    recordSize;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
72	[BUG]  [BUGGY]  long  available  =  recordSize  -  numToSkip;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  recordSize  -  numToSkip;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  recordSize  -  numToSkip;	  long    available    =    numToSkip    -    recordSize;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
73	[BUG]  [BUGGY]  long  available  =  entrySize  *  numToSkip  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  *  numToSkip  +  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  *  numToSkip  +  1;	  long    available    =    entrySize    *    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
74	[BUG]  [BUGGY]  long  available  =  entrySize  *  numToSkip  +  2;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  *  numToSkip  +  2;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  *  numToSkip  +  2;	  long    available    =    entrySize    *    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
75	[BUG]  [BUGGY]  long  available  =  entrySize  *  numToSkip,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  *  numToSkip,  hasHitEOF;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  *  numToSkip,  hasHitEOF;	  long    available    =    entrySize    *    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
76	[BUG]  [BUGGY]  int  hasHitEOF  =  is.hasHitEOF?  getHitEOF()  :  0L;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  is.hasHitEOF?  getHitEOF()  :  0L;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  hasHitEOF  =  is.hasHitEOF?  getHitEOF()  :  0L;	  int    hasHitEOF    =    is.hasHitEOF?    getHitEOF()    :    0;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
77	[BUG]  [BUGGY]  int  hasHitEOF  =  is.hasHitEOF?  getHitEOF()  :  1;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  is.hasHitEOF?  getHitEOF()  :  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  hasHitEOF  =  is.hasHitEOF?  getHitEOF()  :  1;	  int    hasHitEOF    =    is.hasHitEOF?    getHitEOF()    :    0;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
78	[BUG]  [BUGGY]  int  hasHitEOF  =  available.hasHitEOF?  getHitEOF()  :  0;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  available.hasHitEOF?  getHitEOF()  :  0;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  hasHitEOF  =  available.hasHitEOF?  getHitEOF()  :  0;	  int    hasHitEOF    =    is.hasHitEOF?    getHitEOF()    :    0;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
79	[BUG]  [BUGGY]  int  hasHitEOF  =  is.hasHitEOF?  getHitEOF()  +  1  :  0;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  is.hasHitEOF?  getHitEOF()  +  1  :  0;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  hasHitEOF  =  is.hasHitEOF?  getHitEOF()  +  1  :  0;	  int    hasHitEOF    =    is.hasHitEOF?    getHitEOF()    :    0;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
80	[BUG]  [BUGGY]  int  hasHitEOF  =  is.hasHitEOF?  getHitEOF()  :  -1;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  is.hasHitEOF?  getHitEOF()  :  -1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  hasHitEOF  =  is.hasHitEOF?  getHitEOF()  :  -1;	  int    hasHitEOF    =    is.hasHitEOF?    getHitEOF()    :    0;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
81	[BUG]  [BUGGY]  int  hasHitEOF  =  is.hashCode()?  getHitEOF()  :  0;  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  is.hashCode()?  getHitEOF()  :  0;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  hasHitEOF  =  is.hashCode()?  getHitEOF()  :  0;	  int    hasHitEOF    =    is.hasHitEOF?    getHitEOF()    :    0;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
82	[BUG]  [BUGGY]  long  available  =  this.blockSize  /  entrySize;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.blockSize  /  entrySize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.blockSize  /  entrySize;	  long    available    =    entrySize    /    this.blockSize;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
83	[BUG]  [BUGGY]  long  available  =  numToSkip  /  this.blockSize;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  numToSkip  /  this.blockSize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  numToSkip  /  this.blockSize;	  long    available    =    entrySize    /    this.blockSize;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
84	[BUG]  [BUGGY]  long  available  =  entrySize  /  this.blockSize  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  /  this.blockSize  +  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  /  this.blockSize  +  1;	  long    available    =    entrySize    /    this.blockSize;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
85	[BUG]  [BUGGY]  long  available  =  entryOffset  /  this.blockSize;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entryOffset  /  this.blockSize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryOffset  /  this.blockSize;	  long    available    =    entrySize    /    this.blockSize;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
86	[BUG]  [BUGGY]  int  available  =  entrySize  /  this.blockSize;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  entrySize  /  this.blockSize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  entrySize  /  this.blockSize;	  long    available    =    entrySize    /    this.blockSize;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
87	[BUG]  [BUGGY]  long  available  =  numToSkip  /  blockSize;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  numToSkip  /  blockSize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  numToSkip  /  blockSize;	  long    available    =    entrySize    /    blockSize;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
88	[BUG]  [BUGGY]  long  available  =  entrySize  *  blockSize;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  *  blockSize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  *  blockSize;	  long    available    =    entrySize    /    blockSize;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
89	[BUG]  [BUGGY]  long  available  =  entryOffset  /  blockSize;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entryOffset  /  blockSize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryOffset  /  blockSize;	  long    available    =    entrySize    /    blockSize;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
90	[BUG]  [BUGGY]  long  available  =  blockSize  /  entrySize;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  blockSize  /  entrySize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  blockSize  /  entrySize;	  long    available    =    entrySize    /    blockSize;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
91	[BUG]  [BUGGY]  long  available  =  this.entrySize  /  blockSize;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.entrySize  /  blockSize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entrySize  /  blockSize;	  long    available    =    entrySize    /    blockSize;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
92	[BUG]  [BUGGY]  long  available  =  entryOffset  /  numToSkip;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entryOffset  /  numToSkip;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryOffset  /  numToSkip;	  long    available    =    numToSkip    /    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
93	[BUG]  [BUGGY]  long  available  =  entryStart  /  numToSkip;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entryStart  /  numToSkip;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryStart  /  numToSkip;	  long    available    =    numToSkip    /    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
94	[BUG]  [BUGGY]  long  available  =  this.blockSize  *  entrySize;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.blockSize  *  entrySize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.blockSize  *  entrySize;	  long    available    =    entrySize    *    this.blockSize;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
95	[BUG]  [BUGGY]  long  available  =  numToSkip  *  this.blockSize;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  numToSkip  *  this.blockSize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  numToSkip  *  this.blockSize;	  long    available    =    entrySize    *    this.blockSize;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
96	[BUG]  [BUGGY]  long  available  =  entrySize  *  this.blockSize  +  1;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  *  this.blockSize  +  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  *  this.blockSize  +  1;	  long    available    =    entrySize    *    this.blockSize;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
97	[BUG]  [BUGGY]  long  available  =  entrySize  *  this.blockSize  +  numToSkip;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  *  this.blockSize  +  numToSkip;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  *  this.blockSize  +  numToSkip;	  long    available    =    entrySize    *    this.blockSize;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
98	[BUG]  [BUGGY]  long  available  =  entryOffset  *  this.blockSize;  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entryOffset  *  this.blockSize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryOffset  *  this.blockSize;	  long    available    =    entrySize    *    this.blockSize;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
99	[BUG]  [BUGGY]  long  available  =  entrySize  *  this.blockSize  -  1;  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  *  this.blockSize  -  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  *  this.blockSize  -  1;	  long    available    =    entrySize    *    this.blockSize;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
100	[BUG]  [BUGGY]  long  available  =  numToSkip  /  entrySize;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  numToSkip  /  entrySize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  numToSkip  /  entrySize;	  long    available    =    entrySize    /    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
101	[BUG]  [BUGGY]  long  available  =  entrySize  /  numToSkip  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  /  numToSkip  +  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  /  numToSkip  +  1;	  long    available    =    entrySize    /    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
102	[BUG]  [BUGGY]  long  available  =  entrySize  /  numToSkip,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  /  numToSkip,  hasHitEOF;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  /  numToSkip,  hasHitEOF;	  long    available    =    entrySize    /    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
103	[BUG]  [BUGGY]  long  available  =  entrySize  /  numToSkip  +  2;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  /  numToSkip  +  2;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  /  numToSkip  +  2;	  long    available    =    entrySize    /    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
104	[BUG]  [BUGGY]  long  available  =  numToSkip  -  entryStart;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  numToSkip  -  entryStart;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  numToSkip  -  entryStart;	  long    available    =    entryStart    -    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
105	[BUG]  [BUGGY]  long  available  =  entryStart  -  numToSkip  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entryStart  -  numToSkip  +  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryStart  -  numToSkip  +  1;	  long    available    =    entryStart    -    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
106	[BUG]  [BUGGY]  long  available  =  this.entryStart  -  numToSkip;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.entryStart  -  numToSkip;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entryStart  -  numToSkip;	  long    available    =    entryStart    -    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
107	[BUG]  [BUGGY]  int  available  =  getOffset(numToSkip).length()  +  1;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  getOffset(numToSkip).length()  +  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  getOffset(numToSkip).length()  +  1;	  int    available    =    getOffset(numToSkip).length();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
108	[BUG]  [BUGGY]  int  available  =  getOffset(numToSkip).length()  -  1;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  getOffset(numToSkip).length()  -  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  getOffset(numToSkip).length()  -  1;	  int    available    =    getOffset(numToSkip).length();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
109	[BUG]  [BUGGY]  long  available  =  getOffset(numToSkip).length();  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  getOffset(numToSkip).length();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  getOffset(numToSkip).length();	  int    available    =    getOffset(numToSkip).length();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
110	[BUG]  [BUGGY]  int  available  =  getOffset(numToSkip,  0).length();  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  getOffset(numToSkip,  0).length();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  getOffset(numToSkip,  0).length();	  int    available    =    getOffset(numToSkip).length();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
111	[BUG]  [BUGGY]  int  available  =  getOffset(numToSkip).length()  -  2;  [CE]  illegal  start  of  type  [FE]                                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  getOffset(numToSkip).length()  -  2;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  getOffset(numToSkip).length()  -  2;	  int    available    =    getOffset(numToSkip).length();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
112	[BUG]  [BUGGY]  int  available  =  getOffset(numToSkip)-  1;  [CE]  illegal  start  of  type  [FE]                                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  getOffset(numToSkip)-  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  getOffset(numToSkip)-  1;	  int    available    =    getOffset(numToSkip).length();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
113	[BUG]  [BUGGY]  long  numToSkip  =  IOUtils.skip(available,  numToSkip);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  numToSkip  =  IOUtils.skip(available,  numToSkip);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  numToSkip  =  IOUtils.skip(available,  numToSkip);	  int    numToSkip    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
114	[BUG]  [BUGGY]  int  numToSkip  =  IOUtils.skip(available,  numToSkip  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  numToSkip  =  IOUtils.skip(available,  numToSkip  +  1);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  IOUtils.skip(available,  numToSkip  +  1);	  int    numToSkip    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
115	[BUG]  [BUGGY]  int  numToSkip  =  IOUtils.skip(is,  numToSkip);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  numToSkip  =  IOUtils.skip(is,  numToSkip);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  IOUtils.skip(is,  numToSkip);	  int    numToSkip    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
116	[BUG]  [BUGGY]  byte  numToSkip  =  IOUtils.skip(available,  numToSkip);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  byte  numToSkip  =  IOUtils.skip(available,  numToSkip);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	byte  numToSkip  =  IOUtils.skip(available,  numToSkip);	  int    numToSkip    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
117	[BUG]  [BUGGY]  int  numToSkip  =  IOUtils.skip(available,  this.numToSkip);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  numToSkip  =  IOUtils.skip(available,  this.numToSkip);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  IOUtils.skip(available,  this.numToSkip);	  int    numToSkip    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
118	[BUG]  [BUGGY]  int  numToSkip  =  IOUtils.skip(available,  numToSkip,  available);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  numToSkip  =  IOUtils.skip(available,  numToSkip,  available);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  IOUtils.skip(available,  numToSkip,  available);	  int    numToSkip    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
119	[BUG]  [BUGGY]  long  available  =  this.entrySize  /  1;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.entrySize  /  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entrySize  /  1;	  long    available    =    this.entrySize    -    1;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
120	[BUG]  [BUGGY]  int  available  =  this.entrySize  -  1;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  this.entrySize  -  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  this.entrySize  -  1;	  long    available    =    this.entrySize    -    1;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
121	[BUG]  [BUGGY]  long  available  =  this.blockSize  -  1;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.blockSize  -  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.blockSize  -  1;	  long    available    =    this.entrySize    -    1;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
122	[BUG]  [BUGGY]  long  available  =  entryOffset  -  numToSkip  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entryOffset  -  numToSkip  +  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryOffset  -  numToSkip  +  1;	  long    available    =    entryOffset    -    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
123	[BUG]  [BUGGY]  long  available  =  entryOffset  -  numToSkip,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entryOffset  -  numToSkip,  hasHitEOF;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryOffset  -  numToSkip,  hasHitEOF;	  long    available    =    entryOffset    -    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
124	[BUG]  [BUGGY]  long  available  =  entrySize  /  2;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  /  2;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  /  2;	  long    available    =    entrySize    -    2;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
125	[BUG]  [BUGGY]  long  available  =  numToSkip  -  2;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  numToSkip  -  2;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  numToSkip  -  2;	  long    available    =    entrySize    -    2;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
126	[BUG]  [BUGGY]  long  available  =  this.entrySize  -  2;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.entrySize  -  2;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entrySize  -  2;	  long    available    =    entrySize    -    2;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
127	[BUG]  [BUGGY]  long  available  =  entryOffset  -  2;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entryOffset  -  2;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryOffset  -  2;	  long    available    =    entrySize    -    2;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
128	[BUG]  [BUGGY]  long  available  =  entrySize  -  2L;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  -  2L;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  -  2L;	  long    available    =    entrySize    -    2;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
129	[BUG]  [BUGGY]  int  entrySize  =  getEntrySize()  +  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntrySize()  +  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  entrySize  =  getEntrySize()  +  1;	  int    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
130	[BUG]  [BUGGY]  int  entrySize  =  getEntrySize(numToSkip);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntrySize(numToSkip);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  entrySize  =  getEntrySize(numToSkip);	  int    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
131	[BUG]  [BUGGY]  long  entrySize  =  getEntrySize();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  entrySize  =  getEntrySize();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  entrySize  =  getEntrySize();	  int    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
132	[BUG]  [BUGGY]  int  entrySize  =  getEntrySize()  -  1;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntrySize()  -  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  entrySize  =  getEntrySize()  -  1;	  int    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
133	[BUG]  [BUGGY]  int  entrySize  =  getEntrySize()  +  numToSkip;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntrySize()  +  numToSkip;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  entrySize  =  getEntrySize()  +  numToSkip;	  int    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
134	[BUG]  [BUGGY]  int  entrySize  =  getEntrySize()  *  numToSkip;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntrySize()  *  numToSkip;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  entrySize  =  getEntrySize()  *  numToSkip;	  int    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
135	[BUG]  [BUGGY]  long  available  =  numToSkip  /  size;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  numToSkip  /  size;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  numToSkip  /  size;	  long    available    =    entryOffset    /    size;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
136	[BUG]  [BUGGY]  long  available  =  entrySize  /  size;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  /  size;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  /  size;	  long    available    =    entryOffset    /    size;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
137	[BUG]  [BUGGY]  long  available  =  size  /  entryOffset;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  size  /  entryOffset;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  size  /  entryOffset;	  long    available    =    entryOffset    /    size;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
138	[BUG]  [BUGGY]  long  available  =  entryOffset  *  size;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entryOffset  *  size;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryOffset  *  size;	  long    available    =    entryOffset    /    size;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
139	[BUG]  [BUGGY]  long  available  =  numToSkip  -  entrySize  +  2;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  numToSkip  -  entrySize  +  2;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  numToSkip  -  entrySize  +  2;	  long    available    =    entrySize    -    numToSkip    +    2;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
140	[BUG]  [BUGGY]  long  available  =  entrySize  -  numToSkip  *  2;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  -  numToSkip  *  2;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  -  numToSkip  *  2;	  long    available    =    entrySize    -    numToSkip    +    2;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
141	[BUG]  [BUGGY]  long  available  =  this.entrySize  -  numToSkip  +  2;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.entrySize  -  numToSkip  +  2;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entrySize  -  numToSkip  +  2;	  long    available    =    entrySize    -    numToSkip    +    2;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
142	[BUG]  [BUGGY]  long  available  =  entryOffset  -  numToSkip  +  2;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entryOffset  -  numToSkip  +  2;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryOffset  -  numToSkip  +  2;	  long    available    =    entrySize    -    numToSkip    +    2;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
143	[BUG]  [BUGGY]  long  available  =  entrySize  -  numToSkip  +  4;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  -  numToSkip  +  4;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  -  numToSkip  +  4;	  long    available    =    entrySize    -    numToSkip    +    2;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
144	[BUG]  [BUGGY]  int  available  =  numToSkip  *  entryOffset;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  numToSkip  *  entryOffset;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  numToSkip  *  entryOffset;	  long    available    =    numToSkip    *    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
145	[BUG]  [BUGGY]  long  available  =  entryStart  *  numToSkip;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entryStart  *  numToSkip;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryStart  *  numToSkip;	  long    available    =    numToSkip    *    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
146	[BUG]  [BUGGY]  int  available  =  getVersion()  -  1;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  getVersion()  -  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  getVersion()  -  1;	  int    available    =    getVersion();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
147	[BUG]  [BUGGY]  long  available  =  getVersion();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  getVersion();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  getVersion();	  int    available    =    getVersion();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
148	[BUG]  [BUGGY]  int  available  =  getVersion()  +  1;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  getVersion()  +  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  getVersion()  +  1;	  int    available    =    getVersion();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
149	[BUG]  [BUGGY]  int  available  =  this.getVersion();  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  this.getVersion();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  this.getVersion();	  int    available    =    getVersion();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
150	[BUG]  [BUGGY]  int  available  =  getSize();  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  getSize();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  getSize();	  int    available    =    getVersion();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
151	[BUG]  [BUGGY]  long  available  =  entryOffset  *  numToSkip  +  1;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entryOffset  *  numToSkip  +  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryOffset  *  numToSkip  +  1;	  long    available    =    entryOffset    *    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
152	[BUG]  [BUGGY]  long  available  =  entryOffset  +  numToSkip;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entryOffset  +  numToSkip;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryOffset  +  numToSkip;	  long    available    =    entryOffset    *    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
153	[BUG]  [BUGGY]  long  available  =  entryOffset  *  numToSkip  +  2;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entryOffset  *  numToSkip  +  2;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryOffset  *  numToSkip  +  2;	  long    available    =    entryOffset    *    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
154	[BUG]  [BUGGY]  int  available  =  getOffset()  -  1;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  getOffset()  -  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  getOffset()  -  1;	  int    available    =    getOffset();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
155	[BUG]  [BUGGY]  int  available  =  getOffset()  +  1;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  getOffset()  +  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  getOffset()  +  1;	  int    available    =    getOffset();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
156	[BUG]  [BUGGY]  long  available  =  getOffset();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  getOffset();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  getOffset();	  int    available    =    getOffset();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
157	[BUG]  [BUGGY]  int  available  =  getOffset()  *  numToSkip;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  getOffset()  *  numToSkip;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  getOffset()  *  numToSkip;	  int    available    =    getOffset();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
158	[BUG]  [BUGGY]  int  available  =  getOffset()  -  numToSkip;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  getOffset()  -  numToSkip;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  getOffset()  -  numToSkip;	  int    available    =    getOffset();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
159	[BUG]  [BUGGY]  int  available  =  getLength();  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  getLength();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  getLength();	  int    available    =    getOffset();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
160	[BUG]  [BUGGY]  long  available  =  numToSkip  -  this.entryOffset;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  numToSkip  -  this.entryOffset;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  numToSkip  -  this.entryOffset;	  long    available    =    entrySize    -    this.entryOffset;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
161	[BUG]  [BUGGY]  long  available  =  numToSkip  -  getEntryOffset;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  numToSkip  -  getEntryOffset;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  numToSkip  -  getEntryOffset;	  long    available    =    entrySize    -    getEntryOffset;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
162	[BUG]  [BUGGY]  long  available  =  entrySize  /  getEntryOffset;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  /  getEntryOffset;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  /  getEntryOffset;	  long    available    =    entrySize    -    getEntryOffset;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
163	[BUG]  [BUGGY]  long  available  =  entrySize  -  getEntryOffset  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  -  getEntryOffset  +  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  -  getEntryOffset  +  1;	  long    available    =    entrySize    -    getEntryOffset;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
164	[BUG]  [BUGGY]  long  available  =  entryOffset  -  getEntrySize;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entryOffset  -  getEntrySize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryOffset  -  getEntrySize;	  long    available    =    entrySize    -    getEntryOffset;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
165	[BUG]  [BUGGY]  long  available  =  this.entrySize  -  getEntryOffset;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.entrySize  -  getEntryOffset;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entrySize  -  getEntryOffset;	  long    available    =    entrySize    -    getEntryOffset;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
166	[BUG]  [BUGGY]  long  available  =  getEntrySize  -  entryOffset;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  getEntrySize  -  entryOffset;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  getEntrySize  -  entryOffset;	  long    available    =    entrySize    -    getEntryOffset;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
167	[BUG]  [BUGGY]  Long  available  =  numToSkip  -  entrySize;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  Long  available  =  numToSkip  -  entrySize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	Long  available  =  numToSkip  -  entrySize;	  Long    available    =    entrySize    -    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
168	[BUG]  [BUGGY]  Long  available  =  entrySize  -  numToSkip  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  Long  available  =  entrySize  -  numToSkip  +  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	Long  available  =  entrySize  -  numToSkip  +  1;	  Long    available    =    entrySize    -    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
169	[BUG]  [BUGGY]  Long  available  =  entrySize  /  numToSkip;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  Long  available  =  entrySize  /  numToSkip;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	Long  available  =  entrySize  /  numToSkip;	  Long    available    =    entrySize    -    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
170	[BUG]  [BUGGY]  Long  available  =  this.entrySize  -  numToSkip;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  Long  available  =  this.entrySize  -  numToSkip;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	Long  available  =  this.entrySize  -  numToSkip;	  Long    available    =    entrySize    -    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
171	[BUG]  [BUGGY]  Long  available  =  entryOffset  -  numToSkip;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  Long  available  =  entryOffset  -  numToSkip;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	Long  available  =  entryOffset  -  numToSkip;	  Long    available    =    entrySize    -    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
172	[BUG]  [BUGGY]  int  available  =  entrySize  -  this.entrySize;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  entrySize  -  this.entrySize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  entrySize  -  this.entrySize;	  long    available    =    entrySize    -    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
173	[BUG]  [BUGGY]  long  available  =  entryOffset  *  recordSize;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entryOffset  *  recordSize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryOffset  *  recordSize;	  long    available    =    entrySize    *    recordSize;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
174	[BUG]  [BUGGY]  long  available  =  this.entrySize  *  recordSize;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.entrySize  *  recordSize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entrySize  *  recordSize;	  long    available    =    entrySize    *    recordSize;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
175	[BUG]  [BUGGY]  long  available  =  numToSkip  -  entrySize  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  numToSkip  -  entrySize  +  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  numToSkip  -  entrySize  +  1;	  long    available    =    entrySize    -    numToSkip    +    1;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
176	[BUG]  [BUGGY]  long  available  =  entrySize  -  numToSkip  +  1L;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  -  numToSkip  +  1L;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  -  numToSkip  +  1L;	  long    available    =    entrySize    -    numToSkip    +    1;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
177	[BUG]  [BUGGY]  long  available  =  entrySize  -  numToSkip  *  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  -  numToSkip  *  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  -  numToSkip  *  1;	  long    available    =    entrySize    -    numToSkip    +    1;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
178	[BUG]  [BUGGY]  long  available  =  numToSkip  -  getEntryOffset();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  numToSkip  -  getEntryOffset();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  numToSkip  -  getEntryOffset();	  long    available    =    entrySize    -    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
179	[BUG]  [BUGGY]  long  available  =  entrySize  -  getEntryOffset()  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  -  getEntryOffset()  +  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  -  getEntryOffset()  +  1;	  long    available    =    entrySize    -    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
180	[BUG]  [BUGGY]  long  available  =  entryOffset  -  getEntrySize();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entryOffset  -  getEntrySize();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryOffset  -  getEntrySize();	  long    available    =    entrySize    -    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
181	[BUG]  [BUGGY]  long  available  =  entrySize  /  getEntryOffset();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  /  getEntryOffset();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  /  getEntryOffset();	  long    available    =    entrySize    -    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
182	[BUG]  [BUGGY]  long  available  =  this.entrySize  -  getEntryOffset();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.entrySize  -  getEntryOffset();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entrySize  -  getEntryOffset();	  long    available    =    entrySize    -    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
183	[BUG]  [BUGGY]  long  available  =  entrySize  -  getEntryStart();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  -  getEntryStart();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  -  getEntryStart();	  long    available    =    entrySize    -    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
184	[BUG]  [BUGGY]  long  numToSkip  =  this.getEntrySize();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  numToSkip  =  this.getEntrySize();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  numToSkip  =  this.getEntrySize();	  int    numToSkip    =    this.getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
185	[BUG]  [BUGGY]  int  numToSkip  =  this.getEntrySize()  +  1;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  numToSkip  =  this.getEntrySize()  +  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  this.getEntrySize()  +  1;	  int    numToSkip    =    this.getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
186	[BUG]  [BUGGY]  int  numToSkip  =  this.getEntrySize()  -  1;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  numToSkip  =  this.getEntrySize()  -  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  this.getEntrySize()  -  1;	  int    numToSkip    =    this.getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
187	[BUG]  [BUGGY]  int  numToSkip  =  this.getEntrySize(numToSkip);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  numToSkip  =  this.getEntrySize(numToSkip);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  this.getEntrySize(numToSkip);	  int    numToSkip    =    this.getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
188	[BUG]  [BUGGY]  int  numToSkip  =  this.getEntryOffset();  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  numToSkip  =  this.getEntryOffset();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  this.getEntryOffset();	  int    numToSkip    =    this.getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
189	[BUG]  [BUGGY]  int  numToSkip  =  currEntry.getEntrySize();  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  numToSkip  =  currEntry.getEntrySize();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  currEntry.getEntrySize();	  int    numToSkip    =    this.getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
190	[BUG]  [BUGGY]  int  numToSkip  =  available.read();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  numToSkip  =  available.read();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  available.read();	  int    numToSkip    =    is.read();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
191	[BUG]  [BUGGY]  long  numToSkip  =  is.read();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  numToSkip  =  is.read();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  numToSkip  =  is.read();	  int    numToSkip    =    is.read();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
192	[BUG]  [BUGGY]  int  numToSkip  =  is.read(this);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  numToSkip  =  is.read(this);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  is.read(this);	  int    numToSkip    =    is.read();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
193	[BUG]  [BUGGY]  int  numToSkip  =  is.readUTF();  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  numToSkip  =  is.readUTF();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  is.readUTF();	  int    numToSkip    =    is.read();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
194	[BUG]  [BUGGY]  int  numToSkip  =  is.readLine();  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  numToSkip  =  is.readLine();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  is.readLine();	  int    numToSkip    =    is.read();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
195	[BUG]  [BUGGY]  int  numToSkip  =  is.readFully(available);  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  numToSkip  =  is.readFully(available);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  is.readFully(available);	  int    numToSkip    =    is.read();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
196	[BUG]  [BUGGY]  long  entryOffset  =  getEntrySize();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  entryOffset  =  getEntrySize();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  entryOffset  =  getEntrySize();	  int    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
197	[BUG]  [BUGGY]  int  entryOffset  =  getEntrySize()  +  1;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntrySize()  +  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  entryOffset  =  getEntrySize()  +  1;	  int    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
198	[BUG]  [BUGGY]  int  entryOffset  =  getEntrySize()  -  1;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntrySize()  -  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  entryOffset  =  getEntrySize()  -  1;	  int    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
199	[BUG]  [BUGGY]  int  entryOffset  =  getEntrySize(numToSkip);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntrySize(numToSkip);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  entryOffset  =  getEntrySize(numToSkip);	  int    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
200	[BUG]  [BUGGY]  int  entryOffset  =  getEntryLength();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntryLength();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  entryOffset  =  getEntryLength();	  int    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
201	[BUG]  [BUGGY]  int  entryOffset  =  getEntrySize()  -  numToSkip;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntrySize()  -  numToSkip;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  entryOffset  =  getEntrySize()  -  numToSkip;	  int    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
202	[BUG]  [BUGGY]  int  entryOffset  =  getEntrySize()  +  numToSkip;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntrySize()  +  numToSkip;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  entryOffset  =  getEntrySize()  +  numToSkip;	  int    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
203	[BUG]  [BUGGY]  long  available  =  numToSkip  /  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  numToSkip  /  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  numToSkip  /  1;	  long    available    =    entrySize    /    1;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
204	[BUG]  [BUGGY]  long  available  =  entrySize  /  4;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  /  4;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  /  4;	  long    available    =    entrySize    /    1;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
205	[BUG]  [BUGGY]  long  available  =  entrySize  /  8;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  /  8;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  /  8;	  long    available    =    entrySize    /    1;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
206	[BUG]  [BUGGY]  int  available  =  getOffset(numToSkip  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  getOffset(numToSkip  +  1);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  getOffset(numToSkip  +  1);	  int    available    =    getOffset(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
207	[BUG]  [BUGGY]  int  available  =  getOffset(numToSkip  -  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  getOffset(numToSkip  -  1);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  getOffset(numToSkip  -  1);	  int    available    =    getOffset(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
208	[BUG]  [BUGGY]  long  available  =  getOffset(numToSkip);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  getOffset(numToSkip);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  getOffset(numToSkip);	  int    available    =    getOffset(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
209	[BUG]  [BUGGY]  int  available  =  getOffset(numToSkip,  0);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  getOffset(numToSkip,  0);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  getOffset(numToSkip,  0);	  int    available    =    getOffset(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
210	[BUG]  [BUGGY]  int  available  =  getOffset(numToSkip)+  1;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  getOffset(numToSkip)+  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  getOffset(numToSkip)+  1;	  int    available    =    getOffset(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
211	[BUG]  [BUGGY]  long  available  =  this.entryLimit  -  entrySize;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.entryLimit  -  entrySize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entryLimit  -  entrySize;	  long    available    =    entrySize    -    this.entryLimit;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
212	[BUG]  [BUGGY]  long  available  =  numToSkip  -  this.entryLimit;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  numToSkip  -  this.entryLimit;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  numToSkip  -  this.entryLimit;	  long    available    =    entrySize    -    this.entryLimit;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
213	[BUG]  [BUGGY]  long  available  =  this.entrySize  -  entryLimit;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.entrySize  -  entryLimit;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entrySize  -  entryLimit;	  long    available    =    entrySize    -    this.entryLimit;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
214	[BUG]  [BUGGY]  long  available  =  entrySize  /  this.entryLimit;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  /  this.entryLimit;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  /  this.entryLimit;	  long    available    =    entrySize    -    this.entryLimit;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
215	[BUG]  [BUGGY]  long  available  =  numToSkip  *  RecordSize;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  numToSkip  *  RecordSize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  numToSkip  *  RecordSize;	  long    available    =    entrySize    *    RecordSize;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
216	[BUG]  [BUGGY]  long  available  =  entrySize  /  RecordSize;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  /  RecordSize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  /  RecordSize;	  long    available    =    entrySize    *    RecordSize;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
217	[BUG]  [BUGGY]  long  available  =  entryOffset  *  RecordSize;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entryOffset  *  RecordSize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryOffset  *  RecordSize;	  long    available    =    entrySize    *    RecordSize;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
218	[BUG]  [BUGGY]  long  available  =  entrySize  *  RecordSize  +  1;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  *  RecordSize  +  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  *  RecordSize  +  1;	  long    available    =    entrySize    *    RecordSize;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
219	[BUG]  [BUGGY]  long  available  =  this.entrySize  *  RecordSize;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.entrySize  *  RecordSize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entrySize  *  RecordSize;	  long    available    =    entrySize    *    RecordSize;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
220	[BUG]  [BUGGY]  byte[]  available  =  getAvailableFields().length;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  byte[]  available  =  getAvailableFields().length;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	byte[]  available  =  getAvailableFields().length;	  byte[]    available    =    getAvailableFields();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
221	[BUG]  [BUGGY]  byte[]  available  =  getAvailableFields(numToSkip);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  byte[]  available  =  getAvailableFields(numToSkip);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	byte[]  available  =  getAvailableFields(numToSkip);	  byte[]    available    =    getAvailableFields();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
222	[BUG]  [BUGGY]  byte[]  available  =  getAvailableFields().skip(numToSkip);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  byte[]  available  =  getAvailableFields().skip(numToSkip);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	byte[]  available  =  getAvailableFields().skip(numToSkip);	  byte[]    available    =    getAvailableFields();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
223	[BUG]  [BUGGY]  byte[]  available  =  getAvailableFields().remove(numToSkip);  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  byte[]  available  =  getAvailableFields().remove(numToSkip);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	byte[]  available  =  getAvailableFields().remove(numToSkip);	  byte[]    available    =    getAvailableFields();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
224	[BUG]  [BUGGY]  byte[]  available  =  getAvailableFields().getBytes(numToSkip);  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  byte[]  available  =  getAvailableFields().getBytes(numToSkip);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	byte[]  available  =  getAvailableFields().getBytes(numToSkip);	  byte[]    available    =    getAvailableFields();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
225	[BUG]  [BUGGY]  long  numToSkip  =  IOUtils.size();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  numToSkip  =  IOUtils.size();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  numToSkip  =  IOUtils.size();	  int    numToSkip    =    IOUtils.size();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
226	[BUG]  [BUGGY]  int  numToSkip  =  IOUtils.size(available);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  numToSkip  =  IOUtils.size(available);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  IOUtils.size(available);	  int    numToSkip    =    IOUtils.size();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
227	[BUG]  [BUGGY]  int  numToSkip  =  available.size();  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  numToSkip  =  available.size();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  available.size();	  int    numToSkip    =    IOUtils.size();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
228	[BUG]  [BUGGY]  int  numToSkip  =  IOUtils.size()  -  1;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  numToSkip  =  IOUtils.size()  -  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  IOUtils.size()  -  1;	  int    numToSkip    =    IOUtils.size();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
229	[BUG]  [BUGGY]  int  numToSkip  =  IOUtils.size()  +  1;  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  numToSkip  =  IOUtils.size()  +  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  IOUtils.size()  +  1;	  int    numToSkip    =    IOUtils.size();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
230	[BUG]  [BUGGY]  byte  numToSkip  =  IOUtils.size();  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  byte  numToSkip  =  IOUtils.size();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	byte  numToSkip  =  IOUtils.size();	  int    numToSkip    =    IOUtils.size();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
231	[BUG]  [BUGGY]  InputStream  is  =  getInputStream(numToSkip);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  InputStream  is  =  getInputStream(numToSkip);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	InputStream  is  =  getInputStream(numToSkip);	  InputStream    is    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
232	[BUG]  [BUGGY]  InputStream  is  =  this.getInputStream();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  InputStream  is  =  this.getInputStream();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	InputStream  is  =  this.getInputStream();	  InputStream    is    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
233	[BUG]  [BUGGY]  InputStream  is  =  getRecordSize();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  InputStream  is  =  getRecordSize();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	InputStream  is  =  getRecordSize();	  InputStream    is    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
234	[BUG]  [BUGGY]  InputStream  is  =  getInputStream().readLine();  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  InputStream  is  =  getInputStream().readLine();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	InputStream  is  =  getInputStream().readLine();	  InputStream    is    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
235	[BUG]  [BUGGY]  InputStream  is  =  getInputStream(available);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  InputStream  is  =  getInputStream(available);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	InputStream  is  =  getInputStream(available);	  InputStream    is    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
236	[BUG]  [BUGGY]  InputStream  is  =  getOutputStream();  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  InputStream  is  =  getOutputStream();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	InputStream  is  =  getOutputStream();	  InputStream    is    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
237	[BUG]  [BUGGY]  long  available  =  this.entrySize  /  recordSize;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.entrySize  /  recordSize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entrySize  /  recordSize;	  long    available    =    entrySize    /    recordSize;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
238	[BUG]  [BUGGY]  long  available  =  entrySize  /  recordSize  +  1;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  /  recordSize  +  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  /  recordSize  +  1;	  long    available    =    entrySize    /    recordSize;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
239	[BUG]  [BUGGY]  long  available  =  this.entryOffset  -  recordSize;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.entryOffset  -  recordSize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entryOffset  -  recordSize;	  long    available    =    this.entrySize    -    recordSize;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
240	[BUG]  [BUGGY]  long  available  =  numToSkip  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  numToSkip  +  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  numToSkip  +  1;	  long    available    =    numToSkip    -    1;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
241	[BUG]  [BUGGY]  int  available  =  numToSkip  -  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  numToSkip  -  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  numToSkip  -  1;	  long    available    =    numToSkip    -    1;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
242	[BUG]  [BUGGY]  long  available  =  blockSize  -  entrySize;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  blockSize  -  entrySize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  blockSize  -  entrySize;	  long    available    =    entrySize    -    blockSize;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
243	[BUG]  [BUGGY]  long  available  =  this.entrySize  -  blockSize;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.entrySize  -  blockSize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entrySize  -  blockSize;	  long    available    =    entrySize    -    blockSize;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
244	[BUG]  [BUGGY]  long  available  =  entryOffset  -  blockSize;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entryOffset  -  blockSize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryOffset  -  blockSize;	  long    available    =    entrySize    -    blockSize;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
245	[BUG]  [BUGGY]  long  numToSkip  =  IOUtils.skip(available);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  numToSkip  =  IOUtils.skip(available);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  numToSkip  =  IOUtils.skip(available);	  int    numToSkip    =    IOUtils.skip(available);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
246	[BUG]  [BUGGY]  int  numToSkip  =  IOUtils.skip(available,  0);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  numToSkip  =  IOUtils.skip(available,  0);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  IOUtils.skip(available,  0);	  int    numToSkip    =    IOUtils.skip(available);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
247	[BUG]  [BUGGY]  int  numToSkip  =  IOUtils.skip(this.available);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  numToSkip  =  IOUtils.skip(this.available);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  IOUtils.skip(this.available);	  int    numToSkip    =    IOUtils.skip(available);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
248	[BUG]  [BUGGY]  int  numToSkip  =  IOUtils.skip(available,  available);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  numToSkip  =  IOUtils.skip(available,  available);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  IOUtils.skip(available,  available);	  int    numToSkip    =    IOUtils.skip(available);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
249	[BUG]  [BUGGY]  int  numToSkip  =  IOUtils.skip(available,  true);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  numToSkip  =  IOUtils.skip(available,  true);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  IOUtils.skip(available,  true);	  int    numToSkip    =    IOUtils.skip(available);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
250	[BUG]  [BUGGY]  long  available  =  entrySize  -  entryStart;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  -  entryStart;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  -  entryStart;	  long    available    =    entryStart    -    entrySize;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
251	[BUG]  [BUGGY]  long  available  =  entryStart  /  entrySize;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entryStart  /  entrySize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryStart  /  entrySize;	  long    available    =    entryStart    -    entrySize;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
252	[BUG]  [BUGGY]  long  available  =  numToSkip  -  entrySize,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  numToSkip  -  entrySize,  hasHitEOF;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  numToSkip  -  entrySize,  hasHitEOF;	  long    available    =    entrySize    -    numToSkip,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
253	[BUG]  [BUGGY]  long  available  =  entrySize  -  numToSkip,  skipped;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  -  numToSkip,  skipped;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  -  numToSkip,  skipped;	  long    available    =    entrySize    -    numToSkip,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
254	[BUG]  [BUGGY]  long  available  =  entrySize  -  numToSkip,  hasHitEOF,  is.length;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  -  numToSkip,  hasHitEOF,  is.length;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  -  numToSkip,  hasHitEOF,  is.length;	  long    available    =    entrySize    -    numToSkip,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
255	[BUG]  [BUGGY]  long  available  =  entrySize  -  numToSkip,  hasHitEOF  +  1;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  -  numToSkip,  hasHitEOF  +  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  -  numToSkip,  hasHitEOF  +  1;	  long    available    =    entrySize    -    numToSkip,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
256	[BUG]  [BUGGY]  long  available  =  entrySize  -  numToSkip,  hasHitEOF,  isEncoding;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  -  numToSkip,  hasHitEOF,  isEncoding;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  -  numToSkip,  hasHitEOF,  isEncoding;	  long    available    =    entrySize    -    numToSkip,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
257	[BUG]  [BUGGY]  int  available  =  recordSize  -  entrySize;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  recordSize  -  entrySize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  recordSize  -  entrySize;	  long    available    =    recordSize    -    entrySize;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
258	[BUG]  [BUGGY]  long  available  =  entrySize  -  fileSize;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  -  fileSize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  -  fileSize;	  long    available    =    recordSize    -    entrySize;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
259	[BUG]  [BUGGY]  Long  available  =  this.entrySize  -  entrySize;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  Long  available  =  this.entrySize  -  entrySize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	Long  available  =  this.entrySize  -  entrySize;	  long    available    =    entrySize    -    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
260	[BUG]  [BUGGY]  long  available  =  this.numToSkip  -  this.entrySize;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.numToSkip  -  this.entrySize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.numToSkip  -  this.entrySize;	  long    available    =    entrySize    -    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
261	[BUG]  [BUGGY]  long  available  =  this.entrySize  -  accessSize;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.entrySize  -  accessSize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entrySize  -  accessSize;	  long    available    =    entrySize    -    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
262	[BUG]  [BUGGY]  long  available  =  entrySize  -  4;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  -  4;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  -  4;	  long    available    =    entrySize    -    2;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
263	[BUG]  [BUGGY]  long  available  =  entrySize  -  this.recordSize;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  -  this.recordSize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  -  this.recordSize;	  long    available    =    recordSize    -    entrySize;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
264	[BUG]  [BUGGY]  Long  available  =  entrySize  -  recordSize;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  Long  available  =  entrySize  -  recordSize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	Long  available  =  entrySize  -  recordSize;	  long    available    =    recordSize    -    entrySize;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
265	[BUG]  [BUGGY]  long  available  =  numToSkip  -  1  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  numToSkip  -  1  +  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  numToSkip  -  1  +  1;	  long    available    =    numToSkip    -    1;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
266	[BUG]  [BUGGY]  InputStream  is  =  getRecordInputStream();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  InputStream  is  =  getRecordInputStream();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	InputStream  is  =  getRecordInputStream();	  InputStream    is    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
267	[BUG]  [BUGGY]  long  available  =  entrySize  *  8;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  *  8;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  *  8;	  long    available    =    entrySize    *    1;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
268	[BUG]  [BUGGY]  long  available  =  entryOffset  -  numToSkip  +  length;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entryOffset  -  numToSkip  +  length;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryOffset  -  numToSkip  +  length;	  long    available    =    entryOffset    -    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
269	[BUG]  [BUGGY]  byte[]  available  =  getAvailableFields()  +  1;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  byte[]  available  =  getAvailableFields()  +  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	byte[]  available  =  getAvailableFields()  +  1;	  byte[]    available    =    getAvailableFields();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
270	[BUG]  [BUGGY]  byte[]  available  =  getAvailableFields().skipAndStart(numToSkip);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  byte[]  available  =  getAvailableFields().skipAndStart(numToSkip);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	byte[]  available  =  getAvailableFields().skipAndStart(numToSkip);	  byte[]    available    =    getAvailableFields();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
271	[BUG]  [BUGGY]  long  available  =  length  -  blockSize;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  length  -  blockSize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  length  -  blockSize;	  long    available    =    entrySize    -    blockSize;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
272	[BUG]  [BUGGY]  long  available  =  this.entryOffset  -  this.entrySize;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.entryOffset  -  this.entrySize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entryOffset  -  this.entrySize;	  long    available    =    entryOffset    -    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
273	[BUG]  [BUGGY]  long  available  =  this.entryOffset  *  numToSkip;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.entryOffset  *  numToSkip;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entryOffset  *  numToSkip;	  long    available    =    entryOffset    *    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
274	[BUG]  [BUGGY]  int  hasHitEOF  =  available?  getHitEOF()  :  0;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  available?  getHitEOF()  :  0;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  hasHitEOF  =  available?  getHitEOF()  :  0;	  int    hasHitEOF    =    is.hasHitEOF?    getHitEOF()    :    0;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
275	[BUG]  [BUGGY]  int  hasHitEOF  =  is.getHitEOF()?  getHitEOF()  :  0;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  is.getHitEOF()?  getHitEOF()  :  0;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  hasHitEOF  =  is.getHitEOF()?  getHitEOF()  :  0;	  int    hasHitEOF    =    is.hasHitEOF?    getHitEOF()    :    0;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
276	[BUG]  [BUGGY]  long  available  =  entryToSkip  *  numToSkip;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entryToSkip  *  numToSkip;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryToSkip  *  numToSkip;	  long    available    =    numToSkip    *    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
277	[BUG]  [BUGGY]  long  available  =  this.entrySize  /  entrySize;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.entrySize  /  entrySize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entrySize  /  entrySize;	  long    available    =    entrySize    /    this.blockSize;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
278	[BUG]  [BUGGY]  long  available  =  entrySize  /  this.blockSize  *  numToSkip;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  /  this.blockSize  *  numToSkip;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  /  this.blockSize  *  numToSkip;	  long    available    =    entrySize    /    this.blockSize;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
279	[BUG]  [BUGGY]  long  available  =  this.entrySize  *  this.blockSize;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.entrySize  *  this.blockSize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entrySize  *  this.blockSize;	  long    available    =    entrySize    *    this.blockSize;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
280	[BUG]  [BUGGY]  int  available  =  getOffset(numToSkip  +  1).length();  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  getOffset(numToSkip  +  1).length();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  getOffset(numToSkip  +  1).length();	  int    available    =    getOffset(numToSkip).length();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
281	[BUG]  [BUGGY]  int  entrySize  =  getEntrySize(available);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntrySize(available);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  entrySize  =  getEntrySize(available);	  int    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
282	[BUG]  [BUGGY]  int  numToSkip  =  IOUtils.skip(available,  is);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  numToSkip  =  IOUtils.skip(available,  is);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  IOUtils.skip(available,  is);	  int    numToSkip    =    IOUtils.skip(available);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
283	[BUG]  [BUGGY]  byte  numToSkip  =  IOUtils.skip(available);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  byte  numToSkip  =  IOUtils.skip(available);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	byte  numToSkip  =  IOUtils.skip(available);	  int    numToSkip    =    IOUtils.skip(available);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
284	[BUG]  [BUGGY]  InputStream  is  =  this.currEntry.getInputStream(-1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  InputStream  is  =  this.currEntry.getInputStream(-1);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	InputStream  is  =  this.currEntry.getInputStream(-1);	  InputStream    is    =    this.currEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
285	[BUG]  [BUGGY]  InputStream  is  =  getCurrentEntry().getInputStream();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  InputStream  is  =  getCurrentEntry().getInputStream();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	InputStream  is  =  getCurrentEntry().getInputStream();	  InputStream    is    =    this.currEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
286	[BUG]  [BUGGY]  long  available  =  this.entrySize  -  this.blockSize;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.entrySize  -  this.blockSize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entrySize  -  this.blockSize;	  long    available    =    this.entrySize    -    recordSize;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
287	[BUG]  [BUGGY]  long  available  =  recordSize  /  entrySize;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  recordSize  /  entrySize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  recordSize  /  entrySize;	  long    available    =    entrySize    /    recordSize;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
288	[BUG]  [BUGGY]  long  available  =  entryOffset  -  6;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entryOffset  -  6;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryOffset  -  6;	  long    available    =    entryOffset    -    1;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
289	[BUG]  [BUGGY]  long  available  =  entryStart  -  numToSkip  +  length;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entryStart  -  numToSkip  +  length;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryStart  -  numToSkip  +  length;	  long    available    =    entryStart    -    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
290	[BUG]  [BUGGY]  long  available  =  this.entrySize  -  this.entryOffset;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.entrySize  -  this.entryOffset;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entrySize  -  this.entryOffset;	  long    available    =    entrySize    -    this.entryOffset;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
291	[BUG]  [BUGGY]  long  available  =  entryOffset  /  size  +  1;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entryOffset  /  size  +  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryOffset  /  size  +  1;	  long    available    =    entryOffset    /    size;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
292	[BUG]  [BUGGY]  int  available  =  getOffset()  +  numToSkip;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  getOffset()  +  numToSkip;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  getOffset()  +  numToSkip;	  int    available    =    getOffset();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
293	[BUG]  [BUGGY]  long  available  =  entrySize  *  RecordSize  +  numToSkip;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  *  RecordSize  +  numToSkip;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  *  RecordSize  +  numToSkip;	  long    available    =    entrySize    *    RecordSize;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
294	[BUG]  [BUGGY]  int  numToSkip  =  available.getEntrySize();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  numToSkip  =  available.getEntrySize();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  available.getEntrySize();	  int    numToSkip    =    this.getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
295	[BUG]  [BUGGY]  int  numToSkip  =  this.getEntrySize(available);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  numToSkip  =  this.getEntrySize(available);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  this.getEntrySize(available);	  int    numToSkip    =    this.getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
296	[BUG]  [BUGGY]  long  available  =  this.entrySize  -  getEntryStart();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.entrySize  -  getEntryStart();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entrySize  -  getEntryStart();	  long    available    =    entrySize    -    this.entryStart;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
297	[BUG]  [BUGGY]  Long  available  =  this.entrySize  -  entryStart;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  Long  available  =  this.entrySize  -  entryStart;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	Long  available  =  this.entrySize  -  entryStart;	  long    available    =    entrySize    -    this.entryStart;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
298	[BUG]  [BUGGY]  int  available  =  getOffset(0,  numToSkip);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  getOffset(0,  numToSkip);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  getOffset(0,  numToSkip);	  int    available    =    getOffset(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
299	[BUG]  [BUGGY]  int  available  =  getOffsetFromLong(numToSkip);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  getOffsetFromLong(numToSkip);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  getOffsetFromLong(numToSkip);	  int    available    =    getOffset(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
300	[BUG]  [BUGGY]  int  available  =  getOffset(numToSkip  +  2);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  getOffset(numToSkip  +  2);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  getOffset(numToSkip  +  2);	  int    available    =    getOffset(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
301	[BUG]  [BUGGY]  int  available  =  getOffset(offset);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  getOffset(offset);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  getOffset(offset);	  int    available    =    getOffset(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
302	[BUG]  [BUGGY]  long  available  =  this.entrySize  *  1;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.entrySize  *  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entrySize  *  1;	  long    available    =    this.entrySize    -    1;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
303	[BUG]  [BUGGY]  Long  available  =  this.blockSize  -  entrySize;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  Long  available  =  this.blockSize  -  entrySize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	Long  available  =  this.blockSize  -  entrySize;	  long    available    =    entrySize    -    this.blockSize;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
304	[BUG]  [BUGGY]  long  available  =  entrySize  -  getRecordSize();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  -  getRecordSize();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  -  getRecordSize();	  long    available    =    entrySize    -    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
305	[BUG]  [BUGGY]  long  available  =  this.entrySize  *  entryOffset;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.entrySize  *  entryOffset;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entrySize  *  entryOffset;	  long    available    =    this.entrySize    /    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
306	[BUG]  [BUGGY]  long  available  =  numToSkip  -  recordSize  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  numToSkip  -  recordSize  +  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  numToSkip  -  recordSize  +  1;	  long    available    =    numToSkip    -    recordSize;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
307	[BUG]  [BUGGY]  long  available  =  entrySize  *  numToSkip  +  length;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  *  numToSkip  +  length;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  *  numToSkip  +  length;	  long    available    =    entrySize    *    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
308	[BUG]  [BUGGY]  int  numToSkip  =  is.read(available);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  numToSkip  =  is.read(available);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  is.read(available);	  int    numToSkip    =    is.read();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
309	[BUG]  [BUGGY]  int  numToSkip  =  is.read(data);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  numToSkip  =  is.read(data);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  is.read(data);	  int    numToSkip    =    is.read();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
310	[BUG]  [BUGGY]  long  available  =  this.entrySize  -  numToSkip,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.entrySize  -  numToSkip,  hasHitEOF;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entrySize  -  numToSkip,  hasHitEOF;	  long    available    =    entrySize    -    numToSkip,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
311	[BUG]  [BUGGY]  long  available  =  hasHitEOF  -  numToSkip;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  hasHitEOF  -  numToSkip;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  hasHitEOF  -  numToSkip;	  long    available    =    entrySize    -    numToSkip,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
312	[BUG]  [BUGGY]  long  available  =  is  -  numToSkip,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  is  -  numToSkip,  hasHitEOF;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  is  -  numToSkip,  hasHitEOF;	  long    available    =    entrySize    -    numToSkip,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
313	[BUG]  [BUGGY]  long  available  =  recordSize  -  entryOffset;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  recordSize  -  entryOffset;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  recordSize  -  entryOffset;	  long    available    =    entryOffset    -    recordSize;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
314	[BUG]  [BUGGY]  long  available  =  entrySize  /  numToSkip  +  4;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  /  numToSkip  +  4;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  /  numToSkip  +  4;	  long    available    =    entrySize    /    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
315	[BUG]  [BUGGY]  Long  available  =  entrySize  *  numToSkip;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  Long  available  =  entrySize  *  numToSkip;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	Long  available  =  entrySize  *  numToSkip;	  Long    available    =    entrySize    -    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
316	[BUG]  [BUGGY]  Long  available  =  entrySize  -  numToSkip  +  2;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  Long  available  =  entrySize  -  numToSkip  +  2;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	Long  available  =  entrySize  -  numToSkip  +  2;	  Long    available    =    entrySize    -    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
317	[BUG]  [BUGGY]  long  available  =  this.entrySize  -  this.entryLimit;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.entrySize  -  this.entryLimit;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entrySize  -  this.entryLimit;	  long    available    =    entrySize    -    this.entryLimit;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
318	[BUG]  [BUGGY]  long  available  =  entrySize  -  1L  +  length;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  -  1L  +  length;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  -  1L  +  length;	  long    available    =    entrySize    -    1L;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
319	[BUG]  [BUGGY]  int  available  =  getEntrySize();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  getEntrySize();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  getEntrySize();	  int    available    =    getVersion();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
320	[BUG]  [BUGGY]  int  available  =  getRecordSize();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  getRecordSize();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  getRecordSize();	  int    available    =    getVersion();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
321	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntry(available);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  getEntry(available);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	Integer  entryOffset  =  getEntry(available);	  Integer    entryOffset    =    getEntry(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
322	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntrySize(numToSkip);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  getEntrySize(numToSkip);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	Integer  entryOffset  =  getEntrySize(numToSkip);	  Integer    entryOffset    =    getEntry(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
323	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntry(numToSkip  +  2);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  getEntry(numToSkip  +  2);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	Integer  entryOffset  =  getEntry(numToSkip  +  2);	  Integer    entryOffset    =    getEntry(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
324	[BUG]  [BUGGY]  int  numToSkip  =  IOUtils.skip(available,  numToSkip  -  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  numToSkip  =  IOUtils.skip(available,  numToSkip  -  1);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  IOUtils.skip(available,  numToSkip  -  1);	  int    numToSkip    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
325	[BUG]  [BUGGY]  int  hasHitEOF  =  is.hasHitEOF()?  available  :  0;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  is.hasHitEOF()?  available  :  0;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  hasHitEOF  =  is.hasHitEOF()?  available  :  0;	  int    hasHitEOF    =    is.hasHitEOF();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
326	[BUG]  [BUGGY]  long  available  =  entries.length  *  entryOffset;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entries.length  *  entryOffset;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entries.length  *  entryOffset;	  long    available    =    numToSkip    *    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
327	[BUG]  [BUGGY]  long  available  =  this.entrySize  /  size;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.entrySize  /  size;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.entrySize  /  size;	  long    available    =    entryOffset    /    size;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
328	[BUG]  [BUGGY]  byte[]  available  =  getAvailableFields().clone();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  byte[]  available  =  getAvailableFields().clone();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	byte[]  available  =  getAvailableFields().clone();	  byte[]    available    =    getAvailableFields();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
329	[BUG]  [BUGGY]  byte[]  available  =  getAvailableFields().toArray(new  byte[numToSkip]);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  byte[]  available  =  getAvailableFields().toArray(new  byte[numToSkip]);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	byte[]  available  =  getAvailableFields().toArray(new  byte[numToSkip]);	  byte[]    available    =    getAvailableFields();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
330	[BUG]  [BUGGY]  long  available  =  this.numToSkip  -  entryOffset;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.numToSkip  -  entryOffset;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.numToSkip  -  entryOffset;	  long    available    =    entryOffset    -    this.entrySize;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
331	[BUG]  [BUGGY]  int  numToSkip  =  IOUtils.size()  -  2;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  numToSkip  =  IOUtils.size()  -  2;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  IOUtils.size()  -  2;	  int    numToSkip    =    IOUtils.size();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
332	[BUG]  [BUGGY]  int  numToSkip  =  this.currEntrySize.size();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  numToSkip  =  this.currEntrySize.size();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  this.currEntrySize.size();	  int    numToSkip    =    IOUtils.size();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
333	[BUG]  [BUGGY]  long  available  =  entrySize  /  blockSize  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  /  blockSize  +  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  /  blockSize  +  1;	  long    available    =    entrySize    /    blockSize;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
334	[BUG]  [BUGGY]  int  available  =  entrySize  -  entryOffset;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  entrySize  -  entryOffset;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  entrySize  -  entryOffset;	  int    available    =    numToSkip    -    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
335	[BUG]  [BUGGY]  long  available  =  this.numToSkip  -  entryStart;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.numToSkip  -  entryStart;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.numToSkip  -  entryStart;	  long    available    =    entryStart    -    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
336	[BUG]  [BUGGY]  int  available  =  getOffset(numToSkip  *  numToSkip);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  getOffset(numToSkip  *  numToSkip);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  getOffset(numToSkip  *  numToSkip);	  int    available    =    getOffset(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
337	[BUG]  [BUGGY]  int  available  =  getOffset(entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  getOffset(entrySize);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  getOffset(entrySize);	  int    available    =    getOffset(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
338	[BUG]  [BUGGY]  long  available  =  this.numToSkip  -  entrySize;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.numToSkip  -  entrySize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.numToSkip  -  entrySize;	  long    available    =    entrySize    -    this.entryLimit;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
339	[BUG]  [BUGGY]  int  numToSkip  =  IOUtils.skip(available  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  numToSkip  =  IOUtils.skip(available  +  1);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  IOUtils.skip(available  +  1);	  int    numToSkip    =    IOUtils.skip(available);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
340	[BUG]  [BUGGY]  int  available  =  getOffset(numToSkip).length  -  1;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  getOffset(numToSkip).length  -  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  getOffset(numToSkip).length  -  1;	  int    available    =    getOffset(numToSkip).length();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
341	[BUG]  [BUGGY]  int  available  =  getOffset(numToSkip).length()  /  2;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  available  =  getOffset(numToSkip).length()  /  2;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  available  =  getOffset(numToSkip).length()  /  2;	  int    available    =    getOffset(numToSkip).length();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
342	[BUG]  [BUGGY]  InputStream  is  =  getInputStream().skip(numToSkip);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  InputStream  is  =  getInputStream().skip(numToSkip);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	InputStream  is  =  getInputStream().skip(numToSkip);	  InputStream    is    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
343	[BUG]  [BUGGY]  int  entrySize  =  getEntryOffset();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntryOffset();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  entrySize  =  getEntryOffset();	  int    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
344	[BUG]  [BUGGY]  int  numToSkip  =  this.recordSize;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  numToSkip  =  this.recordSize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  this.recordSize;	  int    numToSkip    =    this.getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
345	[BUG]  [BUGGY]  int  numToSkip  =  this.currEntrySize;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  numToSkip  =  this.currEntrySize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  this.currEntrySize;	  int    numToSkip    =    this.getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
346	[BUG]  [BUGGY]  long  available  =  hasHitEOF  -  numToSkip,  entrySize;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  hasHitEOF  -  numToSkip,  entrySize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  hasHitEOF  -  numToSkip,  entrySize;	  long    available    =    entrySize    -    numToSkip,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
347	[BUG]  [BUGGY]  long  available  =  is.length  -  numToSkip,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  is.length  -  numToSkip,  hasHitEOF;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  is.length  -  numToSkip,  hasHitEOF;	  long    available    =    entrySize    -    numToSkip,    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
348	[BUG]  [BUGGY]  long  available  =  entrySize  *  EntryOffset;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  *  EntryOffset;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  *  EntryOffset;	  long    available    =    entryOffset    *    entrySize;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
349	[BUG]  [BUGGY]  long  available  =  entryToSkip  /  numToSkip;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entryToSkip  /  numToSkip;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entryToSkip  /  numToSkip;	  long    available    =    numToSkip    /    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
350	[BUG]  [BUGGY]  int  numToSkip  =  is.read(new  BigInteger(numToSkip));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  numToSkip  =  is.read(new  BigInteger(numToSkip));  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  is.read(new  BigInteger(numToSkip));	  int    numToSkip    =    is.read();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
351	[BUG]  [BUGGY]  int  numToSkip  =  is.read(Byte.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  numToSkip  =  is.read(Byte.MAX_VALUE);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  numToSkip  =  is.read(Byte.MAX_VALUE);	  int    numToSkip    =    is.read();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
352	[BUG]  [BUGGY]  int  hasHitEOF  =  is.hasHitEOF?  getHitEOF(numToSkip):  0;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  is.hasHitEOF?  getHitEOF(numToSkip):  0;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  hasHitEOF  =  is.hasHitEOF?  getHitEOF(numToSkip):  0;	  int    hasHitEOF    =    is.hasHitEOF?    getHitEOF()    :    0;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
353	[BUG]  [BUGGY]  int  hasHitEOF  =  is.hashCode?  getHitEOF()  :  0;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  is.hashCode?  getHitEOF()  :  0;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  hasHitEOF  =  is.hashCode?  getHitEOF()  :  0;	  int    hasHitEOF    =    is.hasHitEOF?    getHitEOF()    :    0;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
354	[BUG]  [BUGGY]  long  available  =  this.numToSkip  -  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  this.numToSkip  -  1;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  this.numToSkip  -  1;	  long    available    =    numToSkip    -    1;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
355	[BUG]  [BUGGY]  InputStream  is  =  this.currEntry.getInputStream(this.entrySize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  InputStream  is  =  this.currEntry.getInputStream(this.entrySize);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	InputStream  is  =  this.currEntry.getInputStream(this.entrySize);	  InputStream    is    =    this.currEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
356	[BUG]  [BUGGY]  long  available  =  entrySize  /  this.entryStart;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  entrySize  /  this.entryStart;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  entrySize  /  this.entryStart;	  long    available    =    entrySize    -    this.entryStart;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
357	[BUG]  [BUGGY]  Long  available  =  entrySize  /  this.entrySize;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  Long  available  =  entrySize  /  this.entrySize;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	Long  available  =  entrySize  /  this.entrySize;	  long    available    =    this.entrySize    /    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
358	[BUG]  [BUGGY]  int  hasHitEOF  =  is.hasHitEOF(available);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  is.hasHitEOF(available);  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  hasHitEOF  =  is.hasHitEOF(available);	  int    hasHitEOF    =    is.hasHitEOF();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
359	[BUG]  [BUGGY]  int  hasHitEOF  =  is.getHitEOF();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  is.getHitEOF();  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	int  hasHitEOF  =  is.getHitEOF();	  int    hasHitEOF    =    is.hasHitEOF();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
360	[BUG]  [BUGGY]  long  available  =  numToSkip  /  2;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {      [BUGGY]  long  available  =  numToSkip  /  2;  [BUGGY]      numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	196	196	1	replace	long  available  =  numToSkip  /  2;	  long    available    =    entrySize    -    2;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
