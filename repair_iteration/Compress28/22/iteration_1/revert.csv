projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(skipped+numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(skipped-available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(skipped-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(skipped+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=count(available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=skip(available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200encoding.count(available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipd);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*skipped,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*skipped,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip*skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*skipped,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip*available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skipped,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skipped,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skipped,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skipped,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip+skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available/skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(available,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(is,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intnumToSkip=IOUtils.skip(available,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(available+numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(available,numToSkip).longValue();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200InputStreamis=getInputStream();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=skip(numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200skip(numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intnumToSkip=skip(numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=numToSkip;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-sink);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip-available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-sinkSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(entrySize-available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-escapeSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*numToSkip,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available/numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*numToSkip+skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*numToSkip,skipd);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*numToSkip+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,entrySize,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,entryOffset,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToS
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200skipped=IOUtils.skip(available,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(entrySize-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*skipped-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(offset-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipd,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToS
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToS
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(entrySize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(skipped+1,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(skipped+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip+sink);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(skipped/numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(skipped+numToSkip,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip+split);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(skipped+numToSkip,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-SHORT_BUFFER_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-escapeOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-SHORT_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+1,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200cv.skip(available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>=numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,0);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,false);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped-1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*numToSkip,skip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>=numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<=numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skipped-available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skipped,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skipped-1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*skipped+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*skipped-1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intskipped=IOUtils.skip(available,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(available*numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200InputStreamis=currEntry.getInputStream();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intskipped=IOUtils.skip(available-numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>=numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,0);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*num
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intskipped=IOUtils.skip(available+numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intskipped=IOUtils.skip(available*numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skipped-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(skipped-available,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipd,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intnumToSkip=count(numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=count(skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(available);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip+SHORT_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip+skip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(skipped-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(access-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,num
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200encoding.encode(available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*SHORT_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*SHORT_BUFFER_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
