bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  numToSkip  =  count(available);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  numToSkip  =  count(available);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  count(available);	  count(available);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
2	[BUG]  [BUGGY]  numToSkip  =  skip(available);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  numToSkip  =  skip(available);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  skip(available);	  count(available);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
3	[BUG]  [BUGGY]  encoding.count(available);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  encoding.count(available);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	encoding.count(available);	  count(available);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
4	[BUG]  [BUGGY]  count(available,  skipd);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available,  skipd);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  skipd);	  count(available);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
5	[BUG]  [BUGGY]  count(available  *  entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  *  entrySize);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  entrySize);	  count(available    *    skipped);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
6	[BUG]  [BUGGY]  count(available  *  skipped,  numToSkip);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  *  skipped,  numToSkip);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  skipped,  numToSkip);	  count(available    *    skipped);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
7	[BUG]  [BUGGY]  count(available  *  skipped,  entrySize);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  *  skipped,  entrySize);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  skipped,  entrySize);	  count(available    *    skipped);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
8	[BUG]  [BUGGY]  count(numToSkip  *  skipped);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(numToSkip  *  skipped);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  *  skipped);	  count(available    *    skipped);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
9	[BUG]  [BUGGY]  count(available  *  skipped,  entryOffset);  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  *  skipped,  entryOffset);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  skipped,  entryOffset);	  count(available    *    skipped);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
10	[BUG]  [BUGGY]  count(numToSkip  *  available);  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(numToSkip  *  available);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  *  available);	  count(available    *    skipped);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
11	[BUG]  [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
12	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
13	[BUG]  [BUGGY]  if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
14	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
15	[BUG]  [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
16	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
17	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
18	[BUG]  [BUGGY]  count(available  +  skipped,  entrySize);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  +  skipped,  entrySize);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  skipped,  entrySize);	  count(available    +    skipped);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
19	[BUG]  [BUGGY]  count(available  +  skipped,  numToSkip);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  +  skipped,  numToSkip);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  skipped,  numToSkip);	  count(available    +    skipped);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
20	[BUG]  [BUGGY]  count(available  +  skipped,  entryOffset);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  +  skipped,  entryOffset);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  skipped,  entryOffset);	  count(available    +    skipped);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
21	[BUG]  [BUGGY]  count(available  +  entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  +  entrySize);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  entrySize);	  count(available    +    skipped);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
22	[BUG]  [BUGGY]  count(available  +  skipped,  available);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  +  skipped,  available);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  skipped,  available);	  count(available    +    skipped);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
23	[BUG]  [BUGGY]  count(numToSkip  +  skipped);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(numToSkip  +  skipped);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  +  skipped);	  count(available    +    skipped);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
24	[BUG]  [BUGGY]  count(available  /  skipped);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  /  skipped);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  /  skipped);	  count(available    +    skipped);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
25	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToSkip);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToSkip);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  skipped  =  IOUtils.skip(available,  numToSkip);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
26	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(is,  numToSkip);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  long  skipped  =  IOUtils.skip(is,  numToSkip);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  skipped  =  IOUtils.skip(is,  numToSkip);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
27	[BUG]  [BUGGY]  int  numToSkip  =  IOUtils.skip(available,  numToSkip);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  int  numToSkip  =  IOUtils.skip(available,  numToSkip);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  numToSkip  =  IOUtils.skip(available,  numToSkip);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
28	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available  +  numToSkip);  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  long  skipped  =  IOUtils.skip(available  +  numToSkip);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  skipped  =  IOUtils.skip(available  +  numToSkip);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
29	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToSkip).longValue();  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToSkip).longValue();  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  skipped  =  IOUtils.skip(available,  numToSkip).longValue();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
30	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available);  [CE]  illegal  start  of  type  [FE]                                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  long  skipped  =  IOUtils.skip(available);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  skipped  =  IOUtils.skip(available);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
31	[BUG]  [BUGGY]  InputStream  is  =  getInputStream();  [CE]  illegal  start  of  type  [FE]                                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  InputStream  is  =  getInputStream();  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	InputStream  is  =  getInputStream();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
32	[BUG]  [BUGGY]  count(numToSkip,  skipped);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(numToSkip,  skipped);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip,  skipped);	  count(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
33	[BUG]  [BUGGY]  numToSkip  =  skip(numToSkip);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  numToSkip  =  skip(numToSkip);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  skip(numToSkip);	  count(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
34	[BUG]  [BUGGY]  skip(numToSkip);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  skip(numToSkip);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	skip(numToSkip);	  count(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
35	[BUG]  [BUGGY]  count(available,  numToSkip);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available,  numToSkip);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  numToSkip);	  count(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
36	[BUG]  [BUGGY]  int  numToSkip  =  skip(numToSkip);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  int  numToSkip  =  skip(numToSkip);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  numToSkip  =  skip(numToSkip);	  count(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
37	[BUG]  [BUGGY]  numToSkip  =  numToSkip;  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  numToSkip  =  numToSkip;  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  numToSkip;	  count(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
38	[BUG]  [BUGGY]  count(available  -  sink);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  -  sink);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  sink);	  count(skipped    -    available);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
39	[BUG]  [BUGGY]  count(available  -  skip);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  -  skip);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skip);	  count(skipped    -    available);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
40	[BUG]  [BUGGY]  count(numToSkip  -  available);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(numToSkip  -  available);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  -  available);	  count(skipped    -    available);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
41	[BUG]  [BUGGY]  count(available  -  sinkSize);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  -  sinkSize);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  sinkSize);	  count(skipped    -    available);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
42	[BUG]  [BUGGY]  count(entrySize  -  available);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(entrySize  -  available);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(entrySize  -  available);	  count(skipped    -    available);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
43	[BUG]  [BUGGY]  count(available  -  escapeSize);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  -  escapeSize);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  escapeSize);	  count(skipped    -    available);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
44	[BUG]  [BUGGY]  count(available  -  skipped,  entrySize);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  -  skipped,  entrySize);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skipped,  entrySize);	  count(available    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
45	[BUG]  [BUGGY]  count(available  -  skipped,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  -  skipped,  hasHitEOF);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skipped,  hasHitEOF);	  count(available    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
46	[BUG]  [BUGGY]  count(numToSkip  -  skipped);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(numToSkip  -  skipped);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  -  skipped);	  count(available    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
47	[BUG]  [BUGGY]  count(available  -  skipped,  entryOffset);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  -  skipped,  entryOffset);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skipped,  entryOffset);	  count(available    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
48	[BUG]  [BUGGY]  count(available  -  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  -  entrySize);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  entrySize);	  count(available    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
49	[BUG]  [BUGGY]  count(available  -  skipped,  available);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  -  skipped,  available);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skipped,  available);	  count(available    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
50	[BUG]  [BUGGY]  count(available  *  numToSkip,  skipped);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  *  numToSkip,  skipped);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  numToSkip,  skipped);	  count(available    *    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
51	[BUG]  [BUGGY]  count(available  /  numToSkip);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  /  numToSkip);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  /  numToSkip);	  count(available    *    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
52	[BUG]  [BUGGY]  count(available  *  numToSkip  +  skipped);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  *  numToSkip  +  skipped);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  numToSkip  +  skipped);	  count(available    *    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
53	[BUG]  [BUGGY]  count(available  *  numToSkip,  skipd);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  *  numToSkip,  skipd);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  numToSkip,  skipd);	  count(available    *    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
54	[BUG]  [BUGGY]  count(available  *  numToSkip  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  *  numToSkip  +  1);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  numToSkip  +  1);	  count(available    *    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
55	[BUG]  [BUGGY]  count(available,  entrySize,  skipped);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available,  entrySize,  skipped);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  entrySize,  skipped);	  count(available,    skipped);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
56	[BUG]  [BUGGY]  count(available,  skipped,  numToSkip);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available,  skipped,  numToSkip);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  skipped,  numToSkip);	  count(available,    skipped);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
57	[BUG]  [BUGGY]  count(available,  skipped,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available,  skipped,  hasHitEOF);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  skipped,  hasHitEOF);	  count(available,    skipped);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
58	[BUG]  [BUGGY]  count(available,  skipped,  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available,  skipped,  entrySize);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  skipped,  entrySize);	  count(available,    skipped);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
59	[BUG]  [BUGGY]  count(available,  entrySize);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available,  entrySize);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  entrySize);	  count(available,    skipped);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
60	[BUG]  [BUGGY]  count(available,  skipped,  available);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available,  skipped,  available);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  skipped,  available);	  count(available,    skipped);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
61	[BUG]  [BUGGY]  count(available,  entryOffset,  skipped);  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available,  entryOffset,  skipped);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  entryOffset,  skipped);	  count(available,    skipped);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
62	[BUG]  [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
63	[BUG]  [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available,  numToSkip);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
64	[BUG]  [BUGGY]  if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToS  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToS  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToS	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
65	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
66	[BUG]  [BUGGY]  if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
67	[BUG]  [BUGGY]  skipped  =  IOUtils.skip(available,  numToSkip);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  skipped  =  IOUtils.skip(available,  numToSkip);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	skipped  =  IOUtils.skip(available,  numToSkip);	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
68	[BUG]  [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
69	[BUG]  [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
70	[BUG]  [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
71	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
72	[BUG]  [BUGGY]  if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
73	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
74	[BUG]  [BUGGY]  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
75	[BUG]  [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skip);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skip);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skip);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
76	[BUG]  [BUGGY]  count(entrySize  -  skipped);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(entrySize  -  skipped);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(entrySize  -  skipped);	  count(skipped    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
77	[BUG]  [BUGGY]  count(available  *  skipped  -  skipped);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  *  skipped  -  skipped);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  skipped  -  skipped);	  count(skipped    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
78	[BUG]  [BUGGY]  count(offset  -  skipped);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(offset  -  skipped);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(offset  -  skipped);	  count(skipped    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
79	[BUG]  [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
80	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
81	[BUG]  [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
82	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
83	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
84	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
85	[BUG]  [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  0;  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  0;  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
86	[BUG]  [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
87	[BUG]  [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
88	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
89	[BUG]  [BUGGY]  if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
90	[BUG]  [BUGGY]  if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
91	[BUG]  [BUGGY]  if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToS  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToS  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToS	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
92	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
93	[BUG]  [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
94	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
95	[BUG]  [BUGGY]  if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
96	[BUG]  [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
97	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
98	[BUG]  [BUGGY]  if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToS  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToS  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToS	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
99	[BUG]  [BUGGY]  if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
100	[BUG]  [BUGGY]  count(available  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  +  1);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  1);	  count(skipped    +    1);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
101	[BUG]  [BUGGY]  count(numToSkip  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(numToSkip  +  1);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  +  1);	  count(skipped    +    1);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
102	[BUG]  [BUGGY]  count(entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(entrySize  +  1);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(entrySize  +  1);	  count(skipped    +    1);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
103	[BUG]  [BUGGY]  count(skipped  +  1,  available);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(skipped  +  1,  available);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(skipped  +  1,  available);	  count(skipped    +    1);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
104	[BUG]  [BUGGY]  count(skipped  +  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(skipped  +  entrySize);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(skipped  +  entrySize);	  count(skipped    +    1);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
105	[BUG]  [BUGGY]  count(available  +  numToSkip);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  +  numToSkip);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  numToSkip);	  count(skipped    +    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
106	[BUG]  [BUGGY]  count(numToSkip  +  sink);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(numToSkip  +  sink);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  +  sink);	  count(skipped    +    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
107	[BUG]  [BUGGY]  count(skipped  /  numToSkip);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(skipped  /  numToSkip);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(skipped  /  numToSkip);	  count(skipped    +    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
108	[BUG]  [BUGGY]  count(skipped  +  numToSkip,  skipped);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(skipped  +  numToSkip,  skipped);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(skipped  +  numToSkip,  skipped);	  count(skipped    +    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
109	[BUG]  [BUGGY]  count(numToSkip  +  split);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(numToSkip  +  split);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  +  split);	  count(skipped    +    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
110	[BUG]  [BUGGY]  count(skipped  +  numToSkip,  available);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(skipped  +  numToSkip,  available);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(skipped  +  numToSkip,  available);	  count(skipped    +    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
111	[BUG]  [BUGGY]  count(available  -  SHORT_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  -  SHORT_BUFFER_SIZE);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  SHORT_BUFFER_SIZE);	  count(skipped    -    available);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
112	[BUG]  [BUGGY]  count(available  -  escapeOffset);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  -  escapeOffset);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  escapeOffset);	  count(skipped    -    available);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
113	[BUG]  [BUGGY]  count(available  -  SHORT_SIZE);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  -  SHORT_SIZE);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  SHORT_SIZE);	  count(skipped    -    available);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
114	[BUG]  [BUGGY]  count(available  +  1,  skipped);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  +  1,  skipped);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  1,  skipped);	  count(skipped    +    1);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
115	[BUG]  [BUGGY]  cv.skip(available);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  cv.skip(available);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	cv.skip(available);	  count(available);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
116	[BUG]  [BUGGY]  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
117	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
118	[BUG]  [BUGGY]  if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numTo  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numTo  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numTo	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
119	[BUG]  [BUGGY]  if(available  >=  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(available  >=  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >=  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
120	[BUG]  [BUGGY]  if(skipped  >  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
121	[BUG]  [BUGGY]  if(available  <  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(available  <  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
122	[BUG]  [BUGGY]  if(available  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(available  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  skipped  =  0;  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  skipped  =  0;  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
123	[BUG]  [BUGGY]  count(available  -  skipped,  numToSkip);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  -  skipped,  numToSkip);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skipped,  numToSkip);	  count(available    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
124	[BUG]  [BUGGY]  count(available  -  skipped  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  -  skipped  +  1);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skipped  +  1);	  count(available    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
125	[BUG]  [BUGGY]  count(available  -  skipped,  false);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  -  skipped,  false);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skipped,  false);	  count(available    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
126	[BUG]  [BUGGY]  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
127	[BUG]  [BUGGY]  if(skipped  >  numToSkip)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  numToSkip)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  numToSkip)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
128	[BUG]  [BUGGY]  if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
129	[BUG]  [BUGGY]  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
130	[BUG]  [BUGGY]  count(available,  skipped,  0);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available,  skipped,  0);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  skipped,  0);	  count(available,    skipped);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
131	[BUG]  [BUGGY]  count(available,  skipped  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available,  skipped  +  1);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  skipped  +  1);	  count(available,    skipped);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
132	[BUG]  [BUGGY]  count(available,  skipped  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available,  skipped  -  entryOffset);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  skipped  -  entryOffset);	  count(available,    skipped);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
133	[BUG]  [BUGGY]  count(available,  skipped  -  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available,  skipped  -  1);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  skipped  -  1);	  count(available,    skipped);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
134	[BUG]  [BUGGY]  count(available,  skipped,  is);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available,  skipped,  is);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  skipped,  is);	  count(available,    skipped);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
135	[BUG]  [BUGGY]  count(available  *  numToSkip,  skip);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  *  numToSkip,  skip);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  numToSkip,  skip);	  count(available    *    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
136	[BUG]  [BUGGY]  if(available  >=  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(available  >=  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >=  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
137	[BUG]  [BUGGY]  if(skipped  >  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
138	[BUG]  [BUGGY]  if(available  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(available  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
139	[BUG]  [BUGGY]  if(available  <  =  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(available  <  =  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  =  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
140	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
141	[BUG]  [BUGGY]  count(available  +  skipped  -  available);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  +  skipped  -  available);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  skipped  -  available);	  count(available    +    skipped);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
142	[BUG]  [BUGGY]  count(available  +  skipped,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  +  skipped,  hasHitEOF);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  skipped,  hasHitEOF);	  count(available    +    skipped);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
143	[BUG]  [BUGGY]  count(available  +  skipped  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  +  skipped  -  1);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  skipped  -  1);	  count(available    +    skipped);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
144	[BUG]  [BUGGY]  count(available  *  skipped  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  *  skipped  +  1);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  skipped  +  1);	  count(available    *    skipped);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
145	[BUG]  [BUGGY]  count(available  *  skipped  -  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  *  skipped  -  1);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  skipped  -  1);	  count(available    *    skipped);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
146	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(available,  numToSkip);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  int  skipped  =  IOUtils.skip(available,  numToSkip);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  skipped  =  IOUtils.skip(available,  numToSkip);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
147	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available  *  numToSkip);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  long  skipped  =  IOUtils.skip(available  *  numToSkip);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  skipped  =  IOUtils.skip(available  *  numToSkip);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
148	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getInputStream();  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  InputStream  is  =  currEntry.getInputStream();  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	InputStream  is  =  currEntry.getInputStream();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
149	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(available  -  numToSkip);  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  int  skipped  =  IOUtils.skip(available  -  numToSkip);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  skipped  =  IOUtils.skip(available  -  numToSkip);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
150	[BUG]  [BUGGY]  if(skipped  >  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
151	[BUG]  [BUGGY]  if(available  >=  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(available  >=  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >=  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
152	[BUG]  [BUGGY]  if(available  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(available  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
153	[BUG]  [BUGGY]  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
154	[BUG]  [BUGGY]  if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numTo  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numTo  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numTo	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
155	[BUG]  [BUGGY]  if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  num  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  num  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  num	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
156	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(available  +  numToSkip);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  int  skipped  =  IOUtils.skip(available  +  numToSkip);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  skipped  =  IOUtils.skip(available  +  numToSkip);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
157	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(available  *  numToSkip);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  int  skipped  =  IOUtils.skip(available  *  numToSkip);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  skipped  =  IOUtils.skip(available  *  numToSkip);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
158	[BUG]  [BUGGY]  if(skipped  >  numToSkip)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  numToSkip)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  numToSkip)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
159	[BUG]  [BUGGY]  if(skipped  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
160	[BUG]  [BUGGY]  if(skipped  >  numToSkip)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  numToSkip)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  numToSkip)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
161	[BUG]  [BUGGY]  count(available  +  skipped  -  entryOffset);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  +  skipped  -  entryOffset);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  skipped  -  entryOffset);	  count(available    +    skipped);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
162	[BUG]  [BUGGY]  count(skipped  -  available,  skipped);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(skipped  -  available,  skipped);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(skipped  -  available,  skipped);	  count(skipped    -    available);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
163	[BUG]  [BUGGY]  count(available,  skipped  -  entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available,  skipped  -  entrySize);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  skipped  -  entrySize);	  count(available,    skipped);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
164	[BUG]  [BUGGY]  if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
165	[BUG]  [BUGGY]  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
166	[BUG]  [BUGGY]  if(skipped  >  numToSkip)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  numToSkip)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  numToSkip)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
167	[BUG]  [BUGGY]  if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
168	[BUG]  [BUGGY]  int  numToSkip  =  count(numToSkip);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  int  numToSkip  =  count(numToSkip);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  numToSkip  =  count(numToSkip);	  count(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
169	[BUG]  [BUGGY]  numToSkip  =  count(skipped);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  numToSkip  =  count(skipped);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  count(skipped);	  count(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
170	[BUG]  [BUGGY]  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
171	[BUG]  [BUGGY]  if(skipped  >  numToSkip)  {  count(available);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  numToSkip)  {  count(available);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  numToSkip)  {  count(available);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
172	[BUG]  [BUGGY]  if(skipped  >  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
173	[BUG]  [BUGGY]  if(skipped  >  numToSkip)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  numToSkip)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  numToSkip)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
174	[BUG]  [BUGGY]  if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
175	[BUG]  [BUGGY]  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
176	[BUG]  [BUGGY]  if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
177	[BUG]  [BUGGY]  if(skipped  >  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
178	[BUG]  [BUGGY]  count(numToSkip  +  SHORT_SIZE);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(numToSkip  +  SHORT_SIZE);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  +  SHORT_SIZE);	  count(skipped    +    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
179	[BUG]  [BUGGY]  count(numToSkip  +  skip);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(numToSkip  +  skip);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  +  skip);	  count(skipped    +    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
180	[BUG]  [BUGGY]  count(skipped  -  entrySize);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(skipped  -  entrySize);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(skipped  -  entrySize);	  count(skipped    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
181	[BUG]  [BUGGY]  count(access  -  skipped);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(access  -  skipped);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(access  -  skipped);	  count(skipped    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
182	[BUG]  [BUGGY]  if(skipped  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
183	[BUG]  [BUGGY]  if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  num  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  num  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  num	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
184	[BUG]  [BUGGY]  encoding.encode(available);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  encoding.encode(available);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	encoding.encode(available);	  count(available);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
185	[BUG]  [BUGGY]  count(available  *  SHORT_SIZE);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  *  SHORT_SIZE);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  SHORT_SIZE);	  count(available    *    skipped);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
186	[BUG]  [BUGGY]  count(available  *  SHORT_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  count(available  *  SHORT_BUFFER_SIZE);  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  SHORT_BUFFER_SIZE);	  count(available    *    skipped);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
187	[BUG]  [BUGGY]  if(skipped  >  numToSkip)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  numToSkip)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  numToSkip)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
188	[BUG]  [BUGGY]  if(skipped  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
189	[BUG]  [BUGGY]  if(skipped  >  numToSkip)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);    [BUGGY]  if(skipped  >  numToSkip)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]    entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  numToSkip)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
