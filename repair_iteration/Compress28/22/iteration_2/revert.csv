projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(skipped+numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(skipped-available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(skipped-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(skipped+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=count(available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=skip(available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200encoding.count(available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipd);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*skipped,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*skipped,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip*skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*skipped,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip*available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skipped,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skipped,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skipped,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skipped,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip+skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available/skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(available,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(is,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intnumToSkip=IOUtils.skip(available,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(available+numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(available,numToSkip).longValue();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200InputStreamis=getInputStream();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=skip(numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200skip(numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intnumToSkip=skip(numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=numToSkip;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-sink);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip-available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-sinkSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(entrySize-available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-escapeSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*numToSkip,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available/numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*numToSkip+skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*numToSkip,skipd);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*numToSkip+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,entrySize,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,entryOffset,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToS
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200skipped=IOUtils.skip(available,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(entrySize-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*skipped-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(offset-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipd,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToS
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToS
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(entrySize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(skipped+1,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(skipped+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip+sink);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(skipped/numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(skipped+numToSkip,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip+split);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(skipped+numToSkip,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-SHORT_BUFFER_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-escapeOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-SHORT_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+1,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200cv.skip(available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>=numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,0);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,false);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped-1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*numToSkip,skip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>=numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<=numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skipped-available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skipped,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skipped-1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*skipped+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*skipped-1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intskipped=IOUtils.skip(available,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(available*numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200InputStreamis=currEntry.getInputStream();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intskipped=IOUtils.skip(available-numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>=numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,0);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*num
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intskipped=IOUtils.skip(available+numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intskipped=IOUtils.skip(available*numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skipped-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(skipped-available,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipd,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intnumToSkip=count(numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=count(skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(available);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip+SHORT_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip+skip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(skipped-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(access-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,num
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200encoding.encode(available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*SHORT_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*SHORT_BUFFER_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){if(skipped>0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(hasHitEOF){if(skipped>0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip<0){if(skipped>0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){if(skipped>0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToS
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){if(skipped>0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipd=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip<0){if(skipped>0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToS
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(hasHitEOF){if(skipped>0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipd=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip<available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>=available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipd,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipd,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200InputStreamis=getInputStream(available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200InputStreamis=this.getInputStream();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200InputStreamis=getInputStream(),available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200InputStreamis=getInputStream(available,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200InputStreamis=getRecordSize();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200InputStreamis=getInputStream().readLine();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip-available,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,entrySize,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,numToSkip,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,available,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-entrySize,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,numToSkip,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,hasHitEOF,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,entrySize,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,0,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,entryOffset,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,hasHitEOF,skip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,available,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,0);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,0);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){count(numToSkip);}else{System.arraycopy(available,0,skipped,available,numToSkip,0);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,0);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){count(available,0,skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,0);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){System.arraycopy(available,0,skipped,available,numToSkip,0);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,0);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(entrySize+numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(offset+numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intnumToSkip=numToSkip-available;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip-available,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip-=available;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200skip(available-numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+entrySize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(entrySize+skipped-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip+skipped-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skipped-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(entrySize+available-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+entrySize-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skipped-entryOffset,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<0){if(available<numToSkip){count(skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<numToSkip){if(available<numToSkip){count(skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(access-skipped,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(access-skipped,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(access-skipped,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>skipped){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*num
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){if(skipped>0){count(skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>skipped){count(skipped);}else{System.arraycopy(available,0,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*num
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=IOUtils.skip(available*numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>skipped){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){if(skipped>0){count(skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(available*numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>skipped){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){if(skipped>available){count(skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>skipped){count(skipped);}else{System.arraycopy(available,0,available,numToSkip,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>=available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipd,available,numToSkip,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>=available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<=numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>=available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<=numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>=numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip/sink);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip/skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip/split);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip/skip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip/squeeze);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>=numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<=numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>skipped){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped==numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>=0){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>=numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<=numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200skip(numToSkip,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200skip(numToSkip,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200skip(available,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200skip(available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200skip(numToSkip+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200skip(entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200skip(numToSkip,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*entrySize,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*entrySize+skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*entrySize-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip*entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*entrySize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<=numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>skipped){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>=0){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,entrySize,skipped,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,entrySize,skipped,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,entrySize,skipped,isHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,entrySize,skipped,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,entrySize,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,entrySize,skipped,blockSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,entrySize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped+1,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped+1,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip,available+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped+1,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,entryOffset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,entryOffset+skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-entrySize,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(entrySize-skipped,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,entryOffset,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-entrySize,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip-available,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,numToSkip,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip,available,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,entryOffset,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,available,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,0,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*escapeSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip-escapeSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(entrySize-escapeSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*numToSkip+1,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*numToSkip,skipped+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip*available+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available/numToSkip+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip*numToSkip+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>skipped){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(is,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>skipped){count(skipped);}else{System.arraycopy(available,0,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipd,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip+available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+sink);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>skipped){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>skipped){count(skipped);}else{System.arraycopy(available,0,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=count(available,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=IOUtils.skip(available,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=count(skipped,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=count(available,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=skip(skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=count(numToSkip,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=count(numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=count(offset,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,entrySize,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped,0,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,numToSkip,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,entryOffset,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped,0,available.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped,0,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip-available+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,entrySize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped+1,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,entryOffset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped+1,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped+1,entrySize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available/SHORT_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+SHORT_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip-SHORT_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available/skipped,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skipped,entryOffset,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skipped,entryOffset-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(entrySize+skipped,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skipped,entryOffset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(skipped*numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip<available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){if(available>0){count(skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*numToSkip,skipped,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*numToSkip,skipped,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available/numToSkip,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*numToSkip,skipped,is.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*numToSkip,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){count(skipped);}else{System.arraycopy(available,0,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){count(skipped);}else{System.arraycopy(available,0,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip/available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip*numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(offset/numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available/entrySize,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>=available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>=numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>=available){if(available>=numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){count(skipped);}else{System.arraycopy(available,0,skipd,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>=0){if(available>=numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>skipped){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>=available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipd,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intentrySize=entrySize-skipped;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>skipped){count(skipped);}else{System.arraycopy(available,0,available,numToSkip,skipped);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>skipped){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=IOUtils.skip(is,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,available,numToSkip,skipped);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipd,available,numToSkip,skipped);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*numToSkip+SHORT_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(entrySize+SHORT_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(skipped+SHORT_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>skipped){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipd,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>skipped){count(skipped);}else{System.arraycopy(available,0,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipd=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skipped,hasHitEOF,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skipped,entrySize,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skipped,hasHitEOF,is.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skipped,hasHitEOF,true);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skipped,hasHitEOF,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200skipped=IOUtils.skip(available,numToSkip,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200skipped=IOUtils.skip(is,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200skipped=IOUtils.skip(available,numToSkip+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200skipped=IOUtils.skip(numToSkip,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200skipped=IOUtils.skip(available,numToSkip,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200skipped=IOUtils.skip(access,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<=numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>=numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<=numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=numToSkip+1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=skipped;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=numToSkip+skipped;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=available;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=IOUtils.min(numToSkip,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,num
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipd,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipd=IOUtils.skip(available,numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(is,numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=skip(available,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=skip(available+skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=skipped(available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=skip(offset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=skip(available,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>skipped){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=IOUtils.skip(available,numToSkip);skipped=IOUtils.skip(available+numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){check(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<0){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>=0){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){check(skipped);}else{System.arraycopy(available,0,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){count(skipped);}else{System.arraycopy(available,0,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){count(skipped);}else{System.arraycopy(available,0,available,numToSkip,skipped);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,entrySize-1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,numToSkip-1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped-1,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip,available-1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>skipped){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>=numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>skipped){count(skipped);}else{System.arraycopy(available,0,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>skipped){count(skipped);}else{System.arraycopy(available,0,available,numToSkip,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*skipped-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*skipped-available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*skipped-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*numToSkip-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*skipped,entrySize-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*skipped/skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){if(skipped>0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip<0){if(skipped>0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){if(skipped>0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,num
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){if(skipped>0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipd=IOUtils.skip(available,numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(hasHitEOF){if(skipped>0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){if(skipped>0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip<0){if(skipped>0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){if(skipped>0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToS
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip<0){if(skipped>0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToS
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>skipped){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>skipped){count(skipped);}else{System.arraycopy(available,0,available,numToSkip,numToSkip);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){count(skipped);}else{System.arraycopy(available,0,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skip,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*skip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip-skip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(entrySize-skip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>skipped){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipd,available,numToSkip,numToSkip);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){if(skipped>0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){if(skipped>0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){if(skipped>0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipd+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>skipped){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>skipped){count(skipped);}else{System.arraycopy(available,0,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipd,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+entrySize,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available/entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,entryOffset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,numToSkip,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip,available,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(entrySize,available,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,entrySize,skipd);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available/entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available/skipped,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(entrySize/skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+1,sink);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+1,skipd);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip+1,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+1,split);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+1,selected);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip-skipped,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(skipped-numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*SHORT_BUFFER_SIZE,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available/SHORT_BUFFER_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*SHORT_BUFFER_SIZE+skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*SHORT_BUFFER_SIZE-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip*SHORT_BUFFER_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+entrySize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(entrySize+skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+1,entrySize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip<available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipd,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*entrySize,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*skipped,entryOffset+skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*numToSkip,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(entrySize*skipped,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*skipped,entryOffset-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>skipped){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){if(skipped>0){check(skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>=0){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+numToSkip+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip,skipped+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip+2);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){count(skipped);}else{System.arraycopy(available,0,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200skipped=IOUtils.skip(available*numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipd,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skipped*numToSkip-1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip+available-1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skipped,entrySize-1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skipped-1,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skipped*1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longnumToSkip=skip(numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intnumToSkip=skip(numToSkip,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intnumToSkip=skip(numToSkip,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intnumToSkip=skip(numToSkip+skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200bytenumToSkip=skip(numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intnumToSkip=skip(numToSkip+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intnumToSkip=skipped(numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*numToSkip-1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip*skipped-1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*entrySize-1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*skipped,entrySize-1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip*available-1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>skipped){count(skipped);}else{System.arraycopy(available,0,available,numToSkip,skipped);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,available,numToSkip,skipped);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>skipped){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipd,available,numToSkip,skipped);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=IOUtils.skip(available+numToS
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>skipped){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>skipped){count(skipped);}else{System.arraycopy(available,0,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(offset-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200skip(numToSkip-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(offset-available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*numToSkip,skipped,false);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*numToSkip,skipped,true);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longnumToSkip=IOUtils.skip(available,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intnumToSkip=IOUtils.skip(is,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intnumToSkip=IOUtils.skip(available,numToSkip,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intnumToSkip=IOUtils.skip(available,numToSkip+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200bytenumToSkip=IOUtils.skip(available,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(numToSkip,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intskipped=IOUtils.skip(is,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(access,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(entrySize,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(numToSkip,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>=numToSkip){count(skipped);}else{System.arraycopy(available,0,skipd,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){count(skipped);}else{System.arraycopy(available,0,skipd,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<0){count(skipped);}else{System.arraycopy(available,0,skipd,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){if(skipped>0){count(skipped);}else{System.arraycopy(available,0,skipd,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,entrySize-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,entrySize+skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,entrySize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(available/numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(available+numToSkip,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(available+numToSkip,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(available-numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(is+numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200encoding.count(available,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200encoding.count(available+skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200encoding.count(available,skipd);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200encoding.count(available,skip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200encoding.put(available,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200encoding.put(numToSkip,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+numToSkip,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip+skipped,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(skipped/numToSkip,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(offset+numToSkip,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(displayed+numToSkip,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(skipped+entrySize,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(available,numToS
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>skipped){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToS
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>skipped){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>skipped){count(skipped);}else{System.arraycopy(available,0,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToS
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>skipped){count(skipped);}else{System.arraycopy(available,0,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>skipped){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){count(skipped);}else{System.arraycopy(available,0,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<=numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipd+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>skipped){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>skipped){count(skipped);}else{System.arraycopy(available,0,available,numToSkip,skipped);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipd,available,numToSkip,skipped);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,available,numToSkip,skipped);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=IOUtils.skip(available*numToS
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(available+numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){if(skipped>0){skip(skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=IOUtils.skip(available+numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){if(skipped>0){skip(skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){if(skipped>0){skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped,false);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped,true);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped,fileSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipd,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,0);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,0);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,0);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){count(numToSkip);}else{System.arraycopy(available,0,skipped,available,numToSkip,0);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,0);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){System.arraycopy(available,0,skipped,available,numToSkip,0);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip<0){if(available>0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,0);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,skipd);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,skip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-sink,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,sink);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<numToSkip){if(available<numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=IOUtils.skip
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<numToSkip){if(available<numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=IOUtils.skip(available+numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<0){if(available<numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=IOUtils.skip(available+numToS
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<numToSkip){count(available);}else{System.arraycopy(available,0,available,numToSkip,skipped);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(entrySize-sinkSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*sinkSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-entryOffset,sinkSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=count(available+skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=count(available,skipd);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=count(available,skip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+1,skipped,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+1,skipped,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+1,skipped,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+1,skipped,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+1,skipped,is.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+1,skipped,false);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+1,skipped,fileSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip<available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,entryOffset,skipped,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,entryOffset,skipped,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,entryOffset,skipped,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,entryOffset,skipped,isHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,entryOffset,skipped,is.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,entryOffset,skipped,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(is,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(numToSkip,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(entrySize+available,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+entryOffset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(available*numToS
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=IOUtils.skip(available*numToS
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<0){if(available<numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<numToSkip){if(available<numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){if(available<numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+numToSkip,sink);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+numToSkip,skipd);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+numToSkip,selected);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip+skipped,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+numToSkip,skip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+numToSkip,saved);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*numToSkip+skipped,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*numToSkip+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*numToSkip+skipped,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*skipped+numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*numToSkip+skipped,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*numToSkip+entrySize,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available/skipped,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skipped,available-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*skipped,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skipped,available+numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip+entrySize,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longnumToSkip=count(numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intnumToSkip=count(numToSkip,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intnumToSkip=count(skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intnumToSkip=count(available,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intnumToSkip=count(numToSkip+skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intnumToSkip=count(entrySize,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200System.arraycopy(available,0,skipped,available,entrySize,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200System.arraycopy(available,0,numToSkip,available,numToSkip,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200System.arraycopy(available,0,skipped,entrySize,numToSkip,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200System.arraycopy(available,0,skipd,available,numToSkip,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200System.arraycopy(available,0,available,numToSkip,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200System.arraycopy(available,0,skipped,available,entryOffset,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,hasHitEOF,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped,hasHitEOF,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,numToSkip,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped,0,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped,entrySize,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped,hasHitEOF,encoding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*numToSkip,skip,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available/numToSkip,skip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*skip,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*skipped,skip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,true);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,false,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip-skipped,false);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,false,isHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip-available,false);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped-available,false);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,false,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*entryOffset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*skipped,entrySize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(entrySize*available,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*entrySize,skipd);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=count(skipped,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(skipped,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=skip(numToSkip,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=count(skip,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip-escapeOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-entryOffset,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(entrySize-escapeOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*escapeOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){if(skipped>0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){count(skipped);}else{System.arraycopy(available,0,skipd,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){count(skipped);}else{System.arraycopy(available,0,available,numToSkip,skipped);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){check(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){check(skipped);}else{System.arraycopy(available,0,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){check(available);}else{System.arraycopy(available,0,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){check(skipped);}else{System.arraycopy(available,0,available,numToSkip,skipped);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToS
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>skipped){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<=0){if(available<=numToSkip){count(skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<=0){if(available<=numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<=0){if(available<numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip*skipped+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*skipped+2);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available/skipped+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200encoding.encode(available,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200encoding.encode(available,skip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200encoding.encode(available,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200encoding.recordSize(available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200encoding.encode(available,skipd);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200encoding.write(available,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<0){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip<0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<0){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<0){count(available);}else{System.arraycopy(available,0,skipd,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<=0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>=0){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){check(skipped);}else{System.arraycopy(available,0,skipd,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intentrySize=entrySize-available;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=count(available-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*entrySize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=count(entrySize-available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<numToSkip){count(available;}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<numToSkip){count(available);}else{System.arraycopy(available,0,skipd,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){if(skipped>0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){if(skipped>0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(hasHitEOF){if(skipped>0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip<0){if(skipped>0){count(skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(hasHitEOF){if(skipped>0){count(skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip+available,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skipped,entrySize,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skipped,numToSkip,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available/skipped,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+entrySize,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(available*numToSkip,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(available*numToSkip,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(available*numToSkip,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(available*numToSkip+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(is*numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=skip(numToSkip,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=skip(numToSkip+skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=skipped(numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=skip(available,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=skip(numToSkip+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>skipped){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,num
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>skipped){count(skipped);}else{System.arraycopy(available,0,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,num
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(available,num
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>skipped){count(skipped);}else{System.arraycopy(available,0,skipd,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,num
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip,available-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,entryOffset-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,entryOffset,skipped-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200skip(available,entrySize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){count(skipped);}else{System.arraycopy(available,0,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200cv.skip(available,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200cv.skip(available+skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200cv.skip(numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200cv.skip(available*numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200cv.skip(numToSkip,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200cv.skip(available,skip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>skipped){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>=0){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>=numToSkip){count(available);}else{System.arraycopy(available,0,available,numToSkip,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>skipped){count(skipped);}else{System.arraycopy(available,0,skipd,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*num
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=IOUtils.skip(available*num
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>skipped){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipd=IOUtils.skip(available*num
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(entrySize-sink);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*entrySize-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip*available,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(entrySize*numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(offset*numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intskipped=IOUtils.skip(available-numToSkip,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intskipped=IOUtils.skip(available-numToSkip,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intskipped=IOUtils.skip(available-numToSkip,skip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intskipped=IOUtils.skip(available-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intskipped=IOUtils.skip(numToSkip-available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intskipped=IOUtils.skip(available-numToSkip,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(available,numToSkip,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(available,numToSkip+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(available,numToSkip,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>skipped){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>=0){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>skipped){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToS
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>skipped){check(skipped);}else{System.arraycopy(available,0,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>=available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){count(skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>=numToSkip){count(available);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<=numToSkip){count(available);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(available);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>skipped){count(available);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped==numToSkip){count(available);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,entryOffset-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,entrySize-available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,entrySize-skip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip,available-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,entrySize-accessSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skipped-available,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+entrySize-available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skipped/available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+numToSkip-available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+SHORT_BUFFER_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip-SHORT_BUFFER_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,SHORT_BUFFER_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intskipped=IOUtils.skip(available/numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intskipped=IOUtils.skip(available*numToSkip,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intskipped=IOUtils.skip(available*numToSkip,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intskipped=IOUtils.skip(is*numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(available,numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=IOUtils.skip(available,numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,available+skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,available,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-entrySize,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){if(skipped>0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(hasHitEOF){if(skipped>0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip<0){if(skipped>0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){if(skipped>0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToS
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){if(skipped>0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipd=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip<0){if(skipped>0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToS
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip<available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipd,available,numToSkip,skipped);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipd);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip<available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToS
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<0){if(available<numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<numToSkip){count(available);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,skip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,numToSkip,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,is,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,available,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip<available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200InputStreamis=currEntry.getInputStream(numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200InputStreamis=this.currEntry.getInputStream();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200InputStreamis=currEntry.getInputStream(),available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200InputStreamis=currEntry.getInputStream(available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200InputStreamis=currEntry.getErrorStream();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200InputStreamis=currEntry.getInputStream(),skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,entrySize,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,numToSkip,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped,available,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200skip(available,numToSkip,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*SHORT_SIZE,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*SHORT_SIZE+skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*SHORT_SIZE/SHORT_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip*SHORT_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*SHORT_SIZE-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){if(skipped>0){count(available);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>=numToSkip){count(available);}else{System.arraycopy(available,0,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<=numToSkip){count(available);}else{System.arraycopy(available,0,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*numToSkip,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip*available,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*entrySize,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*skipped,numToSkip,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>skipped){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>=0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){System.arraycopy(available,0,skipped,available,0,numToSkip);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>skipped){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>=available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipd,available,numToSkip,skipped);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){count(skipped);}else{System.arraycopy(available,0,available,numToSkip,skipped);skipd=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(entrySize+sink);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*entrySize+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(skipped/entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(offset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){check(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){check(skipped);}else{System.arraycopy(available,0,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){check(available);}else{System.arraycopy(available,0,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){check(skipped);}else{System.arraycopy(available,0,skipd,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(available,numToSkip).intValue();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(is,numToSkip).longValue();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(available,numToSkip).doubleValue();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(available,numToSkip).length();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(available,numToSkip).recordSize();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(numToSkip,available).longValue();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intskipped=IOUtils.skip(available,numToSkip,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intskipped=IOUtils.skip(available,numToSkip+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intskipped=IOUtils.skip(numToSkip,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intskipped=IOUtils.skip(entrySize,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*sink);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(entrySize-available,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,entrySize,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-entryOffset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200longskipped=IOUtils.skip(available+numToS
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip=IOUtils.skip(available+numToS
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200skipped=IOUtils.skip(available+numToS
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){if(skipped>0){skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipd,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>skipped){count(skipped);}else{System.arraycopy(available,0,skipd,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>skip){count(skipped);}else{System.arraycopy(available,0,skipd,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipd,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>skipped){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>=numToSkip){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>skipped){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){check(numToSkip);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>=numToSkip){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>=0){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip+skip,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(skip+numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intskipped=IOUtils.skip(available+numToSkip,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intskipped=IOUtils.skip(available+numToSkip,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200intskipped=IOUtils.skip(is+numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){count(skipped);}else{System.arraycopy(available,0,skipd,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<numToSkip){count(available);}else{System.arraycopy(available,0,skipd,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipd=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip<available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipd,available,numToSkip,skipped);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipd);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available*numToS
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>=0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToS
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>=0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>=available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>0){count(skipped);}else{System.arraycopy(available,0,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available/1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<=numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped<numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipd=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipd=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<=numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipd=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>skipped){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>skipped){count(skipped);}else{System.arraycopy(available,0,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>=0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200InputStreamis=currEntry.getOutputStream();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200InputStreamis=currEntry.getInputStream(),available;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,missing);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available-skipped,escapeSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available/numToSkip,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+numToSkip-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available/skipped-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+skipped/entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>=numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipd=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,numToSkip+skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200encoding.count(available,numToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(numToSkip/SHORT_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200numToSkip*=available;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped-1,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,skipped*1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipd,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numTo
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipd=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>skipped){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>0){System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>=0){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>available){System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available+numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>=numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped+=numToSkip;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*entrySize-available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200checkSize(available-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200add(available-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available,available,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>=available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){check(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>numToSkip){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=IOUtils.skip(available*numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available*numToSkip+skip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available<=numToSkip){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200count(available+numToSkip,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>skipped){check(skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>skipped){check(skipped);}else{System.arraycopy(available,0,available,numToSkip,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped==0){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>=0){count(available);}else{System.arraycopy(available,0,skipped,available,numToSkip,skipped);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(numToSkip>skipped){count(available);}else{System.arraycopy(available,0,available,numToSkip,numToSkip);skipped=0;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(skipped>=available){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToSkip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java200if(available>0){count(skipped);}else{System.arraycopy(available,0,skipped,available,numToSkip,numToSkip);skipped=IOUtils.skip(available,numToSkip);}
