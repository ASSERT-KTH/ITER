bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
2	[BUG]  [BUGGY]  if(hasHitEOF)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(hasHitEOF)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(hasHitEOF)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
3	[BUG]  [BUGGY]  if(numToSkip  <  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  <  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  <  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
4	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToS  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToS  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToS	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
5	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipd  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipd  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipd  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
6	[BUG]  [BUGGY]  if(numToSkip  <  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToS  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  <  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToS  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  <  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToS	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
7	[BUG]  [BUGGY]  if(hasHitEOF)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipd  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(hasHitEOF)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipd  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(hasHitEOF)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipd  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
8	[BUG]  [BUGGY]  if(numToSkip  <  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  <  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  <  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(numToSkip    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
9	[BUG]  [BUGGY]  if(numToSkip  >=  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >=  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >=  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(numToSkip    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
10	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  numToSkip)  {  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(numToSkip    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
11	[BUG]  [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(numToSkip    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
12	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(numToSkip    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
13	[BUG]  [BUGGY]  InputStream  is  =  getInputStream(available);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  InputStream  is  =  getInputStream(available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	InputStream  is  =  getInputStream(available);	  InputStream    is    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
14	[BUG]  [BUGGY]  InputStream  is  =  this.getInputStream();  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  InputStream  is  =  this.getInputStream();  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	InputStream  is  =  this.getInputStream();	  InputStream    is    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
15	[BUG]  [BUGGY]  InputStream  is  =  getInputStream(),  available);  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  InputStream  is  =  getInputStream(),  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	InputStream  is  =  getInputStream(),  available);	  InputStream    is    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
16	[BUG]  [BUGGY]  InputStream  is  =  getInputStream(available,  numToSkip);  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  InputStream  is  =  getInputStream(available,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	InputStream  is  =  getInputStream(available,  numToSkip);	  InputStream    is    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
17	[BUG]  [BUGGY]  InputStream  is  =  getRecordSize();  [CE]  illegal  start  of  type  [FE]                                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  InputStream  is  =  getRecordSize();  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	InputStream  is  =  getRecordSize();	  InputStream    is    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
18	[BUG]  [BUGGY]  InputStream  is  =  getInputStream().readLine();  [CE]  illegal  start  of  type  [FE]                                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  InputStream  is  =  getInputStream().readLine();  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	InputStream  is  =  getInputStream().readLine();	  InputStream    is    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
19	[BUG]  [BUGGY]  count(numToSkip  -  available,  numToSkip);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  -  available,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  -  available,  numToSkip);	  count(available    -    skipped,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
20	[BUG]  [BUGGY]  count(available  -  skipped,  entrySize,  numToSkip);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  skipped,  entrySize,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skipped,  entrySize,  numToSkip);	  count(available    -    skipped,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
21	[BUG]  [BUGGY]  count(available  -  skipped,  numToSkip,  skipped);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  skipped,  numToSkip,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skipped,  numToSkip,  skipped);	  count(available    -    skipped,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
22	[BUG]  [BUGGY]  count(available  -  skipped,  available,  numToSkip);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  skipped,  available,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skipped,  available,  numToSkip);	  count(available    -    skipped,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
23	[BUG]  [BUGGY]  count(available  -  entrySize,  numToSkip);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  entrySize,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  entrySize,  numToSkip);	  count(available    -    skipped,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
24	[BUG]  [BUGGY]  count(available  -  skipped,  numToSkip,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  skipped,  numToSkip,  hasHitEOF);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skipped,  numToSkip,  hasHitEOF);	  count(available    -    skipped,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
25	[BUG]  [BUGGY]  count(available  -  skipped,  hasHitEOF,  skipped);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  skipped,  hasHitEOF,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skipped,  hasHitEOF,  skipped);	  count(available    -    skipped,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
26	[BUG]  [BUGGY]  count(available  -  skipped,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  skipped,  entrySize,  hasHitEOF);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skipped,  entrySize,  hasHitEOF);	  count(available    -    skipped,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
27	[BUG]  [BUGGY]  count(available  -  skipped,  0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  skipped,  0,  hasHitEOF);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skipped,  0,  hasHitEOF);	  count(available    -    skipped,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
28	[BUG]  [BUGGY]  count(available  -  skipped,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  skipped,  entryOffset,  hasHitEOF);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skipped,  entryOffset,  hasHitEOF);	  count(available    -    skipped,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
29	[BUG]  [BUGGY]  count(available  -  skipped,  hasHitEOF,  skip);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  skipped,  hasHitEOF,  skip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skipped,  hasHitEOF,  skip);	  count(available    -    skipped,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
30	[BUG]  [BUGGY]  count(available  -  skipped,  available,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  skipped,  available,  hasHitEOF);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skipped,  available,  hasHitEOF);	  count(available    -    skipped,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
31	[BUG]  [BUGGY]  if(skipped  >  0)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  0)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  0)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  }	  if(available    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    0);    }    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
32	[BUG]  [BUGGY]  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  }	  if(available    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    0);    }    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
33	[BUG]  [BUGGY]  if(skipped  >  0)  {  count(numToSkip);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  0)  {  count(numToSkip);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  0)  {  count(numToSkip);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  }	  if(available    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    0);    }    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
34	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  }	  if(available    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    0);    }    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
35	[BUG]  [BUGGY]  if(skipped  >  0)  {  count(available,  0,  skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  0)  {  count(available,  0,  skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  0)  {  count(available,  0,  skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  }	  if(available    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    0);    }    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
36	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  }	  if(available    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    0);    }    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
37	[BUG]  [BUGGY]  if(available  <  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  <  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  }	  if(available    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    0);    }    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
38	[BUG]  [BUGGY]  count(entrySize  +  numToSkip);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(entrySize  +  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(entrySize  +  numToSkip);	  count(numToSkip    +    split);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
39	[BUG]  [BUGGY]  count(offset  +  numToSkip);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(offset  +  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(offset  +  numToSkip);	  count(numToSkip    +    split);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
40	[BUG]  [BUGGY]  count(numToSkip  +  entrySize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  +  entrySize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  +  entrySize);	  count(numToSkip    +    split);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
41	[BUG]  [BUGGY]  count(available  -  numToSkip);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  numToSkip);	  count(numToSkip    -    available);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
42	[BUG]  [BUGGY]  int  numToSkip  =  numToSkip  -  available;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  int  numToSkip  =  numToSkip  -  available;  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  numToSkip  =  numToSkip  -  available;	  count(numToSkip    -    available);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
43	[BUG]  [BUGGY]  count(numToSkip  -  available,  skipped);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  -  available,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  -  available,  skipped);	  count(numToSkip    -    available);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
44	[BUG]  [BUGGY]  numToSkip  -=  available;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  -=  available;  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  -=  available;	  count(numToSkip    -    available);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
45	[BUG]  [BUGGY]  skip(available  -  numToSkip);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  skip(available  -  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	skip(available  -  numToSkip);	  count(numToSkip    -    available);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
46	[BUG]  [BUGGY]  count(available  +  entrySize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  entrySize  -  entryOffset);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  entrySize  -  entryOffset);	  count(available    +    skipped    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
47	[BUG]  [BUGGY]  count(entrySize  +  skipped  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(entrySize  +  skipped  -  entryOffset);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(entrySize  +  skipped  -  entryOffset);	  count(available    +    skipped    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
48	[BUG]  [BUGGY]  count(numToSkip  +  skipped  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  +  skipped  -  entryOffset);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  +  skipped  -  entryOffset);	  count(available    +    skipped    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
49	[BUG]  [BUGGY]  count(available  +  skipped  -  entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  skipped  -  entrySize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  skipped  -  entrySize);	  count(available    +    skipped    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
50	[BUG]  [BUGGY]  count(entrySize  +  available  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(entrySize  +  available  -  entryOffset);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(entrySize  +  available  -  entryOffset);	  count(available    +    skipped    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
51	[BUG]  [BUGGY]  count(available  +  entrySize  -  skipped);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  entrySize  -  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  entrySize  -  skipped);	  count(available    +    skipped    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
52	[BUG]  [BUGGY]  count(available  +  skipped  -  entryOffset,  available);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  skipped  -  entryOffset,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  skipped  -  entryOffset,  available);	  count(available    +    skipped    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
53	[BUG]  [BUGGY]  if(skipped  <  0)  {  if(available  <  numToSkip)  {  count(skipped);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  0)  {  if(available  <  numToSkip)  {  count(skipped);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  0)  {  if(available  <  numToSkip)  {  count(skipped);  }	  if(available    <    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
54	[BUG]  [BUGGY]  if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }	  if(available    <    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
55	[BUG]  [BUGGY]  if(skipped  <  numToSkip)  {  if(available  <  numToSkip)  {  count(skipped);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  numToSkip)  {  if(available  <  numToSkip)  {  count(skipped);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  numToSkip)  {  if(available  <  numToSkip)  {  count(skipped);  }	  if(available    <    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
56	[BUG]  [BUGGY]  if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available,  numToSkip);  }	  if(available    <    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
57	[BUG]  [BUGGY]  count(access  -  skipped,  available);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(access  -  skipped,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(access  -  skipped,  available);	  count(access    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	181	None	replace
58	[BUG]  [BUGGY]  count(access  -  skipped,  entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(access  -  skipped,  entrySize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(access  -  skipped,  entrySize);	  count(access    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	181	None	replace
59	[BUG]  [BUGGY]  count(access  -  skipped,  entryOffset);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(access  -  skipped,  entryOffset);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(access  -  skipped,  entryOffset);	  count(access    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	181	None	replace
60	[BUG]  [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  num  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  num  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  num	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numTo    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
61	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  0)  {  count(skipped);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  0)  {  count(skipped);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  numToSkip)  {  if(skipped  >  0)  {  count(skipped);  }	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numTo    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
62	[BUG]  [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  num  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  num  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  num	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numTo    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
63	[BUG]  [BUGGY]  numToSkip  =  IOUtils.skip(available  *  numTo  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  =  IOUtils.skip(available  *  numTo  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  IOUtils.skip(available  *  numTo	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numTo    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
64	[BUG]  [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numTo  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numTo  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numTo	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numTo    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
65	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  if(skipped  >  0)  {  count(skipped);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  if(skipped  >  0)  {  count(skipped);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  if(skipped  >  0)  {  count(skipped);  }	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numTo    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
66	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available  *  numTo  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  long  skipped  =  IOUtils.skip(available  *  numTo  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  skipped  =  IOUtils.skip(available  *  numTo	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numTo    	non-compiled	[CE]  illegal  start  of  type	154	None	replace
67	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
68	[BUG]  [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
69	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  available)  {  count(skipped);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  available)  {  count(skipped);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  numToSkip)  {  if(skipped  >  available)  {  count(skipped);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
70	[BUG]  [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
71	[BUG]  [BUGGY]  if(skipped  >=  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >=  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >=  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
72	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
73	[BUG]  [BUGGY]  if(skipped  >=  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >=  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >=  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }	  if(available    >=    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
74	[BUG]  [BUGGY]  if(available  <  =  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  <  =  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  =  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }	  if(available    >=    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
75	[BUG]  [BUGGY]  if(skipped  >=  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >=  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >=  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }	  if(available    >=    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
76	[BUG]  [BUGGY]  if(available  <  =  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  <  =  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  =  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }	  if(available    >=    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
77	[BUG]  [BUGGY]  if(skipped  >=  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >=  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >=  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }	  if(available    >=    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
78	[BUG]  [BUGGY]  count(numToSkip  /  sink);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  /  sink);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  /  sink);	  count(skipped    /    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
79	[BUG]  [BUGGY]  count(numToSkip  /  skipped);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  /  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  /  skipped);	  count(skipped    /    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
80	[BUG]  [BUGGY]  count(numToSkip  /  split);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  /  split);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  /  split);	  count(skipped    /    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
81	[BUG]  [BUGGY]  count(numToSkip  /  skip);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  /  skip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  /  skip);	  count(skipped    /    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
82	[BUG]  [BUGGY]  count(numToSkip  /  squeeze);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  /  squeeze);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  /  squeeze);	  count(skipped    /    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
83	[BUG]  [BUGGY]  if(skipped  >=  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >=  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >=  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }	  if(skipped    >    numToSkip)    {    count(available);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
84	[BUG]  [BUGGY]  if(skipped  <  =  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  =  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  =  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }	  if(skipped    >    numToSkip)    {    count(available);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
85	[BUG]  [BUGGY]  if(numToSkip  >  skipped)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  skipped)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  skipped)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }	  if(skipped    >    numToSkip)    {    count(available);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
86	[BUG]  [BUGGY]  if(skipped  ==  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  ==  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  ==  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }	  if(skipped    >    numToSkip)    {    count(available);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
87	[BUG]  [BUGGY]  if(skipped  >=  0)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >=  0)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >=  0)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }	  if(skipped    >    numToSkip)    {    count(available);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
88	[BUG]  [BUGGY]  if(skipped  >=  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >=  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >=  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  }	  if(skipped    >    numToSkip)    {    count(available);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
89	[BUG]  [BUGGY]  if(skipped  <  =  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  =  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  =  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  }	  if(skipped    >    numToSkip)    {    count(available);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
90	[BUG]  [BUGGY]  skip(numToSkip,  available);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  skip(numToSkip,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	skip(numToSkip,  available);	  skip(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
91	[BUG]  [BUGGY]  skip(numToSkip,  skipped);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  skip(numToSkip,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	skip(numToSkip,  skipped);	  skip(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
92	[BUG]  [BUGGY]  skip(available,  numToSkip);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  skip(available,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	skip(available,  numToSkip);	  skip(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
93	[BUG]  [BUGGY]  skip(available);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  skip(available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	skip(available);	  skip(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
94	[BUG]  [BUGGY]  skip(numToSkip  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  skip(numToSkip  +  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	skip(numToSkip  +  1);	  skip(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
95	[BUG]  [BUGGY]  skip(entrySize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  skip(entrySize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	skip(entrySize);	  skip(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
96	[BUG]  [BUGGY]  skip(numToSkip,  entrySize);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  skip(numToSkip,  entrySize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	skip(numToSkip,  entrySize);	  skip(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
97	[BUG]  [BUGGY]  count(available  *  entrySize,  skipped);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  entrySize,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  entrySize,  skipped);	  count(available    *    entrySize);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
98	[BUG]  [BUGGY]  count(available  *  entryOffset);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  entryOffset);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  entryOffset);	  count(available    *    entrySize);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
99	[BUG]  [BUGGY]  count(available  *  entrySize  +  skipped);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  entrySize  +  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  entrySize  +  skipped);	  count(available    *    entrySize);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
100	[BUG]  [BUGGY]  count(available  *  entrySize  -  skipped);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  entrySize  -  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  entrySize  -  skipped);	  count(available    *    entrySize);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
101	[BUG]  [BUGGY]  count(numToSkip  *  entrySize);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  *  entrySize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  *  entrySize);	  count(available    *    entrySize);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
102	[BUG]  [BUGGY]  count(available  *  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  entrySize  +  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  entrySize  +  1);	  count(available    *    entrySize);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
103	[BUG]  [BUGGY]  if(skipped  <  =  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  =  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  =  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }	  if(skipped    >    numToSkip)    {    count(available);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
104	[BUG]  [BUGGY]  if(numToSkip  >  skipped)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  skipped)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  skipped)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }	  if(skipped    >    numToSkip)    {    count(available);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
105	[BUG]  [BUGGY]  if(skipped  >  available)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  available)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  available)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }	  if(skipped    >    numToSkip)    {    count(available);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
106	[BUG]  [BUGGY]  if(skipped  >=  0)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >=  0)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >=  0)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }	  if(skipped    >    numToSkip)    {    count(available);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
107	[BUG]  [BUGGY]  if(skipped  >  available)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  available)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  available)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }	  if(skipped    >    numToSkip)    {    count(available);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
108	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }	  if(skipped    >    numToSkip)    {    count(available);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
109	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }	  if(skipped    >    numToSkip)    {    count(available);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
110	[BUG]  [BUGGY]  count(available,  entrySize,  skipped,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  entrySize,  skipped,  hasHitEOF);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  entrySize,  skipped,  hasHitEOF);	  count(available,    entrySize,    skipped);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
111	[BUG]  [BUGGY]  count(available,  entrySize,  skipped,  numToSkip);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  entrySize,  skipped,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  entrySize,  skipped,  numToSkip);	  count(available,    entrySize,    skipped);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
112	[BUG]  [BUGGY]  count(available,  entrySize,  skipped,  isHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  entrySize,  skipped,  isHitEOF);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  entrySize,  skipped,  isHitEOF);	  count(available,    entrySize,    skipped);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
113	[BUG]  [BUGGY]  count(available,  entrySize,  skipped,  available);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  entrySize,  skipped,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  entrySize,  skipped,  available);	  count(available,    entrySize,    skipped);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
114	[BUG]  [BUGGY]  count(available,  entrySize,  numToSkip);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  entrySize,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  entrySize,  numToSkip);	  count(available,    entrySize,    skipped);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
115	[BUG]  [BUGGY]  count(available,  entrySize,  skipped,  blockSize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  entrySize,  skipped,  blockSize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  entrySize,  skipped,  blockSize);	  count(available,    entrySize,    skipped);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
116	[BUG]  [BUGGY]  count(available,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  entrySize  +  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  entrySize  +  1);	  count(available,    skipped    +    1);    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
117	[BUG]  [BUGGY]  count(available,  skipped  +  1,  numToSkip);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  skipped  +  1,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  skipped  +  1,  numToSkip);	  count(available,    skipped    +    1);    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
118	[BUG]  [BUGGY]  count(available,  skipped  +  1,  entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  skipped  +  1,  entrySize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  skipped  +  1,  entrySize);	  count(available,    skipped    +    1);    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
119	[BUG]  [BUGGY]  count(numToSkip,  available  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip,  available  +  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip,  available  +  1);	  count(available,    skipped    +    1);    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
120	[BUG]  [BUGGY]  count(available,  skipped  +  1,  available);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  skipped  +  1,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  skipped  +  1,  available);	  count(available,    skipped    +    1);    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
121	[BUG]  [BUGGY]  count(available,  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  entryOffset  +  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  entryOffset  +  1);	  count(available,    skipped    +    1);    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
122	[BUG]  [BUGGY]  count(available  +  skip);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  skip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  skip);	  count(available    +    1);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
123	[BUG]  [BUGGY]  count(available  *  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  1);	  count(available    +    1);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
124	[BUG]  [BUGGY]  count(available  -  skipped,  entryOffset  +  skipped);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  skipped,  entryOffset  +  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skipped,  entryOffset  +  skipped);	  count(available    -    skipped,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
125	[BUG]  [BUGGY]  count(available  -  entrySize,  entryOffset);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  entrySize,  entryOffset);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  entrySize,  entryOffset);	  count(available    -    skipped,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
126	[BUG]  [BUGGY]  count(entrySize  -  skipped,  entryOffset);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(entrySize  -  skipped,  entryOffset);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(entrySize  -  skipped,  entryOffset);	  count(available    -    skipped,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
127	[BUG]  [BUGGY]  count(available  -  skipped,  entryOffset,  skipped);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  skipped,  entryOffset,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skipped,  entryOffset,  skipped);	  count(available    -    skipped,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
128	[BUG]  [BUGGY]  count(available  -  entrySize,  skipped);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  entrySize,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  entrySize,  skipped);	  count(available    -    skipped,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
129	[BUG]  [BUGGY]  count(numToSkip  -  available,  entryOffset);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  -  available,  entryOffset);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  -  available,  entryOffset);	  count(available    -    skipped,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
130	[BUG]  [BUGGY]  count(available,  numToSkip,  skipped);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  numToSkip,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  numToSkip,  skipped);	  count(available,    skipped,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
131	[BUG]  [BUGGY]  count(numToSkip,  available,  numToSkip);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip,  available,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip,  available,  numToSkip);	  count(available,    skipped,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
132	[BUG]  [BUGGY]  count(available,  entryOffset,  numToSkip);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  entryOffset,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  entryOffset,  numToSkip);	  count(available,    skipped,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
133	[BUG]  [BUGGY]  count(available,  available,  numToSkip);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  available,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  available,  numToSkip);	  count(available,    skipped,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
134	[BUG]  [BUGGY]  count(available,  0,  numToSkip);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  0,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  0,  numToSkip);	  count(available,    skipped,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
135	[BUG]  [BUGGY]  count(available  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  entryOffset);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  entryOffset);	  count(available    -    escapeSize);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
136	[BUG]  [BUGGY]  count(available  *  escapeSize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  escapeSize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  escapeSize);	  count(available    -    escapeSize);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
137	[BUG]  [BUGGY]  count(numToSkip  -  escapeSize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  -  escapeSize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  -  escapeSize);	  count(available    -    escapeSize);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
138	[BUG]  [BUGGY]  count(entrySize  -  escapeSize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(entrySize  -  escapeSize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(entrySize  -  escapeSize);	  count(available    -    escapeSize);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
139	[BUG]  [BUGGY]  count(available  *  numToSkip  +  1,  skipped);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  numToSkip  +  1,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  numToSkip  +  1,  skipped);	  count(available    *    numToSkip    +    1);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
140	[BUG]  [BUGGY]  count(available  *  numToSkip,  skipped  +  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  numToSkip,  skipped  +  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  numToSkip,  skipped  +  1);	  count(available    *    numToSkip    +    1);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
141	[BUG]  [BUGGY]  count(numToSkip  *  available  +  1);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  *  available  +  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  *  available  +  1);	  count(available    *    numToSkip    +    1);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
142	[BUG]  [BUGGY]  count(available  /  numToSkip  +  1);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  /  numToSkip  +  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  /  numToSkip  +  1);	  count(available    *    numToSkip    +    1);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
143	[BUG]  [BUGGY]  count(numToSkip  *  numToSkip  +  1);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  *  numToSkip  +  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  *  numToSkip  +  1);	  count(available    *    numToSkip    +    1);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
144	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
145	[BUG]  [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
146	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(is,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(is,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(is,  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
147	[BUG]  [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
148	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
149	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
150	[BUG]  [BUGGY]  count(numToSkip  +  available);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  +  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  +  available);	  count(numToSkip    +    sink);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
151	[BUG]  [BUGGY]  count(available  +  sink);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  sink);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  sink);	  count(numToSkip    +    sink);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
152	[BUG]  [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
153	[BUG]  [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
154	[BUG]  [BUGGY]  count(numToSkip,  available);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip,  available);	  count(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
155	[BUG]  [BUGGY]  numToSkip  =  count(available,  numToSkip);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  =  count(available,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  count(available,  numToSkip);	  count(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
156	[BUG]  [BUGGY]  numToSkip  =  IOUtils.skip(available,  numToSkip);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  =  IOUtils.skip(available,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  IOUtils.skip(available,  numToSkip);	  count(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
157	[BUG]  [BUGGY]  numToSkip  =  count(skipped,  available);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  =  count(skipped,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  count(skipped,  available);	  numToSkip    =    count(skipped);    	non-compiled	[CE]  illegal  start  of  type	169	None	replace
158	[BUG]  [BUGGY]  numToSkip  =  count(available,  skipped);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  =  count(available,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  count(available,  skipped);	  numToSkip    =    count(skipped);    	non-compiled	[CE]  illegal  start  of  type	169	None	replace
159	[BUG]  [BUGGY]  numToSkip  =  skip(skipped);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  =  skip(skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  skip(skipped);	  numToSkip    =    count(skipped);    	non-compiled	[CE]  illegal  start  of  type	169	None	replace
160	[BUG]  [BUGGY]  numToSkip  =  count(numToSkip,  skipped);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  =  count(numToSkip,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  count(numToSkip,  skipped);	  numToSkip    =    count(skipped);    	non-compiled	[CE]  illegal  start  of  type	169	None	replace
161	[BUG]  [BUGGY]  numToSkip  =  count(numToSkip);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  =  count(numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  count(numToSkip);	  numToSkip    =    count(skipped);    	non-compiled	[CE]  illegal  start  of  type	169	None	replace
162	[BUG]  [BUGGY]  numToSkip  =  count(offset,  skipped);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  =  count(offset,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  count(offset,  skipped);	  numToSkip    =    count(skipped);    	non-compiled	[CE]  illegal  start  of  type	169	None	replace
163	[BUG]  [BUGGY]  count(available,  entrySize,  0);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  entrySize,  0);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  entrySize,  0);	  count(available,    skipped,    0);    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
164	[BUG]  [BUGGY]  count(available,  skipped,  0,  numToSkip);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  skipped,  0,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  skipped,  0,  numToSkip);	  count(available,    skipped,    0);    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
165	[BUG]  [BUGGY]  count(available,  numToSkip,  0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  numToSkip,  0);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  numToSkip,  0);	  count(available,    skipped,    0);    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
166	[BUG]  [BUGGY]  count(available,  entryOffset,  0);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  entryOffset,  0);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  entryOffset,  0);	  count(available,    skipped,    0);    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
167	[BUG]  [BUGGY]  count(available,  skipped,  0,  available.length);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  skipped,  0,  available.length);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  skipped,  0,  available.length);	  count(available,    skipped,    0);    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
168	[BUG]  [BUGGY]  count(available,  skipped,  0,  available);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  skipped,  0,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  skipped,  0,  available);	  count(available,    skipped,    0);    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
169	[BUG]  [BUGGY]  count(numToSkip  -  available  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  -  available  +  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  -  available  +  1);	  count(available    -    skipped    +    1);    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
170	[BUG]  [BUGGY]  count(available  -  skipped,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  skipped,  entrySize  +  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skipped,  entrySize  +  1);	  count(available    -    skipped    +    1);    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
171	[BUG]  [BUGGY]  count(available  -  skipped  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  skipped  +  1,  hasHitEOF);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skipped  +  1,  hasHitEOF);	  count(available    -    skipped    +    1);    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
172	[BUG]  [BUGGY]  count(available  -  skipped,  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  skipped,  entryOffset  +  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skipped,  entryOffset  +  1);	  count(available    -    skipped    +    1);    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
173	[BUG]  [BUGGY]  count(available  -  skipped  +  1,  entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  skipped  +  1,  entrySize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skipped  +  1,  entrySize);	  count(available    -    skipped    +    1);    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
174	[BUG]  [BUGGY]  count(available  -  skipped  +  1,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  skipped  +  1,  entrySize  +  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skipped  +  1,  entrySize  +  1);	  count(available    -    skipped    +    1);    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
175	[BUG]  [BUGGY]  count(available  /  SHORT_SIZE);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  /  SHORT_SIZE);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  /  SHORT_SIZE);	  count(available    -    SHORT_SIZE);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
176	[BUG]  [BUGGY]  count(available  +  SHORT_SIZE);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  SHORT_SIZE);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  SHORT_SIZE);	  count(available    -    SHORT_SIZE);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
177	[BUG]  [BUGGY]  count(numToSkip  -  SHORT_SIZE);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  -  SHORT_SIZE);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  -  SHORT_SIZE);	  count(available    -    SHORT_SIZE);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
178	[BUG]  [BUGGY]  count(available  /  skipped,  entryOffset);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  /  skipped,  entryOffset);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  /  skipped,  entryOffset);	  count(available    +    skipped,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
179	[BUG]  [BUGGY]  count(available  +  skipped,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  skipped,  entryOffset,  hasHitEOF);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  skipped,  entryOffset,  hasHitEOF);	  count(available    +    skipped,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
180	[BUG]  [BUGGY]  count(available  +  skipped,  entryOffset  -  skipped);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  skipped,  entryOffset  -  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  skipped,  entryOffset  -  skipped);	  count(available    +    skipped,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
181	[BUG]  [BUGGY]  count(entrySize  +  skipped,  available);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(entrySize  +  skipped,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(entrySize  +  skipped,  available);	  count(available    +    skipped,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
182	[BUG]  [BUGGY]  count(available  +  skipped,  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  skipped,  entryOffset  +  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  skipped,  entryOffset  +  1);	  count(available    +    skipped,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
183	[BUG]  [BUGGY]  count(skipped  *  numToSkip);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(skipped  *  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(skipped  *  numToSkip);	  count(numToSkip    *    skipped);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
184	[BUG]  [BUGGY]  if(numToSkip  <  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  <  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  <  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }	  if(numToSkip    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
185	[BUG]  [BUGGY]  if(skipped  >  0)  {  if(available  >  0)  {  count(skipped);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  0)  {  if(available  >  0)  {  count(skipped);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  0)  {  if(available  >  0)  {  count(skipped);  }	  if(numToSkip    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
186	[BUG]  [BUGGY]  count(available  *  numToSkip,  skipped,  available);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  numToSkip,  skipped,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  numToSkip,  skipped,  available);	  count(available    *    numToSkip,    skipped);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
187	[BUG]  [BUGGY]  count(available  *  numToSkip,  skipped,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  numToSkip,  skipped,  hasHitEOF);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  numToSkip,  skipped,  hasHitEOF);	  count(available    *    numToSkip,    skipped);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
188	[BUG]  [BUGGY]  count(available  /  numToSkip,  skipped);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  /  numToSkip,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  /  numToSkip,  skipped);	  count(available    *    numToSkip,    skipped);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
189	[BUG]  [BUGGY]  count(available  *  numToSkip,  skipped,  is.length);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  numToSkip,  skipped,  is.length);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  numToSkip,  skipped,  is.length);	  count(available    *    numToSkip,    skipped);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
190	[BUG]  [BUGGY]  count(available  *  numToSkip,  entrySize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  numToSkip,  entrySize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  numToSkip,  entrySize);	  count(available    *    numToSkip,    skipped);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
191	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
192	[BUG]  [BUGGY]  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
193	[BUG]  [BUGGY]  count(numToSkip  /  available);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  /  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  /  available);	  count(available    /    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
194	[BUG]  [BUGGY]  count(numToSkip  *  numToSkip);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  *  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  *  numToSkip);	  count(available    /    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
195	[BUG]  [BUGGY]  count(offset  /  numToSkip);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(offset  /  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(offset  /  numToSkip);	  count(available    /    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
196	[BUG]  [BUGGY]  count(available  /  entrySize,  numToSkip);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  /  entrySize,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  /  entrySize,  numToSkip);	  count(available    /    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
197	[BUG]  [BUGGY]  if(skipped  >=  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >=  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >=  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(available    >=    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
198	[BUG]  [BUGGY]  if(skipped  >=  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >=  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >=  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(available    >=    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
199	[BUG]  [BUGGY]  if(skipped  >=  available)  {  if(available  >=  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >=  available)  {  if(available  >=  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >=  available)  {  if(available  >=  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(available    >=    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
200	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(available    >=    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
201	[BUG]  [BUGGY]  if(skipped  >=  0)  {  if(available  >=  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >=  0)  {  if(available  >=  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >=  0)  {  if(available  >=  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(available    >=    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
202	[BUG]  [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
203	[BUG]  [BUGGY]  if(skipped  >=  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >=  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >=  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
204	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
205	[BUG]  [BUGGY]  int  entrySize  =  entrySize  -  skipped;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  int  entrySize  =  entrySize  -  skipped;  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  entrySize  =  entrySize  -  skipped;	  count(entrySize    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
206	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available,  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
207	[BUG]  [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available,  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
208	[BUG]  [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available,  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
209	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(is,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(is,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(is,  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
210	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available,  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
211	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available,  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
212	[BUG]  [BUGGY]  count(available  *  numToSkip  +  SHORT_SIZE);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  numToSkip  +  SHORT_SIZE);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  numToSkip  +  SHORT_SIZE);	  count(numToSkip    +    SHORT_SIZE);    	non-compiled	[CE]  illegal  start  of  type	178	None	replace
213	[BUG]  [BUGGY]  count(entrySize  +  SHORT_SIZE);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(entrySize  +  SHORT_SIZE);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(entrySize  +  SHORT_SIZE);	  count(numToSkip    +    SHORT_SIZE);    	non-compiled	[CE]  illegal  start  of  type	178	None	replace
214	[BUG]  [BUGGY]  count(skipped  +  SHORT_SIZE);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(skipped  +  SHORT_SIZE);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(skipped  +  SHORT_SIZE);	  count(numToSkip    +    SHORT_SIZE);    	non-compiled	[CE]  illegal  start  of  type	178	None	replace
215	[BUG]  [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
216	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
217	[BUG]  [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
218	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipd  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipd  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipd  =  IOUtils.skip(available  *  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
219	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numTo  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numTo  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numTo	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
220	[BUG]  [BUGGY]  count(available  +  skipped,  hasHitEOF,  numToSkip);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  skipped,  hasHitEOF,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  skipped,  hasHitEOF,  numToSkip);	  count(available    +    skipped,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
221	[BUG]  [BUGGY]  count(available  +  skipped,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  skipped,  entrySize,  hasHitEOF);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  skipped,  entrySize,  hasHitEOF);	  count(available    +    skipped,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
222	[BUG]  [BUGGY]  count(available  +  skipped,  hasHitEOF,  is.length);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  skipped,  hasHitEOF,  is.length);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  skipped,  hasHitEOF,  is.length);	  count(available    +    skipped,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
223	[BUG]  [BUGGY]  count(available  +  skipped,  hasHitEOF,  true);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  skipped,  hasHitEOF,  true);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  skipped,  hasHitEOF,  true);	  count(available    +    skipped,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
224	[BUG]  [BUGGY]  count(available  +  skipped,  hasHitEOF,  entrySize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  skipped,  hasHitEOF,  entrySize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  skipped,  hasHitEOF,  entrySize);	  count(available    +    skipped,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
225	[BUG]  [BUGGY]  skipped  =  IOUtils.skip(available,  numToSkip,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  skipped  =  IOUtils.skip(available,  numToSkip,  hasHitEOF);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	skipped  =  IOUtils.skip(available,  numToSkip,  hasHitEOF);	  skipped    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
226	[BUG]  [BUGGY]  skipped  =  IOUtils.skip(is,  numToSkip);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  skipped  =  IOUtils.skip(is,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	skipped  =  IOUtils.skip(is,  numToSkip);	  skipped    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
227	[BUG]  [BUGGY]  skipped  =  IOUtils.skip(available,  numToSkip  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  skipped  =  IOUtils.skip(available,  numToSkip  +  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	skipped  =  IOUtils.skip(available,  numToSkip  +  1);	  skipped    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
228	[BUG]  [BUGGY]  skipped  =  IOUtils.skip(numToSkip,  available);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  skipped  =  IOUtils.skip(numToSkip,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	skipped  =  IOUtils.skip(numToSkip,  available);	  skipped    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
229	[BUG]  [BUGGY]  skipped  =  IOUtils.skip(available,  numToSkip,  available);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  skipped  =  IOUtils.skip(available,  numToSkip,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	skipped  =  IOUtils.skip(available,  numToSkip,  available);	  skipped    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
230	[BUG]  [BUGGY]  skipped  =  IOUtils.skip(access,  numToSkip);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  skipped  =  IOUtils.skip(access,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	skipped  =  IOUtils.skip(access,  numToSkip);	  skipped    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
231	[BUG]  [BUGGY]  if(skipped  <  =  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  =  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  =  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(skipped    >    numToSkip)    {    count(available);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
232	[BUG]  [BUGGY]  if(skipped  >  available)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  available)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  available)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(skipped    >    numToSkip)    {    count(available);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
233	[BUG]  [BUGGY]  if(skipped  >=  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >=  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >=  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }	  if(skipped    >    numToSkip)    {    count(available);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
234	[BUG]  [BUGGY]  if(skipped  <  =  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  =  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  =  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }	  if(skipped    >    numToSkip)    {    count(available);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
235	[BUG]  [BUGGY]  if(skipped  >  available)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  available)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  available)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }	  if(skipped    >    numToSkip)    {    count(available);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
236	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }	  if(skipped    >    numToSkip)    {    count(available);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
237	[BUG]  [BUGGY]  numToSkip  =  numToSkip  +  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  =  numToSkip  +  1;  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  numToSkip  +  1;	  numToSkip    =    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
238	[BUG]  [BUGGY]  numToSkip  =  skipped;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  =  skipped;  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  skipped;	  numToSkip    =    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
239	[BUG]  [BUGGY]  numToSkip  =  numToSkip  +  skipped;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  =  numToSkip  +  skipped;  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  numToSkip  +  skipped;	  numToSkip    =    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
240	[BUG]  [BUGGY]  numToSkip  =  available;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  =  available;  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  available;	  numToSkip    =    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
241	[BUG]  [BUGGY]  numToSkip  =  0;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  =  0;  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  0;	  numToSkip    =    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
242	[BUG]  [BUGGY]  numToSkip  =  IOUtils.min(numToSkip,  available);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  =  IOUtils.min(numToSkip,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  IOUtils.min(numToSkip,  available);	  numToSkip    =    numToSkip;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
243	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  num  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  num  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  num	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numTo    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
244	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numTo    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
245	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numTo    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
246	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipd  =  IOUtils.skip(available,  numTo  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipd  =  IOUtils.skip(available,  numTo  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipd  =  IOUtils.skip(available,  numTo	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numTo    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
247	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(is,  numTo  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(is,  numTo  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(is,  numTo	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numTo    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
248	[BUG]  [BUGGY]  numToSkip  =  skip(available,  skipped);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  =  skip(available,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  skip(available,  skipped);	  numToSkip    =    skip(available);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
249	[BUG]  [BUGGY]  numToSkip  =  skip(available  +  skipped);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  =  skip(available  +  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  skip(available  +  skipped);	  numToSkip    =    skip(available);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
250	[BUG]  [BUGGY]  numToSkip  =  skipped(available);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  =  skipped(available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  skipped(available);	  numToSkip    =    skip(available);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
251	[BUG]  [BUGGY]  numToSkip  =  skip(offset);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  =  skip(offset);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  skip(offset);	  numToSkip    =    skip(available);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
252	[BUG]  [BUGGY]  numToSkip  =  skip(available,  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  =  skip(available,  entrySize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  skip(available,  entrySize);	  numToSkip    =    skip(available);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
253	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  numToSkip)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  numToSkip)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    numToSkip)    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	187	None	replace
254	[BUG]  [BUGGY]  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);	  if(skipped    >    numToSkip)    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	187	None	replace
255	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    numToSkip)    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	187	None	replace
256	[BUG]  [BUGGY]  if(numToSkip  >  skipped)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  skipped)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  skipped)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    numToSkip)    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	187	None	replace
257	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  <  numToSkip)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  numToSkip)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    numToSkip)    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	187	None	replace
258	[BUG]  [BUGGY]  if(skipped  >  available)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  available)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  available)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    numToSkip)    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	187	None	replace
259	[BUG]  [BUGGY]  numToSkip  =  IOUtils.skip(available,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  =  IOUtils.skip(available,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  IOUtils.skip(available,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);	  if(skipped    >    numToSkip)    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	187	None	replace
260	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }	  if(skipped    >    0)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	182	None	replace
261	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  check(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  check(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  check(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }	  if(skipped    >    0)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	182	None	replace
262	[BUG]  [BUGGY]  if(skipped  <  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }	  if(skipped    >    0)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	182	None	replace
263	[BUG]  [BUGGY]  if(skipped  >=  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >=  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >=  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }	  if(skipped    >    0)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	182	None	replace
264	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }	  if(skipped    >    0)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	182	None	replace
265	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo	  if(skipped    >    0)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	182	None	replace
266	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
267	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
268	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
269	[BUG]  [BUGGY]  count(available,  entrySize  -  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  entrySize  -  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  entrySize  -  1);	  count(available,    skipped    -    1);    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
270	[BUG]  [BUGGY]  count(available,  numToSkip  -  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  numToSkip  -  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  numToSkip  -  1);	  count(available,    skipped    -    1);    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
271	[BUG]  [BUGGY]  count(available,  skipped  -  1,  available);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  skipped  -  1,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  skipped  -  1,  available);	  count(available,    skipped    -    1);    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
272	[BUG]  [BUGGY]  count(numToSkip,  available  -  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip,  available  -  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip,  available  -  1);	  count(available,    skipped    -    1);    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
273	[BUG]  [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
274	[BUG]  [BUGGY]  if(skipped  >=  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >=  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >=  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
275	[BUG]  [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  }	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
276	[BUG]  [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  }	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
277	[BUG]  [BUGGY]  count(available  *  skipped  -  entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  skipped  -  entrySize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  skipped  -  entrySize);	  count(available    *    skipped    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
278	[BUG]  [BUGGY]  count(available  *  skipped  -  available);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  skipped  -  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  skipped  -  available);	  count(available    *    skipped    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
279	[BUG]  [BUGGY]  count(available  *  skipped  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  skipped  -  entryOffset);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  skipped  -  entryOffset);	  count(available    *    skipped    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
280	[BUG]  [BUGGY]  count(available  *  numToSkip  -  skipped);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  numToSkip  -  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  numToSkip  -  skipped);	  count(available    *    skipped    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
281	[BUG]  [BUGGY]  count(available  *  skipped,  entrySize  -  skipped);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  skipped,  entrySize  -  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  skipped,  entrySize  -  skipped);	  count(available    *    skipped    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
282	[BUG]  [BUGGY]  count(available  *  skipped  /  skipped);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  skipped  /  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  skipped  /  skipped);	  count(available    *    skipped    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
283	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numTo    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
284	[BUG]  [BUGGY]  if(numToSkip  <  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  <  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  <  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numTo    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
285	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numTo    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
286	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numTo    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
287	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  num  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  num  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  num	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numTo    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
288	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numTo    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
289	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipd  =  IOUtils.skip(available,  numTo  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipd  =  IOUtils.skip(available,  numTo  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipd  =  IOUtils.skip(available,  numTo	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numTo    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
290	[BUG]  [BUGGY]  if(hasHitEOF)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(hasHitEOF)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(hasHitEOF)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
291	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
292	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
293	[BUG]  [BUGGY]  if(numToSkip  <  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  <  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  <  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
294	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToS  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToS  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToS	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
295	[BUG]  [BUGGY]  if(numToSkip  <  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToS  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  <  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToS  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  <  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToS	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
296	[BUG]  [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	174	None	replace
297	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	174	None	replace
298	[BUG]  [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  0;  }	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	174	None	replace
299	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  0;  }	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	174	None	replace
300	[BUG]  [BUGGY]  count(available  -  skip,  skipped);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  skip,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skip,  skipped);	  count(available    -    skip);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
301	[BUG]  [BUGGY]  count(available  *  skip);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  skip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  skip);	  count(available    -    skip);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
302	[BUG]  [BUGGY]  count(numToSkip  -  skip);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  -  skip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  -  skip);	  count(available    -    skip);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
303	[BUG]  [BUGGY]  count(entrySize  -  skip);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(entrySize  -  skip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(entrySize  -  skip);	  count(available    -    skip);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
304	[BUG]  [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
305	[BUG]  [BUGGY]  if(available  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
306	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  numToSkip)  {  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
307	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  skipped  =  0;  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
308	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
309	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
310	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  numToSkip)  {  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
311	[BUG]  [BUGGY]  if(skipped  <  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
312	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipd  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipd  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipd  +=  numToSkip;  }	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
313	[BUG]  [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
314	[BUG]  [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
315	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
316	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
317	[BUG]  [BUGGY]  count(available  +  entrySize,  skipped);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  entrySize,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  entrySize,  skipped);	  count(available    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
318	[BUG]  [BUGGY]  count(available  /  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  /  entrySize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  /  entrySize);	  count(available    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
319	[BUG]  [BUGGY]  count(available  +  entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  entryOffset);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  entryOffset);	  count(available    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
320	[BUG]  [BUGGY]  count(available,  entryOffset,  entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  entryOffset,  entrySize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  entryOffset,  entrySize);	  count(available,    skipped,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
321	[BUG]  [BUGGY]  count(available,  numToSkip,  entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  numToSkip,  entrySize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  numToSkip,  entrySize);	  count(available,    skipped,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
322	[BUG]  [BUGGY]  count(numToSkip,  available,  entrySize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip,  available,  entrySize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip,  available,  entrySize);	  count(available,    skipped,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
323	[BUG]  [BUGGY]  count(entrySize,  available,  skipped);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(entrySize,  available,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(entrySize,  available,  skipped);	  count(available,    skipped,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
324	[BUG]  [BUGGY]  count(available,  entrySize,  skipd);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  entrySize,  skipd);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  entrySize,  skipd);	  count(available,    skipped,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
325	[BUG]  [BUGGY]  count(available  /  entryOffset);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  /  entryOffset);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  /  entryOffset);	  count(available    /    skipped);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
326	[BUG]  [BUGGY]  count(available  /  skipped,  entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  /  skipped,  entrySize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  /  skipped,  entrySize);	  count(available    /    skipped);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
327	[BUG]  [BUGGY]  count(entrySize  /  skipped);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(entrySize  /  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(entrySize  /  skipped);	  count(available    /    skipped);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
328	[BUG]  [BUGGY]  count(available  +  1,  sink);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  1,  sink);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  1,  sink);	  count(skipped    +    1,    available);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
329	[BUG]  [BUGGY]  count(available  +  1,  skipd);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  1,  skipd);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  1,  skipd);	  count(skipped    +    1,    available);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
330	[BUG]  [BUGGY]  count(numToSkip  +  1,  available);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  +  1,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  +  1,  available);	  count(skipped    +    1,    available);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
331	[BUG]  [BUGGY]  count(available  +  1,  split);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  1,  split);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  1,  split);	  count(skipped    +    1,    available);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
332	[BUG]  [BUGGY]  count(available  +  1,  selected);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  1,  selected);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  1,  selected);	  count(skipped    +    1,    available);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
333	[BUG]  [BUGGY]  count(numToSkip  -  skipped,  available);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  -  skipped,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  -  skipped,  available);	  count(numToSkip    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
334	[BUG]  [BUGGY]  count(skipped  -  numToSkip);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(skipped  -  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(skipped  -  numToSkip);	  count(numToSkip    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
335	[BUG]  [BUGGY]  count(numToSkip  -  entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  -  entrySize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  -  entrySize);	  count(numToSkip    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
336	[BUG]  [BUGGY]  count(available  *  SHORT_BUFFER_SIZE,  skipped);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  SHORT_BUFFER_SIZE,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  SHORT_BUFFER_SIZE,  skipped);	  count(available    *    SHORT_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	186	None	replace
337	[BUG]  [BUGGY]  count(available  /  SHORT_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  /  SHORT_BUFFER_SIZE);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  /  SHORT_BUFFER_SIZE);	  count(available    *    SHORT_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	186	None	replace
338	[BUG]  [BUGGY]  count(available  *  SHORT_BUFFER_SIZE  +  skipped);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  SHORT_BUFFER_SIZE  +  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  SHORT_BUFFER_SIZE  +  skipped);	  count(available    *    SHORT_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	186	None	replace
339	[BUG]  [BUGGY]  count(available  *  SHORT_BUFFER_SIZE  -  skipped);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  SHORT_BUFFER_SIZE  -  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  SHORT_BUFFER_SIZE  -  skipped);	  count(available    *    SHORT_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	186	None	replace
340	[BUG]  [BUGGY]  count(numToSkip  *  SHORT_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  *  SHORT_BUFFER_SIZE);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  *  SHORT_BUFFER_SIZE);	  count(available    *    SHORT_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	186	None	replace
341	[BUG]  [BUGGY]  count(available  +  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  entrySize  +  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  entrySize  +  1);	  count(entrySize    +    1);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
342	[BUG]  [BUGGY]  count(entrySize  +  skipped);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(entrySize  +  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(entrySize  +  skipped);	  count(entrySize    +    1);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
343	[BUG]  [BUGGY]  count(available  +  1,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  1,  entrySize  +  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  1,  entrySize  +  1);	  count(entrySize    +    1);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
344	[BUG]  [BUGGY]  if(numToSkip  <  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  <  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  <  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }	  if(numToSkip    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
345	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  <  numToSkip)  {  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  numToSkip)  {  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }	  if(numToSkip    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
346	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  0;  }	  if(numToSkip    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
347	[BUG]  [BUGGY]  if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(available    <    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
348	[BUG]  [BUGGY]  if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(available    <    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
349	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(available    <    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
350	[BUG]  [BUGGY]  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);	  if(available    <    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
351	[BUG]  [BUGGY]  count(available  *  entrySize,  entryOffset);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  entrySize,  entryOffset);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  entrySize,  entryOffset);	  count(available    *    skipped,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
352	[BUG]  [BUGGY]  count(available  *  skipped,  entryOffset  +  skipped);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  skipped,  entryOffset  +  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  skipped,  entryOffset  +  skipped);	  count(available    *    skipped,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
353	[BUG]  [BUGGY]  count(available  *  numToSkip,  entryOffset);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  numToSkip,  entryOffset);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  numToSkip,  entryOffset);	  count(available    *    skipped,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
354	[BUG]  [BUGGY]  count(entrySize  *  skipped,  entryOffset);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(entrySize  *  skipped,  entryOffset);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(entrySize  *  skipped,  entryOffset);	  count(available    *    skipped,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
355	[BUG]  [BUGGY]  count(available  *  skipped,  entryOffset  -  skipped);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  skipped,  entryOffset  -  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  skipped,  entryOffset  -  skipped);	  count(available    *    skipped,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
356	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }	  if(skipped    >    numToSkip)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	166	None	replace
357	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  numToSkip)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  numToSkip)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }	  if(skipped    >    numToSkip)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	166	None	replace
358	[BUG]  [BUGGY]  if(numToSkip  >  skipped)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  skipped)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  skipped)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }	  if(skipped    >    numToSkip)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	166	None	replace
359	[BUG]  [BUGGY]  if(skipped  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }	  if(skipped    >    numToSkip)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	166	None	replace
360	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  0)  {  check(skipped);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  0)  {  check(skipped);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  numToSkip)  {  if(skipped  >  0)  {  check(skipped);  }	  if(skipped    >    numToSkip)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	166	None	replace
361	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  numToSkip)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  numToSkip)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(skipped    >    numToSkip)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	166	None	replace
362	[BUG]  [BUGGY]  if(skipped  >=  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >=  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >=  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }	  if(skipped    >    numToSkip)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	166	None	replace
363	[BUG]  [BUGGY]  count(available  +  numToSkip  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  numToSkip  +  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  numToSkip  +  1);	  count(numToSkip    +    1);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
364	[BUG]  [BUGGY]  count(numToSkip,  skipped  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip,  skipped  +  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip,  skipped  +  1);	  count(numToSkip    +    1);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
365	[BUG]  [BUGGY]  count(numToSkip  +  2);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  +  2);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  +  2);	  count(numToSkip    +    1);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
366	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
367	[BUG]  [BUGGY]  skipped  =  IOUtils.skip(available  *  numToSkip);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  skipped  =  IOUtils.skip(available  *  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	skipped  =  IOUtils.skip(available  *  numToSkip);	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
368	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
369	[BUG]  [BUGGY]  count(available  +  skipped  *  numToSkip  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  skipped  *  numToSkip  -  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  skipped  *  numToSkip  -  1);	  count(available    +    skipped    -    1);    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
370	[BUG]  [BUGGY]  count(numToSkip  +  available  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  +  available  -  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  +  available  -  1);	  count(available    +    skipped    -    1);    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
371	[BUG]  [BUGGY]  count(available  +  skipped,  entrySize  -  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  skipped,  entrySize  -  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  skipped,  entrySize  -  1);	  count(available    +    skipped    -    1);    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
372	[BUG]  [BUGGY]  count(available  +  skipped  -  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  skipped  -  1,  hasHitEOF);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  skipped  -  1,  hasHitEOF);	  count(available    +    skipped    -    1);    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
373	[BUG]  [BUGGY]  count(available  +  skipped  *  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  skipped  *  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  skipped  *  1);	  count(available    +    skipped    -    1);    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
374	[BUG]  [BUGGY]  long  numToSkip  =  skip(numToSkip);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  long  numToSkip  =  skip(numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  numToSkip  =  skip(numToSkip);	  int    numToSkip    =    skip(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
375	[BUG]  [BUGGY]  int  numToSkip  =  skip(numToSkip,  available);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  int  numToSkip  =  skip(numToSkip,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  numToSkip  =  skip(numToSkip,  available);	  int    numToSkip    =    skip(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
376	[BUG]  [BUGGY]  int  numToSkip  =  skip(numToSkip,  skipped);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  int  numToSkip  =  skip(numToSkip,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  numToSkip  =  skip(numToSkip,  skipped);	  int    numToSkip    =    skip(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
377	[BUG]  [BUGGY]  int  numToSkip  =  skip(numToSkip  +  skipped);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  int  numToSkip  =  skip(numToSkip  +  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  numToSkip  =  skip(numToSkip  +  skipped);	  int    numToSkip    =    skip(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
378	[BUG]  [BUGGY]  byte  numToSkip  =  skip(numToSkip);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  byte  numToSkip  =  skip(numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	byte  numToSkip  =  skip(numToSkip);	  int    numToSkip    =    skip(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
379	[BUG]  [BUGGY]  int  numToSkip  =  skip(numToSkip  +  1);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  int  numToSkip  =  skip(numToSkip  +  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  numToSkip  =  skip(numToSkip  +  1);	  int    numToSkip    =    skip(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
380	[BUG]  [BUGGY]  int  numToSkip  =  skipped(numToSkip);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  int  numToSkip  =  skipped(numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  numToSkip  =  skipped(numToSkip);	  int    numToSkip    =    skip(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
381	[BUG]  [BUGGY]  count(available  *  numToSkip  -  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  numToSkip  -  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  numToSkip  -  1);	  count(available    *    skipped    -    1);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
382	[BUG]  [BUGGY]  count(numToSkip  *  skipped  -  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  *  skipped  -  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  *  skipped  -  1);	  count(available    *    skipped    -    1);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
383	[BUG]  [BUGGY]  count(available  *  entrySize  -  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  entrySize  -  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  entrySize  -  1);	  count(available    *    skipped    -    1);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
384	[BUG]  [BUGGY]  count(available  *  skipped,  entrySize  -  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  skipped,  entrySize  -  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  skipped,  entrySize  -  1);	  count(available    *    skipped    -    1);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
385	[BUG]  [BUGGY]  count(numToSkip  *  available  -  1);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  *  available  -  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  *  available  -  1);	  count(available    *    skipped    -    1);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
386	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
387	[BUG]  [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
388	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
389	[BUG]  [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
390	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
391	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToS  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToS  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  numToSkip)  {  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToS	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
392	[BUG]  [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
393	[BUG]  [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  0;  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
394	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  available)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
395	[BUG]  [BUGGY]  count(offset  -  entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(offset  -  entrySize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(offset  -  entrySize);	  count(offset    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
396	[BUG]  [BUGGY]  skip(numToSkip  -  skipped);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  skip(numToSkip  -  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	skip(numToSkip  -  skipped);	  count(offset    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
397	[BUG]  [BUGGY]  count(offset  -  available);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(offset  -  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(offset  -  available);	  count(offset    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
398	[BUG]  [BUGGY]  count(available  *  numToSkip,  skipped,  false);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  numToSkip,  skipped,  false);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  numToSkip,  skipped,  false);	  count(available    *    numToSkip,    skipd);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
399	[BUG]  [BUGGY]  count(available  *  numToSkip,  skipped,  true);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  numToSkip,  skipped,  true);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  numToSkip,  skipped,  true);	  count(available    *    numToSkip,    skipd);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
400	[BUG]  [BUGGY]  long  numToSkip  =  IOUtils.skip(available,  numToSkip);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  long  numToSkip  =  IOUtils.skip(available,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  numToSkip  =  IOUtils.skip(available,  numToSkip);	  int    numToSkip    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
401	[BUG]  [BUGGY]  int  numToSkip  =  IOUtils.skip(is,  numToSkip);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  int  numToSkip  =  IOUtils.skip(is,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  numToSkip  =  IOUtils.skip(is,  numToSkip);	  int    numToSkip    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
402	[BUG]  [BUGGY]  int  numToSkip  =  IOUtils.skip(available,  numToSkip,  skipped);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  int  numToSkip  =  IOUtils.skip(available,  numToSkip,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  numToSkip  =  IOUtils.skip(available,  numToSkip,  skipped);	  int    numToSkip    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
403	[BUG]  [BUGGY]  int  numToSkip  =  IOUtils.skip(available,  numToSkip  +  1);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  int  numToSkip  =  IOUtils.skip(available,  numToSkip  +  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  numToSkip  =  IOUtils.skip(available,  numToSkip  +  1);	  int    numToSkip    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
404	[BUG]  [BUGGY]  byte  numToSkip  =  IOUtils.skip(available,  numToSkip);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  byte  numToSkip  =  IOUtils.skip(available,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	byte  numToSkip  =  IOUtils.skip(available,  numToSkip);	  int    numToSkip    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
405	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(numToSkip,  is);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  long  skipped  =  IOUtils.skip(numToSkip,  is);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  skipped  =  IOUtils.skip(numToSkip,  is);	  long    skipped    =    IOUtils.skip(is,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
406	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(is,  numToSkip);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  int  skipped  =  IOUtils.skip(is,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  skipped  =  IOUtils.skip(is,  numToSkip);	  long    skipped    =    IOUtils.skip(is,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
407	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(access,  numToSkip);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  long  skipped  =  IOUtils.skip(access,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  skipped  =  IOUtils.skip(access,  numToSkip);	  long    skipped    =    IOUtils.skip(is,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
408	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(entrySize,  numToSkip);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  long  skipped  =  IOUtils.skip(entrySize,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  skipped  =  IOUtils.skip(entrySize,  numToSkip);	  long    skipped    =    IOUtils.skip(is,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
409	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(numToSkip,  numToSkip);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  long  skipped  =  IOUtils.skip(numToSkip,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  skipped  =  IOUtils.skip(numToSkip,  numToSkip);	  long    skipped    =    IOUtils.skip(is,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
410	[BUG]  [BUGGY]  if(skipped  >=  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >=  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >=  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipd,    available,    numToSkip,    skipped);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	167	None	replace
411	[BUG]  [BUGGY]  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipd,    available,    numToSkip,    skipped);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	167	None	replace
412	[BUG]  [BUGGY]  if(skipped  <  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipd,    available,    numToSkip,    skipped);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	167	None	replace
413	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  numToSkip)  {  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipd,    available,    numToSkip,    skipped);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	167	None	replace
414	[BUG]  [BUGGY]  count(available,  entryOffset);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  entryOffset);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  entryOffset);	  count(available,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
415	[BUG]  [BUGGY]  count(available,  entrySize  -  skipped);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  entrySize  -  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  entrySize  -  skipped);	  count(available,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
416	[BUG]  [BUGGY]  count(available,  entrySize  +  skipped);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  entrySize  +  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  entrySize  +  skipped);	  count(available,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
417	[BUG]  [BUGGY]  count(available,  entrySize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  entrySize  -  entryOffset);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  entrySize  -  entryOffset);	  count(available,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
418	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available  /  numToSkip);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  long  skipped  =  IOUtils.skip(available  /  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  skipped  =  IOUtils.skip(available  /  numToSkip);	  long    skipped    =    IOUtils.skip(available    +    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
419	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available  +  numToSkip,  available);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  long  skipped  =  IOUtils.skip(available  +  numToSkip,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  skipped  =  IOUtils.skip(available  +  numToSkip,  available);	  long    skipped    =    IOUtils.skip(available    +    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
420	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available  +  numToSkip,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  long  skipped  =  IOUtils.skip(available  +  numToSkip,  hasHitEOF);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  skipped  =  IOUtils.skip(available  +  numToSkip,  hasHitEOF);	  long    skipped    =    IOUtils.skip(available    +    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
421	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available  -  numToSkip);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  long  skipped  =  IOUtils.skip(available  -  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  skipped  =  IOUtils.skip(available  -  numToSkip);	  long    skipped    =    IOUtils.skip(available    +    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
422	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(is  +  numToSkip);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  long  skipped  =  IOUtils.skip(is  +  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  skipped  =  IOUtils.skip(is  +  numToSkip);	  long    skipped    =    IOUtils.skip(available    +    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
423	[BUG]  [BUGGY]  encoding.count(available,  skipped);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  encoding.count(available,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	encoding.count(available,  skipped);	  encoding.count(available);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
424	[BUG]  [BUGGY]  encoding.count(available  +  skipped);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  encoding.count(available  +  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	encoding.count(available  +  skipped);	  encoding.count(available);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
425	[BUG]  [BUGGY]  encoding.count(available,  skipd);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  encoding.count(available,  skipd);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	encoding.count(available,  skipd);	  encoding.count(available);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
426	[BUG]  [BUGGY]  encoding.count(available,  skip);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  encoding.count(available,  skip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	encoding.count(available,  skip);	  encoding.count(available);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
427	[BUG]  [BUGGY]  encoding.put(available,  skipped);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  encoding.put(available,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	encoding.put(available,  skipped);	  encoding.count(available);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
428	[BUG]  [BUGGY]  encoding.put(numToSkip,  available);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  encoding.put(numToSkip,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	encoding.put(numToSkip,  available);	  encoding.count(available);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
429	[BUG]  [BUGGY]  count(available  +  numToSkip,  skipped);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  numToSkip,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  numToSkip,  skipped);	  count(skipped    +    numToSkip,    skipped);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
430	[BUG]  [BUGGY]  count(numToSkip  +  skipped,  skipped);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  +  skipped,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  +  skipped,  skipped);	  count(skipped    +    numToSkip,    skipped);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
431	[BUG]  [BUGGY]  count(skipped  /  numToSkip,  skipped);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(skipped  /  numToSkip,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(skipped  /  numToSkip,  skipped);	  count(skipped    +    numToSkip,    skipped);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
432	[BUG]  [BUGGY]  count(offset  +  numToSkip,  skipped);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(offset  +  numToSkip,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(offset  +  numToSkip,  skipped);	  count(skipped    +    numToSkip,    skipped);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
433	[BUG]  [BUGGY]  count(displayed  +  numToSkip,  skipped);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(displayed  +  numToSkip,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(displayed  +  numToSkip,  skipped);	  count(skipped    +    numToSkip,    skipped);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
434	[BUG]  [BUGGY]  count(skipped  +  entrySize,  skipped);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(skipped  +  entrySize,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(skipped  +  entrySize,  skipped);	  count(skipped    +    numToSkip,    skipped);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
435	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToS  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToS  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  skipped  =  IOUtils.skip(available,  numToS	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToS    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
436	[BUG]  [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToS  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToS  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToS	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToS    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
437	[BUG]  [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToS    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
438	[BUG]  [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToS  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToS  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToS	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToS    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
439	[BUG]  [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToS    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
440	[BUG]  [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToS    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
441	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	164	None	replace
442	[BUG]  [BUGGY]  if(available  <  =  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  <  =  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  =  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
443	[BUG]  [BUGGY]  if(skipped  >  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
444	[BUG]  [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipd  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipd  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipd  +=  numToSkip;  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
445	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
446	[BUG]  [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
447	[BUG]  [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
448	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
449	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
450	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToS  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToS  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  numToSkip)  {  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToS	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
451	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available  +  numTo  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  long  skipped  =  IOUtils.skip(available  +  numTo  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  skipped  =  IOUtils.skip(available  +  numTo	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numTo    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
452	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  0)  {  skip(skipped);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  0)  {  skip(skipped);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  numToSkip)  {  if(skipped  >  0)  {  skip(skipped);  }	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numTo    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
453	[BUG]  [BUGGY]  numToSkip  =  IOUtils.skip(available  +  numTo  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  =  IOUtils.skip(available  +  numTo  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  IOUtils.skip(available  +  numTo	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numTo    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
454	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  if(skipped  >  0)  {  skip(skipped);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  if(skipped  >  0)  {  skip(skipped);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  if(skipped  >  0)  {  skip(skipped);  }	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numTo    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
455	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  if(skipped  >  0)  {  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  if(skipped  >  0)  {  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  if(skipped  >  0)  {  skipped  =  0;  }	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numTo    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
456	[BUG]  [BUGGY]  count(available,  skipped,  false);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  skipped,  false);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  skipped,  false);	  count(available,    skipd);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
457	[BUG]  [BUGGY]  count(available,  skipped,  true);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  skipped,  true);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  skipped,  true);	  count(available,    skipd);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
458	[BUG]  [BUGGY]  count(available,  skipped,  fileSize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  skipped,  fileSize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  skipped,  fileSize);	  count(available,    skipd);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
459	[BUG]  [BUGGY]  count(available,  skipd,  skipped);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  skipd,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  skipd,  skipped);	  count(available,    skipd);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
460	[BUG]  [BUGGY]  if(skipped  >  0)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  0)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  0)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  skipped  =  0;  }	  if(available    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    0);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
461	[BUG]  [BUGGY]  if(available  <  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  <  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  skipped  =  0;  }	  if(available    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    0);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
462	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  skipped  =  0;  }	  if(available    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    0);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
463	[BUG]  [BUGGY]  if(skipped  >  0)  {  count(numToSkip);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  0)  {  count(numToSkip);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  0)  {  count(numToSkip);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  skipped  =  0;  }	  if(available    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    0);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
464	[BUG]  [BUGGY]  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  skipped  =  0;  }	  if(available    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    0);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
465	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  skipped  =  0;  }	  if(available    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    0);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
466	[BUG]  [BUGGY]  if(numToSkip  <  0)  {  if(available  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  <  0)  {  if(available  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  <  0)  {  if(available  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  0);  skipped  =  0;  }	  if(available    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    0);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
467	[BUG]  [BUGGY]  count(available  -  skipped,  skipped);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  skipped,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skipped,  skipped);	  count(skipped    -    available,    skipped);    	non-compiled	[CE]  illegal  start  of  type	162	None	replace
468	[BUG]  [BUGGY]  count(available  -  skipped,  skipd);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  skipped,  skipd);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skipped,  skipd);	  count(skipped    -    available,    skipped);    	non-compiled	[CE]  illegal  start  of  type	162	None	replace
469	[BUG]  [BUGGY]  count(available  -  skipped,  skip);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  skipped,  skip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skipped,  skip);	  count(skipped    -    available,    skipped);    	non-compiled	[CE]  illegal  start  of  type	162	None	replace
470	[BUG]  [BUGGY]  count(available  -  sink,  skipped);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  sink,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  sink,  skipped);	  count(skipped    -    available,    skipped);    	non-compiled	[CE]  illegal  start  of  type	162	None	replace
471	[BUG]  [BUGGY]  count(available  -  skipped,  sink);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  skipped,  sink);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skipped,  sink);	  count(skipped    -    available,    skipped);    	non-compiled	[CE]  illegal  start  of  type	162	None	replace
472	[BUG]  [BUGGY]  if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(available    <    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
473	[BUG]  [BUGGY]  if(skipped  <  numToSkip)  {  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  numToSkip)  {  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  numToSkip)  {  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip	  if(available    <    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
474	[BUG]  [BUGGY]  if(skipped  <  numToSkip)  {  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numTo  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  numToSkip)  {  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numTo  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  numToSkip)  {  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numTo	  if(available    <    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
475	[BUG]  [BUGGY]  if(skipped  <  0)  {  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToS  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  0)  {  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToS  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  0)  {  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToS	  if(available    <    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
476	[BUG]  [BUGGY]  if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(available    <    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
477	[BUG]  [BUGGY]  count(entrySize  -  sinkSize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(entrySize  -  sinkSize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(entrySize  -  sinkSize);	  count(available    -    sinkSize);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
478	[BUG]  [BUGGY]  count(available  *  sinkSize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  sinkSize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  sinkSize);	  count(available    -    sinkSize);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
479	[BUG]  [BUGGY]  count(available  -  entryOffset,  sinkSize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  entryOffset,  sinkSize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  entryOffset,  sinkSize);	  count(available    -    sinkSize);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
480	[BUG]  [BUGGY]  numToSkip  =  count(available  +  skipped);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  =  count(available  +  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  count(available  +  skipped);	  numToSkip    =    count(available);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
481	[BUG]  [BUGGY]  numToSkip  =  count(available,  skipd);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  =  count(available,  skipd);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  count(available,  skipd);	  numToSkip    =    count(available);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
482	[BUG]  [BUGGY]  numToSkip  =  count(available,  skip);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  =  count(available,  skip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  count(available,  skip);	  numToSkip    =    count(available);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
483	[BUG]  [BUGGY]  count(available  +  1,  skipped,  numToSkip);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  1,  skipped,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  1,  skipped,  numToSkip);	  count(available    +    1,    skipped);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
484	[BUG]  [BUGGY]  count(available  +  1,  skipped,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  1,  skipped,  hasHitEOF);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  1,  skipped,  hasHitEOF);	  count(available    +    1,    skipped);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
485	[BUG]  [BUGGY]  count(available  +  1,  skipped,  available);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  1,  skipped,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  1,  skipped,  available);	  count(available    +    1,    skipped);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
486	[BUG]  [BUGGY]  count(available  +  1,  skipped,  entrySize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  1,  skipped,  entrySize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  1,  skipped,  entrySize);	  count(available    +    1,    skipped);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
487	[BUG]  [BUGGY]  count(available  +  1,  skipped,  is.length);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  1,  skipped,  is.length);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  1,  skipped,  is.length);	  count(available    +    1,    skipped);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
488	[BUG]  [BUGGY]  count(available  +  1,  skipped,  false);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  1,  skipped,  false);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  1,  skipped,  false);	  count(available    +    1,    skipped);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
489	[BUG]  [BUGGY]  count(available  +  1,  skipped,  fileSize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  1,  skipped,  fileSize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  1,  skipped,  fileSize);	  count(available    +    1,    skipped);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
490	[BUG]  [BUGGY]  if(numToSkip  <  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  <  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  <  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }	  if(numToSkip    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
491	[BUG]  [BUGGY]  count(available,  entryOffset,  skipped,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  entryOffset,  skipped,  hasHitEOF);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  entryOffset,  skipped,  hasHitEOF);	  count(available,    entryOffset,    skipped);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
492	[BUG]  [BUGGY]  count(available,  entryOffset,  skipped,  numToSkip);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  entryOffset,  skipped,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  entryOffset,  skipped,  numToSkip);	  count(available,    entryOffset,    skipped);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
493	[BUG]  [BUGGY]  count(available,  entryOffset,  skipped,  available);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  entryOffset,  skipped,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  entryOffset,  skipped,  available);	  count(available,    entryOffset,    skipped);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
494	[BUG]  [BUGGY]  count(available,  entryOffset,  skipped,  isHitEOF);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  entryOffset,  skipped,  isHitEOF);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  entryOffset,  skipped,  isHitEOF);	  count(available,    entryOffset,    skipped);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
495	[BUG]  [BUGGY]  count(available,  entryOffset,  skipped,  is.length);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  entryOffset,  skipped,  is.length);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  entryOffset,  skipped,  is.length);	  count(available,    entryOffset,    skipped);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
496	[BUG]  [BUGGY]  count(available,  entryOffset,  skipped,  is);  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  entryOffset,  skipped,  is);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  entryOffset,  skipped,  is);	  count(available,    entryOffset,    skipped);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
497	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(is,  available);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  long  skipped  =  IOUtils.skip(is,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  skipped  =  IOUtils.skip(is,  available);	  long    skipped    =    IOUtils.skip(available);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
498	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(numToSkip,  available);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  long  skipped  =  IOUtils.skip(numToSkip,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  skipped  =  IOUtils.skip(numToSkip,  available);	  long    skipped    =    IOUtils.skip(available);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
499	[BUG]  [BUGGY]  count(entrySize  +  available,  skipped);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(entrySize  +  available,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(entrySize  +  available,  skipped);	  count(available    +    skipped,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
500	[BUG]  [BUGGY]  count(available  +  entryOffset,  entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  entryOffset,  entrySize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  entryOffset,  entrySize);	  count(available    +    skipped,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
501	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available  *  numToS  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  long  skipped  =  IOUtils.skip(available  *  numToS  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  skipped  =  IOUtils.skip(available  *  numToS	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToS    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
502	[BUG]  [BUGGY]  numToSkip  =  IOUtils.skip(available  *  numToS  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  =  IOUtils.skip(available  *  numToS  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  IOUtils.skip(available  *  numToS	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToS    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
503	[BUG]  [BUGGY]  if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(available    <    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
504	[BUG]  [BUGGY]  if(skipped  <  0)  {  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  0)  {  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  0)  {  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(available    <    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
505	[BUG]  [BUGGY]  if(skipped  <  numToSkip)  {  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  numToSkip)  {  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  numToSkip)  {  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(available    <    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
506	[BUG]  [BUGGY]  if(skipped  >  available)  {  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  available)  {  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  available)  {  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(available    <    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
507	[BUG]  [BUGGY]  if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }	  if(available    <    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
508	[BUG]  [BUGGY]  count(available  +  numToSkip,  sink);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  numToSkip,  sink);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  numToSkip,  sink);	  count(skipped    +    numToSkip,    available);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
509	[BUG]  [BUGGY]  count(available  +  numToSkip,  skipd);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  numToSkip,  skipd);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  numToSkip,  skipd);	  count(skipped    +    numToSkip,    available);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
510	[BUG]  [BUGGY]  count(available  +  numToSkip,  selected);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  numToSkip,  selected);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  numToSkip,  selected);	  count(skipped    +    numToSkip,    available);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
511	[BUG]  [BUGGY]  count(numToSkip  +  skipped,  available);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  +  skipped,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  +  skipped,  available);	  count(skipped    +    numToSkip,    available);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
512	[BUG]  [BUGGY]  count(available  +  numToSkip,  skip);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  numToSkip,  skip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  numToSkip,  skip);	  count(skipped    +    numToSkip,    available);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
513	[BUG]  [BUGGY]  count(available  +  numToSkip,  saved);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  numToSkip,  saved);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  numToSkip,  saved);	  count(skipped    +    numToSkip,    available);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
514	[BUG]  [BUGGY]  count(available  *  numToSkip  +  skipped,  available);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  numToSkip  +  skipped,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  numToSkip  +  skipped,  available);	  count(available    *    numToSkip    +    skipped);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
515	[BUG]  [BUGGY]  count(available  *  numToSkip  +  entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  numToSkip  +  entrySize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  numToSkip  +  entrySize);	  count(available    *    numToSkip    +    skipped);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
516	[BUG]  [BUGGY]  count(available  *  numToSkip  +  skipped,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  numToSkip  +  skipped,  hasHitEOF);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  numToSkip  +  skipped,  hasHitEOF);	  count(available    *    numToSkip    +    skipped);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
517	[BUG]  [BUGGY]  count(available  *  skipped  +  numToSkip);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  skipped  +  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  skipped  +  numToSkip);	  count(available    *    numToSkip    +    skipped);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
518	[BUG]  [BUGGY]  count(available  *  numToSkip  +  skipped,  entrySize);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  numToSkip  +  skipped,  entrySize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  numToSkip  +  skipped,  entrySize);	  count(available    *    numToSkip    +    skipped);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
519	[BUG]  [BUGGY]  count(available  *  numToSkip  +  entrySize,  skipped);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  numToSkip  +  entrySize,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  numToSkip  +  entrySize,  skipped);	  count(available    *    numToSkip    +    skipped);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
520	[BUG]  [BUGGY]  count(available  /  skipped,  available);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  /  skipped,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  /  skipped,  available);	  count(available    +    skipped,    available);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
521	[BUG]  [BUGGY]  count(available  +  skipped,  available  -  skipped);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  skipped,  available  -  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  skipped,  available  -  skipped);	  count(available    +    skipped,    available);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
522	[BUG]  [BUGGY]  count(available  *  skipped,  available);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  skipped,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  skipped,  available);	  count(available    +    skipped,    available);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
523	[BUG]  [BUGGY]  count(available  +  skipped,  available  +  numToSkip);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  skipped,  available  +  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  skipped,  available  +  numToSkip);	  count(available    +    skipped,    available);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
524	[BUG]  [BUGGY]  if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(available    <    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
525	[BUG]  [BUGGY]  count(numToSkip  +  entrySize,  skipped);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  +  entrySize,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  +  entrySize,  skipped);	  count(numToSkip    +    skipped);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
526	[BUG]  [BUGGY]  long  numToSkip  =  count(numToSkip);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  long  numToSkip  =  count(numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  numToSkip  =  count(numToSkip);	  int    numToSkip    =    count(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	168	None	replace
527	[BUG]  [BUGGY]  int  numToSkip  =  count(numToSkip,  skipped);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  int  numToSkip  =  count(numToSkip,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  numToSkip  =  count(numToSkip,  skipped);	  int    numToSkip    =    count(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	168	None	replace
528	[BUG]  [BUGGY]  int  numToSkip  =  count(skipped);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  int  numToSkip  =  count(skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  numToSkip  =  count(skipped);	  int    numToSkip    =    count(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	168	None	replace
529	[BUG]  [BUGGY]  int  numToSkip  =  count(available,  numToSkip);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  int  numToSkip  =  count(available,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  numToSkip  =  count(available,  numToSkip);	  int    numToSkip    =    count(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	168	None	replace
530	[BUG]  [BUGGY]  int  numToSkip  =  count(numToSkip  +  skipped);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  int  numToSkip  =  count(numToSkip  +  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  numToSkip  =  count(numToSkip  +  skipped);	  int    numToSkip    =    count(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	168	None	replace
531	[BUG]  [BUGGY]  int  numToSkip  =  count(entrySize,  numToSkip);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  int  numToSkip  =  count(entrySize,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  numToSkip  =  count(entrySize,  numToSkip);	  int    numToSkip    =    count(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	168	None	replace
532	[BUG]  [BUGGY]  System.arraycopy(available,  0,  skipped,  available,  entrySize,  numToSkip);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  System.arraycopy(available,  0,  skipped,  available,  entrySize,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	System.arraycopy(available,  0,  skipped,  available,  entrySize,  numToSkip);	  System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
533	[BUG]  [BUGGY]  System.arraycopy(available,  0,  numToSkip,  available,  numToSkip,  skipped);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  System.arraycopy(available,  0,  numToSkip,  available,  numToSkip,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	System.arraycopy(available,  0,  numToSkip,  available,  numToSkip,  skipped);	  System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
534	[BUG]  [BUGGY]  System.arraycopy(available,  0,  skipped,  entrySize,  numToSkip,  numToSkip);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  System.arraycopy(available,  0,  skipped,  entrySize,  numToSkip,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	System.arraycopy(available,  0,  skipped,  entrySize,  numToSkip,  numToSkip);	  System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
535	[BUG]  [BUGGY]  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);	  System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
536	[BUG]  [BUGGY]  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);	  System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
537	[BUG]  [BUGGY]  System.arraycopy(available,  0,  skipped,  available,  entryOffset,  numToSkip);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  System.arraycopy(available,  0,  skipped,  available,  entryOffset,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	System.arraycopy(available,  0,  skipped,  available,  entryOffset,  numToSkip);	  System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
538	[BUG]  [BUGGY]  count(available,  hasHitEOF,  skipped);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  hasHitEOF,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  hasHitEOF,  skipped);	  count(available,    skipped,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
539	[BUG]  [BUGGY]  count(available,  skipped,  hasHitEOF,  numToSkip);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  skipped,  hasHitEOF,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  skipped,  hasHitEOF,  numToSkip);	  count(available,    skipped,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
540	[BUG]  [BUGGY]  count(available,  numToSkip,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  numToSkip,  hasHitEOF);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  numToSkip,  hasHitEOF);	  count(available,    skipped,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
541	[BUG]  [BUGGY]  count(available,  skipped,  0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  skipped,  0,  hasHitEOF);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  skipped,  0,  hasHitEOF);	  count(available,    skipped,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
542	[BUG]  [BUGGY]  count(available,  skipped,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  skipped,  entrySize,  hasHitEOF);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  skipped,  entrySize,  hasHitEOF);	  count(available,    skipped,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
543	[BUG]  [BUGGY]  count(available,  skipped,  hasHitEOF,  encoding);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  skipped,  hasHitEOF,  encoding);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  skipped,  hasHitEOF,  encoding);	  count(available,    skipped,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
544	[BUG]  [BUGGY]  count(available  *  numToSkip,  skip,  skipped);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  numToSkip,  skip,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  numToSkip,  skip,  skipped);	  count(available    *    numToSkip,    skip);    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
545	[BUG]  [BUGGY]  count(available  /  numToSkip,  skip);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  /  numToSkip,  skip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  /  numToSkip,  skip);	  count(available    *    numToSkip,    skip);    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
546	[BUG]  [BUGGY]  count(available  *  skip,  numToSkip);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  skip,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  skip,  numToSkip);	  count(available    *    numToSkip,    skip);    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
547	[BUG]  [BUGGY]  count(available  *  skipped,  skip);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  skipped,  skip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  skipped,  skip);	  count(available    *    numToSkip,    skip);    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
548	[BUG]  [BUGGY]  count(available  -  skipped,  true);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  skipped,  true);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skipped,  true);	  count(available    -    skipped,    false);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
549	[BUG]  [BUGGY]  count(available  -  skipped,  false,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  skipped,  false,  hasHitEOF);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skipped,  false,  hasHitEOF);	  count(available    -    skipped,    false);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
550	[BUG]  [BUGGY]  count(numToSkip  -  skipped,  false);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  -  skipped,  false);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  -  skipped,  false);	  count(available    -    skipped,    false);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
551	[BUG]  [BUGGY]  count(available  -  skipped,  false,  isHitEOF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  skipped,  false,  isHitEOF);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skipped,  false,  isHitEOF);	  count(available    -    skipped,    false);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
552	[BUG]  [BUGGY]  count(numToSkip  -  available,  false);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  -  available,  false);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  -  available,  false);	  count(available    -    skipped,    false);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
553	[BUG]  [BUGGY]  count(available,  skipped  -  available,  false);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  skipped  -  available,  false);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  skipped  -  available,  false);	  count(available    -    skipped,    false);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
554	[BUG]  [BUGGY]  count(available  -  skipped,  false,  available);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  skipped,  false,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skipped,  false,  available);	  count(available    -    skipped,    false);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
555	[BUG]  [BUGGY]  count(available  *  entryOffset,  entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  entryOffset,  entrySize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  entryOffset,  entrySize);	  count(available    *    skipped,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
556	[BUG]  [BUGGY]  count(available  *  skipped,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  skipped,  entrySize  +  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  skipped,  entrySize  +  1);	  count(available    *    skipped,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
557	[BUG]  [BUGGY]  count(entrySize  *  available,  skipped);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(entrySize  *  available,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(entrySize  *  available,  skipped);	  count(available    *    skipped,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
558	[BUG]  [BUGGY]  count(available  *  entrySize,  skipd);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  entrySize,  skipd);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  entrySize,  skipd);	  count(available    *    skipped,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
559	[BUG]  [BUGGY]  numToSkip  =  count(skipped,  numToSkip);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  =  count(skipped,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  count(skipped,  numToSkip);	  count(numToSkip,    skipped);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
560	[BUG]  [BUGGY]  count(skipped,  numToSkip);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(skipped,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(skipped,  numToSkip);	  count(numToSkip,    skipped);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
561	[BUG]  [BUGGY]  numToSkip  =  skip(numToSkip,  skipped);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  =  skip(numToSkip,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  skip(numToSkip,  skipped);	  count(numToSkip,    skipped);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
562	[BUG]  [BUGGY]  numToSkip  =  count(skip,  skipped);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  =  count(skip,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  count(skip,  skipped);	  count(numToSkip,    skipped);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
563	[BUG]  [BUGGY]  count(numToSkip  -  escapeOffset);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  -  escapeOffset);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  -  escapeOffset);	  count(available    -    escapeOffset);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
564	[BUG]  [BUGGY]  count(available  -  entryOffset,  skipped);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  entryOffset,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  entryOffset,  skipped);	  count(available    -    escapeOffset);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
565	[BUG]  [BUGGY]  count(entrySize  -  escapeOffset);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(entrySize  -  escapeOffset);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(entrySize  -  escapeOffset);	  count(available    -    escapeOffset);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
566	[BUG]  [BUGGY]  count(available  *  escapeOffset);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  escapeOffset);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  escapeOffset);	  count(available    -    escapeOffset);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
567	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	170	None	replace
568	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	170	None	replace
569	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	170	None	replace
570	[BUG]  [BUGGY]  if(skipped  <  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	170	None	replace
571	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	170	None	replace
572	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  }	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	170	None	replace
573	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
574	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
575	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    0)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	188	None	replace
576	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  check(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  check(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  check(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    0)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	188	None	replace
577	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    0)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	188	None	replace
578	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  check(available);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  check(available);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  check(available);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    0)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	188	None	replace
579	[BUG]  [BUGGY]  if(skipped  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    0)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	188	None	replace
580	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToS  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToS  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToS	  if(skipped    >    0)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	188	None	replace
581	[BUG]  [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
582	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  if(available  <  =  numToSkip)  {  count(skipped);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  =  0)  {  if(available  <  =  numToSkip)  {  count(skipped);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  =  0)  {  if(available  <  =  numToSkip)  {  count(skipped);  }	  if(available    <    =    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
583	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  if(available  <  =  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  =  0)  {  if(available  <  =  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  =  0)  {  if(available  <  =  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(available    <    =    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
584	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  =  0)  {  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  =  0)  {  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(available    <    =    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
585	[BUG]  [BUGGY]  count(numToSkip  *  skipped  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  *  skipped  +  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  *  skipped  +  1);	  count(available    *    skipped    +    1);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
586	[BUG]  [BUGGY]  count(available  *  skipped  +  2);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  skipped  +  2);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  skipped  +  2);	  count(available    *    skipped    +    1);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
587	[BUG]  [BUGGY]  count(available  /  skipped  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  /  skipped  +  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  /  skipped  +  1);	  count(available    *    skipped    +    1);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
588	[BUG]  [BUGGY]  encoding.encode(available,  skipped);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  encoding.encode(available,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	encoding.encode(available,  skipped);	  encoding.encode(available);    	non-compiled	[CE]  illegal  start  of  type	184	None	replace
589	[BUG]  [BUGGY]  encoding.encode(available,  skip);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  encoding.encode(available,  skip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	encoding.encode(available,  skip);	  encoding.encode(available);    	non-compiled	[CE]  illegal  start  of  type	184	None	replace
590	[BUG]  [BUGGY]  encoding.encode(available,  entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  encoding.encode(available,  entrySize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	encoding.encode(available,  entrySize);	  encoding.encode(available);    	non-compiled	[CE]  illegal  start  of  type	184	None	replace
591	[BUG]  [BUGGY]  encoding.recordSize(available);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  encoding.recordSize(available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	encoding.recordSize(available);	  encoding.encode(available);    	non-compiled	[CE]  illegal  start  of  type	184	None	replace
592	[BUG]  [BUGGY]  encoding.encode(available,  skipd);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  encoding.encode(available,  skipd);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	encoding.encode(available,  skipd);	  encoding.encode(available);    	non-compiled	[CE]  illegal  start  of  type	184	None	replace
593	[BUG]  [BUGGY]  encoding.write(available,  skipped);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  encoding.write(available,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	encoding.write(available,  skipped);	  encoding.encode(available);    	non-compiled	[CE]  illegal  start  of  type	184	None	replace
594	[BUG]  [BUGGY]  if(skipped  <  0)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  0)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  0)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }	  if(available    <    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
595	[BUG]  [BUGGY]  if(numToSkip  <  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  <  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  <  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }	  if(available    <    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
596	[BUG]  [BUGGY]  if(skipped  <  0)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  0)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  0)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }	  if(available    <    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
597	[BUG]  [BUGGY]  if(available  <  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  <  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }	  if(available    <    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
598	[BUG]  [BUGGY]  if(skipped  <  0)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  0)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  0)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  0;  }	  if(available    <    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
599	[BUG]  [BUGGY]  if(available  <  =  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  <  =  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  =  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }	  if(available    <    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
600	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  available)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    numToSkip)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	189	None	replace
601	[BUG]  [BUGGY]  if(skipped  >=  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >=  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >=  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    numToSkip)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	189	None	replace
602	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    numToSkip)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	189	None	replace
603	[BUG]  [BUGGY]  int  entrySize  =  entrySize  -  available;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  int  entrySize  =  entrySize  -  available;  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  entrySize  =  entrySize  -  available;	  count(entrySize    -    available);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
604	[BUG]  [BUGGY]  numToSkip  =  count(available  -  entrySize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  =  count(available  -  entrySize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  count(available  -  entrySize);	  count(entrySize    -    available);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
605	[BUG]  [BUGGY]  count(available  *  entrySize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  entrySize  -  entryOffset);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  entrySize  -  entryOffset);	  count(entrySize    -    available);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
606	[BUG]  [BUGGY]  numToSkip  =  count(entrySize  -  available);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  =  count(entrySize  -  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  count(entrySize  -  available);	  count(entrySize    -    available);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
607	[BUG]  [BUGGY]  if(skipped  <  numToSkip)  {  count(available;  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  numToSkip)  {  count(available;  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  numToSkip)  {  count(available;  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(available    <    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
608	[BUG]  [BUGGY]  if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(available    <    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
609	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	175	None	replace
610	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	175	None	replace
611	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  numToSkip)  {  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	175	None	replace
612	[BUG]  [BUGGY]  if(hasHitEOF)  {  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(hasHitEOF)  {  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(hasHitEOF)  {  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	175	None	replace
613	[BUG]  [BUGGY]  if(numToSkip  <  0)  {  if(skipped  >  0)  {  count(skipped);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  <  0)  {  if(skipped  >  0)  {  count(skipped);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  <  0)  {  if(skipped  >  0)  {  count(skipped);  }	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	175	None	replace
614	[BUG]  [BUGGY]  if(hasHitEOF)  {  if(skipped  >  0)  {  count(skipped);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(hasHitEOF)  {  if(skipped  >  0)  {  count(skipped);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(hasHitEOF)  {  if(skipped  >  0)  {  count(skipped);  }	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	175	None	replace
615	[BUG]  [BUGGY]  count(numToSkip  +  available,  numToSkip);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  +  available,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  +  available,  numToSkip);	  count(available    +    skipped,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
616	[BUG]  [BUGGY]  count(available  +  skipped,  entrySize,  numToSkip);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  skipped,  entrySize,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  skipped,  entrySize,  numToSkip);	  count(available    +    skipped,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
617	[BUG]  [BUGGY]  count(available  +  skipped,  numToSkip,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  skipped,  numToSkip,  hasHitEOF);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  skipped,  numToSkip,  hasHitEOF);	  count(available    +    skipped,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
618	[BUG]  [BUGGY]  count(available  /  skipped,  numToSkip);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  /  skipped,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  /  skipped,  numToSkip);	  count(available    +    skipped,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
619	[BUG]  [BUGGY]  count(available  +  entrySize,  numToSkip);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  entrySize,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  entrySize,  numToSkip);	  count(available    +    skipped,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
620	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available  *  numToSkip,  available);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  long  skipped  =  IOUtils.skip(available  *  numToSkip,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  skipped  =  IOUtils.skip(available  *  numToSkip,  available);	  long    skipped    =    IOUtils.skip(available    *    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
621	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available  *  numToSkip,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  long  skipped  =  IOUtils.skip(available  *  numToSkip,  hasHitEOF);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  skipped  =  IOUtils.skip(available  *  numToSkip,  hasHitEOF);	  long    skipped    =    IOUtils.skip(available    *    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
622	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available  *  numToSkip,  numToSkip);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  long  skipped  =  IOUtils.skip(available  *  numToSkip,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  skipped  =  IOUtils.skip(available  *  numToSkip,  numToSkip);	  long    skipped    =    IOUtils.skip(available    *    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
623	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available  *  numToSkip  +  1);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  long  skipped  =  IOUtils.skip(available  *  numToSkip  +  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  skipped  =  IOUtils.skip(available  *  numToSkip  +  1);	  long    skipped    =    IOUtils.skip(available    *    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
624	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(is  *  numToSkip);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  long  skipped  =  IOUtils.skip(is  *  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  skipped  =  IOUtils.skip(is  *  numToSkip);	  long    skipped    =    IOUtils.skip(available    *    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
625	[BUG]  [BUGGY]  numToSkip  =  skip(numToSkip,  available);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  =  skip(numToSkip,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  skip(numToSkip,  available);	  numToSkip    =    skip(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
626	[BUG]  [BUGGY]  numToSkip  =  skip(numToSkip  +  skipped);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  =  skip(numToSkip  +  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  skip(numToSkip  +  skipped);	  numToSkip    =    skip(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
627	[BUG]  [BUGGY]  numToSkip  =  skipped(numToSkip);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  =  skipped(numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  skipped(numToSkip);	  numToSkip    =    skip(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
628	[BUG]  [BUGGY]  numToSkip  =  skip(available,  numToSkip);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  =  skip(available,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  skip(available,  numToSkip);	  numToSkip    =    skip(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
629	[BUG]  [BUGGY]  numToSkip  =  skip(numToSkip  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  =  skip(numToSkip  +  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  skip(numToSkip  +  1);	  numToSkip    =    skip(numToSkip);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
630	[BUG]  [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  num  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  num  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  num	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    num    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
631	[BUG]  [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  num  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  num  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  num	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    num    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
632	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available,  num  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  long  skipped  =  IOUtils.skip(available,  num  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  skipped  =  IOUtils.skip(available,  num	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    num    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
633	[BUG]  [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  num  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  num  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  num	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    num    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
634	[BUG]  [BUGGY]  count(numToSkip,  available  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip,  available  -  entryOffset);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip,  available  -  entryOffset);	  count(available,    skipped    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
635	[BUG]  [BUGGY]  count(available,  entryOffset  -  skipped);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  entryOffset  -  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  entryOffset  -  skipped);	  count(available,    skipped    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
636	[BUG]  [BUGGY]  count(available,  entryOffset,  skipped  -  entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  entryOffset,  skipped  -  entrySize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  entryOffset,  skipped  -  entrySize);	  count(available,    skipped    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
637	[BUG]  [BUGGY]  skip(available,  entrySize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  skip(available,  entrySize  -  entryOffset);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	skip(available,  entrySize  -  entryOffset);	  count(available,    skipped    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
638	[BUG]  [BUGGY]  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
639	[BUG]  [BUGGY]  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
640	[BUG]  [BUGGY]  cv.skip(available,  skipped);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  cv.skip(available,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	cv.skip(available,  skipped);	  cv.skip(available);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
641	[BUG]  [BUGGY]  cv.skip(available  +  skipped);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  cv.skip(available  +  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	cv.skip(available  +  skipped);	  cv.skip(available);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
642	[BUG]  [BUGGY]  cv.skip(numToSkip);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  cv.skip(numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	cv.skip(numToSkip);	  cv.skip(available);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
643	[BUG]  [BUGGY]  cv.skip(available  *  numToSkip);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  cv.skip(available  *  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	cv.skip(available  *  numToSkip);	  cv.skip(available);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
644	[BUG]  [BUGGY]  cv.skip(numToSkip,  available);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  cv.skip(numToSkip,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	cv.skip(numToSkip,  available);	  cv.skip(available);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
645	[BUG]  [BUGGY]  cv.skip(available,  skip);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  cv.skip(available,  skip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	cv.skip(available,  skip);	  cv.skip(available);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
646	[BUG]  [BUGGY]  if(skipped  >  available)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  available)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  available)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  }	  if(skipped    >    numToSkip)    {    count(available);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	172	None	replace
647	[BUG]  [BUGGY]  if(numToSkip  >  skipped)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  skipped)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  skipped)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  }	  if(skipped    >    numToSkip)    {    count(available);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	172	None	replace
648	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  }	  if(skipped    >    numToSkip)    {    count(available);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	172	None	replace
649	[BUG]  [BUGGY]  if(skipped  >=  0)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >=  0)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >=  0)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  }	  if(skipped    >    numToSkip)    {    count(available);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	172	None	replace
650	[BUG]  [BUGGY]  if(skipped  >=  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >=  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >=  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  }	  if(skipped    >    numToSkip)    {    count(available);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	172	None	replace
651	[BUG]  [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  num  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  num  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  num	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    num    	non-compiled	[CE]  illegal  start  of  type	155	None	replace
652	[BUG]  [BUGGY]  numToSkip  =  IOUtils.skip(available  *  num  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  =  IOUtils.skip(available  *  num  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  IOUtils.skip(available  *  num	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    num    	non-compiled	[CE]  illegal  start  of  type	155	None	replace
653	[BUG]  [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipd  =  IOUtils.skip(available  *  num  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipd  =  IOUtils.skip(available  *  num  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipd  =  IOUtils.skip(available  *  num	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    num    	non-compiled	[CE]  illegal  start  of  type	155	None	replace
654	[BUG]  [BUGGY]  count(entrySize  -  sink);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(entrySize  -  sink);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(entrySize  -  sink);	  count(skipped    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	180	None	replace
655	[BUG]  [BUGGY]  count(available  *  entrySize  -  entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  entrySize  -  entrySize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  entrySize  -  entrySize);	  count(skipped    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	180	None	replace
656	[BUG]  [BUGGY]  count(numToSkip  *  available,  skipped);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  *  available,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  *  available,  skipped);	  count(numToSkip    *    available);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
657	[BUG]  [BUGGY]  count(entrySize  *  numToSkip);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(entrySize  *  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(entrySize  *  numToSkip);	  count(numToSkip    *    available);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
658	[BUG]  [BUGGY]  count(offset  *  numToSkip);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(offset  *  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(offset  *  numToSkip);	  count(numToSkip    *    available);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
659	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(available  -  numToSkip,  available);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  int  skipped  =  IOUtils.skip(available  -  numToSkip,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  skipped  =  IOUtils.skip(available  -  numToSkip,  available);	  int    skipped    =    IOUtils.skip(available    -    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
660	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(available  -  numToSkip,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  int  skipped  =  IOUtils.skip(available  -  numToSkip,  hasHitEOF);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  skipped  =  IOUtils.skip(available  -  numToSkip,  hasHitEOF);	  int    skipped    =    IOUtils.skip(available    -    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
661	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(available  -  numToSkip,  skip);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  int  skipped  =  IOUtils.skip(available  -  numToSkip,  skip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  skipped  =  IOUtils.skip(available  -  numToSkip,  skip);	  int    skipped    =    IOUtils.skip(available    -    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
662	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(available  -  entrySize);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  int  skipped  =  IOUtils.skip(available  -  entrySize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  skipped  =  IOUtils.skip(available  -  entrySize);	  int    skipped    =    IOUtils.skip(available    -    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
663	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(numToSkip  -  available);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  int  skipped  =  IOUtils.skip(numToSkip  -  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  skipped  =  IOUtils.skip(numToSkip  -  available);	  int    skipped    =    IOUtils.skip(available    -    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
664	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(available  -  numToSkip,  skipped);  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  int  skipped  =  IOUtils.skip(available  -  numToSkip,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  skipped  =  IOUtils.skip(available  -  numToSkip,  skipped);	  int    skipped    =    IOUtils.skip(available    -    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
665	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToSkip,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToSkip,  hasHitEOF);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  skipped  =  IOUtils.skip(available,  numToSkip,  hasHitEOF);	  long    skipped    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
666	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToSkip  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToSkip  +  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  skipped  =  IOUtils.skip(available,  numToSkip  +  1);	  long    skipped    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
667	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToSkip,  available);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToSkip,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  skipped  =  IOUtils.skip(available,  numToSkip,  available);	  long    skipped    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
668	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(skipped    >    numToSkip)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	160	None	replace
669	[BUG]  [BUGGY]  if(numToSkip  >  skipped)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  skipped)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  skipped)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(skipped    >    numToSkip)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	160	None	replace
670	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  available)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(skipped    >    numToSkip)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	160	None	replace
671	[BUG]  [BUGGY]  if(skipped  >=  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >=  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >=  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(skipped    >    numToSkip)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	160	None	replace
672	[BUG]  [BUGGY]  if(numToSkip  >  skipped)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToS  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  skipped)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToS  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  skipped)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToS	  if(skipped    >    numToSkip)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	160	None	replace
673	[BUG]  [BUGGY]  if(numToSkip  >  skipped)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  skipped)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  skipped)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(skipped    >    numToSkip)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	160	None	replace
674	[BUG]  [BUGGY]  if(available  <  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  <  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }	  if(available    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
675	[BUG]  [BUGGY]  if(skipped  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(available    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
676	[BUG]  [BUGGY]  if(available  <  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  <  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(available    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
677	[BUG]  [BUGGY]  if(numToSkip  >=  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >=  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >=  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }	  if(available    >=    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
678	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  }	  if(available    >=    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
679	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  numToSkip)  {  count(skipped);  }	  if(skipped    >    numToSkip)    {    count(available);    }    	non-compiled	[CE]  illegal  start  of  type	171	None	replace
680	[BUG]  [BUGGY]  if(skipped  >=  numToSkip)  {  count(available);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >=  numToSkip)  {  count(available);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >=  numToSkip)  {  count(available);  }	  if(skipped    >    numToSkip)    {    count(available);    }    	non-compiled	[CE]  illegal  start  of  type	171	None	replace
681	[BUG]  [BUGGY]  if(skipped  <  =  numToSkip)  {  count(available);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  =  numToSkip)  {  count(available);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  =  numToSkip)  {  count(available);  }	  if(skipped    >    numToSkip)    {    count(available);    }    	non-compiled	[CE]  illegal  start  of  type	171	None	replace
682	[BUG]  [BUGGY]  if(skipped  >  available)  {  count(available);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  available)  {  count(available);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  available)  {  count(available);  }	  if(skipped    >    numToSkip)    {    count(available);    }    	non-compiled	[CE]  illegal  start  of  type	171	None	replace
683	[BUG]  [BUGGY]  if(numToSkip  >  skipped)  {  count(available);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  skipped)  {  count(available);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  skipped)  {  count(available);  }	  if(skipped    >    numToSkip)    {    count(available);    }    	non-compiled	[CE]  illegal  start  of  type	171	None	replace
684	[BUG]  [BUGGY]  if(skipped  ==  numToSkip)  {  count(available);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  ==  numToSkip)  {  count(available);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  ==  numToSkip)  {  count(available);  }	  if(skipped    >    numToSkip)    {    count(available);    }    	non-compiled	[CE]  illegal  start  of  type	171	None	replace
685	[BUG]  [BUGGY]  count(available,  entryOffset  -  entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  entryOffset  -  entrySize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  entryOffset  -  entrySize);	  count(available,    skipped    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	163	None	replace
686	[BUG]  [BUGGY]  count(available,  entrySize  -  available);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  entrySize  -  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  entrySize  -  available);	  count(available,    skipped    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	163	None	replace
687	[BUG]  [BUGGY]  count(available,  entrySize  -  skip);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  entrySize  -  skip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  entrySize  -  skip);	  count(available,    skipped    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	163	None	replace
688	[BUG]  [BUGGY]  count(numToSkip,  available  -  entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip,  available  -  entrySize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip,  available  -  entrySize);	  count(available,    skipped    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	163	None	replace
689	[BUG]  [BUGGY]  count(available,  entrySize  -  accessSize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  entrySize  -  accessSize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  entrySize  -  accessSize);	  count(available,    skipped    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	163	None	replace
690	[BUG]  [BUGGY]  count(available  +  skipped  -  available,  entrySize);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  skipped  -  available,  entrySize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  skipped  -  available,  entrySize);	  count(available    +    skipped    -    available);    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
691	[BUG]  [BUGGY]  count(available  +  entrySize  -  available);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  entrySize  -  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  entrySize  -  available);	  count(available    +    skipped    -    available);    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
692	[BUG]  [BUGGY]  count(available  +  skipped  /  available);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  skipped  /  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  skipped  /  available);	  count(available    +    skipped    -    available);    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
693	[BUG]  [BUGGY]  count(available  +  numToSkip  -  available);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  numToSkip  -  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  numToSkip  -  available);	  count(available    +    skipped    -    available);    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
694	[BUG]  [BUGGY]  count(available  +  SHORT_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  SHORT_BUFFER_SIZE);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  SHORT_BUFFER_SIZE);	  count(available    -    SHORT_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
695	[BUG]  [BUGGY]  count(numToSkip  -  SHORT_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  -  SHORT_BUFFER_SIZE);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  -  SHORT_BUFFER_SIZE);	  count(available    -    SHORT_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
696	[BUG]  [BUGGY]  count(available  -  skipped,  SHORT_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  skipped,  SHORT_BUFFER_SIZE);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skipped,  SHORT_BUFFER_SIZE);	  count(available    -    SHORT_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
697	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(available  /  numToSkip);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  int  skipped  =  IOUtils.skip(available  /  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  skipped  =  IOUtils.skip(available  /  numToSkip);	  int    skipped    =    IOUtils.skip(available    *    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	157	None	replace
698	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(available  *  numToSkip,  available);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  int  skipped  =  IOUtils.skip(available  *  numToSkip,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  skipped  =  IOUtils.skip(available  *  numToSkip,  available);	  int    skipped    =    IOUtils.skip(available    *    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	157	None	replace
699	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(available  *  numToSkip,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  int  skipped  =  IOUtils.skip(available  *  numToSkip,  hasHitEOF);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  skipped  =  IOUtils.skip(available  *  numToSkip,  hasHitEOF);	  int    skipped    =    IOUtils.skip(available    *    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	157	None	replace
700	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(is  *  numToSkip);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  int  skipped  =  IOUtils.skip(is  *  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  skipped  =  IOUtils.skip(is  *  numToSkip);	  int    skipped    =    IOUtils.skip(available    *    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	157	None	replace
701	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available,  numTo  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  long  skipped  =  IOUtils.skip(available,  numTo  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  skipped  =  IOUtils.skip(available,  numTo	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numTo    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
702	[BUG]  [BUGGY]  numToSkip  =  IOUtils.skip(available,  numTo  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  =  IOUtils.skip(available,  numTo  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  IOUtils.skip(available,  numTo	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numTo    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
703	[BUG]  [BUGGY]  count(available  -  skipped,  available  +  skipped);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  skipped,  available  +  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skipped,  available  +  skipped);	  count(available    -    skipped,    available);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
704	[BUG]  [BUGGY]  count(available  -  skipped,  available,  skipped);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  skipped,  available,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skipped,  available,  skipped);	  count(available    -    skipped,    available);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
705	[BUG]  [BUGGY]  count(available  -  entrySize,  available);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  entrySize,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  entrySize,  available);	  count(available    -    skipped,    available);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
706	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
707	[BUG]  [BUGGY]  if(hasHitEOF)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(hasHitEOF)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(hasHitEOF)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
708	[BUG]  [BUGGY]  if(numToSkip  <  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  <  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  <  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
709	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
710	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToS  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToS  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToS	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
711	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipd  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipd  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipd  =  IOUtils.skip(available  *  numToSkip);  }	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
712	[BUG]  [BUGGY]  if(numToSkip  <  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToS  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  <  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToS  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  <  0)  {  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToS	  if(skipped    >    0)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
713	[BUG]  [BUGGY]  if(numToSkip  <  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  <  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  <  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(numToSkip    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
714	[BUG]  [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(numToSkip    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
715	[BUG]  [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipd);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipd);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipd);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(numToSkip    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
716	[BUG]  [BUGGY]  if(numToSkip  <  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  <  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  <  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(numToSkip    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
717	[BUG]  [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToS  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToS  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToS	  if(numToSkip    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
718	[BUG]  [BUGGY]  if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }	  if(available    <    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
719	[BUG]  [BUGGY]  if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }	  if(available    <    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
720	[BUG]  [BUGGY]  if(skipped  <  0)  {  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  0)  {  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  0)  {  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }	  if(available    <    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
721	[BUG]  [BUGGY]  if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }	  if(available    <    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
722	[BUG]  [BUGGY]  if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  }	  if(available    <    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
723	[BUG]  [BUGGY]  if(skipped  <  numToSkip)  {  count(available);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  numToSkip)  {  count(available);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  numToSkip)  {  count(available);  }	  if(available    <    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
724	[BUG]  [BUGGY]  if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skip);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skip);  }	  if(available    <    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
725	[BUG]  [BUGGY]  count(available,  numToSkip,  is);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  numToSkip,  is);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  numToSkip,  is);	  count(available,    skipped,    is);    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
726	[BUG]  [BUGGY]  count(available,  is,  skipped);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  is,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  is,  skipped);	  count(available,    skipped,    is);    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
727	[BUG]  [BUGGY]  count(available,  available,  skipped);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  available,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  available,  skipped);	  count(available,    skipped,    is);    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
728	[BUG]  [BUGGY]  if(numToSkip  <  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  <  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  <  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  +=  numToSkip;  }	  if(numToSkip    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
729	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getInputStream(numToSkip);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  InputStream  is  =  currEntry.getInputStream(numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	InputStream  is  =  currEntry.getInputStream(numToSkip);	  InputStream    is    =    currEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
730	[BUG]  [BUGGY]  InputStream  is  =  this.currEntry.getInputStream();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  InputStream  is  =  this.currEntry.getInputStream();  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	InputStream  is  =  this.currEntry.getInputStream();	  InputStream    is    =    currEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
731	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getInputStream(),  available);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  InputStream  is  =  currEntry.getInputStream(),  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	InputStream  is  =  currEntry.getInputStream(),  available);	  InputStream    is    =    currEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
732	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getInputStream(available);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  InputStream  is  =  currEntry.getInputStream(available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	InputStream  is  =  currEntry.getInputStream(available);	  InputStream    is    =    currEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
733	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getErrorStream();  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  InputStream  is  =  currEntry.getErrorStream();  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	InputStream  is  =  currEntry.getErrorStream();	  InputStream    is    =    currEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
734	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getInputStream(),  skipped);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  InputStream  is  =  currEntry.getInputStream(),  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	InputStream  is  =  currEntry.getInputStream(),  skipped);	  InputStream    is    =    currEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
735	[BUG]  [BUGGY]  count(available,  entrySize,  available);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  entrySize,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  entrySize,  available);	  count(available,    skipped,    available);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
736	[BUG]  [BUGGY]  count(available,  numToSkip,  available);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  numToSkip,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  numToSkip,  available);	  count(available,    skipped,    available);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
737	[BUG]  [BUGGY]  count(available,  skipped,  available,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  skipped,  available,  hasHitEOF);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  skipped,  available,  hasHitEOF);	  count(available,    skipped,    available);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
738	[BUG]  [BUGGY]  skip(available,  numToSkip,  available);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  skip(available,  numToSkip,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	skip(available,  numToSkip,  available);	  count(available,    skipped,    available);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
739	[BUG]  [BUGGY]  count(available  *  SHORT_SIZE,  skipped);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  SHORT_SIZE,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  SHORT_SIZE,  skipped);	  count(available    *    SHORT_SIZE);    	non-compiled	[CE]  illegal  start  of  type	185	None	replace
740	[BUG]  [BUGGY]  count(available  *  SHORT_SIZE  +  skipped);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  SHORT_SIZE  +  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  SHORT_SIZE  +  skipped);	  count(available    *    SHORT_SIZE);    	non-compiled	[CE]  illegal  start  of  type	185	None	replace
741	[BUG]  [BUGGY]  count(available  *  SHORT_SIZE  /  SHORT_SIZE);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  SHORT_SIZE  /  SHORT_SIZE);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  SHORT_SIZE  /  SHORT_SIZE);	  count(available    *    SHORT_SIZE);    	non-compiled	[CE]  illegal  start  of  type	185	None	replace
742	[BUG]  [BUGGY]  count(numToSkip  *  SHORT_SIZE);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  *  SHORT_SIZE);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  *  SHORT_SIZE);	  count(available    *    SHORT_SIZE);    	non-compiled	[CE]  illegal  start  of  type	185	None	replace
743	[BUG]  [BUGGY]  count(available  *  SHORT_SIZE  -  skipped);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  SHORT_SIZE  -  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  SHORT_SIZE  -  skipped);	  count(available    *    SHORT_SIZE);    	non-compiled	[CE]  illegal  start  of  type	185	None	replace
744	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  0)  {  count(available);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  0)  {  count(available);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  numToSkip)  {  if(skipped  >  0)  {  count(available);  }	  if(skipped    >    numToSkip)    {    count(available);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	177	None	replace
745	[BUG]  [BUGGY]  if(skipped  >=  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >=  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >=  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  0;  }	  if(skipped    >    numToSkip)    {    count(available);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	177	None	replace
746	[BUG]  [BUGGY]  if(skipped  <  =  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  =  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  =  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipped  =  0;  }	  if(skipped    >    numToSkip)    {    count(available);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	177	None	replace
747	[BUG]  [BUGGY]  count(available  *  numToSkip,  numToSkip);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  numToSkip,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  numToSkip,  numToSkip);	  count(available    *    skipped,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
748	[BUG]  [BUGGY]  count(numToSkip  *  available,  numToSkip);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  *  available,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  *  available,  numToSkip);	  count(available    *    skipped,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
749	[BUG]  [BUGGY]  count(available  *  entrySize,  numToSkip);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  entrySize,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  entrySize,  numToSkip);	  count(available    *    skipped,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
750	[BUG]  [BUGGY]  count(available  *  skipped,  numToSkip,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  skipped,  numToSkip,  hasHitEOF);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  skipped,  numToSkip,  hasHitEOF);	  count(available    *    skipped,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
751	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  numToSkip)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  numToSkip)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }	  if(skipped    >    numToSkip)    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
752	[BUG]  [BUGGY]  if(numToSkip  >  skipped)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  skipped)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  skipped)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }	  if(skipped    >    numToSkip)    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
753	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }	  if(skipped    >    numToSkip)    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
754	[BUG]  [BUGGY]  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);	  if(skipped    >    numToSkip)    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
755	[BUG]  [BUGGY]  if(skipped  >=  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >=  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >=  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }	  if(skipped    >    numToSkip)    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
756	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  0,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  0,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  0,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }	  if(skipped    >    numToSkip)    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
757	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skip);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skip);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
758	[BUG]  [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skip);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skip);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
759	[BUG]  [BUGGY]  if(skipped  >=  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skip);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >=  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >=  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skip);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
760	[BUG]  [BUGGY]  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skip);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skip);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
761	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
762	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipd  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipd  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  skipped);  skipd  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
763	[BUG]  [BUGGY]  count(entrySize  +  sink);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(entrySize  +  sink);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(entrySize  +  sink);	  count(skipped    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
764	[BUG]  [BUGGY]  count(available  *  entrySize  +  entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  entrySize  +  entrySize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  entrySize  +  entrySize);	  count(skipped    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
765	[BUG]  [BUGGY]  count(skipped  /  entrySize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(skipped  /  entrySize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(skipped  /  entrySize);	  count(skipped    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
766	[BUG]  [BUGGY]  count(offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(offset  +  entrySize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(offset  +  entrySize);	  count(skipped    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
767	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  check(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  check(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  check(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(skipped    >    0)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	159	None	replace
768	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(skipped    >    0)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	159	None	replace
769	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  check(available);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  check(available);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  check(available);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(skipped    >    0)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	159	None	replace
770	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(skipped    >    0)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	159	None	replace
771	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToSkip).intValue();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToSkip).intValue();  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  skipped  =  IOUtils.skip(available,  numToSkip).intValue();	  long    skipped    =    IOUtils.skip(available,    numToSkip).longValue();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
772	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(is,  numToSkip).longValue();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  long  skipped  =  IOUtils.skip(is,  numToSkip).longValue();  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  skipped  =  IOUtils.skip(is,  numToSkip).longValue();	  long    skipped    =    IOUtils.skip(available,    numToSkip).longValue();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
773	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToSkip).doubleValue();  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToSkip).doubleValue();  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  skipped  =  IOUtils.skip(available,  numToSkip).doubleValue();	  long    skipped    =    IOUtils.skip(available,    numToSkip).longValue();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
774	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToSkip).length();  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToSkip).length();  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  skipped  =  IOUtils.skip(available,  numToSkip).length();	  long    skipped    =    IOUtils.skip(available,    numToSkip).longValue();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
775	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToSkip).recordSize();  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToSkip).recordSize();  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  skipped  =  IOUtils.skip(available,  numToSkip).recordSize();	  long    skipped    =    IOUtils.skip(available,    numToSkip).longValue();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
776	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(numToSkip,  available).longValue();  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  long  skipped  =  IOUtils.skip(numToSkip,  available).longValue();  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  skipped  =  IOUtils.skip(numToSkip,  available).longValue();	  long    skipped    =    IOUtils.skip(available,    numToSkip).longValue();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
777	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(available,  numToSkip,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  int  skipped  =  IOUtils.skip(available,  numToSkip,  hasHitEOF);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  skipped  =  IOUtils.skip(available,  numToSkip,  hasHitEOF);	  int    skipped    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
778	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(available,  numToSkip  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  int  skipped  =  IOUtils.skip(available,  numToSkip  +  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  skipped  =  IOUtils.skip(available,  numToSkip  +  1);	  int    skipped    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
779	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(numToSkip,  available);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  int  skipped  =  IOUtils.skip(numToSkip,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  skipped  =  IOUtils.skip(numToSkip,  available);	  int    skipped    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
780	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(entrySize,  numToSkip);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  int  skipped  =  IOUtils.skip(entrySize,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  skipped  =  IOUtils.skip(entrySize,  numToSkip);	  int    skipped    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
781	[BUG]  [BUGGY]  count(available  *  sink);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  sink);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  sink);	  count(available    -    sink);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
782	[BUG]  [BUGGY]  count(entrySize  -  available,  skipped);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(entrySize  -  available,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(entrySize  -  available,  skipped);	  count(available    -    skipped,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
783	[BUG]  [BUGGY]  count(available  -  skipped,  entrySize,  skipped);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  skipped,  entrySize,  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skipped,  entrySize,  skipped);	  count(available    -    skipped,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
784	[BUG]  [BUGGY]  count(available  -  entryOffset,  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  entryOffset,  entrySize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  entryOffset,  entrySize);	  count(available    -    skipped,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
785	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available  +  numToS  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  long  skipped  =  IOUtils.skip(available  +  numToS  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	long  skipped  =  IOUtils.skip(available  +  numToS	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToS    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
786	[BUG]  [BUGGY]  numToSkip  =  IOUtils.skip(available  +  numToS  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  =  IOUtils.skip(available  +  numToS  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  =  IOUtils.skip(available  +  numToS	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToS    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
787	[BUG]  [BUGGY]  skipped  =  IOUtils.skip(available  +  numToS  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  skipped  =  IOUtils.skip(available  +  numToS  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	skipped  =  IOUtils.skip(available  +  numToS	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToS    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
788	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  0)  {  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  0)  {  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  numToSkip)  {  if(skipped  >  0)  {  skipped  =  0;  }	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToS    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
789	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  0;  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipd,    available,    numToSkip,    skipped);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
790	[BUG]  [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  0;  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipd,    available,    numToSkip,    skipped);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
791	[BUG]  [BUGGY]  if(available  >  skip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  skip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  skip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  0;  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipd,    available,    numToSkip,    skipped);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
792	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  <  numToSkip)  {  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  numToSkip)  {  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  0;  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipd,    available,    numToSkip,    skipped);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
793	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  numToSkip)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  numToSkip)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(skipped    >    numToSkip)    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
794	[BUG]  [BUGGY]  if(numToSkip  >  skipped)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  skipped)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  skipped)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(skipped    >    numToSkip)    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
795	[BUG]  [BUGGY]  if(skipped  >=  numToSkip)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >=  numToSkip)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >=  numToSkip)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(skipped    >    numToSkip)    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
796	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(skipped    >    numToSkip)    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
797	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  <  numToSkip)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  numToSkip)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(skipped    >    numToSkip)    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
798	[BUG]  [BUGGY]  if(numToSkip  >  skipped)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  skipped)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  skipped)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }	  if(skipped    >    numToSkip)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	173	None	replace
799	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }	  if(skipped    >    numToSkip)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	173	None	replace
800	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  numToSkip)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  numToSkip)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }	  if(skipped    >    numToSkip)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	173	None	replace
801	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  check(numToSkip);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  check(numToSkip);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  check(numToSkip);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }	  if(skipped    >    numToSkip)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	173	None	replace
802	[BUG]  [BUGGY]  if(skipped  >=  numToSkip)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >=  numToSkip)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >=  numToSkip)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }	  if(skipped    >    numToSkip)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	173	None	replace
803	[BUG]  [BUGGY]  if(skipped  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }	  if(skipped    >    numToSkip)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	173	None	replace
804	[BUG]  [BUGGY]  if(skipped  >=  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >=  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >=  0)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }	  if(skipped    >    numToSkip)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	173	None	replace
805	[BUG]  [BUGGY]  count(numToSkip  +  skip,  available);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  +  skip,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  +  skip,  available);	  count(numToSkip    +    skip);    	non-compiled	[CE]  illegal  start  of  type	179	None	replace
806	[BUG]  [BUGGY]  count(skip  +  numToSkip);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(skip  +  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(skip  +  numToSkip);	  count(numToSkip    +    skip);    	non-compiled	[CE]  illegal  start  of  type	179	None	replace
807	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(available  +  numToSkip,  available);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  int  skipped  =  IOUtils.skip(available  +  numToSkip,  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  skipped  =  IOUtils.skip(available  +  numToSkip,  available);	  int    skipped    =    IOUtils.skip(available    +    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	156	None	replace
808	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(available  +  numToSkip,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  int  skipped  =  IOUtils.skip(available  +  numToSkip,  hasHitEOF);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  skipped  =  IOUtils.skip(available  +  numToSkip,  hasHitEOF);	  int    skipped    =    IOUtils.skip(available    +    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	156	None	replace
809	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(is  +  numToSkip);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  int  skipped  =  IOUtils.skip(is  +  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	int  skipped  =  IOUtils.skip(is  +  numToSkip);	  int    skipped    =    IOUtils.skip(available    +    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	156	None	replace
810	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  0;  }	  if(available    <    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
811	[BUG]  [BUGGY]  if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  0;  }	  if(available    <    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
812	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipd  =  0;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipd  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipd  =  0;  }	  if(available    <    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
813	[BUG]  [BUGGY]  if(numToSkip  <  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  <  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  <  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(numToSkip    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
814	[BUG]  [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(numToSkip    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
815	[BUG]  [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipd);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipd);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipd);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(numToSkip    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
816	[BUG]  [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numTo  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numTo  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numTo	  if(numToSkip    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
817	[BUG]  [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToS  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToS  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  *  numToS	  if(numToSkip    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
818	[BUG]  [BUGGY]  if(skipped  >=  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToS  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >=  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToS  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >=  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToS	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToS    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
819	[BUG]  [BUGGY]  if(skipped  >=  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >=  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >=  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToS    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
820	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numTo	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToS    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
821	[BUG]  [BUGGY]  if(skipped  >=  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >=  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >=  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
822	[BUG]  [BUGGY]  if(available  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
823	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
824	[BUG]  [BUGGY]  if(available  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
825	[BUG]  [BUGGY]  count(available  /  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  /  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  /  1);	  count(available    +    1);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
826	[BUG]  [BUGGY]  if(available  <  =  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  <  =  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  =  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(available    <    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
827	[BUG]  [BUGGY]  if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipd  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipd  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  <  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipd  =  IOUtils.skip(available  +  numToSkip);  }	  if(available    <    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
828	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipd  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipd  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipd  =  IOUtils.skip(available  +  numToSkip);  }	  if(available    <    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
829	[BUG]  [BUGGY]  if(available  <  =  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipd  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  <  =  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipd  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  =  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipd  =  IOUtils.skip(available  +  numToSkip);  }	  if(available    <    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
830	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numTo  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numTo  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numTo	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numTo    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
831	[BUG]  [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numTo  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numTo  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numTo	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numTo    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
832	[BUG]  [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numTo  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numTo  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numTo	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numTo    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
833	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numTo  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numTo  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numTo	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numTo    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
834	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numTo  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numTo  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numTo	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numTo    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
835	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numTo  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numTo  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numTo	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numTo    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
836	[BUG]  [BUGGY]  if(skipped  >=  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numTo  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >=  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numTo  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >=  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numTo	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numTo    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
837	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getOutputStream();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  InputStream  is  =  currEntry.getOutputStream();  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	InputStream  is  =  currEntry.getOutputStream();	  InputStream    is    =    currEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
838	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getInputStream(),  available;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  InputStream  is  =  currEntry.getInputStream(),  available;  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	InputStream  is  =  currEntry.getInputStream(),  available;	  InputStream    is    =    currEntry.getInputStream();    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
839	[BUG]  [BUGGY]  count(available  -  skipped,  missing);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  skipped,  missing);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skipped,  missing);	  count(skipped    -    available,    skipped);    	non-compiled	[CE]  illegal  start  of  type	162	None	replace
840	[BUG]  [BUGGY]  count(available  -  skipped,  escapeSize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  -  skipped,  escapeSize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  -  skipped,  escapeSize);	  count(skipped    -    available,    skipped);    	non-compiled	[CE]  illegal  start  of  type	162	None	replace
841	[BUG]  [BUGGY]  count(available  /  numToSkip,  numToSkip);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  /  numToSkip,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  /  numToSkip,  numToSkip);	  count(available    *    skipped,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
842	[BUG]  [BUGGY]  count(available  +  numToSkip  -  entryOffset);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  numToSkip  -  entryOffset);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  numToSkip  -  entryOffset);	  count(available    +    skipped    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
843	[BUG]  [BUGGY]  count(available  /  skipped  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  /  skipped  -  entryOffset);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  /  skipped  -  entryOffset);	  count(available    +    skipped    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
844	[BUG]  [BUGGY]  count(available  +  skipped  /  entryOffset);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  skipped  /  entryOffset);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  skipped  /  entryOffset);	  count(available    +    skipped    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	161	None	replace
845	[BUG]  [BUGGY]  if(available  >=  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >=  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >=  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }	  if(available    <    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
846	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipd  =  0;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipd  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipd  =  0;  }	  if(available    <    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
847	[BUG]  [BUGGY]  count(available,  numToSkip  +  skipped);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  numToSkip  +  skipped);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  numToSkip  +  skipped);	  count(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
848	[BUG]  [BUGGY]  encoding.count(available,  numToSkip);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  encoding.count(available,  numToSkip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	encoding.count(available,  numToSkip);	  count(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
849	[BUG]  [BUGGY]  count(numToSkip  /  SHORT_SIZE);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(numToSkip  /  SHORT_SIZE);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(numToSkip  /  SHORT_SIZE);	  count(skipped    /    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
850	[BUG]  [BUGGY]  numToSkip  *=  available;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  numToSkip  *=  available;  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	numToSkip  *=  available;	  count(numToSkip    *    available);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
851	[BUG]  [BUGGY]  count(available,  skipped  -  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  skipped  -  1,  hasHitEOF);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  skipped  -  1,  hasHitEOF);	  count(available,    skipped    -    1);    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
852	[BUG]  [BUGGY]  count(available,  skipped  *  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  skipped  *  1);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  skipped  *  1);	  count(available,    skipped    -    1);    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
853	[BUG]  [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipd,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(numToSkip    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
854	[BUG]  [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numTo  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numTo  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numTo	  if(numToSkip    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
855	[BUG]  [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipd  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipd  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipd  =  IOUtils.skip(available  +  numToSkip);  }	  if(numToSkip    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
856	[BUG]  [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  skipped)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
857	[BUG]  [BUGGY]  if(numToSkip  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
858	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
859	[BUG]  [BUGGY]  if(skipped  >=  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >=  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >=  0)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    numToSkip)    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	187	None	replace
860	[BUG]  [BUGGY]  if(numToSkip  >  available)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  available)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  available)  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available  +  numToSkip);  }	  if(skipped    >    numToSkip)    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available    +    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	187	None	replace
861	[BUG]  [BUGGY]  if(available  >=  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >=  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >=  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
862	[BUG]  [BUGGY]  if(available  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  0)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  +=  numToSkip;  }	  if(available    >    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    +=    numToSkip;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
863	[BUG]  [BUGGY]  count(available  *  entrySize  -  available);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  entrySize  -  available);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  entrySize  -  available);	  count(entrySize    -    available);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
864	[BUG]  [BUGGY]  checkSize(available  -  entrySize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  checkSize(available  -  entrySize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	checkSize(available  -  entrySize);	  count(entrySize    -    available);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
865	[BUG]  [BUGGY]  add(available  -  entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  add(available  -  entrySize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	add(available  -  entrySize);	  count(entrySize    -    available);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
866	[BUG]  [BUGGY]  count(available,  available,  is);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available,  available,  is);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available,  available,  is);	  count(available,    skipped,    is);    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
867	[BUG]  [BUGGY]  if(skipped  >=  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >=  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >=  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
868	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  numToSkip)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  numToSkip)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
869	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  >  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  >  numToSkip)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  IOUtils.skip(available  *  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    skipped);    skipped    =    IOUtils.skip(available    *    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
870	[BUG]  [BUGGY]  count(available  *  numToSkip  +  skip);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  *  numToSkip  +  skip);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  *  numToSkip  +  skip);	  count(numToSkip    +    skip);    	non-compiled	[CE]  illegal  start  of  type	179	None	replace
871	[BUG]  [BUGGY]  if(available  <  =  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(available  <  =  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(available  <  =  numToSkip)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  }	  if(available    >=    numToSkip)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
872	[BUG]  [BUGGY]  count(available  +  numToSkip,  entrySize);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  count(available  +  numToSkip,  entrySize);  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	count(available  +  numToSkip,  entrySize);	  count(available    +    skipped,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
873	[BUG]  [BUGGY]  if(numToSkip  >  skipped)  {  check(skipped);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  skipped)  {  check(skipped);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  skipped)  {  check(skipped);  }	  if(skipped    >    numToSkip)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	173	None	replace
874	[BUG]  [BUGGY]  if(numToSkip  >  skipped)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  skipped)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  skipped)  {  check(skipped);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  }	  if(skipped    >    numToSkip)    {    check(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	173	None	replace
875	[BUG]  [BUGGY]  if(skipped  ==  0)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  ==  0)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  ==  0)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  0;  }	  if(skipped    >    numToSkip)    {    count(available);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
876	[BUG]  [BUGGY]  if(skipped  >=  0)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >=  0)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >=  0)  {  count(available);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  skipped);  skipped  =  0;  }	  if(skipped    >    numToSkip)    {    count(available);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
877	[BUG]  [BUGGY]  if(numToSkip  >  skipped)  {  count(available);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(numToSkip  >  skipped)  {  count(available);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  0;  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(numToSkip  >  skipped)  {  count(available);  }  else  {  System.arraycopy(available,  0,  available,  numToSkip,  numToSkip);  skipped  =  0;  }	  if(skipped    >    numToSkip)    {    count(available);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
878	[BUG]  [BUGGY]  if(skipped  >=  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  long  skipped  =  IOUtils.skip(is,  numToSkip);      [BUGGY]  if(skipped  >=  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }  [BUGGY]      entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	200	200	1	replace	if(skipped  >=  available)  {  count(skipped);  }  else  {  System.arraycopy(available,  0,  skipped,  available,  numToSkip,  numToSkip);  skipped  =  IOUtils.skip(available,  numToSkip);  }	  if(skipped    >    available)    {    count(skipped);    }    else    {    System.arraycopy(available,    0,    skipped,    available,    numToSkip,    numToSkip);    skipped    =    IOUtils.skip(available,    numToSkip);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
