projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(recordSize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(blockSize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(currEntry.available()-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-blockSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(0,entryOffset-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-fileSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-this.blockSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entryOffset-blockSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize/blockSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(0,entrySize-blockSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize*blockSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset+2);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset+1,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(recordSize-entryOffset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entryOffset-entrySize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize/entryOffset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(0,entrySize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize,entryOffset-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(recordSize,entryOffset-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(0,entryOffset-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(0L,entryOffset-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(1L,entryOffset-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(byte)(0,entryOffset-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(currEntry==null){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.addChangeListener(this);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(currEntry!=null){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.addChangeListener(this);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(currEntry==null){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.copyCurrentSize(currEntry.getValue());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(currEntry!=null){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.copyCurrentSize(currEntry.getValue());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180this.currEntry.setEntrySize(entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(currEntry==null){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.copyCurrentSize(currEntry.length);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(currEntry!=null){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.copyCurrentSize(currEntry.length);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize.available()-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(currEntry.available()*entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(currEntry.available()-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-currEntryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize+currEntry.available()-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-currEntry.available());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180returnSMALL_BUFFER_SIZE(entrySize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intblockSize=(int)(entrySize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize();if(currEntrySize>entryOffset){returncurrEntrySize+currEntrySize;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize();if(currEntrySize>entryOffset){returncurrEntrySize;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(currEntry!=null){currEntry=newTarArchiveEntry(entrySize,entryOffset);returncurrEntry.available();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.length;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(currEntry!=null){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.addChildToBack(currEntry);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(currEntry.available()+entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(currEntry.available()/entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-blockSize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize*entryOffset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(blockSize-entryOffset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(available,entrySize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(256,entryOffset-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(blockSize-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(recordSize-blockSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(long)(entrySize-blockSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(length-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(currentEntry.available()-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(1,entryOffset-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset+1)/2;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset+1)+1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(recordSize-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize();this.currEntry=currEntrySize+currEntrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize();returncurrEntrySize+currEntrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize();if(currEntrySize>entryOffset){returncurrEntry.length;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize();this.currEntry=currEntrySize-currEntrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize();returncurrEntrySize-currEntrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize();if(currEntrySize>entryOffset){returncurrEntry.available();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset+1)/2+1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset+1)/4;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset+1)/1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset+1)/2*Integer.MAX_VALUE;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset+1)/3;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset+1)/2*Integer.MIN_VALUE;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(recordSize,entryOffset-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(0,entryOffset-entrySize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(0,entryOffset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize();if(currEntrySize<entryOffset){returncurrEntry.length;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180longcurrEntrySize=getCurrEntrySize();if(currEntrySize>entryOffset){returncurrEntry.length;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize()-entryOffset;if(currEntrySize>entryOffset){returncurrEntry.length;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize()+entryOffset;if(currEntrySize>entryOffset){returncurrEntry.length;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize();if(entrySize>entryOffset){returncurrEntry.length;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getRecordSize();if(currEntrySize>entryOffset){returncurrEntry.length;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entryOffset-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entryOffset-length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryLimit);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(this.blockSize-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180returnthis.blockSize-entrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(this.blockSize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180this.currEntry.setEntrySize(entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180this.currEntry.setEntryOffset(entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180this.currEntry.setEntry(entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180this.currEntry.setEntrySize(entryOffset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180this.currEntry.setEntrySize(entryOffset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180this.currEntry.setEntryLength(entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180this.currEntry.setEntry(entryOffset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize.available()*entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize*currEntry.available());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(currEntry.available()*entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize/currEntry.available()*entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize.available()*currEntryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-currEntry.available()*entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset+1)+2;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset+2)+1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset+1)+1L;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entryOffset-entrySize+1)+1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(long)(entrySize-entryOffset+1)+1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180Entry<K,V>currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.copyCurrentSize(currEntry.getValue());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>entryOffset){if(currEntry!=null){currEntry=newTarArchiveEntry(entry,entryOffset);currEntry.copyCurrentSize(currEntry.getValue());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>entryOffset){if(currEntry!=null){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.copyCurrentSize(currEntry.getValue());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.copyCurrentSize(currEntry.getValue());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180IntegercurrEntry=newInteger(entrySize,entryOffset);currEntry.copyCurrentSize(currEntry.getValue());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>=entryOffset){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.copyCurrentSize(currEntry.getValue());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize,entryOffset+entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize,entryOffset-blockSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize,entryOffset-entryOffset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entryOffset,entrySize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-recordSize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intrecordSize=(int)(entrySize-entryOffset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entryOffset-recordSize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(long)(entrySize-entryOffset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(byte)(entrySize-entryOffset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>entryOffset){if(currEntry!=null){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.addChildToBack(currEntry);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180Entry<K,V>currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.addChildToBack(currEntry);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>=entryOffset){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.addChildToBack(currEntry);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.addChildToBack(currEntry);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>entryOffset){if(currEntry!=null){currEntry=newTarArchiveEntry(entry,entryOffset);currEntry.addChildToBack(currEntry);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>entryOffset){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.addChildToBack(currEntry);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entryOffset-fileSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize/fileSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize/blockSize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entryOffset-blockSize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize*blockSize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intreturn(int)(entrySize-blockSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(byte)(entrySize-blockSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(long)(entrySize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(short)(entrySize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entryOffset-entryOffset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entryOffset-entryOffset+2);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entryOffset-entryOffset+1,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize/entryOffset+2);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize/recordSize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entryOffset/entrySize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(recordSize/entryOffset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize();this.currEntry=currEntrySize-entryOffset;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize()-entryOffset;this.currEntry=currEntrySize-currEntrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180IntegercurrEntrySize=getCurrEntrySize();this.currEntry=currEntrySize-currEntrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180longcurrEntrySize=getCurrEntrySize();this.currEntry=currEntrySize-currEntrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180this.currEntry=currEntrySize-getCurrEntrySize();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180Entry<K,V>currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.copyCurrentSize(currEntry.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>entryOffset){if(currEntry!=null){currEntry=newTarArchiveEntry(entry,entryOffset);currEntry.copyCurrentSize(currEntry.length);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>entryOffset){if(currEntry!=null){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.copyCurrentSize(currEntry.length);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>=entryOffset){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.copyCurrentSize(currEntry.length);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize==entryOffset){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.copyCurrentSize(currEntry.length);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180IntegercurrEntry=newInteger(entrySize,entryOffset);currEntry.copyCurrentSize(currEntry.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize();if(currEntrySize<entryOffset){returncurrEntrySize;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180longcurrEntrySize=getCurrEntrySize();if(currEntrySize>entryOffset){returncurrEntrySize;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize()-entryOffset;if(currEntrySize>entryOffset){returncurrEntrySize;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getRecordSize();if(currEntrySize>entryOffset){returncurrEntrySize;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize()+entryOffset;if(currEntrySize>entryOffset){returncurrEntrySize;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize();if(entrySize>entryOffset){returncurrEntrySize;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entryOffset-recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(long)(entrySize-recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(byte)(recordSize-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>entryOffset){if(currEntry!=null){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.addChangeListener(this);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>=entryOffset){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.addChangeListener(this);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180Entry<K,V>currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.addChangeListener(this);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize==entryOffset){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.addChangeListener(this);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.addChangeListener(this);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>entryOffset){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.addChangeListener(this);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>entryOffset){if(currEntry!=null){currEntry=newTarArchiveEntry(entry,entryOffset);currEntry.addChangeListener(this);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(blockSize-recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(recordSize/blockSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(long)(recordSize-blockSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>entryOffset){if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.length;}}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180IntegercurrEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.length;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>entryOffset){if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.length;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize<=entryOffset){if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.length;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>=entryOffset){if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.length;}}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180Entry<K,V>currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.length;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>=entryOffset){if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.length;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(byte)(0,entrySize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(byte)(entrySize,entryOffset-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(byte)(0,entryOffset-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(byte)(recordSize,entryOffset-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize.available()-currEntrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize.available()-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize.available()-currEntry.available());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(currEntry.available()/entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(0L,entrySize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(0L,entryOffset-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(0L,entryOffset+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(0L,entryOffset-entrySize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize();returncurrEntrySize-entryOffset;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180longcurrEntrySize=getCurrEntrySize();returncurrEntrySize-currEntrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize()-entryOffset;returncurrEntrySize-currEntrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize()+entryOffset;returncurrEntrySize-currEntrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getRecordSize();returncurrEntrySize-currEntrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180IntegercurrEntrySize=getCurrEntrySize();returncurrEntrySize-currEntrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize.available()+entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize.available()-entryOffset,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(recordSize.available()-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(blockSize.available()-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(1L,entrySize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize,1L-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize.available()/entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize/currEntry.available());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize*currEntry.available()/entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize.available()/currEntryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize+currEntry.available()/entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(currEntry.available());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset.available());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(currEntrySize-entryOffset.available());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(recordSize-currEntry.available());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset,currEntry.available());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entryOffset-currEntry.available());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(long)(entrySize-currEntry.available());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entryOffset-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(long)(entryOffset-blockSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>=entryOffset){currEntry=newTarArchiveEntry(entrySize,entryOffset);returncurrEntry.available();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>entryOffset){if(currEntry!=null){currEntry=newTarArchiveEntry(entrySize,entryOffset);returncurrEntry.available();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize==entryOffset){currEntry=newTarArchiveEntry(entrySize,entryOffset);returncurrEntry.available();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>entryOffset){currEntry=newTarArchiveEntry(entrySize,entryOffset);returncurrEntry.available();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180Entry<K,V>currEntry=newTarArchiveEntry(entrySize,entryOffset);returncurrEntry.available();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntry=newTarArchiveEntry(entrySize,entryOffset);returncurrEntry.available();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>entryOffset){if(currEntry!=null){currEntry=newTarArchiveEntry(entry,entryOffset);returncurrEntry.available();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(256,entrySize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(256,entryOffset-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intentrySize=(int)(256,entryOffset-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intentryOffset=(int)(256,entrySize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(byte)(256,entryOffset-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset+1,hasHitEOF,blockSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset+1,hasHitEOF,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset+1,hasHitEOF,currEntry.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset+1,hasHitEOF,true);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize*entryOffset+1,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entryOffset-entrySize+1,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset+4);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset+3);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset*2);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize*SMALL_BUFFER_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entryOffset*blockSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize*recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(blockSize*entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(recordSize*entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(recordSize*blockSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(0,entrySize-entryOffset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(recordSize,entrySize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180returnentrySize-SMALL_BUFFER_SIZE;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180returnSMALL_BUFFER_SIZE(entrySize-entryOffset,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180returnentryOffset-SMALL_BUFFER_SIZE;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intblockSize=SMALL_BUFFER_SIZE(entrySize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180returnSMALL_BUFFER_SIZE(entryOffset-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180returnSMALL_BUFFER_SIZE(entrySize-entryOffset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(MAX_VALUE,entryOffset-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(1,entrySize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(1,entryOffset-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>entryOffset){if(currEntry==null){currEntry=newTarArchiveEntry(entry,entryOffset);currEntry.copyCurrentSize(currEntry.length);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>entryOffset){if(currEntry==null){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.copyCurrentSize(currEntry.length);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>entryOffset){if(currEntry==null){currEntry=newTarArchiveEntry(entry,entryOffset);currEntry.copyCurrentSize(currEntry.getValue());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>entryOffset){if(currEntry==null){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.copyCurrentSize(currEntry.getValue());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180IntegercurrEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.copyCurrentSize(currEntry.getValue());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(0,entryOffset-blockSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(recordSize,entrySize-blockSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(0,blockSize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(0,blockSize-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(currEntrySize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize/currEntryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180IntegercurrEntrySize=getCurrEntrySize();this.currEntry=currEntrySize+currEntrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize()+entryOffset;this.currEntry=currEntrySize+currEntrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize()-entryOffset;this.currEntry=currEntrySize+currEntrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180this.currEntry=currEntrySize+getCurrEntrySize();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize+currEntry.available()*entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(recordSize+currEntry.available()-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize/currEntry.available()-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(currEntrySize+entryOffset.available()-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>entryOffset){if(currEntry==null){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.addChangeListener(this);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize<SMALL_BUFFER_SIZE){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.addChangeListener(this);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180IntegercurrEntry=newInteger(entrySize,entryOffset);currEntry.addChangeListener(this);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize+currEntry.available());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-currEntry.available()+entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(currEntry.available()+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize*SMALL_BUFFER_SIZE+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize*recordSize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize*this.blockSize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize*length+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize,entryOffset-recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize,recordSize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entryOffset,recordSize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intrecordSize=(int)(entrySize,entryOffset-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-1,entryOffset-recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(blockSize,entryOffset-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize();if(currEntrySize<entryOffset){returncurrEntry.available();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize()-entryOffset;if(currEntrySize>entryOffset){returncurrEntry.available();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize();if(entrySize>entryOffset){returncurrEntry.available();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180longcurrEntrySize=getCurrEntrySize();if(currEntrySize>entryOffset){returncurrEntry.available();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize()+entryOffset;if(currEntrySize>entryOffset){returncurrEntry.available();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getRecordSize();if(currEntrySize>entryOffset){returncurrEntry.available();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>entryOffset){if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180IntegercurrEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>entryOffset){if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.available();}}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>=entryOffset){if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize<=entryOffset){if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180Entry<K,V>currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>=entryOffset){if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.available();}}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intblockSize=(int)(entrySize-entryOffset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-blockOffset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize();if(currEntrySize<entryOffset){returncurrEntrySize+currEntrySize;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180longcurrEntrySize=getCurrEntrySize();if(currEntrySize>entryOffset){returncurrEntrySize+currEntrySize;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getRecordSize();if(currEntrySize>entryOffset){returncurrEntrySize+currEntrySize;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize();if(currEntrySize>=entryOffset){returncurrEntrySize+currEntrySize;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize()+entryOffset;if(currEntrySize>entryOffset){returncurrEntrySize+currEntrySize;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180IntegercurrEntrySize=getCurrEntrySize();if(currEntrySize>entryOffset){returncurrEntrySize+currEntrySize;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize.available()-currentEntrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(currentEntry.available()-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(currentEntry.available()*entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(blockSize/entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entryOffset/blockSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize/entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(recordSize/entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(long)(entrySize/blockSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize/recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize()+entryOffset;returncurrEntrySize+currEntrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180longcurrEntrySize=getCurrEntrySize();returncurrEntrySize+currEntrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize()-entryOffset;returncurrEntrySize+currEntrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize();returncurrEntrySize+entryOffset;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getRecordSize();returncurrEntrySize+currEntrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intblockSize=(int)(entryOffset-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180longblockSize=(long)(entrySize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intblockSize=(int)(entrySize-entryOffset,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intblockSize=(int)(recordSize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intblockSize=(int)(entrySize*entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize,entrySize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize,available-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize,this.blockSize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(0,entrySize-recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(available-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrentEntrySize();this.currEntry=currEntrySize-currEntrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getRecordSize();this.currEntry=currEntrySize-currEntrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize();this.currEntry=currEntrySize-blockSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entryOffset==0){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.copyCurrentSize(currEntry.getValue());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>0){if(currEntry==null){currEntry=newTarArchiveEntry(entry,entryOffset);currEntry.copyCurrentSize(currEntry.getValue());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>=0){currEntry=newTarArchiveEntry(entryOffset,entrySize);currEntry.copyCurrentSize(currEntry.getValue());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(currEntry!=null){currEntry=newTarArchiveEntry(entry,entryOffset);currEntry.copyCurrentSize(currEntry.getValue());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>=entryOffset){currEntry=newTarArchiveEntry(entry,entryOffset);currEntry.copyCurrentSize(currEntry.getValue());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(recordSize/entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(256*entryOffset,entrySize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(256L+entryOffset,entrySize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(255,entrySize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize.available()-blockSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(recordSize-entryOffset+1,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset+2,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset+1,hasHitEOF,isEnabled);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>0){if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.length;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>0){if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.length;}}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize<0){if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.length;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(0L+entrySize,entryOffset-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(0L*entrySize,entryOffset-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(0L,blockSize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-currentEntry.available());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>0){if(currEntry!=null){currEntry=newTarArchiveEntry(entry,entryOffset);currEntry.copyCurrentSize(currEntry.getValue());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entryOffset==0){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.copyCurrentSize(currEntry.length);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(currEntry!=null){currEntry=newTarArchiveEntry(entry,entryOffset);currEntry.copyCurrentSize(currEntry.length);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>0){if(currEntry==null){currEntry=newTarArchiveEntry(entry,entryOffset);currEntry.copyCurrentSize(currEntry.length);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>=entryOffset){currEntry=newTarArchiveEntry(entry,entryOffset);currEntry.copyCurrentSize(currEntry.length);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset+1)/2+4;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset+1)/2+blockSize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=(int)(entrySize-currEntry.available());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=(int)(currEntry.available());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intblockSize=(int)(entrySize-recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrentEntrySize();if(currEntrySize>entryOffset){returncurrEntrySize+currEntrySize;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrentEntrySize();if(currEntrySize<entryOffset){returncurrEntrySize+currEntrySize;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getTarEntrySize();if(currEntrySize>entryOffset){returncurrEntrySize+currEntrySize;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entryOffset!=0){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.addChangeListener(this);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entryOffset!=entrySize){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.addChangeListener(this);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>0){currEntry=newTarArchiveEntry(entryOffset,entrySize);currEntry.addChangeListener(this);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(currEntry!=null){currEntry=newTarArchiveEntry(entryOffset,entrySize);currEntry.addChangeListener(this);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(Math.min(entrySize,entryOffset-entryOffset));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(1L+entryOffset,entrySize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(MAX_VALUE,entryOffset-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(1L*entryOffset,entrySize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(TarArchiveEntry.available()-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180returnSMALL_BUFFER_SIZE(recordSize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180returnSMALL_BUFFER_SIZE(blockSize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(currEntry.length-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(currEntryOffset-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180this.currEntry.setRecordSize(entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180this.currEntry=newTarArchiveEntry(entryOffset,entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180this.currEntry.setRecordSize(entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrentEntrySize();if(currEntrySize>entryOffset){returncurrEntrySize;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrentEntrySize();if(currEntrySize<entryOffset){returncurrEntrySize;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(length-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize/this.blockSize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize/length+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(currEntrySize+entryOffset.available()-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(0,SMALL_BUFFER_SIZE-blockSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(currEntry.available-entryOffset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(currentSize-entryOffset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>0){if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>=0){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>=entryOffset){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>0){if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.available();}}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(recordSize*entryOffset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize*RecordSize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrentEntrySize();returncurrEntrySize+currEntrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180IntegercurrEntrySize=getCurrEntrySize();returncurrEntrySize+currEntrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entryOffset>=0){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.addChildToBack(currEntry);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entryOffset>=entrySize){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.addChildToBack(currEntry);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>0){currEntry=newTarArchiveEntry(entryOffset,entrySize);currEntry.addChildToBack(currEntry);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>=entryOffset){currEntry=newTarArchiveEntry(entry,entryOffset);currEntry.addChildToBack(currEntry);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-1,entryOffset-1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(recordSize-this.blockSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(blockSize-this.blockSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(0,this.blockSize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrentEntrySize();if(currEntrySize>entryOffset){returncurrEntry.length;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrentEntrySize();if(currEntrySize<entryOffset){returncurrEntry.length;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize();if(currEntrySize>=entryOffset){returncurrEntry.length;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-this.blockSize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-fileSize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(recordSize-entryOffset+2);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entryOffset==0){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.addChangeListener(this);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>=0){currEntry=newTarArchiveEntry(entryOffset,entrySize);currEntry.addChangeListener(this);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize<=0){currEntry=newTarArchiveEntry(entryOffset,entrySize);currEntry.addChangeListener(this);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize,data.length-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(short)(entrySize-blockSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrentEntrySize();this.currEntry=currEntrySize+currEntrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getRecordSize();this.currEntry=currEntrySize+currEntrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180longcurrEntrySize=getCurrEntrySize();this.currEntry=currEntrySize+currEntrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(recordSize-blockSize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(recordSize-entrySize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(Math.min(entrySize,entryOffset-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>0){if(currEntry!=null){currEntry=newTarArchiveEntry(entry,entryOffset);currEntry.copyCurrentSize(currEntry.length);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(length-blockSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(currEntry==null){currEntry=newTarArchiveEntry(entrySize,entryOffset);returncurrEntry.available();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(currEntry!=null){currEntry=newTarArchiveEntry(entryOffset,entrySize);returncurrEntry.available();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180while(currEntry!=null){currEntry=newTarArchiveEntry(entrySize,entryOffset);returncurrEntry.available();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(currEntry!=null){currEntry=newTarArchiveEntry(entry,entryOffset);returncurrEntry.available();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(currEntry!=null){currEntry=newTarArchiveEntry(entrySize,entryOffset+entryOffset);returncurrEntry.available();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrentEntrySize();returncurrEntrySize-currEntrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(recordSize-entryOffset+1)+1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize*entryOffset+1)+1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset*1)+1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(fileSize-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrentEntrySize();if(currEntrySize>entryOffset){returncurrEntry.available();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrentEntrySize();if(currEntrySize<entryOffset){returncurrEntry.available();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(available,entryOffset-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(currEntry.available,entrySize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(available,entrySize-entryOffset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset,recordSize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize,entryOffset-fileSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize,entryOffset-registerSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entryOffset>=entrySize){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.addChangeListener(this);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize<=entryOffset){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.addChangeListener(this);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180this.currEntry=newTarArchiveEntry(entrySize,entryOffset);this.currEntry.addChangeListener(this);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset+1,hasHitEOF,isEncoding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset*1,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset+1,hasHitEOF||hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(currentSize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize*entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(byte)(entrySize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(byte)(recordSize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset+1)*1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-blockSize+1)+1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(currentEntry.available()+entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(blockSize+currEntry.available()-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-currEntry.available()-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize*currEntry.available()-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize();if(currEntrySize>=entryOffset){returncurrEntry.available();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180this.currEntry.setEntry(entrySize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset+1));
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(blockSize-entryOffset.available());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(currentSize-entryOffset.available());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(currEntry.length-entrySize.available());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>entryOffset){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.copyCurrentSize(currEntry.getValue());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(currEntry==null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize<=entryOffset){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>0){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize*this.blockSize+entryOffset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entryOffset!=entrySize){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.addChildToBack(currEntry);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>entryOffset){currEntry=newTarArchiveEntry(entry,entryOffset);currEntry.addChildToBack(currEntry);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entryOffset>=entrySize){currEntry=newTarArchiveEntry(entry,entryOffset);currEntry.addChildToBack(currEntry);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getEntrySize();if(currEntrySize>entryOffset){returncurrEntrySize+currEntrySize;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset,entryOffset-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(blockSize,entrySize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entryOffset!=entrySize){currEntry=newTarArchiveEntry(entrySize,entryOffset);returncurrEntry.available();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>entryOffset){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.copyCurrentSize(currEntry.length);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize<=entryOffset){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.copyCurrentSize(currEntry.length);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entryOffset==entrySize){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.copyCurrentSize(currEntry.length);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.copyCurrentSize(currEntry.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>entryOffset){currEntry=newTarArchiveEntry(entry,entryOffset);currEntry.copyCurrentSize(currEntry.length);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset*2)/2;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize>=entryOffset){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.length;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(hasHitEOF){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.length;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-escapeOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entryOffset>=entrySize){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.copyCurrentSize(currEntry.length);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize/SMALL_BUFFER_SIZE+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize/this.blockSize+entryOffset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entryLength-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-fileLength);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entryOffset==entrySize){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.addChangeListener(this);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize==entryOffset){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.copyCurrentSize(currEntry.getValue());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(entrySize<=entryOffset){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.copyCurrentSize(currEntry.getValue());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize/SMALL_BUFFER_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(2,entryOffset-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrentEntrySize();returncurrEntrySize-entryOffset;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180shortcurrEntrySize=getCurrEntrySize();returncurrEntrySize-currEntrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrentEntrySize();if(currEntrySize>=entryOffset){returncurrEntry.length;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize();returncurrEntrySize/currEntrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(512,entrySize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(28,entryOffset-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(64,entryOffset-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180returnSMALL_BUFFER_SIZE(entrySize-entryOffset)+1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180returnSMALL_BUFFER_SIZE(entrySize-blockSize);
