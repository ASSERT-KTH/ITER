projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(recordSize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(blockSize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(currEntry.available()-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-blockSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(0,entryOffset-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-fileSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-this.blockSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entryOffset-blockSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize/blockSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(0,entrySize-blockSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize*blockSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset+2);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset+1,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(recordSize-entryOffset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entryOffset-entrySize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize/entryOffset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(0,entrySize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize,entryOffset-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(recordSize,entryOffset-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(0,entryOffset-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(0L,entryOffset-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(1L,entryOffset-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(byte)(0,entryOffset-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(currEntry==null){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.addChangeListener(this);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(currEntry!=null){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.addChangeListener(this);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(currEntry==null){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.copyCurrentSize(currEntry.getValue());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(currEntry!=null){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.copyCurrentSize(currEntry.getValue());}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180this.currEntry.setEntrySize(entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(currEntry==null){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.copyCurrentSize(currEntry.length);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(currEntry!=null){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.copyCurrentSize(currEntry.length);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize.available()-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(currEntry.available()*entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(currEntry.available()-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-currEntryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize+currEntry.available()-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-currEntry.available());
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180returnSMALL_BUFFER_SIZE(entrySize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intblockSize=(int)(entrySize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize();if(currEntrySize>entryOffset){returncurrEntrySize+currEntrySize;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize();if(currEntrySize>entryOffset){returncurrEntrySize;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(currEntry!=null){currEntry=newTarArchiveEntry(entrySize,entryOffset);returncurrEntry.available();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(currEntry!=null){currEntry=getCurrEntry();if(currEntry!=null){returncurrEntry.length;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180if(currEntry!=null){currEntry=newTarArchiveEntry(entrySize,entryOffset);currEntry.addChildToBack(currEntry);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(currEntry.available()+entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(currEntry.available()/entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-blockSize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize*entryOffset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(blockSize-entryOffset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(available,entrySize-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(256,entryOffset-entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(blockSize-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(recordSize-blockSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(long)(entrySize-blockSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(length-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(currentEntry.available()-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(1,entryOffset-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset+1)/2;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(entrySize-entryOffset+1)+1;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180return(int)(recordSize-entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize();this.currEntry=currEntrySize+currEntrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize();returncurrEntrySize+currEntrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize();if(currEntrySize>entryOffset){returncurrEntry.length;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize();this.currEntry=currEntrySize-currEntrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize();returncurrEntrySize-currEntrySize;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java180intcurrEntrySize=getCurrEntrySize();if(currEntrySize>entryOffset){returncurrEntry.available();}
