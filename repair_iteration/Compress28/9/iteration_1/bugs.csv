bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableCount());  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [BUGGY]  numToRead  =  Math.min(numToRead,  availableCount());  [BUGGY]    totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  availableCount());	numToRead  =  Math.min(numToRead,  available());  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
2	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [BUGGY]  numToRead  =  Math.min(numToRead,  entrySize);  [BUGGY]    totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  entrySize);	numToRead  =  Math.min(numToRead,  available());  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
3	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  available()  -  1);  [CE]  illegal  start  of  type  [FE]        AssertionError  [CONTEXT]  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [BUGGY]  numToRead  =  Math.min(numToRead,  available()  -  1);  [BUGGY]    totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  available()  -  1);	numToRead  =  Math.min(numToRead,  available());  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
4	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset());  [CE]  illegal  start  of  type  [FE]          AssertionError  [CONTEXT]  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset());  [BUGGY]    totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  availableOffset());	numToRead  =  Math.min(numToRead,  available());  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
5	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  available());  [CE]  illegal  start  of  type  [FE]            AssertionError  [CONTEXT]  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [BUGGY]  numToRead  =  Math.max(numToRead,  available());  [BUGGY]    totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.max(numToRead,  available());	numToRead  =  Math.min(numToRead,  available());  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
6	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableLength());  [CE]  illegal  start  of  type  [FE]              AssertionError  [CONTEXT]  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [BUGGY]  numToRead  =  Math.min(numToRead,  availableLength());  [BUGGY]    totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  availableLength());	numToRead  =  Math.min(numToRead,  available());  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
7	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  available()  -  entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError  [CONTEXT]  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [BUGGY]  numToRead  =  Math.min(numToRead,  available()  -  entrySize);  [BUGGY]    totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  available()  -  entrySize);	numToRead  =  Math.min(numToRead,  available());  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
8	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]                  AssertionError  [CONTEXT]  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [BUGGY]    [BUGGY]    totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	  	numToRead  =  Math.min(numToRead,  available());  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
9	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords());  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords());  [BUGGY]    totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  availableRecords());	numToRead  =  Math.min(numToRead,  available());  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
10	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableSize);  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [BUGGY]  numToRead  =  Math.min(numToRead,  availableSize);  [BUGGY]    totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  availableSize);	numToRead  =  Math.min(numToRead,  available());  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
11	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.available());  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [BUGGY]  numToRead  =  Math.min(numToRead,  this.available());  [BUGGY]    totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  this.available());	numToRead  =  Math.min(numToRead,  available());  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
12	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  [BUGGY]  numToRead  =  Math.min(numToRead,  entryOffset);  [BUGGY]    totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  entryOffset);	numToRead  =  Math.min(numToRead,  available());  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
