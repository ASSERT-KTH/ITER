bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  numToRead  =  Math.min(availableSize,  numToRead);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(availableSize,  numToRead);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(availableSize,  numToRead);	  numToRead    =    Math.min(numToRead,    availableSize);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
2	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  availableSize);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(0,  availableSize);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(0,  availableSize);	  numToRead    =    Math.min(numToRead,    availableSize);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
3	[BUG]  [BUGGY]  numToRead  =  Math.min(availableRead,  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(availableRead,  numToRead);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(availableRead,  numToRead);	  numToRead    =    Math.min(numToRead,    availableSize);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
4	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  entrySize  +  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  entrySize  +  1);	  numToRead    =    Math.min(numToRead,    availableSize);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
5	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableSize  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableSize  +  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  availableSize  +  1);	  numToRead    =    Math.min(numToRead,    availableSize);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
6	[BUG]  [BUGGY]  Integer  totalRead  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  Integer  totalRead  =  is.read(buf,  offset,  numToRead);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	Integer  totalRead  =  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
7	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getInputStream();  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  InputStream  is  =  currEntry.getInputStream();  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	InputStream  is  =  currEntry.getInputStream();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
8	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	int  numRecords  =  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
9	[BUG]  [BUGGY]  int  numRecords  =  currEntry.length;  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  int  numRecords  =  currEntry.length;  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	int  numRecords  =  currEntry.length;	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
10	[BUG]  [BUGGY]  InputStream  is  =  this.currEntry.getInputStream();  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  InputStream  is  =  this.currEntry.getInputStream();  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	InputStream  is  =  this.currEntry.getInputStream();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
11	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getInputStream();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  InputStream  is  =  currEntry.getInputStream();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	InputStream  is  =  currEntry.getInputStream();  hasHitEOF  =  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
12	[BUG]  [BUGGY]  InputStream  is  =  this.currEntry.getInputStream();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                  AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  InputStream  is  =  this.currEntry.getInputStream();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	InputStream  is  =  this.currEntry.getInputStream();  hasHitEOF  =  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
13	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableCount()  -  1);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableCount()  -  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  availableCount()  -  1);	  numToRead    =    Math.min(numToRead,    availableCount());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
14	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableCount()  +  1);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableCount()  +  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  availableCount()  +  1);	  numToRead    =    Math.min(numToRead,    availableCount());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
15	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableCount()  -  1);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.max(numToRead,  availableCount()  -  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.max(numToRead,  availableCount()  -  1);	  numToRead    =    Math.min(numToRead,    availableCount());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
16	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableCount()  -  2);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableCount()  -  2);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  availableCount()  -  2);	  numToRead    =    Math.min(numToRead,    availableCount());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
17	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  entrySize());  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  entrySize());  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  entrySize());	  numToRead    =    Math.min(numToRead,    availableCount());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
18	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableCount(1));  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableCount(1));  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  availableCount(1));	  numToRead    =    Math.min(numToRead,    availableCount());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
19	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  entrySize);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(0,  entrySize);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(0,  entrySize);	  numToRead    =    Math.min(numToRead,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
20	[BUG]  [BUGGY]  numToRead  =  Math.min(entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(entrySize,  numToRead);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(entrySize,  numToRead);	  numToRead    =    Math.min(numToRead,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
21	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  hasHitEOF);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  hasHitEOF);	  numToRead    =    Math.min(numToRead,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
22	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  totalRead);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  totalRead);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  totalRead);	  numToRead    =    Math.min(numToRead,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
23	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.max(numToRead,  entrySize);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.max(numToRead,  entrySize);	  numToRead    =    Math.max(numToRead,    available());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
24	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableOffset());  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.max(numToRead,  availableOffset());  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.max(numToRead,  availableOffset());	  numToRead    =    Math.max(numToRead,    available());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
25	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableCount());  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.max(numToRead,  availableCount());  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.max(numToRead,  availableCount());	  numToRead    =    Math.max(numToRead,    available());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
26	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableLength());  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.max(numToRead,  availableLength());  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.max(numToRead,  availableLength());	  numToRead    =    Math.max(numToRead,    available());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
27	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  available()  -  entrySize);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.max(numToRead,  available()  -  entrySize);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.max(numToRead,  available()  -  entrySize);	  numToRead    =    Math.max(numToRead,    available());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
28	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.max(numToRead,  entryOffset);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.max(numToRead,  entryOffset);	  numToRead    =    Math.max(numToRead,    available());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
29	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.available()  -  1);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  this.available()  -  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  this.available()  -  1);	  numToRead    =    Math.min(numToRead,    this.available());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
30	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.available()  -  entrySize);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  this.available()  -  entrySize);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  this.available()  -  entrySize);	  numToRead    =    Math.min(numToRead,    this.available());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
31	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.available()  -  offset);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  this.available()  -  offset);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  this.available()  -  offset);	  numToRead    =    Math.min(numToRead,    this.available());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
32	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.available()  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  this.available()  +  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  this.available()  +  1);	  numToRead    =    Math.min(numToRead,    this.available());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
33	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.readNow());  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  this.readNow());  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  this.readNow());	  numToRead    =    Math.min(numToRead,    this.available());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
34	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  currEntry.available());  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  currEntry.available());  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  currEntry.available());	  numToRead    =    Math.min(numToRead,    this.available());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
35	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  available()  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  available()  -  entryOffset);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  available()  -  entryOffset);	  numToRead    =    Math.min(numToRead,    available()    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
36	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  available()  *  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  available()  *  entrySize);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  available()  *  entrySize);	  numToRead    =    Math.min(numToRead,    available()    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
37	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  available()  -  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  available()  -  entrySize  +  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  available()  -  entrySize  +  1);	  numToRead    =    Math.min(numToRead,    available()    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
38	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  available()  /  entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  available()  /  entrySize);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  available()  /  entrySize);	  numToRead    =    Math.min(numToRead,    available()    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
39	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  available()  -  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  available()  -  entrySize,  hasHitEOF);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  available()  -  entrySize,  hasHitEOF);	  numToRead    =    Math.min(numToRead,    available()    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
40	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  available()  -  offset);  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  available()  -  offset);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  available()  -  offset);	  numToRead    =    Math.min(numToRead,    available()    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
41	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  available()  *  1);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  available()  *  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  available()  *  1);	  numToRead    =    Math.min(numToRead,    available()    -    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
42	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  -  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  availableOffset()  -  1);	  numToRead    =    Math.min(numToRead,    available()    -    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
43	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  entrySize  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  entrySize  -  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  entrySize  -  1);	  numToRead    =    Math.min(numToRead,    available()    -    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
44	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableAsSize()  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableAsSize()  -  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  availableAsSize()  -  1);	  numToRead    =    Math.min(numToRead,    available()    -    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
45	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  entryOffset  +  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  entryOffset  +  1);	  numToRead    =    Math.min(numToRead,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
46	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  entryOffset);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(0,  entryOffset);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(0,  entryOffset);	  numToRead    =    Math.min(numToRead,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
47	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  entries.length);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  entries.length);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  entries.length);	  numToRead    =    Math.min(numToRead,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
48	[BUG]  [BUGGY]  numToRead  =  Math.max(0,  entryOffset);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.max(0,  entryOffset);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.max(0,  entryOffset);	  numToRead    =    Math.min(numToRead,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
49	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableLength()  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableLength()  -  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  availableLength()  -  1);	  numToRead    =    Math.min(numToRead,    availableLength());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
50	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableLength()  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableLength()  +  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  availableLength()  +  1);	  numToRead    =    Math.min(numToRead,    availableLength());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
51	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableLength()  -  2);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableLength()  -  2);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  availableLength()  -  2);	  numToRead    =    Math.min(numToRead,    availableLength());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
52	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableLength()  -  entrySize);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableLength()  -  entrySize);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  availableLength()  -  entrySize);	  numToRead    =    Math.min(numToRead,    availableLength());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
53	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableLength()  -  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.max(numToRead,  availableLength()  -  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.max(numToRead,  availableLength()  -  1);	  numToRead    =    Math.min(numToRead,    availableLength());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
54	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableLength()  *  2);  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableLength()  *  2);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  availableLength()  *  2);	  numToRead    =    Math.min(numToRead,    availableLength());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
55	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  -  entrySize);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  -  entrySize);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  availableOffset()  -  entrySize);	  numToRead    =    Math.min(numToRead,    availableOffset());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
56	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  +  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  availableOffset()  +  1);	  numToRead    =    Math.min(numToRead,    availableOffset());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
57	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  -  offset);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  -  offset);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  availableOffset()  -  offset);	  numToRead    =    Math.min(numToRead,    availableOffset());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
58	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  -  1);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  -  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  availableRecords()  -  1);	  numToRead    =    Math.min(numToRead,    availableRecords());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
59	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  -  entrySize);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  -  entrySize);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  availableRecords()  -  entrySize);	  numToRead    =    Math.min(numToRead,    availableRecords());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
60	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  +  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  availableRecords()  +  1);	  numToRead    =    Math.min(numToRead,    availableRecords());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
61	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableRecords());  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.max(numToRead,  availableRecords());  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.max(numToRead,  availableRecords());	  numToRead    =    Math.min(numToRead,    availableRecords());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
62	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  -  offset);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  -  offset);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  availableRecords()  -  offset);	  numToRead    =    Math.min(numToRead,    availableRecords());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
63	[BUG]  [BUGGY]  numToRead  =  Math.min(numRecords,  availableRecords());  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numRecords,  availableRecords());  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numRecords,  availableRecords());	  numToRead    =    Math.min(numToRead,    availableRecords());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
64	[BUG]  [BUGGY]  numToRead  =  Math.min(availableRecords(),  numToRead);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(availableRecords(),  numToRead);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(availableRecords(),  numToRead);	  numToRead    =    Math.min(numToRead,    availableRecords());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
65	[BUG]  [BUGGY]  numToRead  =  Math.min(entrySize,  available()  -  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(entrySize,  available()  -  numToRead);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(entrySize,  available()  -  numToRead);	  numToRead    =    Math.min(numToRead,    available()    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
66	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  available()  -  totalRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  available()  -  totalRead);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  available()  -  totalRead);	  numToRead    =    Math.min(numToRead,    available()    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
67	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.length());  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  this.length());  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  this.length());	  numToRead    =    Math.min(numToRead,    this.available());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
68	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableSize);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.max(numToRead,  availableSize);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.max(numToRead,  availableSize);	  numToRead    =    Math.max(numToRead,    available());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
69	[BUG]  [BUGGY]  numToRead  =  Math.min(entrySize,  entryOffset);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(entrySize,  entryOffset);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(entrySize,  entryOffset);	  numToRead    =    Math.min(numToRead,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
70	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordSize();  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  int  numRecords  =  currEntry.getRecordSize();  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	int  numRecords  =  currEntry.getRecordSize();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
71	[BUG]  [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  int  totalRead  =  is.read(buf,  offset,  numToRead);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	int  totalRead  =  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
72	[BUG]  [BUGGY]  int  numToRead  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  int  numToRead  =  is.read(buf,  offset,  numToRead);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	int  numToRead  =  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
73	[BUG]  [BUGGY]  int  numRecords  =  currEntry.recordSize();  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  int  numRecords  =  currEntry.recordSize();  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	int  numRecords  =  currEntry.recordSize();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
74	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableSize  -  1);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableSize  -  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  availableSize  -  1);	  numToRead    =    Math.min(numToRead,    available()    -    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
75	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords.length  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords.length  -  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  availableRecords.length  -  1);	  numToRead    =    Math.min(numToRead,    available()    -    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
76	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords  -  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  availableRecords  -  1);	  numToRead    =    Math.min(numToRead,    available()    -    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
77	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableAsItems()  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableAsItems()  -  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  availableAsItems()  -  1);	  numToRead    =    Math.min(numToRead,    available()    -    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
78	[BUG]  [BUGGY]  numToRead  =  Math.min(availableOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(availableOffset,  numToRead);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(availableOffset,  numToRead);	  numToRead    =    Math.min(numToRead,    availableOffset());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
79	[BUG]  [BUGGY]  numToRead  =  Math.min(availableCount(),  numToRead);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(availableCount(),  numToRead);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(availableCount(),  numToRead);	  numToRead    =    Math.min(numToRead,    availableCount());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
80	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  recordSize);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  recordSize);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  recordSize);	  numToRead    =    Math.min(numToRead,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
81	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  cache.length);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  cache.length);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  cache.length);	  numToRead    =    Math.min(numToRead,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
82	[BUG]  [BUGGY]  numToRead  =  Math.min(availableLength(),  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(availableLength(),  numToRead);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(availableLength(),  numToRead);	  numToRead    =    Math.min(numToRead,    availableLength());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
83	[BUG]  [BUGGY]  numToRead  =  Math.max(availableSize,  numToRead);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.max(availableSize,  numToRead);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.max(availableSize,  numToRead);	  numToRead    =    Math.min(numToRead,    availableSize);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
84	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableAsIterables()  -  1);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableAsIterables()  -  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  availableAsIterables()  -  1);	  numToRead    =    Math.min(numToRead,    available()    -    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
85	[BUG]  [BUGGY]  numToRead  =  Math.max(entrySize,  available());  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.max(entrySize,  available());  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.max(entrySize,  available());	  numToRead    =    Math.max(numToRead,    available());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
86	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  this.available());  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.max(numToRead,  this.available());  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.max(numToRead,  this.available());	  numToRead    =    Math.max(numToRead,    available());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
87	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  available()  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.max(numToRead,  available()  -  entryOffset);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.max(numToRead,  available()  -  entryOffset);	  numToRead    =    Math.min(numToRead,    available()    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
88	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  available()  -  entries.length);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  available()  -  entries.length);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  available()  -  entries.length);	  numToRead    =    Math.min(numToRead,    available()    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
89	[BUG]  [BUGGY]  numToRead  =  Math.min(length,  availableSize);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(length,  availableSize);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(length,  availableSize);	  numToRead    =    Math.min(numToRead,    availableSize);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
90	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableRecords());  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableRecords());  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  this.availableRecords());	  numToRead    =    Math.min(numToRead,    availableRecords());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
91	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableOffset());  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableOffset());  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  this.availableOffset());	  numToRead    =    Math.min(numToRead,    availableOffset());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
92	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset  +  entrySize);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  availableOffset  +  entrySize);	  numToRead    =    Math.min(numToRead,    availableOffset());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
93	[BUG]  [BUGGY]  int  numToSkip  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  int  numToSkip  =  is.read(buf,  offset,  numToRead);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	int  numToSkip  =  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
94	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordSize();  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  int  numRecords  =  currEntry.getRecordSize();  is.read(buf,  offset,  numToRead);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	int  numRecords  =  currEntry.getRecordSize();  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
95	[BUG]  [BUGGY]  int  numToSkip  =  is.read(buf,  offset,  numToSkip);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  int  numToSkip  =  is.read(buf,  offset,  numToSkip);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	int  numToSkip  =  is.read(buf,  offset,  numToSkip);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
96	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordSize();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  int  numRecords  =  currEntry.getRecordSize();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	int  numRecords  =  currEntry.getRecordSize();  hasHitEOF  =  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
97	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableCount());  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableCount());  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  this.availableCount());	  numToRead    =    Math.min(numToRead,    availableCount());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
98	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableLength());  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableLength());  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  this.availableLength());	  numToRead    =    Math.min(numToRead,    availableLength());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
99	[BUG]  [BUGGY]  numToRead  =  Math.max(entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.max(entrySize,  numToRead);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.max(entrySize,  numToRead);	  numToRead    =    Math.min(numToRead,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
100	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.entrySize);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  this.entrySize);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	580	580	1	replace	numToRead  =  Math.min(numToRead,  this.entrySize);	  numToRead    =    Math.min(numToRead,    this.available());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
