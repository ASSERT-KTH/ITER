bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(entryOffset  -  entrySize  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entryOffset  -  entrySize  ==  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entryOffset  -  entrySize  ==  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
2	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
3	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE)  {	  if(entrySize    -    entryOffset    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
4	[BUG]  [BUGGY]  if(entryOffset  -  entrySize  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entryOffset  -  entrySize  ==  Integer.MIN_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entryOffset  -  entrySize  ==  Integer.MIN_VALUE)  {	  if(entrySize    -    entryOffset    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
5	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
6	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  *  entryOffset  ==  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  *  entryOffset  ==  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
7	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  *  entryOffset  <  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  *  entryOffset  <  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
8	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  *  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  *  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
9	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  <  =  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  *  entryOffset  <  =  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  *  entryOffset  <  =  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
10	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  <  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  *  entryOffset  <  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  *  entryOffset  <  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
11	[BUG]  [BUGGY]  if(entrySize  *  entryOffset!=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  *  entryOffset!=  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  *  entryOffset!=  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
12	[BUG]  [BUGGY]  if(entryOffset  *  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entryOffset  *  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entryOffset  *  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
13	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  >=  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  -  entryOffset  >=  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  -  entryOffset  >=  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
14	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
15	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  =  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  -  entryOffset  <  =  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  -  entryOffset  <  =  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
16	[BUG]  [BUGGY]  if(entryOffset  -  entrySize  <  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entryOffset  -  entrySize  <  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entryOffset  -  entrySize  <  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
17	[BUG]  [BUGGY]  if(entrySize  -  entryOffset!=  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  -  entryOffset!=  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  -  entryOffset!=  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
18	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  >  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  -  entryOffset  >  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  -  entryOffset  >  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
19	[BUG]  [BUGGY]  if(entryOffset  -  entrySize!=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entryOffset  -  entrySize!=  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entryOffset  -  entrySize!=  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset!=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
20	[BUG]  [BUGGY]  if(entrySize  -  entryOffset!=  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  -  entryOffset!=  Integer.MIN_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  -  entryOffset!=  Integer.MIN_VALUE)  {	  if(entrySize    -    entryOffset!=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
21	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  =  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  -  entryOffset  <  =  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  -  entryOffset  <  =  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
22	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  >=  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  -  entryOffset  >=  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  -  entryOffset  >=  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
23	[BUG]  [BUGGY]  if(entrySize  -  entryOffset!=  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  -  entryOffset!=  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  -  entryOffset!=  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
24	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  >  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  -  entryOffset  >  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  -  entryOffset  >  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
25	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  -  entryOffset  <  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  -  entryOffset  <  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    =    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
26	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  -  entryOffset  <  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  -  entryOffset  <  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    =    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
27	[BUG]  [BUGGY]  Integer  entrySize  =  getEntrySize();  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  Integer  entrySize  =  getEntrySize();  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	Integer  entrySize  =  getEntrySize();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
28	[BUG]  [BUGGY]  int  entryOffset  =  getEntryOffset();  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  int  entryOffset  =  getEntryOffset();  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	int  entryOffset  =  getEntryOffset();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
29	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntryOffset();  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  Integer  entryOffset  =  getEntryOffset();  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	Integer  entryOffset  =  getEntryOffset();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
30	[BUG]  [BUGGY]  Integer  entrySize  =  this.currEntry.getValue();  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  Integer  entrySize  =  this.currEntry.getValue();  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	Integer  entrySize  =  this.currEntry.getValue();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
31	[BUG]  [BUGGY]  int  entrySize  =  getEntrySize();  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  int  entrySize  =  getEntrySize();  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	int  entrySize  =  getEntrySize();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
32	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntryOffset().intValue();  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  Integer  entryOffset  =  getEntryOffset().intValue();  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	Integer  entryOffset  =  getEntryOffset().intValue();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
33	[BUG]  [BUGGY]  int  entryOffset  =  getEntrySize();  [CE]  illegal  start  of  type  [FE]                                AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  int  entryOffset  =  getEntrySize();  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	int  entryOffset  =  getEntrySize();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
34	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset  &&  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  <  =  entryOffset  &&  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  <  =  entryOffset  &&  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
35	[BUG]  [BUGGY]  if(entrySize  <  =  MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  <  =  MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  <  =  MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
36	[BUG]  [BUGGY]  if(entrySize  <  entryOffset  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  <  entryOffset  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  <  entryOffset  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
37	[BUG]  [BUGGY]  if(entryOffset  <  entrySize  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entryOffset  <  entrySize  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entryOffset  <  entrySize  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
38	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  <  =  entryOffset  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  <  =  entryOffset  ||  entryOffset  ==  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
39	[BUG]  [BUGGY]  if(entrySize  <  =  this.blockSize  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  <  =  this.blockSize  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  <  =  this.blockSize  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
40	[BUG]  [BUGGY]  if(entrySize  <  =  entryOffset  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  <  =  entryOffset  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  <  =  entryOffset  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
41	[BUG]  [BUGGY]  if(entryOffset  -  entrySize  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entryOffset  -  entrySize  <  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entryOffset  -  entrySize  <  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
42	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  -  entryOffset  <  1)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  -  entryOffset  <  1)  {	  if(entrySize    -    entryOffset    <    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
43	[BUG]  [BUGGY]  if(entrySize  <  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  <  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  <  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    <    Integer.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
44	[BUG]  [BUGGY]  if(entrySize  <  Integer.MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  <  Integer.MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  <  Integer.MAX_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    <    Integer.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
45	[BUG]  [BUGGY]  if(entrySize  <  Integer.MAX_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  <  Integer.MAX_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  <  Integer.MAX_VALUE  ||  entryOffset  ==  Integer.MAX_VALUE)  {	  if(entrySize    <    Integer.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
46	[BUG]  [BUGGY]  if(entryOffset  <  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entryOffset  <  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entryOffset  <  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    <    Integer.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
47	[BUG]  [BUGGY]  if(entrySize  <  =  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  <  =  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  <  =  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    <    Integer.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
48	[BUG]  [BUGGY]  if(entrySize  >  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  >  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  >  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    <    Integer.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
49	[BUG]  [BUGGY]  if(entryOffset  -  entrySize  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entryOffset  -  entrySize  >=  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entryOffset  -  entrySize  >=  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
50	[BUG]  [BUGGY]  if(entrySize  >=  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  >=  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  >=  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    <    Integer.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
51	[BUG]  [BUGGY]  if(entrySize  ==  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  ==  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  ==  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    <    Integer.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
52	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  -  entryOffset  <  Integer.MIN_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  -  entryOffset  <  Integer.MIN_VALUE)  {	  if(entrySize    -    entryOffset    <    =    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
53	[BUG]  [BUGGY]  if(entryOffset  -  entrySize  <  =  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entryOffset  -  entrySize  <  =  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entryOffset  -  entrySize  <  =  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    =    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
54	[BUG]  [BUGGY]  if(entrySize  ==  entryOffset  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  ==  entryOffset  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  ==  entryOffset  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
55	[BUG]  [BUGGY]  if(entrySize  <  =  Long.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  <  =  Long.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  <  =  Long.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
56	[BUG]  [BUGGY]  if(entrySize  >=  entryOffset  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  >=  entryOffset  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  >=  entryOffset  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    <    =    entryOffset    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
57	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  <  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  *  entryOffset  <  Integer.MIN_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  *  entryOffset  <  Integer.MIN_VALUE)  {	  if(entrySize    *    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
58	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntrySize();  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  Integer  entryOffset  =  getEntrySize();  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	Integer  entryOffset  =  getEntrySize();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
59	[BUG]  [BUGGY]  Integer  entrySize  =  this.currEntry.getEntrySize();  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  Integer  entrySize  =  this.currEntry.getEntrySize();  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	Integer  entrySize  =  this.currEntry.getEntrySize();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
60	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  Integer.MAX_VALUE  ||  entrySize  >  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  -  entryOffset  <  Integer.MAX_VALUE  ||  entrySize  >  Integer.MIN_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  -  entryOffset  <  Integer.MAX_VALUE  ||  entrySize  >  Integer.MIN_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
61	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  -  entryOffset  <  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MIN_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  -  entryOffset  <  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MIN_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
62	[BUG]  [BUGGY]  if(entrySize  /  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  /  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  /  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
63	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  >  Integer.MAX_VALUE  ||  entrySize  *  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  *  entryOffset  >  Integer.MAX_VALUE  ||  entrySize  *  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  *  entryOffset  >  Integer.MAX_VALUE  ||  entrySize  *  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
64	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  >=  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  -  entryOffset  >=  Integer.MIN_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  -  entryOffset  >=  Integer.MIN_VALUE)  {	  if(entrySize    -    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
65	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  =  MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(entrySize  -  entryOffset  <  =  MAX_VALUE)  {  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	if(entrySize  -  entryOffset  <  =  MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    =    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
66	[BUG]  [BUGGY]  int  entryOffset  =  this.currEntry.getValue();  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  int  entryOffset  =  this.currEntry.getValue();  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	int  entryOffset  =  this.currEntry.getValue();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
67	[BUG]  [BUGGY]  int  entryOffset  =  getEntryLength();  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  int  entryOffset  =  getEntryLength();  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	int  entryOffset  =  getEntryLength();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
68	[BUG]  [BUGGY]  int  entrySize  =  this.currEntry.getValue();  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  int  entrySize  =  this.currEntry.getValue();  [BUGGY]    return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	177	177	1	replace	int  entrySize  =  this.currEntry.getValue();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
