bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  numToSkip  =  Math.max(available,  numToSkip);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  numToSkip  =  Math.max(available,  numToSkip);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	numToSkip  =  Math.max(available,  numToSkip);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
2	[BUG]  [BUGGY]  numToSkip  =  Math.min(available  *  numToSkip,  available  *  numToSkip);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  numToSkip  =  Math.min(available  *  numToSkip,  available  *  numToSkip);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	numToSkip  =  Math.min(available  *  numToSkip,  available  *  numToSkip);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
3	[BUG]  [BUGGY]  numToSkip  =  Math.min(available  *  numToSkip,  available);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  numToSkip  =  Math.min(available  *  numToSkip,  available);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	numToSkip  =  Math.min(available  *  numToSkip,  available);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
4	[BUG]  [BUGGY]  numToSkip  =  Math.max(available  *  numToSkip,  available);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  numToSkip  =  Math.max(available  *  numToSkip,  available);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	numToSkip  =  Math.max(available  *  numToSkip,  available);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
5	[BUG]  [BUGGY]  numToSkip  =  Math.min(available  *  numToSkip);  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  numToSkip  =  Math.min(available  *  numToSkip);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	numToSkip  =  Math.min(available  *  numToSkip);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
6	[BUG]  [BUGGY]  int  skipped  =  encoding.recordSize(available);  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  int  skipped  =  encoding.recordSize(available);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	int  skipped  =  encoding.recordSize(available);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
7	[BUG]  [BUGGY]  numToSkip  =  Math.max(available  *  numToSkip,  available  *  numToSkip);  [CE]  illegal  start  of  type  [FE]                                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  numToSkip  =  Math.max(available  *  numToSkip,  available  *  numToSkip);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	numToSkip  =  Math.max(available  *  numToSkip,  available  *  numToSkip);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
8	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skipped(available,  numToSkip,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  long  skipped  =  IOUtils.skipped(available,  numToSkip,  hasHitEOF);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  IOUtils.skipped(available,  numToSkip,  hasHitEOF);	  long    skipped    =    IOUtils.skipped(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
9	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skipped(available,  numToSkip,  available);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  long  skipped  =  IOUtils.skipped(available,  numToSkip,  available);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  IOUtils.skipped(available,  numToSkip,  available);	  long    skipped    =    IOUtils.skipped(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
10	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skipped(available,  numToSkip  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  long  skipped  =  IOUtils.skipped(available,  numToSkip  +  1);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  IOUtils.skipped(available,  numToSkip  +  1);	  long    skipped    =    IOUtils.skipped(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
11	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skipped(available,  numToSkip);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  int  skipped  =  IOUtils.skipped(available,  numToSkip);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	int  skipped  =  IOUtils.skipped(available,  numToSkip);	  long    skipped    =    IOUtils.skipped(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
12	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skipped(available,  numToSkip,  isHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  long  skipped  =  IOUtils.skipped(available,  numToSkip,  isHitEOF);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  IOUtils.skipped(available,  numToSkip,  isHitEOF);	  long    skipped    =    IOUtils.skipped(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
13	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skipped(available,  numToSkip,  false);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  long  skipped  =  IOUtils.skipped(available,  numToSkip,  false);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  IOUtils.skipped(available,  numToSkip,  false);	  long    skipped    =    IOUtils.skipped(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
14	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skipped(numToSkip,  available);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  long  skipped  =  IOUtils.skipped(numToSkip,  available);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  IOUtils.skipped(numToSkip,  available);	  long    skipped    =    IOUtils.skipped(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
15	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(available,  numToSkip);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  int  skipped  =  IOUtils.skip(available,  numToSkip);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	int  skipped  =  IOUtils.skip(available,  numToSkip);	  short    skipped    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
16	[BUG]  [BUGGY]  short  skipped  =  IOUtils.skip(available,  numToSkip,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  short  skipped  =  IOUtils.skip(available,  numToSkip,  hasHitEOF);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	short  skipped  =  IOUtils.skip(available,  numToSkip,  hasHitEOF);	  short    skipped    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
17	[BUG]  [BUGGY]  short  skipped  =  IOUtils.skip(available,  numToSkip  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  short  skipped  =  IOUtils.skip(available,  numToSkip  +  1);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	short  skipped  =  IOUtils.skip(available,  numToSkip  +  1);	  short    skipped    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
18	[BUG]  [BUGGY]  short  skipped  =  IOUtils.skip(available,  numToSkip,  available);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  short  skipped  =  IOUtils.skip(available,  numToSkip,  available);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	short  skipped  =  IOUtils.skip(available,  numToSkip,  available);	  short    skipped    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
19	[BUG]  [BUGGY]  Long  skipped  =  IOUtils.skip(available,  numToSkip,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  Long  skipped  =  IOUtils.skip(available,  numToSkip,  hasHitEOF);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	Long  skipped  =  IOUtils.skip(available,  numToSkip,  hasHitEOF);	  Long    skipped    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
20	[BUG]  [BUGGY]  Long  skipped  =  IOUtils.skip(available,  numToSkip  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  Long  skipped  =  IOUtils.skip(available,  numToSkip  +  1);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	Long  skipped  =  IOUtils.skip(available,  numToSkip  +  1);	  Long    skipped    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
21	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(available,  numToSkip);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  Integer  skipped  =  IOUtils.skip(available,  numToSkip);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	Integer  skipped  =  IOUtils.skip(available,  numToSkip);	  Long    skipped    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
22	[BUG]  [BUGGY]  Long  skipped  =  IOUtils.skip(available,  numToSkip,  available);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  Long  skipped  =  IOUtils.skip(available,  numToSkip,  available);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	Long  skipped  =  IOUtils.skip(available,  numToSkip,  available);	  Long    skipped    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
23	[BUG]  [BUGGY]  Long  skipped  =  IOUtils.skip(available,  numToSkip,  isHitEOF);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  Long  skipped  =  IOUtils.skip(available,  numToSkip,  isHitEOF);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	Long  skipped  =  IOUtils.skip(available,  numToSkip,  isHitEOF);	  Long    skipped    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
24	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available  /  numToSkip);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  long  skipped  =  IOUtils.skip(available  /  numToSkip);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  IOUtils.skip(available  /  numToSkip);	  long    skipped    =    IOUtils.skip(available    +    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
25	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available  +  numToSkip,  available);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  long  skipped  =  IOUtils.skip(available  +  numToSkip,  available);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  IOUtils.skip(available  +  numToSkip,  available);	  long    skipped    =    IOUtils.skip(available    +    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
26	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available  *  numToSkip);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  long  skipped  =  IOUtils.skip(available  *  numToSkip);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  IOUtils.skip(available  *  numToSkip);	  long    skipped    =    IOUtils.skip(available    +    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
27	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available  +  numToSkip,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  long  skipped  =  IOUtils.skip(available  +  numToSkip,  hasHitEOF);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  IOUtils.skip(available  +  numToSkip,  hasHitEOF);	  long    skipped    =    IOUtils.skip(available    +    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
28	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(available  +  numToSkip);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  int  skipped  =  IOUtils.skip(available  +  numToSkip);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	int  skipped  =  IOUtils.skip(available  +  numToSkip);	  long    skipped    =    IOUtils.skip(available    +    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
29	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(numToSkip,  is);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  int  skipped  =  IOUtils.skip(numToSkip,  is);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	int  skipped  =  IOUtils.skip(numToSkip,  is);	  int    skipped    =    IOUtils.skip(is,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
30	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(recordSize,  numToSkip);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  int  skipped  =  IOUtils.skip(recordSize,  numToSkip);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	int  skipped  =  IOUtils.skip(recordSize,  numToSkip);	  int    skipped    =    IOUtils.skip(is,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
31	[BUG]  [BUGGY]  byte  skipped  =  IOUtils.skip(is,  numToSkip);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  byte  skipped  =  IOUtils.skip(is,  numToSkip);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	byte  skipped  =  IOUtils.skip(is,  numToSkip);	  int    skipped    =    IOUtils.skip(is,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
32	[BUG]  [BUGGY]  int  skipped  =  iOUtils.skip(available,  numToSkip);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  int  skipped  =  iOUtils.skip(available,  numToSkip);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	int  skipped  =  iOUtils.skip(available,  numToSkip);	  int    skipped    =    IOUtils.skip(is,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
33	[BUG]  [BUGGY]  long  skipped  =  available.skip(numToSkip);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  long  skipped  =  available.skip(numToSkip);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  available.skip(numToSkip);	  long    skipped    =    iOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
34	[BUG]  [BUGGY]  long  skipped  =  available.skip(numToSkip,  iOUtils);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  long  skipped  =  available.skip(numToSkip,  iOUtils);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  available.skip(numToSkip,  iOUtils);	  long    skipped    =    iOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
35	[BUG]  [BUGGY]  long  skipped  =  iOUtils.skip(available,  numToSkip,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  long  skipped  =  iOUtils.skip(available,  numToSkip,  hasHitEOF);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  iOUtils.skip(available,  numToSkip,  hasHitEOF);	  long    skipped    =    iOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
36	[BUG]  [BUGGY]  long  skipped  =  iOUtils.skip(available,  numToSkip  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  long  skipped  =  iOUtils.skip(available,  numToSkip  +  1);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  iOUtils.skip(available,  numToSkip  +  1);	  long    skipped    =    iOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
37	[BUG]  [BUGGY]  long  skipped  =  iOUtils.skip(available,  numToSkip,  available);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  long  skipped  =  iOUtils.skip(available,  numToSkip,  available);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  iOUtils.skip(available,  numToSkip,  available);	  long    skipped    =    iOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
38	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToSkip,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToSkip,  hasHitEOF);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  IOUtils.skip(available,  numToSkip,  hasHitEOF);	  long    skipped    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
39	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToSkip  +  1);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToSkip  +  1);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  IOUtils.skip(available,  numToSkip  +  1);	  long    skipped    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
40	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToSkip,  available);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToSkip,  available);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  IOUtils.skip(available,  numToSkip,  available);	  long    skipped    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
41	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToSkip,  isHitEOF);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToSkip,  isHitEOF);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  IOUtils.skip(available,  numToSkip,  isHitEOF);	  long    skipped    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
42	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToSkip  +  2);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToSkip  +  2);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  IOUtils.skip(available,  numToSkip  +  2);	  long    skipped    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
43	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available  -  numToSkip,  available);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  long  skipped  =  IOUtils.skip(available  -  numToSkip,  available);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  IOUtils.skip(available  -  numToSkip,  available);	  long    skipped    =    IOUtils.skip(available    -    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
44	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available  -  numToSkip,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  long  skipped  =  IOUtils.skip(available  -  numToSkip,  hasHitEOF);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  IOUtils.skip(available  -  numToSkip,  hasHitEOF);	  long    skipped    =    IOUtils.skip(available    -    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
45	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available  -  numToSkip  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  long  skipped  =  IOUtils.skip(available  -  numToSkip  +  1);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  IOUtils.skip(available  -  numToSkip  +  1);	  long    skipped    =    IOUtils.skip(available    -    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
46	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(available  -  numToSkip);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  int  skipped  =  IOUtils.skip(available  -  numToSkip);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	int  skipped  =  IOUtils.skip(available  -  numToSkip);	  long    skipped    =    IOUtils.skip(available    -    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
47	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available  -  numToSkip,  false);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  long  skipped  =  IOUtils.skip(available  -  numToSkip,  false);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  IOUtils.skip(available  -  numToSkip,  false);	  long    skipped    =    IOUtils.skip(available    -    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
48	[BUG]  [BUGGY]  long  skipped  =  Math.min(available  *  numToSkip,  available);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  long  skipped  =  Math.min(available  *  numToSkip,  available);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  Math.min(available  *  numToSkip,  available);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
49	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  available  =  Math.max(available,  numToSkip);  skipped  =  Math.min(available  *  numToSkip,  available);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  if(available  >  numToSkip)  {  available  =  Math.max(available,  numToSkip);  skipped  =  Math.min(available  *  numToSkip,  available);  }  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	if(available  >  numToSkip)  {  available  =  Math.max(available,  numToSkip);  skipped  =  Math.min(available  *  numToSkip,  available);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
50	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  available  =  Math.max(available,  numToSkip);  skipped  =  Math.min(available  *  numToSkip,  available);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  if(available  <  numToSkip)  {  available  =  Math.max(available,  numToSkip);  skipped  =  Math.min(available  *  numToSkip,  available);  }  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	if(available  <  numToSkip)  {  available  =  Math.max(available,  numToSkip);  skipped  =  Math.min(available  *  numToSkip,  available);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
51	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  available  =  Math.max(available,  numToSkip);  skipped  =  Math.min(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  if(available  <  numToSkip)  {  available  =  Math.max(available,  numToSkip);  skipped  =  Math.min(available  +  numToSkip);  }  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	if(available  <  numToSkip)  {  available  =  Math.max(available,  numToSkip);  skipped  =  Math.min(available  +  numToSkip);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
52	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  available  =  Math.max(available,  numToSkip);  skipped  =  Math.min(available  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  if(available  >  numToSkip)  {  available  =  Math.max(available,  numToSkip);  skipped  =  Math.min(available  +  numToSkip);  }  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	if(available  >  numToSkip)  {  available  =  Math.max(available,  numToSkip);  skipped  =  Math.min(available  +  numToSkip);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
53	[BUG]  [BUGGY]  if(available  >  numToSkip)  {  available  =  Math.max(available,  numToSkip);  skipped  =  Math.min(available  *  numToSkip  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  if(available  >  numToSkip)  {  available  =  Math.max(available,  numToSkip);  skipped  =  Math.min(available  *  numToSkip  +  numToSkip);  }  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	if(available  >  numToSkip)  {  available  =  Math.max(available,  numToSkip);  skipped  =  Math.min(available  *  numToSkip  +  numToSkip);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
54	[BUG]  [BUGGY]  if(available  <  numToSkip)  {  available  =  Math.max(available,  numToSkip);  skipped  =  Math.min(available  *  numToSkip  +  numToSkip);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  if(available  <  numToSkip)  {  available  =  Math.max(available,  numToSkip);  skipped  =  Math.min(available  *  numToSkip  +  numToSkip);  }  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	if(available  <  numToSkip)  {  available  =  Math.max(available,  numToSkip);  skipped  =  Math.min(available  *  numToSkip  +  numToSkip);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
55	[BUG]  [BUGGY]  Long  skipped  =  IOUtils.skip(available,  numToSkip  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  Long  skipped  =  IOUtils.skip(available,  numToSkip  -  1);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	Long  skipped  =  IOUtils.skip(available,  numToSkip  -  1);	  Long    skipped    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
56	[BUG]  [BUGGY]  Long  skipped  =  IOUtils.skip(available,  numToSkip  +  2);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  Long  skipped  =  IOUtils.skip(available,  numToSkip  +  2);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	Long  skipped  =  IOUtils.skip(available,  numToSkip  +  2);	  Long    skipped    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
57	[BUG]  [BUGGY]  long  skipped  =  iOUtils.skip(available,  numToSkip  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  long  skipped  =  iOUtils.skip(available,  numToSkip  -  1);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  iOUtils.skip(available,  numToSkip  -  1);	  long    skipped    =    iOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
58	[BUG]  [BUGGY]  long  skipped  =  iOUtils.skip(available,  numToSkip  +  2);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  long  skipped  =  iOUtils.skip(available,  numToSkip  +  2);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  iOUtils.skip(available,  numToSkip  +  2);	  long    skipped    =    iOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
59	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToSkip  -  1);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToSkip  -  1);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  IOUtils.skip(available,  numToSkip  -  1);	  long    skipped    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
60	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToSkip  +  4);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToSkip  +  4);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  IOUtils.skip(available,  numToSkip  +  4);	  long    skipped    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
61	[BUG]  [BUGGY]  char  skipped  =  IOUtils.skip(is,  numToSkip);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  char  skipped  =  IOUtils.skip(is,  numToSkip);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	char  skipped  =  IOUtils.skip(is,  numToSkip);	  int    skipped    =    IOUtils.skip(is,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
62	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skipped(available,  numToSkip,  0);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  long  skipped  =  IOUtils.skipped(available,  numToSkip,  0);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  IOUtils.skipped(available,  numToSkip,  0);	  long    skipped    =    IOUtils.skipped(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
63	[BUG]  [BUGGY]  short  skipped  =  IOUtils.skip(available,  numToSkip  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  short  skipped  =  IOUtils.skip(available,  numToSkip  -  1);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	short  skipped  =  IOUtils.skip(available,  numToSkip  -  1);	  short    skipped    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
64	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available  +  numToSkip  -  1);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  long  skipped  =  IOUtils.skip(available  +  numToSkip  -  1);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  IOUtils.skip(available  +  numToSkip  -  1);	  long    skipped    =    IOUtils.skip(available    +    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
65	[BUG]  [BUGGY]  long  skipped  =  iOUtils.skip(available,  numToSkip  -  numToSkip);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  long  skipped  =  iOUtils.skip(available,  numToSkip  -  numToSkip);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  iOUtils.skip(available,  numToSkip  -  numToSkip);	  long    skipped    =    iOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
66	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available  -  numToSkip  -  1);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  long  skipped  =  IOUtils.skip(available  -  numToSkip  -  1);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  IOUtils.skip(available  -  numToSkip  -  1);	  long    skipped    =    IOUtils.skip(available    -    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
67	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToSkip  *  numToSkip);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToSkip  *  numToSkip);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  IOUtils.skip(available,  numToSkip  *  numToSkip);	  long    skipped    =    IOUtils.skip(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
68	[BUG]  [BUGGY]  short  skipped  =  IOUtils.skip(is,  numToSkip);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  short  skipped  =  IOUtils.skip(is,  numToSkip);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	short  skipped  =  IOUtils.skip(is,  numToSkip);	  int    skipped    =    IOUtils.skip(is,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
69	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skipped(available,  numToSkip  -  1);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  long  skipped  =  IOUtils.skipped(available,  numToSkip  -  1);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  IOUtils.skipped(available,  numToSkip  -  1);	  long    skipped    =    IOUtils.skipped(available,    numToSkip);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
70	[BUG]  [BUGGY]  int  skipped  =  getHitEOF();  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  int  skipped  =  getHitEOF();  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	int  skipped  =  getHitEOF();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
71	[BUG]  [BUGGY]  int  skipped  =(int)Math.ceil(available  *  numToSkip);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  int  skipped  =(int)Math.ceil(available  *  numToSkip);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	int  skipped  =(int)Math.ceil(available  *  numToSkip);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
72	[BUG]  [BUGGY]  long  skipped  =  Math.min(available  *  numToSkip,  available  *  numToSkip);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  long  skipped  =  Math.min(available  *  numToSkip,  available  *  numToSkip);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  Math.min(available  *  numToSkip,  available  *  numToSkip);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
73	[BUG]  [BUGGY]  int  skipped  =  Math.min(available  *  numToSkip,  available  *  numToSkip);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  int  skipped  =  Math.min(available  *  numToSkip,  available  *  numToSkip);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	int  skipped  =  Math.min(available  *  numToSkip,  available  *  numToSkip);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
74	[BUG]  [BUGGY]  long  skipped  =  Math.min(available  *  numToSkip);  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  long  skipped  =  Math.min(available  *  numToSkip);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  Math.min(available  *  numToSkip);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
75	[BUG]  [BUGGY]  long  skipped  =  Math.max(available,  numToSkip);  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);    [BUGGY]  long  skipped  =  Math.max(available,  numToSkip);  [BUGGY]    count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  Math.max(available,  numToSkip);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
