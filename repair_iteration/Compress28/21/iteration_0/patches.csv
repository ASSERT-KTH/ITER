bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToSkip);  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  [BUGGY]  long  skipped  =  IOUtils.skip(available,  numToSkip);  [BUGGY]  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  IOUtils.skip(available,  numToSkip);	long  skipped  =  IOUtils.skip(is,  numToSkip);  	non-compiled	[CE]  illegal  start  of  type	41	None	replace
2	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(is,  numToSkip);  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  [BUGGY]  int  skipped  =  IOUtils.skip(is,  numToSkip);  [BUGGY]  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	int  skipped  =  IOUtils.skip(is,  numToSkip);	long  skipped  =  IOUtils.skip(is,  numToSkip);  	non-compiled	[CE]  illegal  start  of  type	41	None	replace
3	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skipped(available,  numToSkip);  [CE]  illegal  start  of  type  [FE]        AssertionError  [CONTEXT]  public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  [BUGGY]  long  skipped  =  IOUtils.skipped(available,  numToSkip);  [BUGGY]  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  IOUtils.skipped(available,  numToSkip);	long  skipped  =  IOUtils.skip(is,  numToSkip);  	non-compiled	[CE]  illegal  start  of  type	41	None	replace
4	[BUG]  [BUGGY]  short  skipped  =  IOUtils.skip(available,  numToSkip);  [CE]  illegal  start  of  type  [FE]          AssertionError  [CONTEXT]  public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  [BUGGY]  short  skipped  =  IOUtils.skip(available,  numToSkip);  [BUGGY]  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	short  skipped  =  IOUtils.skip(available,  numToSkip);	long  skipped  =  IOUtils.skip(is,  numToSkip);  	non-compiled	[CE]  illegal  start  of  type	41	None	replace
5	[BUG]  [BUGGY]  long  skipped  =  iOUtils.skip(available,  numToSkip);  [CE]  illegal  start  of  type  [FE]            AssertionError  [CONTEXT]  public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  [BUGGY]  long  skipped  =  iOUtils.skip(available,  numToSkip);  [BUGGY]  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  iOUtils.skip(available,  numToSkip);	long  skipped  =  IOUtils.skip(is,  numToSkip);  	non-compiled	[CE]  illegal  start  of  type	41	None	replace
6	[BUG]  [BUGGY]  Long  skipped  =  IOUtils.skip(available,  numToSkip);  [CE]  illegal  start  of  type  [FE]              AssertionError  [CONTEXT]  public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  [BUGGY]  Long  skipped  =  IOUtils.skip(available,  numToSkip);  [BUGGY]  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	Long  skipped  =  IOUtils.skip(available,  numToSkip);	long  skipped  =  IOUtils.skip(is,  numToSkip);  	non-compiled	[CE]  illegal  start  of  type	41	None	replace
7	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]                AssertionError  [CONTEXT]  public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  [BUGGY]    [BUGGY]  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	  	long  skipped  =  IOUtils.skip(is,  numToSkip);  	non-compiled	[CE]  illegal  start  of  type	41	None	replace
8	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available  -  numToSkip);  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  [BUGGY]  long  skipped  =  IOUtils.skip(available  -  numToSkip);  [BUGGY]  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  IOUtils.skip(available  -  numToSkip);	long  skipped  =  IOUtils.skip(is,  numToSkip);  	non-compiled	[CE]  illegal  start  of  type	41	None	replace
9	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available  +  numToSkip);  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  public  long  skip(long  numToSkip)  throws  IOException  {  long  available  =  entrySize  -  entryOffset;  numToSkip  =  Math.min(numToSkip,  available);  [BUGGY]  long  skipped  =  IOUtils.skip(available  +  numToSkip);  [BUGGY]  count(skipped);  entryOffset  +=  skipped;  return  skipped;  }  [CLASS]  TarArchiveInputStream  [METHOD]  skip  [RETURN_TYPE]  long  long  numToSkip  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numToSkip  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	199	199	1	replace	long  skipped  =  IOUtils.skip(available  +  numToSkip);	long  skipped  =  IOUtils.skip(is,  numToSkip);  	non-compiled	[CE]  illegal  start  of  type	41	None	replace
