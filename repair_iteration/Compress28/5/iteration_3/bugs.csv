bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  totalRead  =  getHitEOF(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =  getHitEOF(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  getHitEOF(buf,  offset,  numToRead,  hasHitEOF);	  int    totalRead    =    getHitEOF(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
2	[BUG]  [BUGGY]  int  totalRead  =  getHitEOF(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =  getHitEOF(buf,  offset,  numToRead,  len);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  getHitEOF(buf,  offset,  numToRead,  len);	  int    totalRead    =    getHitEOF(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
3	[BUG]  [BUGGY]  int  totalRead  =  getHitEOF(buf,  offset,  numToRead,  false);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =  getHitEOF(buf,  offset,  numToRead,  false);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  getHitEOF(buf,  offset,  numToRead,  false);	  int    totalRead    =    getHitEOF(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
4	[BUG]  [BUGGY]  int  totalRead  =  getHitEOF(buf,  offset,  numToRead,  true);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =  getHitEOF(buf,  offset,  numToRead,  true);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  getHitEOF(buf,  offset,  numToRead,  true);	  int    totalRead    =    getHitEOF(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
5	[BUG]  [BUGGY]  int  totalRead  =  getHitEOF(buf,  offset,  numToRead,  length);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =  getHitEOF(buf,  offset,  numToRead,  length);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  getHitEOF(buf,  offset,  numToRead,  length);	  int    totalRead    =    getHitEOF(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
6	[BUG]  [BUGGY]  int  totalRead  =  getHitEOF(buf,  offset,  numToRead,  isEnabled);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =  getHitEOF(buf,  offset,  numToRead,  isEnabled);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  getHitEOF(buf,  offset,  numToRead,  isEnabled);	  int    totalRead    =    getHitEOF(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
7	[BUG]  [BUGGY]  int  totalRead  =  getHitEOF(buf,  offset,  numToRead,  null);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =  getHitEOF(buf,  offset,  numToRead,  null);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  getHitEOF(buf,  offset,  numToRead,  null);	  int    totalRead    =    getHitEOF(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
8	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0L  :  0L;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0L  :  0L;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  0L  :  0L;	  int    totalRead    =(numToRead    <    0)?    0L    :    0L;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
9	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  0L  :  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  0)?  0L  :  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  0L  :  1;	  int    totalRead    =(numToRead    <    0)?    0L    :    0L;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
10	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  1)?  0L  :  0L;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  1)?  0L  :  0L;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  1)?  0L  :  0L;	  int    totalRead    =(numToRead    <    0)?    0L    :    0L;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
11	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  0L  :  0L  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  0)?  0L  :  0L  +  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  0L  :  0L  +  1;	  int    totalRead    =(numToRead    <    0)?    0L    :    0L;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
12	[BUG]  [BUGGY]  int  totalRead  =(offset  <  0)?  0  :  buf;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(offset  <  0)?  0  :  buf;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(offset  <  0)?  0  :  buf;	  int    totalRead    =(buf    <    0)?    0    :    offset;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
13	[BUG]  [BUGGY]  int  totalRead  =(int)(buf  <  0)?  0  :  numToRead;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)(buf  <  0)?  0  :  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)(buf  <  0)?  0  :  numToRead;	  int    totalRead    =(buf    <    0)?    0    :    offset;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
14	[BUG]  [BUGGY]  int  totalRead  =(buf  >=  0)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf  >=  0)?  0  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf  >=  0)?  0  :  buf.length;	  int    totalRead    =(buf!=    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
15	[BUG]  [BUGGY]  int  totalRead  =(buf  ==  0)?  0  :  buf.length  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf  ==  0)?  0  :  buf.length  +  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf  ==  0)?  0  :  buf.length  +  1;	  int    totalRead    =(buf!=    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
16	[BUG]  [BUGGY]  int  totalRead  =(buf  ==  null)?  0  :  buf.length  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf  ==  null)?  0  :  buf.length  +  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf  ==  null)?  0  :  buf.length  +  1;	  int    totalRead    =(buf!=    null)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
17	[BUG]  [BUGGY]  int  totalRead  =(buf  ==  null)?  0  :  buf.length  +  numToRead;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf  ==  null)?  0  :  buf.length  +  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf  ==  null)?  0  :  buf.length  +  numToRead;	  int    totalRead    =(buf!=    null)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
18	[BUG]  [BUGGY]  int  totalRead  =(buf!=  null)?  0  :  buf.length  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf!=  null)?  0  :  buf.length  +  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf!=  null)?  0  :  buf.length  +  1;	  int    totalRead    =(buf!=    null)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
19	[BUG]  [BUGGY]  int  totalRead  =(buf  ==  null)?  -1  :  buf.length;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf  ==  null)?  -1  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf  ==  null)?  -1  :  buf.length;	  int    totalRead    =(buf!=    null)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
20	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  >  1)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  >  1)?  1  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  >  1)?  1  :  0;	  int    totalRead    =(numToRead    <    >    0)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
21	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  <  0)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  <  0)?  1  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  <  0)?  1  :  0;	  int    totalRead    =(numToRead    <    >    0)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
22	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  >  0)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  >  0)?  1  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  >  0)?  1  :  0;	  int    totalRead    =(numToRead    <    >    0)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
23	[BUG]  [BUGGY]  int  totalRead  =(buf  <  >  0)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf  <  >  0)?  1  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf  <  >  0)?  1  :  0;	  int    totalRead    =(numToRead    <    >    0)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
24	[BUG]  [BUGGY]  int  totalRead  =(buf  <  0)?  0  :  buf.length  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf  <  0)?  0  :  buf.length  +  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf  <  0)?  0  :  buf.length  +  1;	  int    totalRead    =(buf    <    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
25	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  -1  :  numToRead;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  0)?  -1  :  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  -1  :  numToRead;	  int    totalRead    =(numToRead!=    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
26	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  buf;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  buf;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  0  :  buf;	  int    totalRead    =(numToRead!=    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
27	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  1  :  numToRead;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  0)?  1  :  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  1  :  numToRead;	  int    totalRead    =(numToRead!=    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
28	[BUG]  [BUGGY]  int  totalRead  =(numToRead!=  0)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead!=  0)?  0  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead!=  0)?  0  :  buf.length;	  int    totalRead    =(numToRead!=    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
29	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >  0)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >  0)?  -1  :  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >  0)?  -1  :  1;	  int    totalRead    =(numToRead    >    0)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
30	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  >  0)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  >  0)?  -1  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  >  0)?  -1  :  0;	  int    totalRead    =(numToRead    >    0)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
31	[BUG]  [BUGGY]  int  totalRead  =(int)Math.ceil(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.ceil(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.ceil(buf,  offset,  numToRead,  hasHitEOF);	  int    totalRead    =(int)Math.ceil(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
32	[BUG]  [BUGGY]  int  totalRead  =(int)Math.ceil(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.ceil(buf,  offset,  numToRead,  len);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.ceil(buf,  offset,  numToRead,  len);	  int    totalRead    =(int)Math.ceil(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
33	[BUG]  [BUGGY]  byte  totalRead  =(byte)Math.ceil(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte  totalRead  =(byte)Math.ceil(buf,  offset,  numToRead);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte  totalRead  =(byte)Math.ceil(buf,  offset,  numToRead);	  int    totalRead    =(int)Math.ceil(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
34	[BUG]  [BUGGY]  int  totalRead  =(int)Math.ceil(buf,  offset,  numToRead,  length);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.ceil(buf,  offset,  numToRead,  length);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.ceil(buf,  offset,  numToRead,  length);	  int    totalRead    =(int)Math.ceil(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
35	[BUG]  [BUGGY]  int  totalRead  =(int)Math.ceil(buf,  offset,  numToRead,  isHitEOF);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.ceil(buf,  offset,  numToRead,  isHitEOF);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.ceil(buf,  offset,  numToRead,  isHitEOF);	  int    totalRead    =(int)Math.ceil(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
36	[BUG]  [BUGGY]  int  totalRead  =(int)Math.ceil(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.ceil(buf,  offset,  numToRead  +  1);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.ceil(buf,  offset,  numToRead  +  1);	  int    totalRead    =(int)Math.ceil(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
37	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  1  :  -1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  0)?  1  :  -1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  1  :  -1;	  int    totalRead    =(numToRead    ==    0)?    0    :    -1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
38	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  2;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  2;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  0  :  2;	  int    totalRead    =(numToRead    ==    0)?    0    :    -1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
39	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  0  :  -1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  0)?  0  :  -1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  0  :  -1;	  int    totalRead    =(numToRead    ==    0)?    0    :    -1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
40	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  1  :  buf.length;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  0)?  1  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  1  :  buf.length;	  int    totalRead    =(numToRead    <    0)?    1    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
41	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  1)?  1  :  numToRead;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  1)?  1  :  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  1)?  1  :  numToRead;	  int    totalRead    =(numToRead    <    0)?    1    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
42	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >=  0)?  1  :  numToRead;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >=  0)?  1  :  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >=  0)?  1  :  numToRead;	  int    totalRead    =(numToRead    <    0)?    1    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
43	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  >  0)?  1  :  numToRead;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  >  0)?  1  :  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  >  0)?  1  :  numToRead;	  int    totalRead    =(numToRead    <    0)?    1    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
44	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  1  :  buf;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  0)?  1  :  buf;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  1  :  buf;	  int    totalRead    =(numToRead    <    0)?    1    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
45	[BUG]  [BUGGY]  int  totalRead  =(buf.length  ==  0)?  0  :  numToRead  +  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf.length  ==  0)?  0  :  numToRead  +  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf.length  ==  0)?  0  :  numToRead  +  1;	  int    totalRead    =(numToRead    ==    0)?    0    :    buf.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
46	[BUG]  [BUGGY]  int  totalRead  =(buf.length  ==  0)?  0  :  buf.length  +  1;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf.length  ==  0)?  0  :  buf.length  +  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf.length  ==  0)?  0  :  buf.length  +  1;	  int    totalRead    =(numToRead    ==    0)?    0    :    buf.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
47	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  buf.length,  offset  +  1;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  buf.length,  offset  +  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  0  :  buf.length,  offset  +  1;	  int    totalRead    =(numToRead    ==    0)?    0    :    buf.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
48	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  buf.length  +  2;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  buf.length  +  2;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  0  :  buf.length  +  2;	  int    totalRead    =(numToRead    ==    0)?    0    :    buf.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
49	[BUG]  [BUGGY]  int  hasHitEOF  =  buf.length;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  hasHitEOF  =  buf.length;	  int    hasHitEOF    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
50	[BUG]  [BUGGY]  int  hasHitEOF  =  currEntry.length  -  1;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  currEntry.length  -  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  hasHitEOF  =  currEntry.length  -  1;	  int    hasHitEOF    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
51	[BUG]  [BUGGY]  int  hasHitEOF  =  currEntry.length  +  1;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  currEntry.length  +  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  hasHitEOF  =  currEntry.length  +  1;	  int    hasHitEOF    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
52	[BUG]  [BUGGY]  int  hasHitEOF  =  currEntry.length  +  numToRead;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  currEntry.length  +  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  hasHitEOF  =  currEntry.length  +  numToRead;	  int    hasHitEOF    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
53	[BUG]  [BUGGY]  int  hasHitEOF  =  currEntry.length  -  offset;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  currEntry.length  -  offset;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  hasHitEOF  =  currEntry.length  -  offset;	  int    hasHitEOF    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
54	[BUG]  [BUGGY]  int  hasHitEOF  =  numToRead;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  hasHitEOF  =  numToRead;	  int    hasHitEOF    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
55	[BUG]  [BUGGY]  int  totalRead  =(buf  ==  0)?  1  :  buf.length;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf  ==  0)?  1  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf  ==  0)?  1  :  buf.length;	  int    totalRead    =(buf    ==    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
56	[BUG]  [BUGGY]  int  totalRead  =(buf  ==  offset)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf  ==  offset)?  0  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf  ==  offset)?  0  :  buf.length;	  int    totalRead    =(buf    ==    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
57	[BUG]  [BUGGY]  int  totalRead  =(numToRead!=  0)?  -1  :  -1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead!=  0)?  -1  :  -1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead!=  0)?  -1  :  -1;	  int    totalRead    =(numToRead    >    0)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
58	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  >  0)?  -1  :  -1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  >  0)?  -1  :  -1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  >  0)?  -1  :  -1;	  int    totalRead    =(numToRead    >    0)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
59	[BUG]  [BUGGY]  int  totalRead  =(int)(buf  <  0)?  0  :  offset.length;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)(buf  <  0)?  0  :  offset.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)(buf  <  0)?  0  :  offset.length;	  int    totalRead    =(buf    <    0)?    0    :    offset.length;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
60	[BUG]  [BUGGY]  byte  totalRead  =(offset  <  0)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte  totalRead  =(offset  <  0)?  0  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte  totalRead  =(offset  <  0)?  0  :  buf.length;	  int    totalRead    =(buf    <    0)?    0    :    offset.length;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
61	[BUG]  [BUGGY]  int  totalRead  =(int)(buf  <  0)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)(buf  <  0)?  0  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)(buf  <  0)?  0  :  buf.length;	  int    totalRead    =(buf    <    0)?    0    :    offset.length;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
62	[BUG]  [BUGGY]  int  entrySize  =  findEntrySize(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  findEntrySize(buf,  offset,  numToRead);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  findEntrySize(buf,  offset,  numToRead);	  int    entrySize    =    getEntrySize(buf,    offset);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
63	[BUG]  [BUGGY]  int  entrySize  =  getEntrySize(buf,  off,  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntrySize(buf,  off,  numToRead);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  getEntrySize(buf,  off,  numToRead);	  int    entrySize    =    getEntrySize(buf,    offset);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
64	[BUG]  [BUGGY]  int  entrySize  =  readEntrySize(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  readEntrySize(buf,  offset,  numToRead);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  readEntrySize(buf,  offset,  numToRead);	  int    entrySize    =    getEntrySize(buf,    offset);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
65	[BUG]  [BUGGY]  int  entrySize  =  read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  read(buf,  offset,  numToRead);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  read(buf,  offset,  numToRead);	  int    entrySize    =    getEntrySize(buf,    offset);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
66	[BUG]  [BUGGY]  int  entrySize  =  getEntrySize(buf,  offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntrySize(buf,  offset  +  numToRead);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  getEntrySize(buf,  offset  +  numToRead);	  int    entrySize    =    getEntrySize(buf,    offset);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
67	[BUG]  [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  length  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  length  +  1);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  length  +  1);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead,    length);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
68	[BUG]  [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  0);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  0);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  0);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead,    length);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
69	[BUG]  [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  length  -  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  length  -  1);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  length  -  1);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead,    length);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
70	[BUG]  [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  0,  length);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  0,  length);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  0,  length);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead,    length);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
71	[BUG]  [BUGGY]  byte  totalRead  =(byte)Math.floor(buf,  offset,  numToRead,  length);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte  totalRead  =(byte)Math.floor(buf,  offset,  numToRead,  length);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte  totalRead  =(byte)Math.floor(buf,  offset,  numToRead,  length);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead,    length);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
72	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  1)?  -1  :  -1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  1)?  -1  :  -1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  1)?  -1  :  -1;	  int    totalRead    =(numToRead    <    0)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
73	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  1  :  buf.length  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  0)?  1  :  buf.length  +  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  1  :  buf.length  +  1;	  int    totalRead    =(numToRead    ==    0)?    1    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
74	[BUG]  [BUGGY]  int  totalRead  =(buf  ==  0)?  1  :  numToRead;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf  ==  0)?  1  :  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf  ==  0)?  1  :  numToRead;	  int    totalRead    =(numToRead    ==    0)?    1    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
75	[BUG]  [BUGGY]  int  totalRead  =(buf.length  ==  0)?  1  :  numToRead;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf.length  ==  0)?  1  :  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf.length  ==  0)?  1  :  numToRead;	  int    totalRead    =(numToRead    ==    0)?    1    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
76	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  1  :  buf.length  -  offset;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  0)?  1  :  buf.length  -  offset;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  1  :  buf.length  -  offset;	  int    totalRead    =(numToRead    ==    0)?    1    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
77	[BUG]  [BUGGY]  int  totalRead  =(buf!=  0)?  1  :  numToRead;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf!=  0)?  1  :  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf!=  0)?  1  :  numToRead;	  int    totalRead    =(numToRead    ==    0)?    1    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
78	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  1  :  buf.length  *  numRecords;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  0)?  1  :  buf.length  *  numRecords;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  1  :  buf.length  *  numRecords;	  int    totalRead    =(numToRead    ==    0)?    1    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
79	[BUG]  [BUGGY]  int  totalRead  =(length  <  1)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(length  <  1)?  0  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(length  <  1)?  0  :  buf.length;	  int    totalRead    =(length    <    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
80	[BUG]  [BUGGY]  int  totalRead  =(length  <  0)?  0  :  buf.length  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(length  <  0)?  0  :  buf.length  +  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(length  <  0)?  0  :  buf.length  +  1;	  int    totalRead    =(length    <    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
81	[BUG]  [BUGGY]  byte  totalRead  =(byte)Math.floor(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte  totalRead  =(byte)Math.floor(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte  totalRead  =(byte)Math.floor(buf,  offset,  numToRead,  hasHitEOF);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
82	[BUG]  [BUGGY]  int  totalRead  =(int)Math.log(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.log(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.log(buf,  offset,  numToRead,  hasHitEOF);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
83	[BUG]  [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  isHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  isHitEOF);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  isHitEOF);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
84	[BUG]  [BUGGY]  long  totalRead  =(long)Math.floor(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  long  totalRead  =(long)Math.floor(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	long  totalRead  =(long)Math.floor(buf,  offset,  numToRead,  hasHitEOF);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
85	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  0)?  -1  :  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  -1  :  1;	  int    totalRead    =(numToRead    ==    0)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
86	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  offset  -1  :  0;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  0)?  offset  -1  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  offset  -1  :  0;	  int    totalRead    =(numToRead    ==    0)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
87	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  1)?  0  :  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  1)?  0  :  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  1)?  0  :  1;	  int    totalRead    =(numToRead    <    0)?    0    :    1;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
88	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >  0)?  0  :  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >  0)?  0  :  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >  0)?  0  :  1;	  int    totalRead    =(numToRead    <    0)?    0    :    1;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
89	[BUG]  [BUGGY]  int  totalRead  =(numToRead!=  0)?  0  :  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead!=  0)?  0  :  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead!=  0)?  0  :  1;	  int    totalRead    =(numToRead    <    0)?    0    :    1;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
90	[BUG]  [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead,  hasHitEOF);	  byte[]    currEntry    =    getCurrentEntry(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
91	[BUG]  [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead,  len);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead,  len);	  byte[]    currEntry    =    getCurrentEntry(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
92	[BUG]  [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead,  false);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead,  false);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead,  false);	  byte[]    currEntry    =    getCurrentEntry(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
93	[BUG]  [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead,  true);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead,  true);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead,  true);	  byte[]    currEntry    =    getCurrentEntry(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
94	[BUG]  [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead,  length);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead,  length);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead,  length);	  byte[]    currEntry    =    getCurrentEntry(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
95	[BUG]  [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead,  isEnabled);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead,  isEnabled);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead,  isEnabled);	  byte[]    currEntry    =    getCurrentEntry(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
96	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  1)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  1)?  -1  :  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  1)?  -1  :  1;	  int    totalRead    =(numToRead    <    0)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
97	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >=  0)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >=  0)?  -1  :  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >=  0)?  -1  :  1;	  int    totalRead    =(numToRead    <    0)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
98	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  >  0)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  >  0)?  -1  :  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  >  0)?  -1  :  1;	  int    totalRead    =(numToRead    <    0)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
99	[BUG]  [BUGGY]  int  totalRead  =(numToRead!=  0)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead!=  0)?  -1  :  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead!=  0)?  -1  :  1;	  int    totalRead    =(numToRead    <    0)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
100	[BUG]  [BUGGY]  int  totalRead  =(int)Math.log(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.log(buf,  offset,  numToRead  +  1);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.log(buf,  offset,  numToRead  +  1);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
101	[BUG]  [BUGGY]  byte  totalRead  =(byte)Math.floor(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte  totalRead  =(byte)Math.floor(buf,  offset,  numToRead  +  1);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte  totalRead  =(byte)Math.floor(buf,  offset,  numToRead  +  1);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
102	[BUG]  [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead  *  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead  *  1);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.floor(buf,  offset,  numToRead  *  1);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
103	[BUG]  [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead  +  2);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead  +  2);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.floor(buf,  offset,  numToRead  +  2);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
104	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >>  0)?  0  :  buf;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >>  0)?  0  :  buf;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >>  0)?  0  :  buf;	  int    totalRead    =(buf!=    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
105	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >=  0)?  0  :  buf;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >=  0)?  0  :  buf;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >=  0)?  0  :  buf;	  int    totalRead    =(buf!=    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
106	[BUG]  [BUGGY]  int  totalRead  =(numToRead!=  0)?  0  :  buf;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead!=  0)?  0  :  buf;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead!=  0)?  0  :  buf;	  int    totalRead    =(buf!=    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
107	[BUG]  [BUGGY]  byte[]  buf  =  currEntry.getBytes(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte[]  buf  =  currEntry.getBytes(buf,  offset,  numToRead);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte[]  buf  =  currEntry.getBytes(buf,  offset,  numToRead);	  byte[]    buf    =    currEntry.getBytes(offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
108	[BUG]  [BUGGY]  byte[]  buf  =  currEntry.getBytes(numToRead,  offset);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte[]  buf  =  currEntry.getBytes(numToRead,  offset);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte[]  buf  =  currEntry.getBytes(numToRead,  offset);	  byte[]    buf    =    currEntry.getBytes(offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
109	[BUG]  [BUGGY]  byte[]  buf  =  currEntry.getBytes(offset,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte[]  buf  =  currEntry.getBytes(offset,  offset,  numToRead);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte[]  buf  =  currEntry.getBytes(offset,  offset,  numToRead);	  byte[]    buf    =    currEntry.getBytes(offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
110	[BUG]  [BUGGY]  byte[]  buf  =  currEntry.getBytes(offset,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte[]  buf  =  currEntry.getBytes(offset,  0,  numToRead);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte[]  buf  =  currEntry.getBytes(offset,  0,  numToRead);	  byte[]    buf    =    currEntry.getBytes(offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
111	[BUG]  [BUGGY]  byte[]  buf  =  currEntry.getBytes(offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte[]  buf  =  currEntry.getBytes(offset,  numToRead,  hasHitEOF);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte[]  buf  =  currEntry.getBytes(offset,  numToRead,  hasHitEOF);	  byte[]    buf    =    currEntry.getBytes(offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
112	[BUG]  [BUGGY]  byte[]  buf  =  currEntry.getBytes(offset,  0);  [CE]  illegal  start  of  type  [FE]                                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte[]  buf  =  currEntry.getBytes(offset,  0);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte[]  buf  =  currEntry.getBytes(offset,  0);	  byte[]    buf    =    currEntry.getBytes(offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
113	[BUG]  [BUGGY]  byte[]  buf  =  currEntry.getBytes(offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte[]  buf  =  currEntry.getBytes(offset,  numToRead,  len);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte[]  buf  =  currEntry.getBytes(offset,  numToRead,  len);	  byte[]    buf    =    currEntry.getBytes(offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
114	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  1)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  1)?  1  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  1)?  1  :  0;	  int    totalRead    =(numToRead    <    1)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
115	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  1  ||  numToRead  <  1)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  1  ||  numToRead  <  1)?  1  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  1  ||  numToRead  <  1)?  1  :  0;	  int    totalRead    =(numToRead    <    1)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
116	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >=  1)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >=  1)?  1  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >=  1)?  1  :  0;	  int    totalRead    =(numToRead    <    1)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
117	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  1)?  1  :  -1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  1)?  1  :  -1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  1)?  1  :  -1;	  int    totalRead    =(numToRead    <    1)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
118	[BUG]  [BUGGY]  int  totalRead  =(int)Math.rint(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.rint(buf,  offset,  numToRead);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.rint(buf,  offset,  numToRead);	  int    totalRead    =(int)Math.log(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
119	[BUG]  [BUGGY]  int  totalRead  =(int)Math.log(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.log(buf,  offset,  numToRead,  len);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.log(buf,  offset,  numToRead,  len);	  int    totalRead    =(int)Math.log(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
120	[BUG]  [BUGGY]  byte  totalRead  =(byte)Math.log(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte  totalRead  =(byte)Math.log(buf,  offset,  numToRead);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte  totalRead  =(byte)Math.log(buf,  offset,  numToRead);	  int    totalRead    =(int)Math.log(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
121	[BUG]  [BUGGY]  int  totalRead  =(int)Math.log(buf,  offset,  numToRead,  length);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.log(buf,  offset,  numToRead,  length);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.log(buf,  offset,  numToRead,  length);	  int    totalRead    =(int)Math.log(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
122	[BUG]  [BUGGY]  int  totalRead  =(int)Math.log(buf,  offset,  numToRead,  isHitEOF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.log(buf,  offset,  numToRead,  isHitEOF);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.log(buf,  offset,  numToRead,  isHitEOF);	  int    totalRead    =(int)Math.log(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
123	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  numRecords.length;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  numRecords.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  0  :  numRecords.length;	  int    totalRead    =(numToRead    ==    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
124	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  numRecords;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  numRecords;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  0  :  numRecords;	  int    totalRead    =(numToRead    ==    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
125	[BUG]  [BUGGY]  int  totalRead  =  numToRead  -  buf.length;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =  numToRead  -  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  numToRead  -  buf.length;	  int    totalRead    =    buf.length    -    numToRead;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
126	[BUG]  [BUGGY]  int  totalRead  =  buf.length  -  offset;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =  buf.length  -  offset;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  buf.length  -  offset;	  int    totalRead    =    buf.length    -    numToRead;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
127	[BUG]  [BUGGY]  int  totalRead  =  offset  -  numToRead;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =  offset  -  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  offset  -  numToRead;	  int    totalRead    =    buf.length    -    numToRead;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
128	[BUG]  [BUGGY]  int  totalRead  =  buf.length  /  numToRead;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =  buf.length  /  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  buf.length  /  numToRead;	  int    totalRead    =    buf.length    -    numToRead;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
129	[BUG]  [BUGGY]  int  totalRead  =  numToRead.length  -  buf.length;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =  numToRead.length  -  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  numToRead.length  -  buf.length;	  int    totalRead    =    buf.length    -    numToRead;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
130	[BUG]  [BUGGY]  int  totalRead  =  buf.length  -  offset,  numToRead;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =  buf.length  -  offset,  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  buf.length  -  offset,  numToRead;	  int    totalRead    =    buf.length    -    numToRead;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
131	[BUG]  [BUGGY]  int  totalRead  =  buffer.length  -  numToRead;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =  buffer.length  -  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  buffer.length  -  numToRead;	  int    totalRead    =    buf.length    -    numToRead;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
132	[BUG]  [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte[]  currEntry  =  getCurrentEntry(buf);	  byte[]    currEntry    =    getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
133	[BUG]  [BUGGY]  byte[]  currEntry  =  getCurrentEntryInput();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte[]  currEntry  =  getCurrentEntryInput();  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte[]  currEntry  =  getCurrentEntryInput();	  byte[]    currEntry    =    getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
134	[BUG]  [BUGGY]  byte[]  currEntry  =  getCurrentEntry().length;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte[]  currEntry  =  getCurrentEntry().length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte[]  currEntry  =  getCurrentEntry().length;	  byte[]    currEntry    =    getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
135	[BUG]  [BUGGY]  byte[]  currEntry  =  getCurrentEntryInputStream();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte[]  currEntry  =  getCurrentEntryInputStream();  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte[]  currEntry  =  getCurrentEntryInputStream();	  byte[]    currEntry    =    getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
136	[BUG]  [BUGGY]  Integer  totalRead  =  0L;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  Integer  totalRead  =  0L;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	Integer  totalRead  =  0L;	  long    totalRead    =    0L;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
137	[BUG]  [BUGGY]  long  totalRead  =  0;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  long  totalRead  =  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	long  totalRead  =  0;	  long    totalRead    =    0L;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
138	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  1)?  2  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  1)?  2  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  1)?  2  :  0;	  int    totalRead    =(numToRead    <    0)?    2    :    0;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
139	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  2  :  0;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  0)?  2  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  2  :  0;	  int    totalRead    =(numToRead    <    0)?    2    :    0;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
140	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  2  :  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  0)?  2  :  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  2  :  1;	  int    totalRead    =(numToRead    <    0)?    2    :    0;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
141	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >=  0)?  2  :  0;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >=  0)?  2  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >=  0)?  2  :  0;	  int    totalRead    =(numToRead    <    0)?    2    :    0;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
142	[BUG]  [BUGGY]  byte[]  buf  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte[]  buf  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte[]  buf  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);	  byte[]    buf    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
143	[BUG]  [BUGGY]  byte[]  buf  =  currEntry.read(buf,  offset,  numToRead,  false);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte[]  buf  =  currEntry.read(buf,  offset,  numToRead,  false);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte[]  buf  =  currEntry.read(buf,  offset,  numToRead,  false);	  byte[]    buf    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
144	[BUG]  [BUGGY]  byte[]  buf  =  currEntry.read(buf,  offset,  numToRead,  true);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte[]  buf  =  currEntry.read(buf,  offset,  numToRead,  true);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte[]  buf  =  currEntry.read(buf,  offset,  numToRead,  true);	  byte[]    buf    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
145	[BUG]  [BUGGY]  byte[]  buf  =  currEntry.read(buf,  offset,  numToRead,  isEnabled);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte[]  buf  =  currEntry.read(buf,  offset,  numToRead,  isEnabled);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte[]  buf  =  currEntry.read(buf,  offset,  numToRead,  isEnabled);	  byte[]    buf    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
146	[BUG]  [BUGGY]  byte[]  buf  =  currEntry.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte[]  buf  =  currEntry.read(buf,  offset,  numToRead,  len);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte[]  buf  =  currEntry.read(buf,  offset,  numToRead,  len);	  byte[]    buf    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
147	[BUG]  [BUGGY]  byte[]  buf  =  currEntry.read(buf,  offset,  numToRead,  length);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte[]  buf  =  currEntry.read(buf,  offset,  numToRead,  length);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte[]  buf  =  currEntry.read(buf,  offset,  numToRead,  length);	  byte[]    buf    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
148	[BUG]  [BUGGY]  double  totalRead  =  0L;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  double  totalRead  =  0L;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	double  totalRead  =  0L;	  float    totalRead    =    0L;    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
149	[BUG]  [BUGGY]  float  totalRead  =  0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  float  totalRead  =  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	float  totalRead  =  0;	  float    totalRead    =    0L;    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
150	[BUG]  [BUGGY]  double  totalRead  =  0;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  double  totalRead  =  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	double  totalRead  =  0;	  float    totalRead    =    0L;    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
151	[BUG]  [BUGGY]  int  totalRead  =(offset  ==  0)?  0  :  buf.length  -  numToRead;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(offset  ==  0)?  0  :  buf.length  -  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(offset  ==  0)?  0  :  buf.length  -  numToRead;	  int    totalRead    =(numToRead    ==    0)?    0    :    buf.length    -    offset;    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
152	[BUG]  [BUGGY]  int  totalRead  =(buf  ==  0)?  0  :  buf.length  -  offset;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf  ==  0)?  0  :  buf.length  -  offset;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf  ==  0)?  0  :  buf.length  -  offset;	  int    totalRead    =(numToRead    ==    0)?    0    :    buf.length    -    offset;    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
153	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >=  0)?  0  :  buf.length  -  offset;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >=  0)?  0  :  buf.length  -  offset;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >=  0)?  0  :  buf.length  -  offset;	  int    totalRead    =(numToRead    ==    0)?    0    :    buf.length    -    offset;    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
154	[BUG]  [BUGGY]  int  totalRead  =(buf.length  ==  0)?  0  :  buf.length  -  numToRead;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf.length  ==  0)?  0  :  buf.length  -  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf.length  ==  0)?  0  :  buf.length  -  numToRead;	  int    totalRead    =(numToRead    ==    0)?    0    :    buf.length    -    offset;    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
155	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  0  :  buf.length  -  offset;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  0)?  0  :  buf.length  -  offset;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  0  :  buf.length  -  offset;	  int    totalRead    =(numToRead    ==    0)?    0    :    buf.length    -    offset;    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
156	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >  0)?  1  :  numToRead;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >  0)?  1  :  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >  0)?  1  :  numToRead;	  int    totalRead    =(numToRead    >    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
157	[BUG]  [BUGGY]  int  totalRead  =(buf  ==  0)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf  ==  0)?  1  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf  ==  0)?  1  :  0;	  int    totalRead    =(numToRead    ==    0)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
158	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  -1  :  2;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  0)?  -1  :  2;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  -1  :  2;	  int    totalRead    =(numToRead    ==    0)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
159	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  offset  :  -1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  0)?  offset  :  -1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  offset  :  -1;	  int    totalRead    =(numToRead    ==    0)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
160	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >=  0)?  -1  :  numToRead;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >=  0)?  -1  :  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >=  0)?  -1  :  numToRead;	  int    totalRead    =(numToRead    <    0)?    -1    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
161	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  1)?  -1  :  numToRead;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  1)?  -1  :  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  1)?  -1  :  numToRead;	  int    totalRead    =(numToRead    <    0)?    -1    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
162	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  >  0)?  -1  :  numToRead;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  >  0)?  -1  :  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  >  0)?  -1  :  numToRead;	  int    totalRead    =(numToRead    <    0)?    -1    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
163	[BUG]  [BUGGY]  int  entrySize  =  getEntrySize(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntrySize(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  getEntrySize(buf,  offset,  numToRead,  hasHitEOF);	  int    entrySize    =    getEntrySize(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
164	[BUG]  [BUGGY]  int  entrySize  =  getEntrySize(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntrySize(buf,  offset,  numToRead,  len);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  getEntrySize(buf,  offset,  numToRead,  len);	  int    entrySize    =    getEntrySize(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
165	[BUG]  [BUGGY]  int  entrySize  =  getEntrySize(buf,  offset,  numToRead,  length);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntrySize(buf,  offset,  numToRead,  length);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  getEntrySize(buf,  offset,  numToRead,  length);	  int    entrySize    =    getEntrySize(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
166	[BUG]  [BUGGY]  int  entrySize  =  getEntrySize(buf,  offset,  numToRead,  isEnabled);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntrySize(buf,  offset,  numToRead,  isEnabled);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  getEntrySize(buf,  offset,  numToRead,  isEnabled);	  int    entrySize    =    getEntrySize(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
167	[BUG]  [BUGGY]  int  entrySize  =  getEntrySize(buf,  offset,  numToRead,  isHitEOF);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntrySize(buf,  offset,  numToRead,  isHitEOF);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  getEntrySize(buf,  offset,  numToRead,  isHitEOF);	  int    entrySize    =    getEntrySize(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
168	[BUG]  [BUGGY]  int  entrySize  =  getEntrySize(buf,  offset,  numToRead,  false);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntrySize(buf,  offset,  numToRead,  false);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  getEntrySize(buf,  offset,  numToRead,  false);	  int    entrySize    =    getEntrySize(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
169	[BUG]  [BUGGY]  int  hasHitEOF  =  is.read(buf,  offset,  numToRead,  false);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  is.read(buf,  offset,  numToRead,  false);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  hasHitEOF  =  is.read(buf,  offset,  numToRead,  false);	  int    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
170	[BUG]  [BUGGY]  int  hasHitEOF  =  is.read(buf,  offset,  numToRead,  true);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  is.read(buf,  offset,  numToRead,  true);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  hasHitEOF  =  is.read(buf,  offset,  numToRead,  true);	  int    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
171	[BUG]  [BUGGY]  int  hasHitEOF  =  is.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  is.read(buf,  offset,  numToRead,  len);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  hasHitEOF  =  is.read(buf,  offset,  numToRead,  len);	  int    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
172	[BUG]  [BUGGY]  int  hasHitEOF  =  is.read(buf,  offset,  numToRead,  null);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  is.read(buf,  offset,  numToRead,  null);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  hasHitEOF  =  is.read(buf,  offset,  numToRead,  null);	  int    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
173	[BUG]  [BUGGY]  int  hasHitEOF  =  is.read(buf,  offset,  numToRead,  buffer.length);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  is.read(buf,  offset,  numToRead,  buffer.length);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  hasHitEOF  =  is.read(buf,  offset,  numToRead,  buffer.length);	  int    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
174	[BUG]  [BUGGY]  int  hasHitEOF  =  is.read(buf,  offset,  numToRead,  0);  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  is.read(buf,  offset,  numToRead,  0);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  hasHitEOF  =  is.read(buf,  offset,  numToRead,  0);	  int    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
175	[BUG]  [BUGGY]  int  hasHitEOF  =  i.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  i.read(buf,  offset,  numToRead);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  hasHitEOF  =  i.read(buf,  offset,  numToRead);	  int    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
176	[BUG]  [BUGGY]  byte  totalRead  =  -1L;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte  totalRead  =  -1L;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte  totalRead  =  -1L;	  int    totalRead    =    -1L;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
177	[BUG]  [BUGGY]  int  totalRead  =  -numToRead;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =  -numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  -numToRead;	  int    totalRead    =    -1L;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
178	[BUG]  [BUGGY]  byte  totalRead  =  -1;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte  totalRead  =  -1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte  totalRead  =  -1;	  int    totalRead    =    -1L;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
179	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >=  0)?  buf.length  :  numToRead;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >=  0)?  buf.length  :  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >=  0)?  buf.length  :  numToRead;	  int    totalRead    =(buf.length    >=    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
180	[BUG]  [BUGGY]  int  totalRead  =(numToRead  [Delete]  0)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  [Delete]  0)?  0  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  [Delete]  0)?  0  :  buf.length;	  int    totalRead    =(buf.length    >=    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
181	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  1)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  1)?  -1  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  1)?  -1  :  0;	  int    totalRead    =(numToRead    <    1)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
182	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >=  1)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >=  1)?  -1  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >=  1)?  -1  :  0;	  int    totalRead    =(numToRead    <    1)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
183	[BUG]  [BUGGY]  int  totalRead  =(buf.length  ==  0)?  0  :  numToRead  -  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf.length  ==  0)?  0  :  numToRead  -  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf.length  ==  0)?  0  :  numToRead  -  1;	  int    totalRead    =(numToRead    ==    0)?    0    :    buf.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
184	[BUG]  [BUGGY]  int  totalRead  =(buf.length  ==  0)?  0  :  buf.length  -  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf.length  ==  0)?  0  :  buf.length  -  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf.length  ==  0)?  0  :  buf.length  -  1;	  int    totalRead    =(numToRead    ==    0)?    0    :    buf.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
185	[BUG]  [BUGGY]  int  totalRead  =(buf  ==  0)?  0  :  buf.length  -  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf  ==  0)?  0  :  buf.length  -  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf  ==  0)?  0  :  buf.length  -  1;	  int    totalRead    =(numToRead    ==    0)?    0    :    buf.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
186	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  1  :  buf.length  -  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  0)?  1  :  buf.length  -  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  1  :  buf.length  -  1;	  int    totalRead    =(numToRead    ==    0)?    0    :    buf.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
187	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >=  0)?  0  :  buf.length  -  1;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >=  0)?  0  :  buf.length  -  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >=  0)?  0  :  buf.length  -  1;	  int    totalRead    =(numToRead    ==    0)?    0    :    buf.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
188	[BUG]  [BUGGY]  Integer  entrySize  =  readNow(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  Integer  entrySize  =  readNow(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	Integer  entrySize  =  readNow(buf,  offset,  numToRead,  hasHitEOF);	  Integer    entrySize    =    readNow(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
189	[BUG]  [BUGGY]  Integer  entrySize  =  readNow(buf,  offset,  numToRead,  length);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  Integer  entrySize  =  readNow(buf,  offset,  numToRead,  length);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	Integer  entrySize  =  readNow(buf,  offset,  numToRead,  length);	  Integer    entrySize    =    readNow(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
190	[BUG]  [BUGGY]  Integer  entrySize  =  readNow(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  Integer  entrySize  =  readNow(buf,  offset,  numToRead,  len);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	Integer  entrySize  =  readNow(buf,  offset,  numToRead,  len);	  Integer    entrySize    =    readNow(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
191	[BUG]  [BUGGY]  Integer  entrySize  =  readNow(buf,  offset,  numToRead,  false);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  Integer  entrySize  =  readNow(buf,  offset,  numToRead,  false);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	Integer  entrySize  =  readNow(buf,  offset,  numToRead,  false);	  Integer    entrySize    =    readNow(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
192	[BUG]  [BUGGY]  Integer  entrySize  =  readNow(buf,  offset,  numToRead,  true);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  Integer  entrySize  =  readNow(buf,  offset,  numToRead,  true);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	Integer  entrySize  =  readNow(buf,  offset,  numToRead,  true);	  Integer    entrySize    =    readNow(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
193	[BUG]  [BUGGY]  Integer  entrySize  =  readNow(buf,  offset,  numToRead,  isEnabled);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  Integer  entrySize  =  readNow(buf,  offset,  numToRead,  isEnabled);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	Integer  entrySize  =  readNow(buf,  offset,  numToRead,  isEnabled);	  Integer    entrySize    =    readNow(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
194	[BUG]  [BUGGY]  Integer  entrySize  =  readNow(buf,  offset,  numToRead,  isHitEOF);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  Integer  entrySize  =  readNow(buf,  offset,  numToRead,  isHitEOF);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	Integer  entrySize  =  readNow(buf,  offset,  numToRead,  isHitEOF);	  Integer    entrySize    =    readNow(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
195	[BUG]  [BUGGY]  int  totalRead  =(buf.length  <  0)?  0  :  numToRead  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf.length  <  0)?  0  :  numToRead  +  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf.length  <  0)?  0  :  numToRead  +  1;	  int    totalRead    =(numToRead    <    0)?    0    :    buf.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
196	[BUG]  [BUGGY]  int  totalRead  =(buf  <  0)?  0  :  numToRead  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf  <  0)?  0  :  numToRead  +  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf  <  0)?  0  :  numToRead  +  1;	  int    totalRead    =(numToRead    <    0)?    0    :    buf.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
197	[BUG]  [BUGGY]  int  totalRead  =(buf.length  <  0)?  0  :  buf.length  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf.length  <  0)?  0  :  buf.length  +  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf.length  <  0)?  0  :  buf.length  +  1;	  int    totalRead    =(numToRead    <    0)?    0    :    buf.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
198	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >=  0)?  0  :  buf.length  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >=  0)?  0  :  buf.length  +  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >=  0)?  0  :  buf.length  +  1;	  int    totalRead    =(numToRead    <    0)?    0    :    buf.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
199	[BUG]  [BUGGY]  int  totalRead  =  0x7F  &  numToRead;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =  0x7F  &  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  0x7F  &  numToRead;	  int    totalRead    =    0x7F;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
200	[BUG]  [BUGGY]  int  totalRead  =  0x7F  *  numToRead;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =  0x7F  *  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  0x7F  *  numToRead;	  int    totalRead    =    0x7F;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
201	[BUG]  [BUGGY]  int  totalRead  =  0x7F  |  offset  +  numToRead;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =  0x7F  |  offset  +  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  0x7F  |  offset  +  numToRead;	  int    totalRead    =    0x7F;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
202	[BUG]  [BUGGY]  int  totalRead  =  0x7F  |  numToRead;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =  0x7F  |  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  0x7F  |  numToRead;	  int    totalRead    =    0x7F;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
203	[BUG]  [BUGGY]  int  totalRead  =  0x7F  |  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =  0x7F  |  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  0x7F  |  1;	  int    totalRead    =    0x7F;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
204	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0L  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0L  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  0L  :  0;	  int    totalRead    =(numToRead    >    0)?    0L    :    0;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
205	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >  0)?  0x7F  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >  0)?  0x7F  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >  0)?  0x7F  :  0;	  int    totalRead    =(numToRead    >    0)?    0L    :    0;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
206	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >  0)?  0B  :  0;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >  0)?  0B  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >  0)?  0B  :  0;	  int    totalRead    =(numToRead    >    0)?    0L    :    0;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
207	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >  0)?  0xff  :  0;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >  0)?  0xff  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >  0)?  0xff  :  0;	  int    totalRead    =(numToRead    >    0)?    0L    :    0;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
208	[BUG]  [BUGGY]  int  totalRead  =(buff.length  <  1)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buff.length  <  1)?  0  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buff.length  <  1)?  0  :  buf.length;	  int    totalRead    =(buff.length    <    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
209	[BUG]  [BUGGY]  int  totalRead  =(buf.length  <  1)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf.length  <  1)?  0  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf.length  <  1)?  0  :  buf.length;	  int    totalRead    =(buff.length    <    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
210	[BUG]  [BUGGY]  int  totalRead  =(buff.length  <  3)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buff.length  <  3)?  0  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buff.length  <  3)?  0  :  buf.length;	  int    totalRead    =(buff.length    <    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
211	[BUG]  [BUGGY]  int  entrySize  =  getEntry(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntry(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  getEntry(buf,  offset,  numToRead,  hasHitEOF);	  int    entrySize    =    getEntry(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
212	[BUG]  [BUGGY]  int  entrySize  =  getEntry(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntry(buf,  offset,  numToRead,  len);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  getEntry(buf,  offset,  numToRead,  len);	  int    entrySize    =    getEntry(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
213	[BUG]  [BUGGY]  int  entrySize  =  getEntry(buf,  offset,  numToRead,  length);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntry(buf,  offset,  numToRead,  length);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  getEntry(buf,  offset,  numToRead,  length);	  int    entrySize    =    getEntry(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
214	[BUG]  [BUGGY]  int  entrySize  =  getEntry(buf,  offset,  numToRead,  isHitEOF);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntry(buf,  offset,  numToRead,  isHitEOF);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  getEntry(buf,  offset,  numToRead,  isHitEOF);	  int    entrySize    =    getEntry(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
215	[BUG]  [BUGGY]  int  entrySize  =  getEntry(buf,  offset,  numToRead,  isEnabled);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntry(buf,  offset,  numToRead,  isEnabled);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  getEntry(buf,  offset,  numToRead,  isEnabled);	  int    entrySize    =    getEntry(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
216	[BUG]  [BUGGY]  int  entrySize  =  getEntry(buf,  offset,  numToRead,  false);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntry(buf,  offset,  numToRead,  false);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  getEntry(buf,  offset,  numToRead,  false);	  int    entrySize    =    getEntry(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
217	[BUG]  [BUGGY]  int  entrySize  =  getEntry(buf,  offset,  numToRead,  null);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntry(buf,  offset,  numToRead,  null);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  getEntry(buf,  offset,  numToRead,  null);	  int    entrySize    =    getEntry(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
218	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  0  :  buf;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  0)?  0  :  buf;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  0  :  buf;	  int    totalRead    =(buf    <    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
219	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  buf.length  :  numToRead;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  0)?  buf.length  :  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  buf.length  :  numToRead;	  int    totalRead    =(buf    <    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
220	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  0  :  buf[offset];  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  0)?  0  :  buf[offset];  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  0  :  buf[offset];	  int    totalRead    =(buf    <    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
221	[BUG]  [BUGGY]  int  totalRead  =(numToRead!=  0)?  0  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead!=  0)?  0  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead!=  0)?  0  :  0;	  int    totalRead    =(numToRead    >    0)?    0    :    0;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
222	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  >  0)?  0  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  >  0)?  0  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  >  0)?  0  :  0;	  int    totalRead    =(numToRead    >    0)?    0    :    0;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
223	[BUG]  [BUGGY]  byte  totalRead  =(byte)Math.floor(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte  totalRead  =(byte)Math.floor(buf,  offset,  0);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte  totalRead  =(byte)Math.floor(buf,  offset,  0);	  int    totalRead    =(int)Math.floor(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
224	[BUG]  [BUGGY]  int  totalRead  =(int)Math.ceil(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.ceil(buf,  offset,  0);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.ceil(buf,  offset,  0);	  int    totalRead    =(int)Math.floor(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
225	[BUG]  [BUGGY]  int  hasHitEOF  =  encoding.hasHitEOF(buf,  offset,  numToRead,  false);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  encoding.hasHitEOF(buf,  offset,  numToRead,  false);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  hasHitEOF  =  encoding.hasHitEOF(buf,  offset,  numToRead,  false);	  int    hasHitEOF    =    encoding.hasHitEOF(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
226	[BUG]  [BUGGY]  int  hasHitEOF  =  encoding.hasHitEOF(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  encoding.hasHitEOF(buf,  offset,  numToRead,  len);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  hasHitEOF  =  encoding.hasHitEOF(buf,  offset,  numToRead,  len);	  int    hasHitEOF    =    encoding.hasHitEOF(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
227	[BUG]  [BUGGY]  int  hasHitEOF  =  encoding.hasHitEOF(buf,  offset,  numToRead,  true);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  encoding.hasHitEOF(buf,  offset,  numToRead,  true);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  hasHitEOF  =  encoding.hasHitEOF(buf,  offset,  numToRead,  true);	  int    hasHitEOF    =    encoding.hasHitEOF(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
228	[BUG]  [BUGGY]  int  hasHitEOF  =  encoding.hasHitEOF(buf,  offset,  numToRead,  null);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  encoding.hasHitEOF(buf,  offset,  numToRead,  null);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  hasHitEOF  =  encoding.hasHitEOF(buf,  offset,  numToRead,  null);	  int    hasHitEOF    =    encoding.hasHitEOF(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
229	[BUG]  [BUGGY]  int  hasHitEOF  =  encoding.hasHitEOF(buf,  offset,  numToRead,  0);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  encoding.hasHitEOF(buf,  offset,  numToRead,  0);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  hasHitEOF  =  encoding.hasHitEOF(buf,  offset,  numToRead,  0);	  int    hasHitEOF    =    encoding.hasHitEOF(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
230	[BUG]  [BUGGY]  int  hasHitEOF  =  encoding.hashEOF(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  encoding.hashEOF(buf,  offset,  numToRead);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  hasHitEOF  =  encoding.hashEOF(buf,  offset,  numToRead);	  int    hasHitEOF    =    encoding.hasHitEOF(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
231	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0L  :  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0L  :  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  0L  :  1;	  int    totalRead    =(numToRead    >=    0)?    0L    :    0;    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
232	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >>  0)?  0L  :  0;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >>  0)?  0L  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >>  0)?  0L  :  0;	  int    totalRead    =(numToRead    >=    0)?    0L    :    0;    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
233	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >=  0)?  0L  :  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >=  0)?  0L  :  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >=  0)?  0L  :  1;	  int    totalRead    =(numToRead    >=    0)?    0L    :    0;    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
234	[BUG]  [BUGGY]  int  totalRead  =(buf.length  <  1)?  0  :  numToRead;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf.length  <  1)?  0  :  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf.length  <  1)?  0  :  numToRead;	  int    totalRead    =(buf.length    <    0)?    0    :    offset;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
235	[BUG]  [BUGGY]  int  totalRead  =(buf.length  <  3)?  0  :  numToRead;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf.length  <  3)?  0  :  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf.length  <  3)?  0  :  numToRead;	  int    totalRead    =(buf.length    <    0)?    0    :    offset;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
236	[BUG]  [BUGGY]  int  totalRead  =(offset  <  0)?  buf.length  :  0;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(offset  <  0)?  buf.length  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(offset  <  0)?  buf.length  :  0;	  int    totalRead    =(buf.length    <    0)?    0    :    offset;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
237	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >>  0)?  0  :  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >>  0)?  0  :  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >>  0)?  0  :  1;	  int    totalRead    =(numToRead    >=    0)?    0    :    1;    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
238	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >=  0)?  1  :  -1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >=  0)?  1  :  -1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >=  0)?  1  :  -1;	  int    totalRead    =(numToRead    <    0)?    1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
239	[BUG]  [BUGGY]  int  totalRead  =(numToRead!=  0)?  1  :  -1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead!=  0)?  1  :  -1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead!=  0)?  1  :  -1;	  int    totalRead    =(numToRead    <    0)?    1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
240	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >  0)?  1  :  -1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >  0)?  1  :  -1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >  0)?  1  :  -1;	  int    totalRead    =(numToRead    <    0)?    1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
241	[BUG]  [BUGGY]  int  totalRead  =(buf  <  0)?  1  :  -1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf  <  0)?  1  :  -1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf  <  0)?  1  :  -1;	  int    totalRead    =(numToRead    <    0)?    1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
242	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >>  0)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >>  0)?  1  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >>  0)?  1  :  0;	  int    totalRead    =(numToRead!=    0)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
243	[BUG]  [BUGGY]  int  totalRead  =(offset  <  0)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(offset  <  0)?  1  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(offset  <  0)?  1  :  0;	  int    totalRead    =(buf    <    0)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
244	[BUG]  [BUGGY]  int  totalRead  =(recordSize  <  0)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(recordSize  <  0)?  1  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(recordSize  <  0)?  1  :  0;	  int    totalRead    =(buf    <    0)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
245	[BUG]  [BUGGY]  int  totalRead  =(buf  >=  0)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf  >=  0)?  1  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf  >=  0)?  1  :  0;	  int    totalRead    =(buf    <    0)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
246	[BUG]  [BUGGY]  int  totalRead  =(buf!=  0)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf!=  0)?  1  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf!=  0)?  1  :  0;	  int    totalRead    =(buf    <    0)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
247	[BUG]  [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  numRecords);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  numRecords);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  numRecords);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
248	[BUG]  [BUGGY]  byte  totalRead  =(byte)Math.floor(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte  totalRead  =(byte)Math.floor(buf,  offset,  numToRead,  len);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte  totalRead  =(byte)Math.floor(buf,  offset,  numToRead,  len);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
249	[BUG]  [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  0,  len);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  0,  len);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  0,  len);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
250	[BUG]  [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  ch);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  ch);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  ch);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
251	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  0L  :  buf.length;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  0)?  0L  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  0L  :  buf.length;	  int    totalRead    =(numToRead    <    0)?    0L    :    0;    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
252	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  0x7F  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  0)?  0x7F  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  0x7F  :  0;	  int    totalRead    =(numToRead    <    0)?    0L    :    0;    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
253	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  0B  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  0)?  0B  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  0B  :  0;	  int    totalRead    =(numToRead    <    0)?    0L    :    0;    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
254	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  >  0)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  >  0)?  0  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  >  0)?  0  :  buf.length;	  int    totalRead    =(numToRead    >    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
255	[BUG]  [BUGGY]  int  totalRead  =(buf.length  >  0)?  0  :  numToRead;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf.length  >  0)?  0  :  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf.length  >  0)?  0  :  numToRead;	  int    totalRead    =(numToRead    >    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
256	[BUG]  [BUGGY]  int  totalRead  =(buf.length  >>  0)?  0  :  numToRead;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf.length  >>  0)?  0  :  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf.length  >>  0)?  0  :  numToRead;	  int    totalRead    =(numToRead    >>    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
257	[BUG]  [BUGGY]  Integer  entrySize  =  getEntrySize(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  Integer  entrySize  =  getEntrySize(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	Integer  entrySize  =  getEntrySize(buf,  offset,  numToRead,  hasHitEOF);	  Integer    entrySize    =    getEntrySize(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
258	[BUG]  [BUGGY]  Integer  entrySize  =  getEntrySize(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  Integer  entrySize  =  getEntrySize(buf,  offset,  numToRead,  len);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	Integer  entrySize  =  getEntrySize(buf,  offset,  numToRead,  len);	  Integer    entrySize    =    getEntrySize(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
259	[BUG]  [BUGGY]  Integer  entrySize  =  getEntrySize(buf,  offset,  numToRead,  length);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  Integer  entrySize  =  getEntrySize(buf,  offset,  numToRead,  length);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	Integer  entrySize  =  getEntrySize(buf,  offset,  numToRead,  length);	  Integer    entrySize    =    getEntrySize(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
260	[BUG]  [BUGGY]  Integer  entrySize  =  getEntrySize(buf,  offset,  numToRead,  isEnabled);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  Integer  entrySize  =  getEntrySize(buf,  offset,  numToRead,  isEnabled);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	Integer  entrySize  =  getEntrySize(buf,  offset,  numToRead,  isEnabled);	  Integer    entrySize    =    getEntrySize(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
261	[BUG]  [BUGGY]  Integer  entrySize  =  getEntrySize(buf,  offset,  numToRead,  isHitEOF);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  Integer  entrySize  =  getEntrySize(buf,  offset,  numToRead,  isHitEOF);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	Integer  entrySize  =  getEntrySize(buf,  offset,  numToRead,  isHitEOF);	  Integer    entrySize    =    getEntrySize(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
262	[BUG]  [BUGGY]  Integer  entrySize  =  getEntrySize(buf,  offset,  numToRead,  false);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  Integer  entrySize  =  getEntrySize(buf,  offset,  numToRead,  false);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	Integer  entrySize  =  getEntrySize(buf,  offset,  numToRead,  false);	  Integer    entrySize    =    getEntrySize(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
263	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  1)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  1)?  0  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  1)?  0  :  buf.length;	  int    totalRead    =(numToRead    <    1)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
264	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  1)?  0  :  numToRead;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  1)?  0  :  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  1)?  0  :  numToRead;	  int    totalRead    =(numToRead    <    1)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
265	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >=  1)?  0  :  numToRead;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >=  1)?  0  :  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >=  1)?  0  :  numToRead;	  int    totalRead    =(numToRead    <    1)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
266	[BUG]  [BUGGY]  int  entrySize  =  readNow(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  readNow(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  readNow(buf,  offset,  numToRead,  hasHitEOF);	  int    entrySize    =    readNow(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
267	[BUG]  [BUGGY]  int  entrySize  =  readNow(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  readNow(buf,  offset,  numToRead,  len);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  readNow(buf,  offset,  numToRead,  len);	  int    entrySize    =    readNow(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
268	[BUG]  [BUGGY]  int  entrySize  =  readNow(buf,  offset,  numToRead,  length);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  readNow(buf,  offset,  numToRead,  length);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  readNow(buf,  offset,  numToRead,  length);	  int    entrySize    =    readNow(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
269	[BUG]  [BUGGY]  int  entrySize  =  readNow(buf,  offset,  numToRead,  false);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  readNow(buf,  offset,  numToRead,  false);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  readNow(buf,  offset,  numToRead,  false);	  int    entrySize    =    readNow(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
270	[BUG]  [BUGGY]  int  entrySize  =  readNow(buf,  offset,  numToRead,  isEnabled);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  readNow(buf,  offset,  numToRead,  isEnabled);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  readNow(buf,  offset,  numToRead,  isEnabled);	  int    entrySize    =    readNow(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
271	[BUG]  [BUGGY]  int  entrySize  =  readNow(buf,  offset,  numToRead,  isHitEOF);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  readNow(buf,  offset,  numToRead,  isHitEOF);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  readNow(buf,  offset,  numToRead,  isHitEOF);	  int    entrySize    =    readNow(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
272	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  -1)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  -1)?  -1  :  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  -1)?  -1  :  1;	  int    totalRead    =(numToRead    ==    -1)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
273	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  -1)?  0  :  -1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  -1)?  0  :  -1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  -1)?  0  :  -1;	  int    totalRead    =(numToRead    ==    -1)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
274	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  -1)?  1  :  -1;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  -1)?  1  :  -1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  -1)?  1  :  -1;	  int    totalRead    =(numToRead    ==    -1)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
275	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >  1)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >  1)?  1  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >  1)?  1  :  0;	  int    totalRead    =(numToRead    >    0)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
276	[BUG]  [BUGGY]  int  totalRead  =(buf.length  >  0)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf.length  >  0)?  0  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf.length  >  0)?  0  :  buf.length;	  int    totalRead    =(buf.length    >=    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
277	[BUG]  [BUGGY]  int  totalRead  =(buf.length  >>  0)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf.length  >>  0)?  0  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf.length  >>  0)?  0  :  buf.length;	  int    totalRead    =(buf.length    >=    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
278	[BUG]  [BUGGY]  int  totalRead  =(buf.length  +  numToRead)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf.length  +  numToRead)?  0  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf.length  +  numToRead)?  0  :  buf.length;	  int    totalRead    =(buf.length    >=    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
279	[BUG]  [BUGGY]  int  totalRead  =(buf.length!=  0)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf.length!=  0)?  0  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf.length!=  0)?  0  :  buf.length;	  int    totalRead    =(buf.length    >=    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
280	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  buf.length  :  numToRead;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  0)?  buf.length  :  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  buf.length  :  numToRead;	  int    totalRead    =(buf.length    ==    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
281	[BUG]  [BUGGY]  byte  totalRead  =(numToRead  ==  0)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte  totalRead  =(numToRead  ==  0)?  0  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte  totalRead  =(numToRead  ==  0)?  0  :  buf.length;	  int    totalRead    =(buf.length    ==    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
282	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >  0)?  0L  :  0L;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >  0)?  0L  :  0L;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >  0)?  0L  :  0L;	  int    totalRead    =(numToRead    >=    0)?    0L    :    0L;    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
283	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >>  0)?  0L  :  0L;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >>  0)?  0L  :  0L;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >>  0)?  0L  :  0L;	  int    totalRead    =(numToRead    >=    0)?    0L    :    0L;    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
284	[BUG]  [BUGGY]  int  totalRead  =(buf.length  {  0)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf.length  {  0)?  0  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf.length  {  0)?  0  :  buf.length;	  int    totalRead    =(buf.length    ==    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
285	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  >  1)?  0  :  numToRead;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  >  1)?  0  :  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  >  1)?  0  :  numToRead;	  int    totalRead    =(numToRead    <    >    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
286	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  <  0)?  0  :  numToRead;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  <  0)?  0  :  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  <  0)?  0  :  numToRead;	  int    totalRead    =(numToRead    <    >    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
287	[BUG]  [BUGGY]  int  entrySize  =  getEntrySize(buf);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntrySize(buf);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  getEntrySize(buf);	  int    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
288	[BUG]  [BUGGY]  int  entrySize  =  getEntrySize()  -  offset;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntrySize()  -  offset;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  getEntrySize()  -  offset;	  int    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
289	[BUG]  [BUGGY]  int  entrySize  =  getEntrySize()  +  numToRead;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntrySize()  +  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  getEntrySize()  +  numToRead;	  int    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
290	[BUG]  [BUGGY]  int  entrySize  =  getEntrySize(buf,  numToRead);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntrySize(buf,  numToRead);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  getEntrySize(buf,  numToRead);	  int    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
291	[BUG]  [BUGGY]  int  entrySize  =  getEntrySize()  +  1;  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntrySize()  +  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  getEntrySize()  +  1;	  int    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
292	[BUG]  [BUGGY]  Integer  totalRead  =  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  Integer  totalRead  =  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	Integer  totalRead  =  1;	  Integer    totalRead    =    0;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
293	[BUG]  [BUGGY]  Integer  totalRead  =  0x7F;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  Integer  totalRead  =  0x7F;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	Integer  totalRead  =  0x7F;	  Integer    totalRead    =    0;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
294	[BUG]  [BUGGY]  Integer  totalRead  =  -1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  Integer  totalRead  =  -1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	Integer  totalRead  =  -1;	  Integer    totalRead    =    0;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
295	[BUG]  [BUGGY]  Integer  totalRead  =  0B;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  Integer  totalRead  =  0B;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	Integer  totalRead  =  0B;	  Integer    totalRead    =    0;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
296	[BUG]  [BUGGY]  int  totalRead  =(buf  ==  null)?  0  :  buf.length  *  numToRead;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf  ==  null)?  0  :  buf.length  *  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf  ==  null)?  0  :  buf.length  *  numToRead;	  int    totalRead    =(buf    ==    null)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
297	[BUG]  [BUGGY]  int  totalRead  =(buf  ==  null)?  0  :  buf.length,  numToRead;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf  ==  null)?  0  :  buf.length,  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf  ==  null)?  0  :  buf.length,  numToRead;	  int    totalRead    =(buf    ==    null)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
298	[BUG]  [BUGGY]  int  totalRead  =  0xff  &  numToRead;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =  0xff  &  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  0xff  &  numToRead;	  int    totalRead    =    0xff;    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
299	[BUG]  [BUGGY]  byte  totalRead  =  0xff;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte  totalRead  =  0xff;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte  totalRead  =  0xff;	  int    totalRead    =    0xff;    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
300	[BUG]  [BUGGY]  int  totalRead  =  0xff  |  numToRead;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =  0xff  |  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  0xff  |  numToRead;	  int    totalRead    =    0xff;    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
301	[BUG]  [BUGGY]  int  totalRead  =(buf  <  0)?  -1  :  numToRead;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf  <  0)?  -1  :  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf  <  0)?  -1  :  numToRead;	  int    totalRead    =(numToRead    <    0)?    -1    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
302	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  -1  :  buf.length  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  0)?  -1  :  buf.length  +  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  -1  :  buf.length  +  1;	  int    totalRead    =(numToRead    <    0)?    -1    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
303	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >=  0)?  -1  :  buf.length;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >=  0)?  -1  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >=  0)?  -1  :  buf.length;	  int    totalRead    =(numToRead    <    0)?    -1    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
304	[BUG]  [BUGGY]  int  totalRead  =(buf.length  <  0)?  -1  :  numToRead;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf.length  <  0)?  -1  :  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf.length  <  0)?  -1  :  numToRead;	  int    totalRead    =(numToRead    <    0)?    -1    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
305	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  1)?  -1  :  buf.length;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  1)?  -1  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  1)?  -1  :  buf.length;	  int    totalRead    =(numToRead    <    0)?    -1    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
306	[BUG]  [BUGGY]  byte  totalRead  =(numToRead  <  0)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte  totalRead  =(numToRead  <  0)?  0  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte  totalRead  =(numToRead  <  0)?  0  :  buf.length;	  int    totalRead    =(buf.length    <    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
307	[BUG]  [BUGGY]  byte  totalRead  =  0;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte  totalRead  =  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte  totalRead  =  0;	  byte    totalRead    =    0L;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
308	[BUG]  [BUGGY]  byte  totalRead  =  0x7F;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte  totalRead  =  0x7F;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte  totalRead  =  0x7F;	  byte    totalRead    =    0L;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
309	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  1)?  0  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  1)?  0  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  1)?  0  :  0;	  int    totalRead    =(numToRead    <    1)?    0    :    0;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
310	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >=  1)?  0  :  0;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >=  1)?  0  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >=  1)?  0  :  0;	  int    totalRead    =(numToRead    <    1)?    0    :    0;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
311	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >  1)?  0  :  0;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >  1)?  0  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >  1)?  0  :  0;	  int    totalRead    =(numToRead    <    1)?    0    :    0;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
312	[BUG]  [BUGGY]  byte  totalRead  =(byte)Math.floor(buf,  offset,  numToRead,  isHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte  totalRead  =(byte)Math.floor(buf,  offset,  numToRead,  isHitEOF);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte  totalRead  =(byte)Math.floor(buf,  offset,  numToRead,  isHitEOF);	  byte    totalRead    =(byte)Math.floor(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
313	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  Buf.separator;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  Buf.separator;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  0  :  Buf.separator;	  int    totalRead    =(buf    ==    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
314	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  -1  :  buf.length  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  0)?  -1  :  buf.length  +  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  -1  :  buf.length  +  1;	  int    totalRead    =(numToRead    ==    0)?    -1    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
315	[BUG]  [BUGGY]  int  totalRead  =(buf  ==  0)?  -1  :  numToRead;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf  ==  0)?  -1  :  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf  ==  0)?  -1  :  numToRead;	  int    totalRead    =(numToRead    ==    0)?    -1    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
316	[BUG]  [BUGGY]  int  totalRead  =(buf.length  ==  0)?  -1  :  numToRead;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf.length  ==  0)?  -1  :  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf.length  ==  0)?  -1  :  numToRead;	  int    totalRead    =(numToRead    ==    0)?    -1    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
317	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  -1  :  buf.length  -  1;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  0)?  -1  :  buf.length  -  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  -1  :  buf.length  -  1;	  int    totalRead    =(numToRead    ==    0)?    -1    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
318	[BUG]  [BUGGY]  int  totalRead  =(buf!=  0)?  -1  :  numToRead;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf!=  0)?  -1  :  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf!=  0)?  -1  :  numToRead;	  int    totalRead    =(numToRead    ==    0)?    -1    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
319	[BUG]  [BUGGY]  int  totalRead  =(buf.length  <  3)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf.length  <  3)?  0  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf.length  <  3)?  0  :  buf.length;	  int    totalRead    =(buf.length    <    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
320	[BUG]  [BUGGY]  int  totalRead  =(buf.length  <  2)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf.length  <  2)?  0  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf.length  <  2)?  0  :  buf.length;	  int    totalRead    =(buf.length    <    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
321	[BUG]  [BUGGY]  int  totalRead  =(buf.length  <  6)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf.length  <  6)?  0  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf.length  <  6)?  0  :  buf.length;	  int    totalRead    =(buf.length    <    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
322	[BUG]  [BUGGY]  Integer  totalRead  =(offset  <  0)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  Integer  totalRead  =(offset  <  0)?  0  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	Integer  totalRead  =(offset  <  0)?  0  :  buf.length;	  int    totalRead    =(buf    <    0)?    0    :    offset.length;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
323	[BUG]  [BUGGY]  char  totalRead  =(offset  <  0)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  char  totalRead  =(offset  <  0)?  0  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	char  totalRead  =(offset  <  0)?  0  :  buf.length;	  int    totalRead    =(buf    <    0)?    0    :    offset.length;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
324	[BUG]  [BUGGY]  int  totalRead  =(int)Math.log(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.log(buf,  offset,  0);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.log(buf,  offset,  0);	  int    totalRead    =(int)Math.floor(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
325	[BUG]  [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead  +  1);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead  +  1);	  byte[]    currEntry    =    getCurrentEntry(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
326	[BUG]  [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  offset,  0);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte[]  currEntry  =  getCurrentEntry(buf,  offset,  0);	  byte[]    currEntry    =    getCurrentEntry(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
327	[BUG]  [BUGGY]  Integer  entrySize  =  readNow(buf,  offset,  numToRead,  buffer.length);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  Integer  entrySize  =  readNow(buf,  offset,  numToRead,  buffer.length);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	Integer  entrySize  =  readNow(buf,  offset,  numToRead,  buffer.length);	  Integer    entrySize    =    readNow(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
328	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >  1)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >  1)?  -1  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >  1)?  -1  :  0;	  int    totalRead    =(numToRead    <    1)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
329	[BUG]  [BUGGY]  int  totalRead  =(buf!=  null)?  0  :  buf.length  +  offset;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf!=  null)?  0  :  buf.length  +  offset;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf!=  null)?  0  :  buf.length  +  offset;	  int    totalRead    =(buf!=    null)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
330	[BUG]  [BUGGY]  int  entrySize  =  getEntry(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntry(buf,  offset,  numToRead  +  1);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  getEntry(buf,  offset,  numToRead  +  1);	  int    entrySize    =    getEntry(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
331	[BUG]  [BUGGY]  int  entrySize  =  getEntry(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntry(buf,  offset,  0);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  getEntry(buf,  offset,  0);	  int    entrySize    =    getEntry(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
332	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >  1)?  0  :  numToRead;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >  1)?  0  :  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >  1)?  0  :  numToRead;	  int    totalRead    =(numToRead    <    1)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
333	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >  0)?  0L  :  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >  0)?  0L  :  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >  0)?  0L  :  1;	  int    totalRead    =(numToRead    >    0)?    0L    :    0;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
334	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >  0)?  0  :  -1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >  0)?  0  :  -1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >  0)?  0  :  -1;	  int    totalRead    =(numToRead    ==    0)?    0    :    -1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
335	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  0  :  buf.length  -  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  0)?  0  :  buf.length  -  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  0  :  buf.length  -  1;	  int    totalRead    =(numToRead    ==    0)?    0    :    buf.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
336	[BUG]  [BUGGY]  int  totalRead  =(buf!=  0)?  0  :  buf.length  -  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf!=  0)?  0  :  buf.length  -  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf!=  0)?  0  :  buf.length  -  1;	  int    totalRead    =(numToRead    ==    0)?    0    :    buf.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
337	[BUG]  [BUGGY]  int  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);	  int    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
338	[BUG]  [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  buffer.length);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  buffer.length);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  buffer.length);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead,    length);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
339	[BUG]  [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  this.length);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  this.length);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  this.length);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead,    length);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
340	[BUG]  [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  2);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  2);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  2);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead,    length);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
341	[BUG]  [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  size);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  size);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  size);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead,    length);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
342	[BUG]  [BUGGY]  int  totalRead  =(offset  ==  0)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(offset  ==  0)?  1  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(offset  ==  0)?  1  :  0;	  int    totalRead    =(numToRead    ==    0)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
343	[BUG]  [BUGGY]  int  entrySize  =  getEntrySize(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntrySize(buf,  offset,  numToRead  +  1);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  getEntrySize(buf,  offset,  numToRead  +  1);	  int    entrySize    =    getEntrySize(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
344	[BUG]  [BUGGY]  int  entrySize  =  getEntrySize(buf,  offset,  numToRead,  null);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntrySize(buf,  offset,  numToRead,  null);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  getEntrySize(buf,  offset,  numToRead,  null);	  int    entrySize    =    getEntrySize(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
345	[BUG]  [BUGGY]  int  totalRead  =(buf  ==  0)?  0  :  buf.length  +  offset;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf  ==  0)?  0  :  buf.length  +  offset;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf  ==  0)?  0  :  buf.length  +  offset;	  int    totalRead    =(buf    ==    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
346	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  -1)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  -1)?  -1  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  -1)?  -1  :  0;	  int    totalRead    =(numToRead    ==    -1)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
347	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  -1)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  -1)?  1  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  -1)?  1  :  0;	  int    totalRead    =(numToRead    ==    -1)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
348	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >  0)?  0  :  buf.length  -  offset;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >  0)?  0  :  buf.length  -  offset;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >  0)?  0  :  buf.length  -  offset;	  int    totalRead    =(numToRead    ==    0)?    0    :    buf.length    -    offset;    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
349	[BUG]  [BUGGY]  Integer  entrySize  =  getEntrySize(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  Integer  entrySize  =  getEntrySize(buf,  offset,  numToRead  +  1);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	Integer  entrySize  =  getEntrySize(buf,  offset,  numToRead  +  1);	  Integer    entrySize    =    getEntrySize(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
350	[BUG]  [BUGGY]  Integer  entrySize  =  getEntrySize(buf,  offset,  numToRead,  null);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  Integer  entrySize  =  getEntrySize(buf,  offset,  numToRead,  null);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	Integer  entrySize  =  getEntrySize(buf,  offset,  numToRead,  null);	  Integer    entrySize    =    getEntrySize(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
351	[BUG]  [BUGGY]  int  totalRead  =  0x7F  +  offset;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =  0x7F  +  offset;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  0x7F  +  offset;	  int    totalRead    =    0x7F;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
352	[BUG]  [BUGGY]  int  totalRead  =  0x7F  |  offset;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =  0x7F  |  offset;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  0x7F  |  offset;	  int    totalRead    =    0x7F;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
353	[BUG]  [BUGGY]  int  totalRead  =  0x7F  |(offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =  0x7F  |(offset  +  numToRead);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  0x7F  |(offset  +  numToRead);	  int    totalRead    =    0x7F;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
354	[BUG]  [BUGGY]  int  totalRead  =  0x7F  -  offset;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =  0x7F  -  offset;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  0x7F  -  offset;	  int    totalRead    =    0x7F;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
355	[BUG]  [BUGGY]  byte[]  buf  =  currEntry.read(buf,  offset,  numToRead,  null);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte[]  buf  =  currEntry.read(buf,  offset,  numToRead,  null);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte[]  buf  =  currEntry.read(buf,  offset,  numToRead,  null);	  byte[]    buf    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
356	[BUG]  [BUGGY]  int  totalRead  =(int)Math.cos(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.cos(buf,  offset,  numToRead);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.cos(buf,  offset,  numToRead);	  int    totalRead    =(int)Math.log(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
357	[BUG]  [BUGGY]  int  totalRead  =  -offset;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =  -offset;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  -offset;	  int    totalRead    =    -1L;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
358	[BUG]  [BUGGY]  float  totalRead  =  -1L;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  float  totalRead  =  -1L;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	float  totalRead  =  -1L;	  int    totalRead    =    -1L;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
359	[BUG]  [BUGGY]  int  totalRead  =  -2;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =  -2;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  -2;	  int    totalRead    =    -1L;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
360	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  1  :  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  0)?  1  :  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  1  :  1;	  int    totalRead    =(numToRead    <    0)?    -1    :    1;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
361	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  0x7F  :  0L;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  0)?  0x7F  :  0L;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  0x7F  :  0L;	  int    totalRead    =(numToRead    <    0)?    0L    :    0L;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
362	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  0,  buf.length  :  numToRead;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  0)?  0,  buf.length  :  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  0,  buf.length  :  numToRead;	  int    totalRead    =(buf.length    <    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
363	[BUG]  [BUGGY]  Integer  totalRead  =(numToRead  <  0)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  Integer  totalRead  =(numToRead  <  0)?  0  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	Integer  totalRead  =(numToRead  <  0)?  0  :  buf.length;	  int    totalRead    =(buf.length    <    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
364	[BUG]  [BUGGY]  byte  totalRead  =  0B;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte  totalRead  =  0B;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte  totalRead  =  0B;	  byte    totalRead    =    0L;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
365	[BUG]  [BUGGY]  int  totalRead  =(buf  ==  0)?  -1  :  buf.length;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf  ==  0)?  -1  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf  ==  0)?  -1  :  buf.length;	  int    totalRead    =(numToRead    ==    0)?    -1    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
366	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  -1  :  buf.length  -  offset;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  0)?  -1  :  buf.length  -  offset;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  -1  :  buf.length  -  offset;	  int    totalRead    =(numToRead    ==    0)?    -1    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
367	[BUG]  [BUGGY]  int  totalRead  =(buf!=  0)?  -1  :  buf.length;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf!=  0)?  -1  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf!=  0)?  -1  :  buf.length;	  int    totalRead    =(numToRead    ==    0)?    -1    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
368	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >>  0)?  -1  :  -1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >>  0)?  -1  :  -1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >>  0)?  -1  :  -1;	  int    totalRead    =(numToRead    >    0)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
369	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  buf.length  *  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  buf.length  *  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  0  :  buf.length  *  1;	  int    totalRead    =(numToRead    ==    0)?    0    :    buf.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
370	[BUG]  [BUGGY]  int  totalRead  =(buf!=  0)?  0  :  buf.length  +  1;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf!=  0)?  0  :  buf.length  +  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf!=  0)?  0  :  buf.length  +  1;	  int    totalRead    =(numToRead    ==    0)?    0    :    buf.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
371	[BUG]  [BUGGY]  byte[]  buf  =  currEntry.getBytes(offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte[]  buf  =  currEntry.getBytes(offset,  numToRead  +  1);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte[]  buf  =  currEntry.getBytes(offset,  numToRead  +  1);	  byte[]    buf    =    currEntry.getBytes(offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
372	[BUG]  [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  shouldReset);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  shouldReset);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  shouldReset);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
373	[BUG]  [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  isEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  isEOF);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  isEOF);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
374	[BUG]  [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  false);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  false);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  false);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
375	[BUG]  [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  isRecorded);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  isRecorded);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  isRecorded);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
376	[BUG]  [BUGGY]  int  totalRead  =(buf.length  <  4)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf.length  <  4)?  0  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf.length  <  4)?  0  :  buf.length;	  int    totalRead    =(buf.length    <    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
377	[BUG]  [BUGGY]  int  totalRead  =(buf.length  <  0)?  0  :  buf.length  +  offset;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf.length  <  0)?  0  :  buf.length  +  offset;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf.length  <  0)?  0  :  buf.length  +  offset;	  int    totalRead    =(buf.length    <    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
378	[BUG]  [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  offset);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  offset);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte[]  currEntry  =  getCurrentEntry(buf,  offset);	  byte[]    currEntry    =    getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
379	[BUG]  [BUGGY]  byte[]  currEntry  =  getCurrentEntry(offset);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte[]  currEntry  =  getCurrentEntry(offset);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte[]  currEntry  =  getCurrentEntry(offset);	  byte[]    currEntry    =    getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
380	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >  0)?  -1  :  numToRead;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >  0)?  -1  :  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >  0)?  -1  :  numToRead;	  int    totalRead    =(numToRead    <    0)?    -1    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
381	[BUG]  [BUGGY]  int  totalRead  =(numToRead!=  0)?  -1  :  numToRead;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead!=  0)?  -1  :  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead!=  0)?  -1  :  numToRead;	  int    totalRead    =(numToRead    <    0)?    -1    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
382	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  -1  :  buf;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  0)?  -1  :  buf;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  -1  :  buf;	  int    totalRead    =(numToRead    <    0)?    -1    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
383	[BUG]  [BUGGY]  int  totalRead  =  0xff  +  offset;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =  0xff  +  offset;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  0xff  +  offset;	  int    totalRead    =    0xff;    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
384	[BUG]  [BUGGY]  int  totalRead  =  0xff  -  offset;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =  0xff  -  offset;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  0xff  -  offset;	  int    totalRead    =    0xff;    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
385	[BUG]  [BUGGY]  int  totalRead  =  0xff  &(offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =  0xff  &(offset  +  numToRead);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  0xff  &(offset  +  numToRead);	  int    totalRead    =    0xff;    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
386	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  0  :  Buf.toIntByteArray(buf);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  0)?  0  :  Buf.toIntByteArray(buf);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  0  :  Buf.toIntByteArray(buf);	  int    totalRead    =(buf    <    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
387	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  0  :  Buf.separator;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  0)?  0  :  Buf.separator;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  0  :  Buf.separator;	  int    totalRead    =(buf    <    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
388	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  0  :  Buf.toByteArray(buf);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  0)?  0  :  Buf.toByteArray(buf);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  0  :  Buf.toByteArray(buf);	  int    totalRead    =(buf    <    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
389	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  1)?  0  :  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  1)?  0  :  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  1)?  0  :  1;	  int    totalRead    =(numToRead    ==    0)?    0    :    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
390	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0,  buf.length  :  numToRead;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0,  buf.length  :  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  0,  buf.length  :  numToRead;	  int    totalRead    =(buf.length    ==    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
391	[BUG]  [BUGGY]  Integer  totalRead  =(numToRead  ==  0)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  Integer  totalRead  =(numToRead  ==  0)?  0  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	Integer  totalRead  =(numToRead  ==  0)?  0  :  buf.length;	  int    totalRead    =(buf.length    ==    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
392	[BUG]  [BUGGY]  int  totalRead  =(numToRead!=  0)?  0L  :  0L;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead!=  0)?  0L  :  0L;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead!=  0)?  0L  :  0L;	  int    totalRead    =(numToRead    >=    0)?    0L    :    0L;    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
393	[BUG]  [BUGGY]  Integer  totalRead  =(numToRead  <  0)?  0  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  Integer  totalRead  =(numToRead  <  0)?  0  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	Integer  totalRead  =(numToRead  <  0)?  0  :  0;	  Integer    totalRead    =    0;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
394	[BUG]  [BUGGY]  Integer  totalRead  =  System.currentTimeMillis();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  Integer  totalRead  =  System.currentTimeMillis();  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	Integer  totalRead  =  System.currentTimeMillis();	  Integer    totalRead    =    0;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
395	[BUG]  [BUGGY]  Integer  totalRead  =(numToRead  >=  0)?  0  :  0;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  Integer  totalRead  =(numToRead  >=  0)?  0  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	Integer  totalRead  =(numToRead  >=  0)?  0  :  0;	  Integer    totalRead    =    0;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
396	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >  0)?  0  :  buf.length  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >  0)?  0  :  buf.length  +  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >  0)?  0  :  buf.length  +  1;	  int    totalRead    =(numToRead    <    0)?    0    :    buf.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
397	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  0  :  buf.length  *  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  0)?  0  :  buf.length  *  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  0  :  buf.length  *  1;	  int    totalRead    =(numToRead    <    0)?    0    :    buf.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
398	[BUG]  [BUGGY]  int  totalRead  =(buf!=  0)?  1  :  buf.length;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf!=  0)?  1  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf!=  0)?  1  :  buf.length;	  int    totalRead    =(numToRead    ==    0)?    1    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
399	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  1  :  buf.length  +  offset;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  0)?  1  :  buf.length  +  offset;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  1  :  buf.length  +  offset;	  int    totalRead    =(numToRead    ==    0)?    1    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
400	[BUG]  [BUGGY]  int  totalRead  =(buf!=  0)?  0  :  buf.length  +  offset;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf!=  0)?  0  :  buf.length  +  offset;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf!=  0)?  0  :  buf.length  +  offset;	  int    totalRead    =(buf!=    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
401	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  Buf.toIntByteArray(buf);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  Buf.toIntByteArray(buf);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  0  :  Buf.toIntByteArray(buf);	  int    totalRead    =(buf    ==    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
402	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  buffer.length;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  buffer.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  0  :  buffer.length;	  int    totalRead    =(buf    ==    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
403	[BUG]  [BUGGY]  int  totalRead  =  getHitEOF(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =  getHitEOF(buf,  offset,  numToRead  +  1);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  getHitEOF(buf,  offset,  numToRead  +  1);	  int    totalRead    =    getHitEOF(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
404	[BUG]  [BUGGY]  int  totalRead  =(int)Math.ceil(buf,  offset,  numToRead  *  numRecords);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.ceil(buf,  offset,  numToRead  *  numRecords);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.ceil(buf,  offset,  numToRead  *  numRecords);	  int    totalRead    =(int)Math.ceil(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
405	[BUG]  [BUGGY]  int  totalRead  =(buf  <  0)?  -1  :  buf.length;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf  <  0)?  -1  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf  <  0)?  -1  :  buf.length;	  int    totalRead    =(numToRead    <    0)?    -1    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
406	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  -1  :  buf.length  -  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  0)?  -1  :  buf.length  -  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  -1  :  buf.length  -  1;	  int    totalRead    =(numToRead    <    0)?    -1    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
407	[BUG]  [BUGGY]  int  entrySize  =  computeEntrySize(buf,  offset);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  computeEntrySize(buf,  offset);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  computeEntrySize(buf,  offset);	  int    entrySize    =    getEntrySize(buf,    offset);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
408	[BUG]  [BUGGY]  int  entrySize  =  encoding.getEntrySize(buf,  offset);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  encoding.getEntrySize(buf,  offset);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  encoding.getEntrySize(buf,  offset);	  int    entrySize    =    getEntrySize(buf,    offset);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
409	[BUG]  [BUGGY]  int  entrySize  =  readEntrySize(buf,  offset);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  readEntrySize(buf,  offset);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  readEntrySize(buf,  offset);	  int    entrySize    =    getEntrySize(buf,    offset);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
410	[BUG]  [BUGGY]  int  totalRead  =(buf.length  ==  0)?  1  :  buf.length;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf.length  ==  0)?  1  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf.length  ==  0)?  1  :  buf.length;	  int    totalRead    =(buf.length    ==    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
411	[BUG]  [BUGGY]  int  totalRead  =(numToRead!=  0)?  1  :  numToRead;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead!=  0)?  1  :  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead!=  0)?  1  :  numToRead;	  int    totalRead    =(numToRead    <    0)?    1    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
412	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >  0)?  2  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >  0)?  2  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >  0)?  2  :  0;	  int    totalRead    =(numToRead    <    0)?    2    :    0;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
413	[BUG]  [BUGGY]  int  hasHitEOF  =  currEntry.length  +  offset;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  currEntry.length  +  offset;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  hasHitEOF  =  currEntry.length  +  offset;	  int    hasHitEOF    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
414	[BUG]  [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  4);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  4);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  4);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
415	[BUG]  [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  0,  len);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  0,  len);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.floor(buf,  offset,  0,  len);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
416	[BUG]  [BUGGY]  int  entrySize  =  readNow(buf,  offset,  numToRead,  buffer.length);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  readNow(buf,  offset,  numToRead,  buffer.length);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  readNow(buf,  offset,  numToRead,  buffer.length);	  int    entrySize    =    readNow(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
417	[BUG]  [BUGGY]  int  entrySize  =  readNow(buf,  offset,  numToRead,  true);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  readNow(buf,  offset,  numToRead,  true);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  readNow(buf,  offset,  numToRead,  true);	  int    entrySize    =    readNow(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
418	[BUG]  [BUGGY]  int  totalRead  =(buf.length  <  0)?  1  :  buf.length;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf.length  <  0)?  1  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf.length  <  0)?  1  :  buf.length;	  int    totalRead    =(buff.length    <    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
419	[BUG]  [BUGGY]  int  totalRead  =(buff.length  <  0)?  0  :  buf.length  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buff.length  <  0)?  0  :  buf.length  +  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buff.length  <  0)?  0  :  buf.length  +  1;	  int    totalRead    =(buff.length    <    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
420	[BUG]  [BUGGY]  int  hasHitEOF  =  encoding.hasHitEOF(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  encoding.hasHitEOF(buf,  offset,  numToRead  +  1);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  hasHitEOF  =  encoding.hasHitEOF(buf,  offset,  numToRead  +  1);	  int    hasHitEOF    =    encoding.hasHitEOF(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
421	[BUG]  [BUGGY]  int  hasHitEOF  =  currEntry.hasHitEOF(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  currEntry.hasHitEOF(buf,  offset,  numToRead);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  hasHitEOF  =  currEntry.hasHitEOF(buf,  offset,  numToRead);	  int    hasHitEOF    =    encoding.hasHitEOF(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
422	[BUG]  [BUGGY]  int  entrySize  =  getEntrySize()  +  offset;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntrySize()  +  offset;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  getEntrySize()  +  offset;	  int    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
423	[BUG]  [BUGGY]  int  totalRead  =(buf  ==  null)?  0  :  buf.length  +  offset;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf  ==  null)?  0  :  buf.length  +  offset;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf  ==  null)?  0  :  buf.length  +  offset;	  int    totalRead    =(buf    ==    null)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
424	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  -1  :  -1L;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  0)?  -1  :  -1L;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  -1  :  -1L;	  int    totalRead    =(numToRead    ==    0)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
425	[BUG]  [BUGGY]  int  totalRead  =(buf  ==  null)?  1  :  buf.length;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf  ==  null)?  1  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf  ==  null)?  1  :  buf.length;	  int    totalRead    =(buf    ==    null)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
426	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  0  :  Buf.toString(buf);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  0)?  0  :  Buf.toString(buf);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  0  :  Buf.toString(buf);	  int    totalRead    =(buf    <    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
427	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  1  :  buf.length  -  offset);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  0)?  1  :  buf.length  -  offset);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  1  :  buf.length  -  offset);	  int    totalRead    =(numToRead    ==    0)?    1    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
428	[BUG]  [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  entrySize);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  entrySize);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead,    length);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
429	[BUG]  [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  this.entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  this.entrySize);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  this.entrySize);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead,    length);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
430	[BUG]  [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  1);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  1);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead,    length);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
431	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  0  :  buf.length  *  numToRead  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  0)?  0  :  buf.length  *  numToRead  +  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  0  :  buf.length  *  numToRead  +  1;	  int    totalRead    =(numToRead    <    0)?    0    :    buf.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
432	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  0  :  buf.length  /  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  0)?  0  :  buf.length  /  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  0  :  buf.length  /  1;	  int    totalRead    =(numToRead    <    0)?    0    :    buf.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
433	[BUG]  [BUGGY]  int  hasHitEOF  =  encoding.hasHitEOF(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  encoding.hasHitEOF(buf,  offset,  0);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  hasHitEOF  =  encoding.hasHitEOF(buf,  offset,  0);	  int    hasHitEOF    =    encoding.hasHitEOF(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
434	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  0xff  :  0xff;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  0)?  0xff  :  0xff;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  0xff  :  0xff;	  int    totalRead    =    0xff;    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
435	[BUG]  [BUGGY]  int  totalRead  =  0xff  |  offset  +  numToRead;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =  0xff  |  offset  +  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  0xff  |  offset  +  numToRead;	  int    totalRead    =    0xff;    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
436	[BUG]  [BUGGY]  Integer  totalRead  =(int)Math.rint(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  Integer  totalRead  =(int)Math.rint(buf,  offset,  numToRead);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	Integer  totalRead  =(int)Math.rint(buf,  offset,  numToRead);	  Integer    totalRead    =    0;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
437	[BUG]  [BUGGY]  Integer  totalRead  =  getHitEOF(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  Integer  totalRead  =  getHitEOF(buf,  offset,  numToRead);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	Integer  totalRead  =  getHitEOF(buf,  offset,  numToRead);	  Integer    totalRead    =    0;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
438	[BUG]  [BUGGY]  byte  totalRead  =(buf!=  null)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte  totalRead  =(buf!=  null)?  0  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte  totalRead  =(buf!=  null)?  0  :  buf.length;	  int    totalRead    =(buf!=    null)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
439	[BUG]  [BUGGY]  char  totalRead  =(buf!=  null)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  char  totalRead  =(buf!=  null)?  0  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	char  totalRead  =(buf!=  null)?  0  :  buf.length;	  int    totalRead    =(buf!=    null)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
440	[BUG]  [BUGGY]  int  entrySize  =  getEntrySize(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntrySize(buf,  offset,  0);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  getEntrySize(buf,  offset,  0);	  int    entrySize    =    getEntrySize(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
441	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >  0)?  0  :  buf.length  -  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >  0)?  0  :  buf.length  -  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >  0)?  0  :  buf.length  -  1;	  int    totalRead    =(numToRead    >    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
442	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  -1  :  buf.length  -  offset;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  0)?  -1  :  buf.length  -  offset;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  -1  :  buf.length  -  offset;	  int    totalRead    =(numToRead    <    0)?    -1    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
443	[BUG]  [BUGGY]  int  totalRead  =(offset  <  0)?  1  :  buf.length;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(offset  <  0)?  1  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(offset  <  0)?  1  :  buf.length;	  int    totalRead    =(buf    <    0)?    0    :    offset.length;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
444	[BUG]  [BUGGY]  byte[]  currEntry  =  getCurrentEntryArray();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte[]  currEntry  =  getCurrentEntryArray();  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte[]  currEntry  =  getCurrentEntryArray();	  byte[]    currEntry    =    getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
445	[BUG]  [BUGGY]  int  entrySize  =  readNow(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  readNow(buf,  offset,  0);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  readNow(buf,  offset,  0);	  int    entrySize    =    readNow(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
446	[BUG]  [BUGGY]  int  entrySize  =  readNow(buf,  offset,  numToRead,  null);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  readNow(buf,  offset,  numToRead,  null);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  readNow(buf,  offset,  numToRead,  null);	  int    entrySize    =    readNow(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
447	[BUG]  [BUGGY]  int  entrySize  =  readEntry(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  readEntry(buf,  offset,  numToRead);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  readEntry(buf,  offset,  numToRead);	  int    entrySize    =    getEntry(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
448	[BUG]  [BUGGY]  int  hasHitEOF  =  currEntry.hashCode();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  currEntry.hashCode();  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  hasHitEOF  =  currEntry.hashCode();	  int    hasHitEOF    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
449	[BUG]  [BUGGY]  int  hasHitEOF  =  this.currEntry.length;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  this.currEntry.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  hasHitEOF  =  this.currEntry.length;	  int    hasHitEOF    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
450	[BUG]  [BUGGY]  int  totalRead  =  getHitEOF(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =  getHitEOF(buf,  offset,  0);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  getHitEOF(buf,  offset,  0);	  int    totalRead    =    getHitEOF(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
451	[BUG]  [BUGGY]  int  totalRead  =  getHitEOF(buf,  offset,  numToRead,  isEnabled(Feature.QUOTE_FIELD_NAMES));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =  getHitEOF(buf,  offset,  numToRead,  isEnabled(Feature.QUOTE_FIELD_NAMES));  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  getHitEOF(buf,  offset,  numToRead,  isEnabled(Feature.QUOTE_FIELD_NAMES));	  int    totalRead    =    getHitEOF(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
452	[BUG]  [BUGGY]  int  hasHitEOF  =  is.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  hasHitEOF  =  is.read(buf,  offset,  0);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  hasHitEOF  =  is.read(buf,  offset,  0);	  int    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
453	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  -1)?  0  :  0;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  -1)?  0  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  -1)?  0  :  0;	  int    totalRead    =(numToRead    ==    -1)?    -1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
454	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  0  :  offset;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  0)?  0  :  offset;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  0  :  offset;	  int    totalRead    =(buf    <    0)?    0    :    offset;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
455	[BUG]  [BUGGY]  int  totalRead  =(recordSize  <  0)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(recordSize  <  0)?  0  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(recordSize  <  0)?  0  :  buf.length;	  int    totalRead    =(buf    <    0)?    0    :    offset;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
456	[BUG]  [BUGGY]  int  totalRead  =(entrySize  >>  0)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(entrySize  >>  0)?  1  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(entrySize  >>  0)?  1  :  0;	  int    totalRead    =(numToRead!=    0)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
457	[BUG]  [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead  +  3);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead  +  3);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.floor(buf,  offset,  numToRead  +  3);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
458	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  Buf.toString(buf);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  Buf.toString(buf);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  0  :  Buf.toString(buf);	  int    totalRead    =(buf    ==    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
459	[BUG]  [BUGGY]  long  totalRead  =  -1L;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  long  totalRead  =  -1L;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	long  totalRead  =  -1L;	  int    totalRead    =    -1L;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
460	[BUG]  [BUGGY]  int  totalRead  =(buf.length  <  3)?  0  :  offset;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(buf.length  <  3)?  0  :  offset;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf.length  <  3)?  0  :  offset;	  int    totalRead    =(buf.length    <    0)?    0    :    offset;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
461	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  0x7F  :  buf.length;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  0)?  0x7F  :  buf.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  0x7F  :  buf.length;	  int    totalRead    =    0x7F;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
462	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  0x7F  :  0x7F;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  0)?  0x7F  :  0x7F;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  0x7F  :  0x7F;	  int    totalRead    =    0x7F;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
463	[BUG]  [BUGGY]  int  totalRead  =(length  <  0)?  0  :  buf.length  -  offset;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(length  <  0)?  0  :  buf.length  -  offset;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(length  <  0)?  0  :  buf.length  -  offset;	  int    totalRead    =(length    <    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
464	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >  0)?  buf.length  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  >  0)?  buf.length  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >  0)?  buf.length  :  0;	  int    totalRead    =(numToRead    >    0)?    0    :    0;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
465	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  -1  :  numRecords.length;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  0)?  -1  :  numRecords.length;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  -1  :  numRecords.length;	  int    totalRead    =(numToRead    <    0)?    -1    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
466	[BUG]  [BUGGY]  byte[]  buf  =  currEntry.getBytes(offset,  numToRead,  0);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte[]  buf  =  currEntry.getBytes(offset,  numToRead,  0);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte[]  buf  =  currEntry.getBytes(offset,  numToRead,  0);	  byte[]    buf    =    currEntry.getBytes(offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
467	[BUG]  [BUGGY]  Integer  entrySize  =  getEntrySize(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  Integer  entrySize  =  getEntrySize(buf,  offset,  0);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	Integer  entrySize  =  getEntrySize(buf,  offset,  0);	  Integer    entrySize    =    getEntrySize(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
468	[BUG]  [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  0L);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  0L);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.floor(buf,  offset,  0L);	  int    totalRead    =(int)Math.floor(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
469	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  buf.length  -  offset  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  buf.length  -  offset  +  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  0  :  buf.length  -  offset  +  1;	  int    totalRead    =(numToRead    ==    0)?    0    :    buf.length    -    offset;    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
470	[BUG]  [BUGGY]  byte[]  buf  =  currEntry.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  byte[]  buf  =  currEntry.read(buf,  offset,  0);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte[]  buf  =  currEntry.read(buf,  offset,  0);	  byte[]    buf    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
471	[BUG]  [BUGGY]  int  totalRead  =  entrySize  -  numToRead;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =  entrySize  -  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  entrySize  -  numToRead;	  int    totalRead    =    buf.length    -    numToRead;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
472	[BUG]  [BUGGY]  int  totalRead  =  offset  +  numToRead;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =  offset  +  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  offset  +  numToRead;	  int    totalRead    =    buf.length    -    numToRead;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
473	[BUG]  [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  0,  hasHitEOF);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.floor(buf,  offset,  0,  hasHitEOF);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
474	[BUG]  [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  registeredHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  registeredHitEOF);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  registeredHitEOF);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
475	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  2)?  0  :  numToRead;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  <  2)?  0  :  numToRead;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  2)?  0  :  numToRead;	  int    totalRead    =(numToRead    <    1)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
476	[BUG]  [BUGGY]  short  totalRead  =  0L;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  short  totalRead  =  0L;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	short  totalRead  =  0L;	  byte    totalRead    =    0L;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
477	[BUG]  [BUGGY]  int  entrySize  =  computeEntrySize(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  entrySize  =  computeEntrySize(buf,  offset,  numToRead);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  computeEntrySize(buf,  offset,  numToRead);	  int    entrySize    =    getEntrySize(buf,    offset);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
478	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  buf.length  *  numToRead  +  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  buf.length  *  numToRead  +  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  0  :  buf.length  *  numToRead  +  1;	  int    totalRead    =(numToRead    ==    0)?    0    :    buf.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
479	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  buf.length  /  1;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  buf.length  /  1;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  0  :  buf.length  /  1;	  int    totalRead    =(numToRead    ==    0)?    0    :    buf.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
480	[BUG]  [BUGGY]  int  totalRead  =(length  <  0)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  int  totalRead  =(length  <  0)?  1  :  0;  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(length  <  0)?  1  :  0;	  int    totalRead    =(buf    <    0)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
481	[BUG]  [BUGGY]  Integer  entrySize  =  readNow(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  Integer  entrySize  =  readNow(buf,  offset,  0);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	Integer  entrySize  =  readNow(buf,  offset,  0);	  Integer    entrySize    =    readNow(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
482	[BUG]  [BUGGY]  Integer  entrySize  =  readNow(buf,  offset,  numToRead,  null);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  Integer  entrySize  =  readNow(buf,  offset,  numToRead,  null);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	Integer  entrySize  =  readNow(buf,  offset,  numToRead,  null);	  Integer    entrySize    =    readNow(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
483	[BUG]  [BUGGY]  Integer  entrySize  =  readNow(buf,  offset,  numToRead,  this);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {      [BUGGY]  Integer  entrySize  =  readNow(buf,  offset,  numToRead,  this);  [BUGGY]        if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	Integer  entrySize  =  readNow(buf,  offset,  numToRead,  this);	  Integer    entrySize    =    readNow(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
