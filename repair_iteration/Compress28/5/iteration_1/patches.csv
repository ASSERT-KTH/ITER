bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  1;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  1;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  0  :  1;	  int    totalRead    =(numToRead    ==    0)?    0    :    0;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
2	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  1  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  ==  0)?  1  :  0;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  1  :  0;	  int    totalRead    =(numToRead    ==    0)?    0    :    0;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
3	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  ==  0)?  -1  :  0;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  -1  :  0;	  int    totalRead    =(numToRead    ==    0)?    0    :    0;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
4	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  -1;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  -1;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  0  :  -1;	  int    totalRead    =(numToRead    ==    0)?    0    :    0;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
5	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  numToRead;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  numToRead;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  0  :  numToRead;	  int    totalRead    =(numToRead    <    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
6	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >=  0)?  0  :  numToRead;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  >=  0)?  0  :  numToRead;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >=  0)?  0  :  numToRead;	  int    totalRead    =(numToRead    <    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
7	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  1)?  0  :  numToRead;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  <  1)?  0  :  numToRead;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  1)?  0  :  numToRead;	  int    totalRead    =(numToRead    <    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
8	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  1  :  numToRead;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  <  0)?  1  :  numToRead;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  1  :  numToRead;	  int    totalRead    =(numToRead    <    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
9	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >  0)?  0  :  numToRead;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  >  0)?  0  :  numToRead;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >  0)?  0  :  numToRead;	  int    totalRead    =(numToRead    <    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
10	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  >  0)?  0  :  numToRead;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  <  >  0)?  0  :  numToRead;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  >  0)?  0  :  numToRead;	  int    totalRead    =(numToRead    <    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
11	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >  0)?  0  :  0;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  >  0)?  0  :  0;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >  0)?  0  :  0;	  int    totalRead    =(numToRead    >=    0)?    0    :    0;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
12	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  1)?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  <  1)?  1  :  0;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  1)?  1  :  0;	  int    totalRead    =(numToRead    <    0)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
13	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >=  0)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  >=  0)?  1  :  0;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >=  0)?  1  :  0;	  int    totalRead    =(numToRead    <    0)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
14	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >  0)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  >  0)?  1  :  0;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >  0)?  1  :  0;	  int    totalRead    =(numToRead    <    0)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
15	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  >  0)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  <  >  0)?  1  :  0;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  >  0)?  1  :  0;	  int    totalRead    =(numToRead    <    0)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
16	[BUG]  [BUGGY]  int  totalRead  =(buf  <  0)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(buf  <  0)?  1  :  0;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf  <  0)?  1  :  0;	  int    totalRead    =(numToRead    <    0)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
17	[BUG]  [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  hasHitEOF);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
18	[BUG]  [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  len);  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  len);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
19	[BUG]  [BUGGY]  byte  totalRead  =(byte)Math.floor(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  byte  totalRead  =(byte)Math.floor(buf,  offset,  numToRead);  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte  totalRead  =(byte)Math.floor(buf,  offset,  numToRead);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
20	[BUG]  [BUGGY]  int  totalRead  =(int)Math.log(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(int)Math.log(buf,  offset,  numToRead);  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.log(buf,  offset,  numToRead);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
21	[BUG]  [BUGGY]  int  totalRead  =(int)Math.ceil(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(int)Math.ceil(buf,  offset,  numToRead);  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.ceil(buf,  offset,  numToRead);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
22	[BUG]  [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  length);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  length);  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.floor(buf,  offset,  numToRead,  length);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
23	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  -1  :  -1;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  <  0)?  -1  :  -1;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  -1  :  -1;	  int    totalRead    =    -1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
24	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  -1  :  -1;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  ==  0)?  -1  :  -1;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  -1  :  -1;	  int    totalRead    =    -1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
25	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >=  0)?  -1  :  -1;  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  >=  0)?  -1  :  -1;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >=  0)?  -1  :  -1;	  int    totalRead    =    -1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
26	[BUG]  [BUGGY]  int  totalRead  =  buf.length  -  numToRead;  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =  buf.length  -  numToRead;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  buf.length  -  numToRead;	  int    totalRead    =    -1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
27	[BUG]  [BUGGY]  int  totalRead  =  -1L;  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =  -1L;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  -1L;	  int    totalRead    =    -1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
28	[BUG]  [BUGGY]  int  totalRead  =(buf.length  >=  0)?  0  :  numToRead;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(buf.length  >=  0)?  0  :  numToRead;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf.length  >=  0)?  0  :  numToRead;	  int    totalRead    =(numToRead    >=    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
29	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >  0)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  >  0)?  0  :  buf.length;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >  0)?  0  :  buf.length;	  int    totalRead    =(numToRead    >=    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
30	[BUG]  [BUGGY]  int  totalRead  =(buf!=  0)?  0  :  numToRead;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(buf!=  0)?  0  :  numToRead;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf!=  0)?  0  :  numToRead;	  int    totalRead    =(numToRead    >=    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
31	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  buf.length  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  buf.length  +  1;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  0  :  buf.length  +  1;	  int    totalRead    =(numToRead    >=    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
32	[BUG]  [BUGGY]  int  entrySize  =  getEntrySize(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  entrySize  =  getEntrySize(buf,  offset,  numToRead);  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  getEntrySize(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
33	[BUG]  [BUGGY]  byte[]  buf  =  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  byte[]  buf  =  currEntry.read(buf,  offset,  numToRead);  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte[]  buf  =  currEntry.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
34	[BUG]  [BUGGY]  Integer  entrySize  =  getEntrySize(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  Integer  entrySize  =  getEntrySize(buf,  offset,  numToRead);  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	Integer  entrySize  =  getEntrySize(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
35	[BUG]  [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead);  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
36	[BUG]  [BUGGY]  int  hasHitEOF  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  hasHitEOF  =  is.read(buf,  offset,  numToRead);  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  hasHitEOF  =  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
37	[BUG]  [BUGGY]  int  entrySize  =  getEntrySize();  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  entrySize  =  getEntrySize();  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  getEntrySize();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
38	[BUG]  [BUGGY]  byte[]  buf  =  currEntry.getBytes(offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  byte[]  buf  =  currEntry.getBytes(offset,  numToRead);  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte[]  buf  =  currEntry.getBytes(offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
39	[BUG]  [BUGGY]  byte  totalRead  =  0L;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  byte  totalRead  =  0L;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte  totalRead  =  0L;	  int    totalRead    =    0L;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
40	[BUG]  [BUGGY]  int  totalRead  =  0x7F;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =  0x7F;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  0x7F;	  int    totalRead    =    0L;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
41	[BUG]  [BUGGY]  Integer  totalRead  =  0;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  Integer  totalRead  =  0;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	Integer  totalRead  =  0;	  int    totalRead    =    0L;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
42	[BUG]  [BUGGY]  long  totalRead  =  0L;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  long  totalRead  =  0L;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	long  totalRead  =  0L;	  int    totalRead    =    0L;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
43	[BUG]  [BUGGY]  int  totalRead  =(buf.length  ==  0)?  0  :  numToRead;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(buf.length  ==  0)?  0  :  numToRead;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf.length  ==  0)?  0  :  numToRead;	  int    totalRead    =(numToRead    ==    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
44	[BUG]  [BUGGY]  int  totalRead  =(buf  ==  0)?  0  :  numToRead;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(buf  ==  0)?  0  :  numToRead;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf  ==  0)?  0  :  numToRead;	  int    totalRead    =(numToRead    ==    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
45	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  1  :  buf.length;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  ==  0)?  1  :  buf.length;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  1  :  buf.length;	  int    totalRead    =(numToRead    ==    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
46	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  -1  :  buf.length;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  ==  0)?  -1  :  buf.length;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  -1  :  buf.length;	  int    totalRead    =(numToRead    ==    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
47	[BUG]  [BUGGY]  int  totalRead  =(buf  <  0)?  0  :  numToRead;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(buf  <  0)?  0  :  numToRead;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf  <  0)?  0  :  numToRead;	  int    totalRead    =(numToRead    <    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
48	[BUG]  [BUGGY]  int  totalRead  =(buf.length  <  0)?  0  :  numToRead;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(buf.length  <  0)?  0  :  numToRead;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf.length  <  0)?  0  :  numToRead;	  int    totalRead    =(numToRead    <    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
49	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  0  :  buf.length  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  <  0)?  0  :  buf.length  +  1;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  0  :  buf.length  +  1;	  int    totalRead    =(numToRead    <    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
50	[BUG]  [BUGGY]  int  totalRead  =(buf  <  0)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(buf  <  0)?  0  :  buf.length;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf  <  0)?  0  :  buf.length;	  int    totalRead    =(numToRead    <    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
51	[BUG]  [BUGGY]  int  totalRead  =(buf  <  0)?  0  :  offset;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(buf  <  0)?  0  :  offset;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf  <  0)?  0  :  offset;	  int    totalRead    =(offset    <    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
52	[BUG]  [BUGGY]  int  totalRead  =(buf.length  <  0)?  0  :  offset;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(buf.length  <  0)?  0  :  offset;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf.length  <  0)?  0  :  offset;	  int    totalRead    =(offset    <    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
53	[BUG]  [BUGGY]  int  totalRead  =(buf  <  0)?  0  :  offset.length;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(buf  <  0)?  0  :  offset.length;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf  <  0)?  0  :  offset.length;	  int    totalRead    =(offset    <    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
54	[BUG]  [BUGGY]  int  totalRead  =(buff.length  <  0)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(buff.length  <  0)?  0  :  buf.length;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buff.length  <  0)?  0  :  buf.length;	  int    totalRead    =(offset    <    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
55	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  <  0)?  -1  :  1;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  -1  :  1;	  int    totalRead    =(numToRead    <    0)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
56	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >=  0)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  >=  0)?  -1  :  0;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >=  0)?  -1  :  0;	  int    totalRead    =(numToRead    <    0)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
57	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  1)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  <  1)?  -1  :  0;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  1)?  -1  :  0;	  int    totalRead    =(numToRead    <    0)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
58	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >  0)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  >  0)?  -1  :  0;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >  0)?  -1  :  0;	  int    totalRead    =(numToRead    <    0)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
59	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  0  :  1;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  <  0)?  0  :  1;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  0  :  1;	  int    totalRead    =(numToRead    <    0)?    0    :    0;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
60	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  1)?  0  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  <  1)?  0  :  0;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  1)?  0  :  0;	  int    totalRead    =(numToRead    <    0)?    0    :    0;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
61	[BUG]  [BUGGY]  int  totalRead  =(numToRead!=  0)?  -1  :  0;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead!=  0)?  -1  :  0;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead!=  0)?  -1  :  0;	  int    totalRead    =(numToRead    <    0)?    -1    :    0;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
62	[BUG]  [BUGGY]  int  hasHitEOF  =  encoding.hasHitEOF(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  hasHitEOF  =  encoding.hasHitEOF(buf,  offset,  numToRead);  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  hasHitEOF  =  encoding.hasHitEOF(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
63	[BUG]  [BUGGY]  int  hasHitEOF  =  currEntry.length;  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  hasHitEOF  =  currEntry.length;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  hasHitEOF  =  currEntry.length;	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
64	[BUG]  [BUGGY]  byte[]  currEntry  =  getCurrentEntry();  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  byte[]  currEntry  =  getCurrentEntry();  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	byte[]  currEntry  =  getCurrentEntry();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
65	[BUG]  [BUGGY]  int  totalRead  =(buf.length  >=  0)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(buf.length  >=  0)?  0  :  buf.length;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf.length  >=  0)?  0  :  buf.length;	  int    totalRead    =(numToRead    >=    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
66	[BUG]  [BUGGY]  float  totalRead  =  0L;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  float  totalRead  =  0L;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	float  totalRead  =  0L;	  int    totalRead    =    0L;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
67	[BUG]  [BUGGY]  int  totalRead  =  0xff;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =  0xff;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  0xff;	  int    totalRead    =    0L;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
68	[BUG]  [BUGGY]  int  totalRead  =(buf.length  <  0)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(buf.length  <  0)?  0  :  buf.length;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf.length  <  0)?  0  :  buf.length;	  int    totalRead    =(offset    <    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
69	[BUG]  [BUGGY]  int  totalRead  =(buf!=  null)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(buf!=  null)?  0  :  buf.length;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf!=  null)?  0  :  buf.length;	  int    totalRead    =(offset    <    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
70	[BUG]  [BUGGY]  int  totalRead  =(buf  ==  null)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(buf  ==  null)?  0  :  buf.length;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf  ==  null)?  0  :  buf.length;	  int    totalRead    =(offset    <    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
71	[BUG]  [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  numToRead  +  1);  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.floor(buf,  offset,  numToRead  +  1);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
72	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  -1  :  buf.length;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  <  0)?  -1  :  buf.length;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  -1  :  buf.length;	  int    totalRead    =    -1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
73	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  -1)?  -1  :  -1;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  ==  -1)?  -1  :  -1;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  -1)?  -1  :  -1;	  int    totalRead    =    -1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
74	[BUG]  [BUGGY]  int  totalRead  =(buf.length  ==  0)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(buf.length  ==  0)?  0  :  buf.length;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf.length  ==  0)?  0  :  buf.length;	  int    totalRead    =(numToRead    ==    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
75	[BUG]  [BUGGY]  int  totalRead  =(buf  ==  0)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(buf  ==  0)?  0  :  buf.length;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf  ==  0)?  0  :  buf.length;	  int    totalRead    =(numToRead    ==    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
76	[BUG]  [BUGGY]  int  totalRead  =(buf!=  0)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(buf!=  0)?  0  :  buf.length;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(buf!=  0)?  0  :  buf.length;	  int    totalRead    =(numToRead    ==    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
77	[BUG]  [BUGGY]  int  totalRead  =(numToRead!=  0)?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead!=  0)?  1  :  0;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead!=  0)?  1  :  0;	  int    totalRead    =(numToRead    <    0)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
78	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  1  :  -1;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  <  0)?  1  :  -1;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  1  :  -1;	  int    totalRead    =(numToRead    <    0)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
79	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  -1  :  numToRead;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  <  0)?  -1  :  numToRead;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  -1  :  numToRead;	  int    totalRead    =(numToRead    <    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
80	[BUG]  [BUGGY]  int  totalRead  =(numToRead!=  0)?  0  :  numToRead;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead!=  0)?  0  :  numToRead;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead!=  0)?  0  :  numToRead;	  int    totalRead    =(numToRead    <    0)?    0    :    numToRead;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
81	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >=  0)?  0  :  1;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  >=  0)?  0  :  1;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >=  0)?  0  :  1;	  int    totalRead    =(numToRead    >=    0)?    0    :    0;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
82	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >>  0)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  >>  0)?  0  :  buf.length;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >>  0)?  0  :  buf.length;	  int    totalRead    =(numToRead    >=    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
83	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >  0)?  -1  :  -1;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  >  0)?  -1  :  -1;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >  0)?  -1  :  -1;	  int    totalRead    =    -1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
84	[BUG]  [BUGGY]  int  totalRead  =  getHitEOF(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =  getHitEOF(buf,  offset,  numToRead);  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =  getHitEOF(buf,  offset,  numToRead);	  int    totalRead    =    -1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
85	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  2  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  <  0)?  2  :  0;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  2  :  0;	  int    totalRead    =(numToRead    <    0)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
86	[BUG]  [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(int)Math.floor(buf,  offset,  0);  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(int)Math.floor(buf,  offset,  0);	  int    totalRead    =(int)Math.floor(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
87	[BUG]  [BUGGY]  Integer  entrySize  =  readNow(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  Integer  entrySize  =  readNow(buf,  offset,  numToRead);  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	Integer  entrySize  =  readNow(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
88	[BUG]  [BUGGY]  int  entrySize  =  readNow(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  entrySize  =  readNow(buf,  offset,  numToRead);  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  readNow(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
89	[BUG]  [BUGGY]  int  entrySize  =  getEntry(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  entrySize  =  getEntry(buf,  offset,  numToRead);  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  getEntry(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
90	[BUG]  [BUGGY]  int  entrySize  =  getEntrySize(buf,  offset);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  entrySize  =  getEntrySize(buf,  offset);  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  entrySize  =  getEntrySize(buf,  offset);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
91	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  0L  :  0L;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  <  0)?  0L  :  0L;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  0L  :  0L;	  int    totalRead    =    0L;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
92	[BUG]  [BUGGY]  int  totalRead  =(numToRead  <  0)?  0L  :  0;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  <  0)?  0L  :  0;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  <  0)?  0L  :  0;	  int    totalRead    =    0L;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
93	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >  0)?  0L  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  >  0)?  0L  :  0;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >  0)?  0L  :  0;	  int    totalRead    =    0L;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
94	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >=  0)?  0L  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  >=  0)?  0L  :  0;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >=  0)?  0L  :  0;	  int    totalRead    =    0L;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
95	[BUG]  [BUGGY]  int  totalRead  =(numToRead  >=  0)?  0L  :  0L;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  >=  0)?  0L  :  0L;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  >=  0)?  0L  :  0L;	  int    totalRead    =    0L;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
96	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  buf.length  -  offset;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  buf.length  -  offset;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  0  :  buf.length  -  offset;	  int    totalRead    =(numToRead    ==    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
97	[BUG]  [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  buf.length  -  1;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(numToRead  ==  0)?  0  :  buf.length  -  1;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(numToRead  ==  0)?  0  :  buf.length  -  1;	  int    totalRead    =(numToRead    ==    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
98	[BUG]  [BUGGY]  int  totalRead  =(length  <  0)?  0  :  buf.length;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {    [BUGGY]  int  totalRead  =(length  <  0)?  0  :  buf.length;  [BUGGY]      if  (hasHitEOF  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	570	570	1	replace	int  totalRead  =(length  <  0)?  0  :  buf.length;	  int    totalRead    =(offset    <    0)?    0    :    buf.length;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
