projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(is,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(is,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entrySize,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(numRecords,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(padding,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.recordSize,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.available,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(records,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(recordSize,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,is,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(is,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.entrySize,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entrySize,padding,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entrySize,padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(padding,this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entrySize,padding,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entrySize,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,padding,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.entryOffset,is,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,padding,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,this.recordSize,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,numRecords,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entrySize,is,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,available,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();padding=currEntry.getPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();padding+=currEntry.get
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){skipRecordPadding
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()==null){skipRecordPadding
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=this.currEntry.getValue();if(currEntry.getName().equals(currEntry.getName
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=this.currEntry.getValue();if(currEntry.getName().equals(currEntry.getName())){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.getType()==Token.FUNCTION){skipRecordP
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(recordSize,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(padding,recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(records,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(padding,records);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.entryOffset,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(padding,this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,padding,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(numRecords,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(numRecords,padding,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(padding,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(numRecords,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.recordSize,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(padding,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.recordSize,padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.recordSize,padding,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.available,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.available,padding,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.available,padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(padding,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.entryOffset,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.entrySize,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.entryOffset,is,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(numRecords,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.recordSize,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(recordSize,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(recordSize,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entrySize,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.available,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.available,padding,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.available,padding-this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(records,padding,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.records,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(records,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entrySize,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(recordSize,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.recordSize,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.recordSize,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.recordSize,this.available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.recordSize,padding,this.available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.recordSize,is,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordPadding
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordPadding
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().equals(this.recordName)){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordP
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith(this.recordSize)){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.getName
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304shortskipped=IOUtils.skip(padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.entryOffset,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(is,padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,is,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304shortskipped=IOUtils.skip(this.recordSize,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith("
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.isEnabled(Feature.QUOTE_
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;++i){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;++i){skipRecordPadding(i,padding);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){skipRecordPadding
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;++i){skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304shortskipped=IOUtils.skip(padding,recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(records,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.available,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304shortskipped=IOUtils.skip(this.entryOffset,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(is,padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.entryOffset,numRecords);
