bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.entrySize,  padding);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  int  skipped  =  IOUtils.skip(this.entrySize,  padding);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.entrySize,  padding);	  long    skipped    =    IOUtils.skip(this.entrySize,    padding);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
2	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  padding,  this.recordSize);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  padding,  this.recordSize);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entrySize,  padding,  this.recordSize);	  long    skipped    =    IOUtils.skip(this.entrySize,    padding);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
3	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  padding,  numRecords);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  padding,  numRecords);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entrySize,  padding,  numRecords);	  long    skipped    =    IOUtils.skip(this.entrySize,    padding);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
4	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(  padding,  this.entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(  padding,  this.entrySize);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(  padding,  this.entrySize);	  long    skipped    =    IOUtils.skip(this.entrySize,    padding);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
5	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  padding,  0);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  padding,  0);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entrySize,  padding,  0);	  long    skipped    =    IOUtils.skip(this.entrySize,    padding);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
6	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  numRecords);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  numRecords);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entrySize,  numRecords);	  long    skipped    =    IOUtils.skip(this.entrySize,    padding);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
7	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  padding,  this.recordSize);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  padding,  this.recordSize);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  padding,  this.recordSize);	  long    skipped    =    IOUtils.skip(this.entryOffset,    is,    padding);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
8	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.entryOffset,  is,  padding);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  int  skipped  =  IOUtils.skip(this.entryOffset,  is,  padding);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.entryOffset,  is,  padding);	  long    skipped    =    IOUtils.skip(this.entryOffset,    is,    padding);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
9	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  padding,  is);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  padding,  is);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  padding,  is);	  long    skipped    =    IOUtils.skip(this.entryOffset,    is,    padding);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
10	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  this.recordSize,  padding);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  this.recordSize,  padding);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  this.recordSize,  padding);	  long    skipped    =    IOUtils.skip(this.entryOffset,    is,    padding);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
11	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  numRecords,  padding);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  numRecords,  padding);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  numRecords,  padding);	  long    skipped    =    IOUtils.skip(this.entryOffset,    is,    padding);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
12	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  is,  padding);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  is,  padding);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entrySize,  is,  padding);	  long    skipped    =    IOUtils.skip(this.entryOffset,    is,    padding);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
13	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  available,  padding);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  available,  padding);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  available,  padding);	  long    skipped    =    IOUtils.skip(this.entryOffset,    is,    padding);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
14	[BUG]  [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  padding  =  currEntry.getPadding();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  padding  =  currEntry.getPadding();  }  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  padding  =  currEntry.getPadding();  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
15	[BUG]  [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  padding  +=  currEntry.get  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  padding  +=  currEntry.get  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  padding  +=  currEntry.get	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
16	[BUG]  [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRecordPadding  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRecordPadding  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRecordPadding	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
17	[BUG]  [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  skipRecordPadding  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  skipRecordPadding  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  skipRecordPadding	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
18	[BUG]  [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
19	[BUG]  [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName()))  {  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName()))  {  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName()))  {	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
20	[BUG]  [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getType()  ==  Token.FUNCTION)  {  skipRecordP  [CE]  illegal  start  of  type  [FE]                                AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getType()  ==  Token.FUNCTION)  {  skipRecordP  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getType()  ==  Token.FUNCTION)  {  skipRecordP	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
21	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(recordSize,  padding);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  int  skipped  =  IOUtils.skip(recordSize,  padding);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(recordSize,  padding);	  long    skipped    =    IOUtils.skip(recordSize,    padding);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
22	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(  padding,  recordSize);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(  padding,  recordSize);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(  padding,  recordSize);	  long    skipped    =    IOUtils.skip(recordSize,    padding);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
23	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(records,  padding);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  int  skipped  =  IOUtils.skip(records,  padding);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(records,  padding);	  long    skipped    =    IOUtils.skip(records,    padding);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
24	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(  padding,  records);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(  padding,  records);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(  padding,  records);	  long    skipped    =    IOUtils.skip(records,    padding);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
25	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.entryOffset,  padding);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  int  skipped  =  IOUtils.skip(this.entryOffset,  padding);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.entryOffset,  padding);	  long    skipped    =    IOUtils.skip(this.entryOffset,    padding);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
26	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  padding,  numRecords);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  padding,  numRecords);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  padding,  numRecords);	  long    skipped    =    IOUtils.skip(this.entryOffset,    padding);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
27	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(  padding,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(  padding,  this.entryOffset);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(  padding,  this.entryOffset);	  long    skipped    =    IOUtils.skip(this.entryOffset,    padding);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
28	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  numRecords);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  numRecords);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  numRecords);	  long    skipped    =    IOUtils.skip(this.entryOffset,    padding);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
29	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  padding,  0);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  padding,  0);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  padding,  0);	  long    skipped    =    IOUtils.skip(this.entryOffset,    padding);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
30	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(  padding,  numRecords);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(  padding,  numRecords);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(  padding,  numRecords);	  long    skipped    =    IOUtils.skip(numRecords,    padding);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
31	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(numRecords,  padding);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  int  skipped  =  IOUtils.skip(numRecords,  padding);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(numRecords,  padding);	  long    skipped    =    IOUtils.skip(numRecords,    padding);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
32	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(numRecords,  padding,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(numRecords,  padding,  this.recordSize);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(numRecords,  padding,  this.recordSize);	  long    skipped    =    IOUtils.skip(numRecords,    padding);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
33	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(padding,  is);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  int  skipped  =  IOUtils.skip(padding,  is);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(padding,  is);	  long    skipped    =    IOUtils.skip(padding,    is);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
34	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(numRecords,  is);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(numRecords,  is);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(numRecords,  is);	  long    skipped    =    IOUtils.skip(padding,    is);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
35	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  is);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  is);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  is);	  long    skipped    =    IOUtils.skip(padding,    is);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
36	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.recordSize,  padding);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  int  skipped  =  IOUtils.skip(this.recordSize,  padding);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.recordSize,  padding);	  long    skipped    =    IOUtils.skip(this.recordSize,    padding);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
37	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(  padding,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(  padding,  this.recordSize);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(  padding,  this.recordSize);	  long    skipped    =    IOUtils.skip(this.recordSize,    padding);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
38	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  padding,  numRecords);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  padding,  numRecords);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.recordSize,  padding,  numRecords);	  long    skipped    =    IOUtils.skip(this.recordSize,    padding);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
39	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  this.recordSize);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  this.recordSize);	  long    skipped    =    IOUtils.skip(this.recordSize,    padding);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
40	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  padding,  0);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  padding,  0);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.recordSize,  padding,  0);	  long    skipped    =    IOUtils.skip(this.recordSize,    padding);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
41	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.available,  padding);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  int  skipped  =  IOUtils.skip(this.available,  padding);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.available,  padding);	  long    skipped    =    IOUtils.skip(this.available,    padding);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
42	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.available,  padding,  this.recordSize);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(this.available,  padding,  this.recordSize);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.available,  padding,  this.recordSize);	  long    skipped    =    IOUtils.skip(this.available,    padding);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
43	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.available,  padding,  numRecords);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(this.available,  padding,  numRecords);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.available,  padding,  numRecords);	  long    skipped    =    IOUtils.skip(this.available,    padding);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
44	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(padding,  is);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  Integer  skipped  =  IOUtils.skip(padding,  is);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(padding,  is);	  Integer    skipped    =    IOUtils.skip(is,    padding);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
45	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entryOffset,  padding);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entryOffset,  padding);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.entryOffset,  padding);	  Integer    skipped    =    IOUtils.skip(is,    padding);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
46	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entrySize,  padding);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entrySize,  padding);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.entrySize,  padding);	  Integer    skipped    =    IOUtils.skip(is,    padding);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
47	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entryOffset,  is,  padding);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entryOffset,  is,  padding);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.entryOffset,  is,  padding);	  Integer    skipped    =    IOUtils.skip(is,    padding);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
48	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(numRecords,  padding);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  Integer  skipped  =  IOUtils.skip(numRecords,  padding);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(numRecords,  padding);	  Integer    skipped    =    IOUtils.skip(is,    padding);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
49	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.recordSize,  padding);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  Integer  skipped  =  IOUtils.skip(this.recordSize,  padding);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.recordSize,  padding);	  Integer    skipped    =    IOUtils.skip(is,    padding);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
50	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(recordSize,  numRecords);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(recordSize,  numRecords);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(recordSize,  numRecords);	  long    skipped    =    IOUtils.skip(recordSize,    padding);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
51	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(recordSize,  padding);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  Integer  skipped  =  IOUtils.skip(recordSize,  padding);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(recordSize,  padding);	  long    skipped    =    IOUtils.skip(recordSize,    padding);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
52	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  available);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  available);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  available);	  long    skipped    =    IOUtils.skip(this.entryOffset,    padding);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
53	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  this.recordSize);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  this.recordSize);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entrySize,  this.recordSize);	  long    skipped    =    IOUtils.skip(this.entrySize,    padding);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
54	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.available,  numRecords);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(this.available,  numRecords);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.available,  numRecords);	  long    skipped    =    IOUtils.skip(this.available,    padding);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
55	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.available,  padding,  0);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(this.available,  padding,  0);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.available,  padding,  0);	  long    skipped    =    IOUtils.skip(this.available,    padding);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
56	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.available,  padding  -  this.recordSize);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(this.available,  padding  -  this.recordSize);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.available,  padding  -  this.recordSize);	  long    skipped    =    IOUtils.skip(this.available,    padding);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
57	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(records,  padding,  0);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(records,  padding,  0);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(records,  padding,  0);	  long    skipped    =    IOUtils.skip(records,    padding);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
58	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.records,  padding);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(this.records,  padding);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.records,  padding);	  long    skipped    =    IOUtils.skip(records,    padding);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
59	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(records,  numRecords);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(records,  numRecords);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(records,  numRecords);	  long    skipped    =    IOUtils.skip(records,    padding);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
60	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  is);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  is);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entrySize,  is);	  long    skipped    =    IOUtils.skip(padding,    is);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
61	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(recordSize,  is);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(recordSize,  is);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(recordSize,  is);	  long    skipped    =    IOUtils.skip(padding,    is);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
62	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  is);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  is);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.recordSize,  is);	  long    skipped    =    IOUtils.skip(padding,    is);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
63	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  numRecords);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  numRecords);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.recordSize,  numRecords);	  long    skipped    =    IOUtils.skip(this.recordSize,    padding);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
64	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  this.available);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  this.available);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.recordSize,  this.available);	  long    skipped    =    IOUtils.skip(this.recordSize,    padding);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
65	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  padding,  this.available);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  padding,  this.available);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.recordSize,  padding,  this.available);	  long    skipped    =    IOUtils.skip(this.recordSize,    padding);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
66	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  is,  padding);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  is,  padding);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.recordSize,  is,  padding);	  long    skipped    =    IOUtils.skip(this.entryOffset,    is,    padding);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
67	[BUG]  [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
68	[BUG]  [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
69	[BUG]  [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.recordName))  {  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.recordName))  {  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.recordName))  {	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
70	[BUG]  [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
71	[BUG]  [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.recordSize))  {  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.recordSize))  {  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.recordSize))  {	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
72	[BUG]  [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
73	[BUG]  [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getName  [CE]  illegal  start  of  type  [FE]                                AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getName  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getName	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
74	[BUG]  [BUGGY]  short  skipped  =  IOUtils.skip(padding,  numRecords);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  short  skipped  =  IOUtils.skip(padding,  numRecords);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	short  skipped  =  IOUtils.skip(padding,  numRecords);	  long    skipped    =    IOUtils.skip(numRecords,    padding);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
75	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entryOffset,  numRecords);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entryOffset,  numRecords);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.entryOffset,  numRecords);	  Integer    skipped    =    IOUtils.skip(is,    padding);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
76	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(is,  padding,  numRecords);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  Integer  skipped  =  IOUtils.skip(is,  padding,  numRecords);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(is,  padding,  numRecords);	  Integer    skipped    =    IOUtils.skip(is,    padding);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
77	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  is,  numRecords);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  is,  numRecords);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  is,  numRecords);	  long    skipped    =    IOUtils.skip(this.entryOffset,    is,    padding);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
78	[BUG]  [BUGGY]  short  skipped  =  IOUtils.skip(this.recordSize,  padding);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  short  skipped  =  IOUtils.skip(this.recordSize,  padding);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	short  skipped  =  IOUtils.skip(this.recordSize,  padding);	  long    skipped    =    IOUtils.skip(this.recordSize,    padding);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
79	[BUG]  [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
80	[BUG]  [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.isEnabled(Feature.QUOTE_  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.isEnabled(Feature.QUOTE_  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.isEnabled(Feature.QUOTE_	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
81	[BUG]  [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
82	[BUG]  [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  padding);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  padding);  }  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  padding);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
83	[BUG]  [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRecordPadding  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRecordPadding  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRecordPadding	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
84	[BUG]  [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding();  }  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding();  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
85	[BUG]  [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                                AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
86	[BUG]  [BUGGY]  short  skipped  =  IOUtils.skip(padding,  recordSize);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  short  skipped  =  IOUtils.skip(padding,  recordSize);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	short  skipped  =  IOUtils.skip(padding,  recordSize);	  long    skipped    =    IOUtils.skip(recordSize,    padding);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
87	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(records,  padding);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  Integer  skipped  =  IOUtils.skip(records,  padding);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(records,  padding);	  long    skipped    =    IOUtils.skip(records,    padding);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
88	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.available,  padding);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  Integer  skipped  =  IOUtils.skip(this.available,  padding);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.available,  padding);	  long    skipped    =    IOUtils.skip(this.available,    padding);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
89	[BUG]  [BUGGY]  short  skipped  =  IOUtils.skip(this.entryOffset,  padding);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  short  skipped  =  IOUtils.skip(this.entryOffset,  padding);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	short  skipped  =  IOUtils.skip(this.entryOffset,  padding);	  long    skipped    =    IOUtils.skip(this.entryOffset,    padding);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
90	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(is,  padding,  numRecords);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  int  skipped  =  IOUtils.skip(is,  padding,  numRecords);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(is,  padding,  numRecords);	  int    skipped    =    IOUtils.skip(is,    padding);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
91	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.entryOffset,  numRecords);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;    [BUGGY]  int  skipped  =  IOUtils.skip(this.entryOffset,  numRecords);  [BUGGY]    count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.entryOffset,  numRecords);	  int    skipped    =    IOUtils.skip(is,    padding);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
