projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(is,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(is,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entrySize,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(numRecords,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(padding,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.recordSize,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.available,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(records,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(recordSize,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,is,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(is,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.entrySize,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entrySize,padding,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entrySize,padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(padding,this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entrySize,padding,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entrySize,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,padding,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.entryOffset,is,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,padding,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,this.recordSize,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,numRecords,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entrySize,is,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,available,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();padding=currEntry.getPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();padding+=currEntry.get
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){skipRecordPadding
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()==null){skipRecordPadding
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=this.currEntry.getValue();if(currEntry.getName().equals(currEntry.getName
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=this.currEntry.getValue();if(currEntry.getName().equals(currEntry.getName())){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.getType()==Token.FUNCTION){skipRecordP
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(recordSize,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(padding,recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(records,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(padding,records);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.entryOffset,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(padding,this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,padding,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(numRecords,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(numRecords,padding,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(padding,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(numRecords,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.recordSize,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(padding,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.recordSize,padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.recordSize,padding,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.available,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.available,padding,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.available,padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(padding,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.entryOffset,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.entrySize,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.entryOffset,is,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(numRecords,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.recordSize,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(recordSize,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(recordSize,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entrySize,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.available,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.available,padding,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.available,padding-this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(records,padding,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.records,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(records,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entrySize,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(recordSize,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.recordSize,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.recordSize,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.recordSize,this.available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.recordSize,padding,this.available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.recordSize,is,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordPadding
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordPadding
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().equals(this.recordName)){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordP
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith(this.recordSize)){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.getName
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304shortskipped=IOUtils.skip(padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.entryOffset,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(is,padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,is,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304shortskipped=IOUtils.skip(this.recordSize,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith("
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.isEnabled(Feature.QUOTE_
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;++i){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;++i){skipRecordPadding(i,padding);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){skipRecordPadding
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;++i){skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304shortskipped=IOUtils.skip(padding,recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(records,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.available,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304shortskipped=IOUtils.skip(this.entryOffset,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(is,padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.entryOffset,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=currEntry.getValue();if(currEntry.getName().equals(currEntry.getName
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=currEntry.getValue();if(currEntry.getName().equals(currEntry.getName
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=this.currEntry.getValue();if(currEntry.getName().equals(currEntry.getName
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=currEntry.getValue();if(currEntry.getName().equals(currEntry.getName())
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>=0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=currEntry.getValue();if(currEntry.getName().equals(currEntry.getName
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=currEntry.getValue();if(currEntry.getName().equals(currEntry.
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=currEntry.getValue();if(currEntry.getName().equals(currEntry.get
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.entryOffset,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(available,this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entrySize,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(numRecords,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(numRecords,this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.entryOffset,numRecords,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entrySize,numRecords,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,numRecords,padding,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(padding,numRecords,this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.entrySize,is,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entrySize,padding,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entrySize,this.recordSize,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.entrySize,is,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.entrySize,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(numRecords,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.recordSize,this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.entryOffset,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(numRecords,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.entryOffset,this.recordSize,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,this.recordSize,padding,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.recordSize,this.entryOffset,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,this.recordSize,padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(padding,this.recordSize,this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(is,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(lineno,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.recordSize,this.available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entrySize,this.available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.available,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,this.available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.entrySize,padding,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(padding,this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.entrySize,padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.entrySize,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.entrySize,padding,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.records,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.records,padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.records,padding,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.records,padding,this.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.records,padding,this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.entryOffset,is,padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.entryOffset,padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(padding,is,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(is,padding,numRecords,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.entryOffset,is,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(numRecords,padding,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.entryOffset,is,padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.entryOffset,padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(padding,is,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.entrySize,padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(is,padding,numRecords,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.entryOffset,is,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(recordSize,padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){skip
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){skipRecordP
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){skip
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){skipRecordPadding
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){skip
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(numRecords,padding,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(pattern,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(padding,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.recordSize,padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.recordSize,padding,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.recordSize,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304for(inti=0;i<numRecords;++i){skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<padding;++i){skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<this.recordSize;++i){skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intnumRecords=padding>0?skipRecordPadding():0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intnumRecords=padding>0?numRecords:0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<this.entrySize;++i){skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<bufferSize;++i){skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304for(inti=0;i<numRecords;++i){skipRecordPadding(i,padding);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304while(padding>0){for(inti=0;i<numRecords;++i){skipRecordPadding(i,padding);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304for(inti=0;i<numRecords;++i){skipRecordPadding(i,this.recordSize);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;++i){skipRecordPadding(i,this.recordSize);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;++i){skipRecordPadding(i,padding);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304while(padding>0){for(inti=0;i<numRecords;++i){skipRecordPadding(i,this.recordSize);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=this.currEntry.getValue();if(currEntry.getName().equals(currEntry
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=this.currEntry.getValue();if(currEntry.getName().equals(
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=currEntry.getValue();if(currEntry.getName().equals(currEntry
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=this.currEntry.getValue();if(currEntry.getName().equals(currEntry.
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=this.currEntry.getValue();if(currEntry.getName().equals(curr
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith("
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith("
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>=0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith("
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(!hasHitEOF){if(padding>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith("
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(!hasHitEOF){if(padding>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith(
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords<0){if(padding>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith("
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.available,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(numRecords,this.available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(records,padding,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(numRecords,padding,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(padding,this.entrySize,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(records,padding,0,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(padding,recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(padding,this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.entryOffset,padding,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.entryOffset,padding,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.entryOffset,padding,isHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.entryOffset,is,padding,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(padding,records);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.recordSize,is,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.recordSize,padding,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.recordSize,padding,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(padding,this.entrySize,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(numRecords,padding,this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(numRecords,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.entryOffset,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(in,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(numRecords,padding,this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(padding,this.entryOffset,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordP
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecord
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordP
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordPadding
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordPadding
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.entryOffset,padding,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.entryOffset,padding,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.entryOffset,this.recordSize,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.entryOffset,numRecords,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.entryOffset,padding,isHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordP
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecord
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordP
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordP
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordPadding
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(padding,this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(numRecords,this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.entryStart,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.available,padding,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.available,padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(padding,this.available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304for(inti=0;i<numRecords;++i){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<padding;++i){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<this.recordSize;++i){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<this.entrySize;++i){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intnumRecords=padding>0?skipRecordPadding(i):0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304inti=numRecords;++i){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304inti=0;++i){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){skip
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){skipRecordP
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){skip
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){skipRecordPadding
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.recordSize,padding,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,this.recordSize,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.recordSize,padding,0,this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.recordSize,padding,1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.recordSize,padding,0,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.entryOffset,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.recordSize,this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.recordSize,this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordP
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry==null){skipRecordP
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304shortskipped=IOUtils.skip(numRecords,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304shortskipped=IOUtils.skip(this.entryOffset,padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304shortskipped=IOUtils.skip(this.entrySize,padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()==null){skip
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()==null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()==null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()==null){skipRecordP
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()==null){skip
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()==null){skipRecordPadding
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(padding,numRecords,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(padding,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(padding,0,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(padding,numRecords+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.getType()==Token.FUNCTION){skip
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.getType()==Token.FUNCTION){skip
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.getType()==Token.FUNCTION
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.getType()==Token.FUNCTION){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.getType()==Token.FUNCTION){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().equals(this.recordName)
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().equals(this.recordName)){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().equals(this.recordName)){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().equals(this.recordName
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().equals(this.record
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().equals(this.recordName)
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().equals(this.
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.entrySize,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(numRecords,this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.recordSize,padding,this.available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entrySize,padding,this.available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(padding,this.recordSize,this.available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>=0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(!hasHitEOF){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<this.recordSize;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,available,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,numRecords,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(padding,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304shortskipped=IOUtils.skip(this.entrySize,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.available,padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,this.available,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(numRecords,padding,this.available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.available,padding,this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(padding,this.recordSize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(padding,this.entrySize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(padding,this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(padding,this.entryOffset+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(padding,numRecords,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.available,padding,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,this.available,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.available,padding,0,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,padding-this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.available,padding-this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(numRecords,padding-this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entrySize,padding-this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.recordSize,padding-this.available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,this.available-this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.recordSize,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,this.recordSize,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.entrySize,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.entrySize,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>=0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();padding=currEntry.getPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();padding=currEntry.getPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();padding=currEntry.get
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(numRecords,this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304shortskipped=IOUtils.skip(padding,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304shortskipped=IOUtils.skip(this.recordSize,padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(recordSize,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(numRecords,recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.recordSize,padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.recordSize,padding,this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(padding,this.recordSize,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.isEnabled(Feature.QUOTE_
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.isEnabled(Feature.QUOTE
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.isEnabled(Feature.QUOTE_
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(!hasHitEOF){if(padding>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.isEnabled(Feature.QUOTE
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.isEnabled(Feature.QUOTE
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.entrySize,padding,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entrySize,padding,0,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entrySize,padding,0,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entrySize,padding,1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.entryOffset,padding,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,padding,0,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,padding,1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,padding,0,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.entrySize,padding,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.recordSize,padding,this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(padding,this.entrySize,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.recordSize,padding,this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.available,padding,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,this.available,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entrySize,is,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304shortskipped=IOUtils.skip(this.entryOffset,is,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304shortskipped=IOUtils.skip(this.entryOffset,padding,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304shortskipped=IOUtils.skip(padding,this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(recordSize,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304shortskipped=IOUtils.skip(this.entryOffset,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith(this.record
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith(this.recordS
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith(this.recordSize)
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith(this.recordSize)){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith(this.recordSize
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>=0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith(this.recordSize)
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>=0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith(this.recordS
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.recordSize,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.recordSize,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.getName!=
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.getName==
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.getName!=
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.getName==
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.getName!=
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.entryOffset,available,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,available,padding,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(available,this.entryOffset,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,available,padding,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,available,padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entrySize,available,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,padding,this.recordSize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(padding,this.entryOffset,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.entryOffset,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(padding,recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();padding+=currEntry.get
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();padding+=currEntry.get
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();padding+=currEntry.get
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>=0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();padding+=currEntry.get
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(padding,this.available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<this.recordSize;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<padding;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(padding,records);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(records,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(padding,this.records);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(numRecords,padding,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(Padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(records,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(!hasHitEOF){if(padding>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValu
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>=0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.getName!=
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>=0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.getName!=illegalstart
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,numRecords,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,available,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(recordSize,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(is,recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()==null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>=0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()==null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>=0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()==null){skip
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.entrySize,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<padding.length;++i){skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<PaddingCount;++i){skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,this.recordSize,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<this.recordSize;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith(this.record
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding!=0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith(this.record
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(!hasHitEOF){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith(this.record
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>=0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith(this.record
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding!=0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith(this.recordSize)
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(padding,numberRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(padding,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(recordSize,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.recordSize,this.entryOffset,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entrySize,this.recordSize,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>=0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(!hasHitEOF){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding!=0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.recordSize,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.entryOffset,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304shortskipped=IOUtils.skip(this.entryOffset,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.recordSize,numRecords,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,numRecords,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entrySize,padding,this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<bufferSize;++i){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<padding.length;++i){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intnumRecords=skipRecordPadding(numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.available,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entrySize,this.recordSize,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entrySize,numRecords,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304shortskipped=IOUtils.skip(this.entrySize,padding,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.available,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.available,padding-this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.available,padding+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.available,padding,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.recordSize,this.available,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.recordSize,available,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,available,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,available,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(available,this.entrySize,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(padding,this.recordSize-1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entrySize,this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryBuffer,this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Shortskipped=IOUtils.skip(padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(recordSize,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304shortskipped=IOUtils.skip(this.recordSize,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.recordSize-padding,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304shortskipped=IOUtils.skip(this.entrySize,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>=0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordP
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(!hasHitEOF){if(padding>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skip
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(records,numRecords,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(records,padding,1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(records,padding,-1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.recordSize,this.available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.recordSize,padding+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>=0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<this.recordSize;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.recordSize,this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304shortskipped=IOUtils.skip(this.recordSize,this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304shortskipped=IOUtils.skip(this.available,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.recordSize,this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304shortskipped=IOUtils.skip(this.recordSize,this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(padding,this.available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304shortskipped=IOUtils.skip(this.recordSize,this.available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304shortskipped=IOUtils.skip(this.entrySize,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>=0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.isEnabled(Feature.QUOTE
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(!hasHitEOF){if(padding>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEnt
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.isEnable
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(is,numRecords,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(is,padding,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>=0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>=0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordP
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(!hasHitEOF){if(padding>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=nu
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.available,numRecords,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304shortskipped=IOUtils.skip(this.available,padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.recordSize,is,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.entryOffset,available,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>=0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.getType()==Token.FUNCTION){skip
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.entrySize,is,padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(is,numRecords,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(!hasHitEOF){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().equals(this.recordName)){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding!=0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().equals(this.recordName)){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>=0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().equals(this.recordName)){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding!=0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().equals(this.recordName)
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>=0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().equals(this.recordName)
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.available,numRecords,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.available,this.recordSize,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.available,padding,0,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.records,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.records,padding,this.available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.records,padding+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.available,numRecords,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.available,this.recordSize,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,this.available,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.available,this.entryOffset,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.recordSize,is,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.entryOffset,numRecords,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entry,padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304shortskipped=IOUtils.skip(this.recordSize,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304shortskipped=IOUtils.skip(this.recordSize,padding,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(is,this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304shortskipped=IOUtils.skip(this.entryOffset,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.recordSize,this.available,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.recordSize,this.available,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.recordSize,available,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding!=0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith("
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith(
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<this.recordSize;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith("
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.available,numRecords-this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.available,padding-this.recordSize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding!=0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();padding+=currEntry.get
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.recordSize,this.entrySize,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.entrySize,this.recordSize,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entrySize,numRecords,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.recordSize,numRecords,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.recordSize,this.available,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.recordSize,padding,0,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=this.currEntry.getValue();if(currEntry.getName().equals(currEntry.getName
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=this.currEntry.getValue();if(currEntry.getName().equals(
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>=0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=this.currEntry.getValue();if(currEntry.getName().equals(currEntry
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=this.currEntry.getValue();if(currEntry.getName().equals(currEntry
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(!hasHitEOF){if(padding>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=this.currEntry.getValue();if
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding!=0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<padding;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(!hasHitEOF){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=currEntry.getValue();if(currEntry.getName().equals(currEntry.getName())){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>=0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=currEntry.getValue();if(currEntry.getName().equals(currEntry.getName())){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding!=0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=currEntry.getValue();if(currEntry.getName().equals(currEntry.getName())){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(!hasHitEOF){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=currEntry.getValue();if(currEntry.getName().equals(currEntry.getName())
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=currEntry.getValue();if(currEntry.getName().equals(currEntry.getName())){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=this.currEntry.getValue();if(currEntry.getName().equals(currEntry.getName())
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=this.currEntry.getValue();if(currEntry.getName().equals(currEntry.getName())){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>=0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>=0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding!=0){for(inti=0;i<numRecords;++i){skipRecordPadding(i,padding);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>=0){for(inti=0;i<numRecords;++i){skipRecordPadding(i,padding);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding!=0){for(inti=0;i<numRecords;++i){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>=0){for(inti=0;i<numRecords;++i){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding!=0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();padding=currEntry.getPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();padding=currEntry.getPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(is,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entryOffset,numRecords,padding,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(!hasHitEOF){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith("
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.getType
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.getType
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(numRecords,recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith(this.record
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(hasHitEOF){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith(this.record
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.records,padding,this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.records,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(numRecords,available,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(is,padding,this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.available,0,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=currEntry.getValue();if(currEntry.getName().equals(currEntry
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(!hasHitEOF){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=currEntry.getValue();if(currEntry.getName().equals(currEntry
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=currEntry.getValue();if(currEntry.getName().equals(currEnt
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding!=0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=currEntry.getValue();if(currEntry.getName().equals(currEntry
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordP
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordPadding
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.available,padding,numRecords,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(!hasHitEOF){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().equals(this.recordName)
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().equals(this.record
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(is,padding,this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(is,padding,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304while(padding>0){for(inti=0;i<numRecords;++i){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;++i){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(records,padding,this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(records,this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()==null){skip
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()==null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.available,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(numRecords,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(is,this.entryOffset,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.isEnabled(Feature.QUOTE_
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(!hasHitEOF){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.isEnabled(Feature.QUOTE
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(!hasHitEOF){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.isEnabled(Feature.QUOTE_
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(is,this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304while(padding>0){for(inti=0;i<numRecords;++i){skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304inti=numRecords;++i){skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;++i){skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(!hasHitEOF){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordP
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding!=0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordP
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecord
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.entryOffset,is,padding,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(is,this.entryOffset,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(hasHitEOF){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304shortskipped=IOUtils.skip(this.recordSize,this.entryOffset,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(!hasHitEOF){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.getName!=illegalstart
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.getName!=illegalstart
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.getName==illegalstart
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=(TarArchiveEntry)currEntry.getValue();if(currEntry.getName>=illegalstart
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304shortskipped=IOUtils.skip(records,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(numRecords,this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){skip
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(!hasHitEOF){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(this.entrySize,padding,this.recordOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.entryOffset,is,padding,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(this.entryOffset,is,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304Integerskipped=IOUtils.skip(pattern,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;i++){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(padding!=0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=currEntry.getValue();if(currEntry.getName().equals(currEntry.getName())
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;i++){}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=currEntry.getValue();if(currEntry.getName().equals(currEntry.getName())
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304if(!hasHitEOF){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=currEntry.getValue();if(currEntry.getName().equals(currEntry.getName
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304longskipped=IOUtils.skip(input,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(pattern,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java304intskipped=IOUtils.skip(this.recordSize,padding,this.entrySize);
