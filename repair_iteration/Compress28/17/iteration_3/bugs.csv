bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    this.currEntry.getValue();    if(currEntry.getName().equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
2	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    this.currEntry.getValue();    if(currEntry.getName().equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
3	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    this.currEntry.getValue();    if(currEntry.getName().equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
4	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName())  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName())  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName())	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    this.currEntry.getValue();    if(currEntry.getName().equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
5	[BUG]  [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    this.currEntry.getValue();    if(currEntry.getName().equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
6	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    this.currEntry.getValue();    if(currEntry.getName().equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
7	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.get  [CE]  illegal  start  of  type  [FE]                                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.get  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.get	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    this.currEntry.getValue();    if(currEntry.getName().equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
8	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.entryOffset,  available);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.entryOffset,  available);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.entryOffset,  available);	  long    skipped    =    IOUtils.skip(this.entryOffset,    available);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
9	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(available,  this.entryOffset);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(available,  this.entryOffset);	  long    skipped    =    IOUtils.skip(this.entryOffset,    available);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
10	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  available);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  available);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entrySize,  available);	  long    skipped    =    IOUtils.skip(this.entryOffset,    available);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
11	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(numRecords,  available);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(numRecords,  available);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(numRecords,  available);	  long    skipped    =    IOUtils.skip(this.entryOffset,    available);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
12	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(numRecords,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(numRecords,  this.entryOffset);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(numRecords,  this.entryOffset);	  long    skipped    =    IOUtils.skip(this.entryOffset,    available);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
13	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.entryOffset,  numRecords,  padding);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.entryOffset,  numRecords,  padding);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.entryOffset,  numRecords,  padding);	  long    skipped    =    IOUtils.skip(this.entryOffset,    numRecords,    padding);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
14	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  numRecords,  padding);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  numRecords,  padding);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entrySize,  numRecords,  padding);	  long    skipped    =    IOUtils.skip(this.entryOffset,    numRecords,    padding);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
15	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  numRecords,  padding,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  numRecords,  padding,  hasHitEOF);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  numRecords,  padding,  hasHitEOF);	  long    skipped    =    IOUtils.skip(this.entryOffset,    numRecords,    padding);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
16	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(  padding,  numRecords,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(  padding,  numRecords,  this.entryOffset);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(  padding,  numRecords,  this.entryOffset);	  long    skipped    =    IOUtils.skip(this.entryOffset,    numRecords,    padding);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
17	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.entrySize,  is,  padding);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.entrySize,  is,  padding);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.entrySize,  is,  padding);	  long    skipped    =    IOUtils.skip(this.entrySize,    is,    padding);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
18	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  padding,  is);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  padding,  is);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entrySize,  padding,  is);	  long    skipped    =    IOUtils.skip(this.entrySize,    is,    padding);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
19	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  this.recordSize,  padding);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  this.recordSize,  padding);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entrySize,  this.recordSize,  padding);	  long    skipped    =    IOUtils.skip(this.entrySize,    is,    padding);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
20	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entrySize,  is,  padding);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entrySize,  is,  padding);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.entrySize,  is,  padding);	  long    skipped    =    IOUtils.skip(this.entrySize,    is,    padding);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
21	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.entrySize,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.entrySize,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.entrySize,  this.recordSize);	  long    skipped    =    IOUtils.skip(this.entrySize,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
22	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(numRecords,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(numRecords,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(numRecords,  this.recordSize);	  long    skipped    =    IOUtils.skip(this.entrySize,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
23	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.recordSize,  this.entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.recordSize,  this.entrySize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.recordSize,  this.entrySize);	  long    skipped    =    IOUtils.skip(this.entrySize,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
24	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.entryOffset,  is);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.entryOffset,  is);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.entryOffset,  is);	  int    skipped    =    IOUtils.skip(padding,    is);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
25	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(numRecords,  is);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(numRecords,  is);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(numRecords,  is);	  int    skipped    =    IOUtils.skip(padding,    is);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
26	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.entryOffset,  this.recordSize,  padding);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.entryOffset,  this.recordSize,  padding);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.entryOffset,  this.recordSize,  padding);	  long    skipped    =    IOUtils.skip(this.entryOffset,    this.recordSize,    padding);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
27	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  this.recordSize,  padding,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  this.recordSize,  padding,  hasHitEOF);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  this.recordSize,  padding,  hasHitEOF);	  long    skipped    =    IOUtils.skip(this.entryOffset,    this.recordSize,    padding);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
28	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  this.entryOffset,  padding);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  this.entryOffset,  padding);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.recordSize,  this.entryOffset,  padding);	  long    skipped    =    IOUtils.skip(this.entryOffset,    this.recordSize,    padding);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
29	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  this.recordSize,  padding,  numRecords);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  this.recordSize,  padding,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  this.recordSize,  padding,  numRecords);	  long    skipped    =    IOUtils.skip(this.entryOffset,    this.recordSize,    padding);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
30	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(  padding,  this.recordSize,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(  padding,  this.recordSize,  this.entryOffset);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(  padding,  this.recordSize,  this.entryOffset);	  long    skipped    =    IOUtils.skip(this.entryOffset,    this.recordSize,    padding);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
31	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(is,  numRecords);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(is,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(is,  numRecords);	  long    skipped    =    IOUtils.skip(numRecords,    is);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
32	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(lineno,  is);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(lineno,  is);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(lineno,  is);	  long    skipped    =    IOUtils.skip(numRecords,    is);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
33	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.recordSize,  this.available);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.recordSize,  this.available);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.recordSize,  this.available);	  long    skipped    =    IOUtils.skip(this.recordSize,    this.available);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
34	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  this.available);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  this.available);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entrySize,  this.available);	  long    skipped    =    IOUtils.skip(this.recordSize,    this.available);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
35	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.available,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.available,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.available,  this.recordSize);	  long    skipped    =    IOUtils.skip(this.recordSize,    this.available);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
36	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  this.available);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  this.available);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  this.available);	  long    skipped    =    IOUtils.skip(this.recordSize,    this.available);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
37	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entrySize,  padding,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entrySize,  padding,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.entrySize,  padding,  this.recordSize);	  Integer    skipped    =    IOUtils.skip(this.entrySize,    padding);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
38	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(  padding,  this.entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(  padding,  this.entrySize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(  padding,  this.entrySize);	  Integer    skipped    =    IOUtils.skip(this.entrySize,    padding);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
39	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entrySize,  padding,  numRecords);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entrySize,  padding,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.entrySize,  padding,  numRecords);	  Integer    skipped    =    IOUtils.skip(this.entrySize,    padding);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
40	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entrySize,  numRecords);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entrySize,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.entrySize,  numRecords);	  Integer    skipped    =    IOUtils.skip(this.entrySize,    padding);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
41	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entrySize,  padding,  0);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entrySize,  padding,  0);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.entrySize,  padding,  0);	  Integer    skipped    =    IOUtils.skip(this.entrySize,    padding);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
42	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.records,  padding);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.records,  padding);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.records,  padding);	  long    skipped    =    IOUtils.skip(this.records,    padding);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
43	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.records,  padding,  numRecords);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.records,  padding,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.records,  padding,  numRecords);	  long    skipped    =    IOUtils.skip(this.records,    padding);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
44	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.records,  padding,  0);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.records,  padding,  0);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.records,  padding,  0);	  long    skipped    =    IOUtils.skip(this.records,    padding);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
45	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.records,  padding,  this.length);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.records,  padding,  this.length);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.records,  padding,  this.length);	  long    skipped    =    IOUtils.skip(this.records,    padding);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
46	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.records,  padding,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.records,  padding,  this.entryOffset);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.records,  padding,  this.entryOffset);	  long    skipped    =    IOUtils.skip(this.records,    padding);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
47	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entryOffset,  is,  padding,  numRecords);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entryOffset,  is,  padding,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.entryOffset,  is,  padding,  numRecords);	  Integer    skipped    =    IOUtils.skip(is,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
48	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entryOffset,  padding,  numRecords);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entryOffset,  padding,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.entryOffset,  padding,  numRecords);	  Integer    skipped    =    IOUtils.skip(is,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
49	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(padding,  is,  numRecords);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(padding,  is,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(padding,  is,  numRecords);	  Integer    skipped    =    IOUtils.skip(is,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
50	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(is,  padding,  numRecords,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(is,  padding,  numRecords,  hasHitEOF);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(is,  padding,  numRecords,  hasHitEOF);	  Integer    skipped    =    IOUtils.skip(is,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
51	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entryOffset,  is,  numRecords);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entryOffset,  is,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.entryOffset,  is,  numRecords);	  Integer    skipped    =    IOUtils.skip(is,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
52	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(numRecords,  padding,  is);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(numRecords,  padding,  is);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(numRecords,  padding,  is);	  Integer    skipped    =    IOUtils.skip(is,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
53	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.entryOffset,  is,  padding,  numRecords);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.entryOffset,  is,  padding,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.entryOffset,  is,  padding,  numRecords);	  int    skipped    =    IOUtils.skip(is,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
54	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.entryOffset,  padding,  numRecords);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.entryOffset,  padding,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.entryOffset,  padding,  numRecords);	  int    skipped    =    IOUtils.skip(is,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
55	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(padding,  is,  numRecords);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(padding,  is,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(padding,  is,  numRecords);	  int    skipped    =    IOUtils.skip(is,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
56	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.entrySize,  padding,  numRecords);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.entrySize,  padding,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.entrySize,  padding,  numRecords);	  int    skipped    =    IOUtils.skip(is,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
57	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(is,  padding,  numRecords,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(is,  padding,  numRecords,  hasHitEOF);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(is,  padding,  numRecords,  hasHitEOF);	  int    skipped    =    IOUtils.skip(is,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
58	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.entryOffset,  is,  numRecords);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.entryOffset,  is,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.entryOffset,  is,  numRecords);	  int    skipped    =    IOUtils.skip(is,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
59	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(recordSize,  padding,  numRecords);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(recordSize,  padding,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(recordSize,  padding,  numRecords);	  int    skipped    =    IOUtils.skip(is,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
60	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skip  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skip  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skip	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
61	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRe  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRe	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
62	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
63	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRecordP  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRecordP  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRecordP	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
64	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skip  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skip  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skip	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
65	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRecordPadding  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRecordPadding  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRecordPadding	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
66	[BUG]  [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skip  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skip  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skip	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
67	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(  padding,  numRecords);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(  padding,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(  padding,  numRecords);	  int    skipped    =    IOUtils.skip(numRecords,    padding);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
68	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(numRecords,  padding,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(numRecords,  padding,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(numRecords,  padding,  this.recordSize);	  int    skipped    =    IOUtils.skip(numRecords,    padding);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
69	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(pattern,  numRecords);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(pattern,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(pattern,  numRecords);	  int    skipped    =    IOUtils.skip(numRecords,    padding);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
70	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(  padding,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(  padding,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(  padding,  this.recordSize);	  Integer    skipped    =    IOUtils.skip(this.recordSize,    padding);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
71	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.recordSize,  padding,  numRecords);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(this.recordSize,  padding,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.recordSize,  padding,  numRecords);	  Integer    skipped    =    IOUtils.skip(this.recordSize,    padding);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
72	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.recordSize,  padding,  0);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(this.recordSize,  padding,  0);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.recordSize,  padding,  0);	  Integer    skipped    =    IOUtils.skip(this.recordSize,    padding);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
73	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.recordSize,  numRecords);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(this.recordSize,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.recordSize,  numRecords);	  Integer    skipped    =    IOUtils.skip(this.recordSize,    padding);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
74	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding();  }  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding();  }	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
75	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  padding;  ++i)  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  padding;  ++i)  {  skipRecordPadding();  }  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  padding;  ++i)  {  skipRecordPadding();  }	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
76	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  skipRecordPadding();  }  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  skipRecordPadding();  }	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
77	[BUG]  [BUGGY]  int  numRecords  =  padding  >  0?  skipRecordPadding()  :  0;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  numRecords  =  padding  >  0?  skipRecordPadding()  :  0;  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  numRecords  =  padding  >  0?  skipRecordPadding()  :  0;	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
78	[BUG]  [BUGGY]  int  numRecords  =  padding  >  0?  numRecords  :  0;  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  numRecords  =  padding  >  0?  numRecords  :  0;  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  numRecords  =  padding  >  0?  numRecords  :  0;	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
79	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.entrySize;  ++i)  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.entrySize;  ++i)  {  skipRecordPadding();  }  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.entrySize;  ++i)  {  skipRecordPadding();  }	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
80	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  bufferSize;  ++i)  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  bufferSize;  ++i)  {  skipRecordPadding();  }  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  bufferSize;  ++i)  {  skipRecordPadding();  }	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
81	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  padding);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  padding);  }  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  padding);  }	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i,    padding);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
82	[BUG]  [BUGGY]  while(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  padding);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  while(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  padding);  }  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	while(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  padding);  }	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i,    padding);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
83	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  this.recordSize);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  this.recordSize);  }  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  this.recordSize);  }	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i,    padding);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
84	[BUG]  [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  this.recordSize);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  this.recordSize);  }  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  this.recordSize);  }	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i,    padding);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
85	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  padding);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  padding);  }  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  padding);  }	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i,    padding);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
86	[BUG]  [BUGGY]  while(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  this.recordSize);  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  while(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  this.recordSize);  }  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	while(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  this.recordSize);  }	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i,    padding);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
87	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if(currEntry.getName().equals(currEntry  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if(currEntry.getName().equals(currEntry  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if(currEntry.getName().equals(currEntry	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    this.currEntry.getValue();    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
88	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if(currEntry.getName().equals(  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if(currEntry.getName().equals(  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if(currEntry.getName().equals(	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    this.currEntry.getValue();    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
89	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    this.currEntry.getValue();    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
90	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if(currEntry.getName().equals(currEntry.  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if(currEntry.getName().equals(currEntry.  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if(currEntry.getName().equals(currEntry.	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    this.currEntry.getValue();    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
91	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if(currEntry.getName().equals(curr  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if(currEntry.getName().equals(curr  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if(currEntry.getName().equals(curr	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    this.currEntry.getValue();    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
92	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(   "    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
93	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(   "    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
94	[BUG]  [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(   "    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
95	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(!hasHitEOF)  {  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(!hasHitEOF)  {  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(   "    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
96	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(!hasHitEOF)  {  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(!hasHitEOF)  {  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(   "    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
97	[BUG]  [BUGGY]  if(numRecords  <  0)  {  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  <  0)  {  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  <  0)  {  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(   "    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
98	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.available,  numRecords);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.available,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.available,  numRecords);	  long    skipped    =    IOUtils.skip(this.available,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
99	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(numRecords,  this.available);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(numRecords,  this.available);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(numRecords,  this.available);	  long    skipped    =    IOUtils.skip(this.available,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
100	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(records,  padding,  0);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(records,  padding,  0);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(records,  padding,  0);	  long    skipped    =    IOUtils.skip(records,    padding,    0);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
101	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(numRecords,  padding,  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(numRecords,  padding,  0);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(numRecords,  padding,  0);	  long    skipped    =    IOUtils.skip(records,    padding,    0);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
102	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(padding,  this.entrySize,  0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(padding,  this.entrySize,  0);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(padding,  this.entrySize,  0);	  long    skipped    =    IOUtils.skip(records,    padding,    0);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
103	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(records,  padding,  0,  numRecords);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(records,  padding,  0,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(records,  padding,  0,  numRecords);	  long    skipped    =    IOUtils.skip(records,    padding,    0);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
104	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(  padding,  recordSize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(  padding,  recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(  padding,  recordSize);	  int    skipped    =    IOUtils.skip(recordSize,    padding);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
105	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(padding,  this.entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(padding,  this.entrySize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(padding,  this.entrySize);	  int    skipped    =    IOUtils.skip(recordSize,    padding);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
106	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.entryOffset,  padding,  this.recordSize);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.entryOffset,  padding,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.entryOffset,  padding,  this.recordSize);	  int    skipped    =    IOUtils.skip(this.entryOffset,    is,    padding);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
107	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.entryOffset,  padding,  is);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.entryOffset,  padding,  is);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.entryOffset,  padding,  is);	  int    skipped    =    IOUtils.skip(this.entryOffset,    is,    padding);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
108	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.entryOffset,  padding,  isHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.entryOffset,  padding,  isHitEOF);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.entryOffset,  padding,  isHitEOF);	  int    skipped    =    IOUtils.skip(this.entryOffset,    is,    padding);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
109	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.entryOffset,  is,  padding,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.entryOffset,  is,  padding,  hasHitEOF);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.entryOffset,  is,  padding,  hasHitEOF);	  int    skipped    =    IOUtils.skip(this.entryOffset,    is,    padding);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
110	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(  padding,  records);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(  padding,  records);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(  padding,  records);	  int    skipped    =    IOUtils.skip(records,    padding);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
111	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.recordSize,  is,  padding);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.recordSize,  is,  padding);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.recordSize,  is,  padding);	  long    skipped    =    IOUtils.skip(this.recordSize,    is,    padding);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
112	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  padding,  this.recordSize);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  padding,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.recordSize,  padding,  this.recordSize);	  long    skipped    =    IOUtils.skip(this.recordSize,    is,    padding);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
113	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  padding,  is);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  padding,  is);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.recordSize,  padding,  is);	  long    skipped    =    IOUtils.skip(this.recordSize,    is,    padding);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
114	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(  padding,  this.entrySize,  numRecords);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(  padding,  this.entrySize,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(  padding,  this.entrySize,  numRecords);	  long    skipped    =    IOUtils.skip(this.entrySize,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
115	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(numRecords,  padding,  this.entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(numRecords,  padding,  this.entrySize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(numRecords,  padding,  this.entrySize);	  long    skipped    =    IOUtils.skip(this.entrySize,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
116	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(numRecords,  is);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(numRecords,  is);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(numRecords,  is);	  Integer    skipped    =    IOUtils.skip(padding,    is);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
117	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entryOffset,  is);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entryOffset,  is);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.entryOffset,  is);	  Integer    skipped    =    IOUtils.skip(padding,    is);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
118	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(in,  padding);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(in,  padding);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(in,  padding);	  Integer    skipped    =    IOUtils.skip(padding,    is);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
119	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(numRecords,  padding,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(numRecords,  padding,  this.entryOffset);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(numRecords,  padding,  this.entryOffset);	  long    skipped    =    IOUtils.skip(this.entryOffset,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
120	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(  padding,  this.entryOffset,  numRecords);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(  padding,  this.entryOffset,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(  padding,  this.entryOffset,  numRecords);	  long    skipped    =    IOUtils.skip(this.entryOffset,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
121	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
122	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
123	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecord  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecord  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecord	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
124	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
125	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
126	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
127	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
128	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entryOffset,  padding,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entryOffset,  padding,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.entryOffset,  padding,  this.recordSize);	  Integer    skipped    =    IOUtils.skip(this.entryOffset,    is,    padding);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
129	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entryOffset,  padding,  is);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entryOffset,  padding,  is);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.entryOffset,  padding,  is);	  Integer    skipped    =    IOUtils.skip(this.entryOffset,    is,    padding);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
130	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entryOffset,  this.recordSize,  padding);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entryOffset,  this.recordSize,  padding);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.entryOffset,  this.recordSize,  padding);	  Integer    skipped    =    IOUtils.skip(this.entryOffset,    is,    padding);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
131	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entryOffset,  numRecords,  padding);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entryOffset,  numRecords,  padding);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.entryOffset,  numRecords,  padding);	  Integer    skipped    =    IOUtils.skip(this.entryOffset,    is,    padding);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
132	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entryOffset,  padding,  isHitEOF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entryOffset,  padding,  isHitEOF);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.entryOffset,  padding,  isHitEOF);	  Integer    skipped    =    IOUtils.skip(this.entryOffset,    is,    padding);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
133	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
134	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
135	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecord  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecord  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecord	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
136	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
137	[BUG]  [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
138	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
139	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
140	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(  padding,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(  padding,  this.entryOffset);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(  padding,  this.entryOffset);	  Integer    skipped    =    IOUtils.skip(this.entryOffset,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
141	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(numRecords,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(numRecords,  this.entryOffset);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(numRecords,  this.entryOffset);	  Integer    skipped    =    IOUtils.skip(this.entryOffset,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
142	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entryStart,  padding);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entryStart,  padding);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.entryStart,  padding);	  Integer    skipped    =    IOUtils.skip(this.entryOffset,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
143	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.available,  padding,  this.recordSize);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(this.available,  padding,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.available,  padding,  this.recordSize);	  Integer    skipped    =    IOUtils.skip(this.available,    padding);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
144	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.available,  padding,  numRecords);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(this.available,  padding,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.available,  padding,  numRecords);	  Integer    skipped    =    IOUtils.skip(this.available,    padding);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
145	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(  padding,  this.available);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(  padding,  this.available);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(  padding,  this.available);	  Integer    skipped    =    IOUtils.skip(this.available,    padding);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
146	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
147	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  padding;  ++i)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  padding;  ++i)  {  skipRecordPadding(i);  }  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  padding;  ++i)  {  skipRecordPadding(i);  }	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
148	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  skipRecordPadding(i);  }  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  skipRecordPadding(i);  }	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
149	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.entrySize;  ++i)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.entrySize;  ++i)  {  skipRecordPadding(i);  }  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.entrySize;  ++i)  {  skipRecordPadding(i);  }	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
150	[BUG]  [BUGGY]  int  numRecords  =  padding  >  0?  skipRecordPadding(i):  0;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  numRecords  =  padding  >  0?  skipRecordPadding(i):  0;  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  numRecords  =  padding  >  0?  skipRecordPadding(i):  0;	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
151	[BUG]  [BUGGY]  int  i  =  numRecords;  ++i)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  i  =  numRecords;  ++i)  {  skipRecordPadding(i);  }  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  i  =  numRecords;  ++i)  {  skipRecordPadding(i);  }	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
152	[BUG]  [BUGGY]  int  i  =  0;  ++i)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  i  =  0;  ++i)  {  skipRecordPadding(i);  }  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  i  =  0;  ++i)  {  skipRecordPadding(i);  }	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
153	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skip  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skip  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skip	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
154	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRe  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRe	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
155	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
156	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRecordP  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRecordP  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRecordP	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
157	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skip  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skip  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skip	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
158	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRecordPadding  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRecordPadding  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRecordPadding	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
159	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRe  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRe	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
160	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.recordSize,  padding,  0);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.recordSize,  padding,  0);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.recordSize,  padding,  0);	  long    skipped    =    IOUtils.skip(this.recordSize,    padding,    0);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
161	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  this.recordSize,  0);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  this.recordSize,  0);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  this.recordSize,  0);	  long    skipped    =    IOUtils.skip(this.recordSize,    padding,    0);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
162	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  padding,  0,  this.entrySize);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  padding,  0,  this.entrySize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.recordSize,  padding,  0,  this.entrySize);	  long    skipped    =    IOUtils.skip(this.recordSize,    padding,    0);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
163	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  padding,  1);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  padding,  1);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.recordSize,  padding,  1);	  long    skipped    =    IOUtils.skip(this.recordSize,    padding,    0);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
164	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  padding,  0,  numRecords);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  padding,  0,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.recordSize,  padding,  0,  numRecords);	  long    skipped    =    IOUtils.skip(this.recordSize,    padding,    0);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
165	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.entryOffset,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.entryOffset,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.entryOffset,  this.recordSize);	  long    skipped    =    IOUtils.skip(this.entryOffset,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
166	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  this.entryOffset);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.recordSize,  this.entryOffset);	  long    skipped    =    IOUtils.skip(this.entryOffset,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
167	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.recordSize,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.recordSize,  this.entryOffset);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.recordSize,  this.entryOffset);	  long    skipped    =    IOUtils.skip(this.entryOffset,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
168	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordP    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
169	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  skipRecordP  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  skipRecordP  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  skipRecordP	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordP    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
170	[BUG]  [BUGGY]  short  skipped  =  IOUtils.skip(numRecords,  padding);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  short  skipped  =  IOUtils.skip(numRecords,  padding);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	short  skipped  =  IOUtils.skip(numRecords,  padding);	  short    skipped    =    IOUtils.skip(padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
171	[BUG]  [BUGGY]  short  skipped  =  IOUtils.skip(this.entryOffset,  padding,  numRecords);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  short  skipped  =  IOUtils.skip(this.entryOffset,  padding,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	short  skipped  =  IOUtils.skip(this.entryOffset,  padding,  numRecords);	  short    skipped    =    IOUtils.skip(padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
172	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(padding,  numRecords);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(padding,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(padding,  numRecords);	  short    skipped    =    IOUtils.skip(padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
173	[BUG]  [BUGGY]  short  skipped  =  IOUtils.skip(this.entrySize,  padding,  numRecords);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  short  skipped  =  IOUtils.skip(this.entrySize,  padding,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	short  skipped  =  IOUtils.skip(this.entrySize,  padding,  numRecords);	  short    skipped    =    IOUtils.skip(padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
174	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  skip  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  skip  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  skip	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()    ==    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
175	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  skipRe  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  skipRe	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()    ==    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
176	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()    ==    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
177	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  skipRecordP  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  skipRecordP  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  skipRecordP	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()    ==    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
178	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  skip  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  skip  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  skip	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()    ==    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
179	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  skipRecordPadding  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  skipRecordPadding  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  skipRecordPadding	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()    ==    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
180	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(padding,  numRecords,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(padding,  numRecords,  hasHitEOF);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(padding,  numRecords,  hasHitEOF);	  long    skipped    =    IOUtils.skip(    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
181	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(padding,  padding);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(padding,  padding);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(padding,  padding);	  long    skipped    =    IOUtils.skip(    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
182	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(padding,  0,  numRecords);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(padding,  0,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(padding,  0,  numRecords);	  long    skipped    =    IOUtils.skip(    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
183	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(padding,  numRecords  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(padding,  numRecords  +  1);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(padding,  numRecords  +  1);	  long    skipped    =    IOUtils.skip(    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
184	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getType()  ==  Token.FUNCTION)  {  skip  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getType()  ==  Token.FUNCTION)  {  skip  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getType()  ==  Token.FUNCTION)  {  skip	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    if(currEntry.getType()    ==    Token.FUNCTION)    {    skipRecordP    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
185	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.getType()  ==  Token.FUNCTION)  {  skip  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.getType()  ==  Token.FUNCTION)  {  skip  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.getType()  ==  Token.FUNCTION)  {  skip	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    if(currEntry.getType()    ==    Token.FUNCTION)    {    skipRecordP    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
186	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getType()  ==  Token.FUNCTION  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getType()  ==  Token.FUNCTION  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getType()  ==  Token.FUNCTION	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    if(currEntry.getType()    ==    Token.FUNCTION)    {    skipRecordP    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
187	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.getType()  ==  Token.FUNCTION)  {  skipRe  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.getType()  ==  Token.FUNCTION)  {  skipRe  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.getType()  ==  Token.FUNCTION)  {  skipRe	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    if(currEntry.getType()    ==    Token.FUNCTION)    {    skipRecordP    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
188	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getType()  ==  Token.FUNCTION)  {  skipRe  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getType()  ==  Token.FUNCTION)  {  skipRe  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getType()  ==  Token.FUNCTION)  {  skipRe	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    if(currEntry.getType()    ==    Token.FUNCTION)    {    skipRecordP    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
189	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.recordName)  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.recordName)  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.recordName)	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(this.recordName))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
190	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.recordName))  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.recordName))  {  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.recordName))  {	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(this.recordName))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
191	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.recordName))  {  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.recordName))  {  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.recordName))  {	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(this.recordName))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
192	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.recordName  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.recordName  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.recordName	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(this.recordName))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
193	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.record  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.record  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.record	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(this.recordName))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
194	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.recordName)  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.recordName)  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.recordName)	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(this.recordName))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
195	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(this.recordName))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
196	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.entrySize,  numRecords);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.entrySize,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.entrySize,  numRecords);	  long    skipped    =    IOUtils.skip(this.entrySize,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
197	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(numRecords,  this.entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(numRecords,  this.entrySize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(numRecords,  this.entrySize);	  long    skipped    =    IOUtils.skip(this.entrySize,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
198	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.recordSize,  padding,  this.available);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.recordSize,  padding,  this.available);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.recordSize,  padding,  this.available);	  long    skipped    =    IOUtils.skip(this.recordSize,    padding,    this.available);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
199	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  padding,  this.available);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  padding,  this.available);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entrySize,  padding,  this.available);	  long    skipped    =    IOUtils.skip(this.recordSize,    padding,    this.available);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
200	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(  padding,  this.recordSize,  this.available);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(  padding,  this.recordSize,  this.available);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(  padding,  this.recordSize,  this.available);	  long    skipped    =    IOUtils.skip(this.recordSize,    padding,    this.available);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
201	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
202	[BUG]  [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
203	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
204	[BUG]  [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
205	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
206	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  available,  is);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  available,  is);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  available,  is);	  long    skipped    =    IOUtils.skip(this.entryOffset,    padding,    is);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
207	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  numRecords,  is);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  numRecords,  is);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  numRecords,  is);	  long    skipped    =    IOUtils.skip(this.entryOffset,    padding,    is);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
208	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(padding,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(padding,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(padding,  this.recordSize);	  short    skipped    =    IOUtils.skip(padding,    recordSize);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
209	[BUG]  [BUGGY]  short  skipped  =  IOUtils.skip(this.entrySize,  padding);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  short  skipped  =  IOUtils.skip(this.entrySize,  padding);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	short  skipped  =  IOUtils.skip(this.entrySize,  padding);	  short    skipped    =    IOUtils.skip(padding,    recordSize);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
210	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.available,  padding,  numRecords);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.available,  padding,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.available,  padding,  numRecords);	  long    skipped    =    IOUtils.skip(this.available,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
211	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  this.available,  numRecords);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  this.available,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  this.available,  numRecords);	  long    skipped    =    IOUtils.skip(this.available,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
212	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(numRecords,  padding,  this.available);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(numRecords,  padding,  this.available);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(numRecords,  padding,  this.available);	  long    skipped    =    IOUtils.skip(this.available,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
213	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.available,  padding,  this.entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.available,  padding,  this.entrySize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.available,  padding,  this.entrySize);	  long    skipped    =    IOUtils.skip(this.available,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
214	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(padding,  this.recordSize  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(padding,  this.recordSize  +  1);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(padding,  this.recordSize  +  1);	  long    skipped    =    IOUtils.skip(    padding,    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
215	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(padding,  this.entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(padding,  this.entrySize  +  1);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(padding,  this.entrySize  +  1);	  long    skipped    =    IOUtils.skip(    padding,    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
216	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(padding,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(padding,  this.entryOffset);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(padding,  this.entryOffset);	  long    skipped    =    IOUtils.skip(    padding,    this.entryOffset);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
217	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(padding,  this.entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(padding,  this.entryOffset  +  1);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(padding,  this.entryOffset  +  1);	  long    skipped    =    IOUtils.skip(    padding,    this.entryOffset);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
218	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(padding,  numRecords,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(padding,  numRecords,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(padding,  numRecords,  this.recordSize);	  long    skipped    =    IOUtils.skip(numRecords,    padding,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
219	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.available,  padding,  0);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.available,  padding,  0);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.available,  padding,  0);	  long    skipped    =    IOUtils.skip(this.available,    padding,    0);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
220	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  this.available,  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  this.available,  0);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  this.available,  0);	  long    skipped    =    IOUtils.skip(this.available,    padding,    0);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
221	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.available,  padding,  0,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.available,  padding,  0,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.available,  padding,  0,  this.recordSize);	  long    skipped    =    IOUtils.skip(this.available,    padding,    0);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
222	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  padding  -  this.recordSize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  padding  -  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  padding  -  this.recordSize);	  long    skipped    =    IOUtils.skip(this.available,    padding    -    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
223	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.available,  padding  -  this.recordSize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.available,  padding  -  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.available,  padding  -  this.recordSize);	  long    skipped    =    IOUtils.skip(this.available,    padding    -    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
224	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(numRecords,  padding  -  this.recordSize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(numRecords,  padding  -  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(numRecords,  padding  -  this.recordSize);	  long    skipped    =    IOUtils.skip(this.available,    padding    -    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
225	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  padding  -  this.recordSize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  padding  -  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entrySize,  padding  -  this.recordSize);	  long    skipped    =    IOUtils.skip(this.available,    padding    -    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
226	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  padding  -  this.available);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  padding  -  this.available);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.recordSize,  padding  -  this.available);	  long    skipped    =    IOUtils.skip(this.available,    padding    -    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
227	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  this.available  -  this.recordSize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  this.available  -  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  this.available  -  this.recordSize);	  long    skipped    =    IOUtils.skip(this.available,    padding    -    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
228	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.recordSize,  numRecords);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.recordSize,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.recordSize,  numRecords);	  long    skipped    =    IOUtils.skip(this.recordSize,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
229	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  this.recordSize,  numRecords);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  this.recordSize,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  this.recordSize,  numRecords);	  long    skipped    =    IOUtils.skip(this.recordSize,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
230	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.entrySize,  is);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.entrySize,  is);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.entrySize,  is);	  long    skipped    =    IOUtils.skip(this.entrySize,    is);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
231	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entrySize,  is);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entrySize,  is);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.entrySize,  is);	  long    skipped    =    IOUtils.skip(this.entrySize,    is);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
232	[BUG]  [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  padding  =  currEntry.getPadding();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  padding  =  currEntry.getPadding();  }  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  padding  =  currEntry.getPadding();  }	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    padding    =    currEntry.getPadding();    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
233	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  padding  =  currEntry.getPadding();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  padding  =  currEntry.getPadding();  }  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  padding  =  currEntry.getPadding();  }	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    padding    =    currEntry.getPadding();    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
234	[BUG]  [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  padding  =  currEntry.get  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  padding  =  currEntry.get  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  padding  =  currEntry.get	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    padding    =    currEntry.getPadding();    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
235	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(numRecords,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(numRecords,  this.entryOffset);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(numRecords,  this.entryOffset);	  int    skipped    =    IOUtils.skip(this.entryOffset,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
236	[BUG]  [BUGGY]  short  skipped  =  IOUtils.skip(  padding,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  short  skipped  =  IOUtils.skip(  padding,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	short  skipped  =  IOUtils.skip(  padding,  this.recordSize);	  short    skipped    =    IOUtils.skip(this.recordSize,    padding);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
237	[BUG]  [BUGGY]  short  skipped  =  IOUtils.skip(this.recordSize,  padding,  numRecords);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  short  skipped  =  IOUtils.skip(this.recordSize,  padding,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	short  skipped  =  IOUtils.skip(this.recordSize,  padding,  numRecords);	  short    skipped    =    IOUtils.skip(this.recordSize,    padding);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
238	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(recordSize,  numRecords);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(recordSize,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(recordSize,  numRecords);	  long    skipped    =    IOUtils.skip(recordSize,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
239	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(numRecords,  recordSize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(numRecords,  recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(numRecords,  recordSize);	  long    skipped    =    IOUtils.skip(recordSize,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
240	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.recordSize,  padding,  numRecords);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.recordSize,  padding,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.recordSize,  padding,  numRecords);	  long    skipped    =    IOUtils.skip(this.recordSize,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
241	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  padding,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  padding,  this.entryOffset);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.recordSize,  padding,  this.entryOffset);	  long    skipped    =    IOUtils.skip(this.recordSize,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
242	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(  padding,  this.recordSize,  numRecords);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(  padding,  this.recordSize,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(  padding,  this.recordSize,  numRecords);	  long    skipped    =    IOUtils.skip(this.recordSize,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
243	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.isEnabled(Feature.QUOTE_  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.isEnabled(Feature.QUOTE_  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.isEnabled(Feature.QUOTE_	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.isEnabled(Feature.QUOTE_    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
244	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.isEnabled(Feature.QUOTE  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.isEnabled(Feature.QUOTE  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.isEnabled(Feature.QUOTE	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.isEnabled(Feature.QUOTE_    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
245	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.isEnabled(Feature.QUOTE_  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.isEnabled(Feature.QUOTE_  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.isEnabled(Feature.QUOTE_	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.isEnabled(Feature.QUOTE_    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
246	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(!hasHitEOF)  {  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(!hasHitEOF)  {  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.isEnabled(Feature.QUOTE_    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
247	[BUG]  [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.isEnabled(Feature.QUOTE  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.isEnabled(Feature.QUOTE  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.isEnabled(Feature.QUOTE	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.isEnabled(Feature.QUOTE_    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
248	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.isEnabled(Feature.QUOTE  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.isEnabled(Feature.QUOTE  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.isEnabled(Feature.QUOTE	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.isEnabled(Feature.QUOTE_    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
249	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.entrySize,  padding,  0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.entrySize,  padding,  0);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.entrySize,  padding,  0);	  long    skipped    =    IOUtils.skip(this.entrySize,    padding,    0);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
250	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  padding,  0,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  padding,  0,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entrySize,  padding,  0,  this.recordSize);	  long    skipped    =    IOUtils.skip(this.entrySize,    padding,    0);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
251	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  padding,  0,  numRecords);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  padding,  0,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entrySize,  padding,  0,  numRecords);	  long    skipped    =    IOUtils.skip(this.entrySize,    padding,    0);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
252	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  padding,  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  padding,  1);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entrySize,  padding,  1);	  long    skipped    =    IOUtils.skip(this.entrySize,    padding,    0);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
253	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.entryOffset,  padding,  0);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.entryOffset,  padding,  0);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.entryOffset,  padding,  0);	  long    skipped    =    IOUtils.skip(this.entryOffset,    padding,    0);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
254	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  padding,  0,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  padding,  0,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  padding,  0,  this.recordSize);	  long    skipped    =    IOUtils.skip(this.entryOffset,    padding,    0);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
255	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  padding,  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  padding,  1);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  padding,  1);	  long    skipped    =    IOUtils.skip(this.entryOffset,    padding,    0);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
256	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  padding,  0,  numRecords);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  padding,  0,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  padding,  0,  numRecords);	  long    skipped    =    IOUtils.skip(this.entryOffset,    padding,    0);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
257	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.entrySize,  padding,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.entrySize,  padding,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.entrySize,  padding,  this.recordSize);	  long    skipped    =    IOUtils.skip(this.entrySize,    padding,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
258	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  padding,  this.entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  padding,  this.entrySize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.recordSize,  padding,  this.entrySize);	  long    skipped    =    IOUtils.skip(this.entrySize,    padding,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
259	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(  padding,  this.entrySize,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(  padding,  this.entrySize,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(  padding,  this.entrySize,  this.recordSize);	  long    skipped    =    IOUtils.skip(this.entrySize,    padding,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
260	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.recordSize,  padding,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.recordSize,  padding,  this.entryOffset);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.recordSize,  padding,  this.entryOffset);	  int    skipped    =    IOUtils.skip(this.recordSize,    padding);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
261	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.available,  padding,  this.recordSize);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.available,  padding,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.available,  padding,  this.recordSize);	  long    skipped    =    IOUtils.skip(this.available,    padding,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
262	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  this.available,  padding);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  this.available,  padding);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  this.available,  padding);	  long    skipped    =    IOUtils.skip(this.available,    padding,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
263	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  is,  numRecords);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  is,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entrySize,  is,  numRecords);	  long    skipped    =    IOUtils.skip(this.entryOffset,    is,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
264	[BUG]  [BUGGY]  short  skipped  =  IOUtils.skip(this.entryOffset,  is,  numRecords);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  short  skipped  =  IOUtils.skip(this.entryOffset,  is,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	short  skipped  =  IOUtils.skip(this.entryOffset,  is,  numRecords);	  long    skipped    =    IOUtils.skip(this.entryOffset,    is,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
265	[BUG]  [BUGGY]  short  skipped  =  IOUtils.skip(this.entryOffset,  padding,  this.recordSize);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  short  skipped  =  IOUtils.skip(this.entryOffset,  padding,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	short  skipped  =  IOUtils.skip(this.entryOffset,  padding,  this.recordSize);	  short    skipped    =    IOUtils.skip(this.entryOffset,    padding);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
266	[BUG]  [BUGGY]  short  skipped  =  IOUtils.skip(  padding,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  short  skipped  =  IOUtils.skip(  padding,  this.entryOffset);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	short  skipped  =  IOUtils.skip(  padding,  this.entryOffset);	  short    skipped    =    IOUtils.skip(this.entryOffset,    padding);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
267	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(recordSize,  is);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(recordSize,  is);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(recordSize,  is);	  long    skipped    =    IOUtils.skip(recordSize,    is);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
268	[BUG]  [BUGGY]  short  skipped  =  IOUtils.skip(this.entryOffset,  numRecords);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  short  skipped  =  IOUtils.skip(this.entryOffset,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	short  skipped  =  IOUtils.skip(this.entryOffset,  numRecords);	  long    skipped    =    IOUtils.skip(this.entryOffset,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
269	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.record  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.record  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.record	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(this.recordSize))    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
270	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.recordS  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.recordS  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.recordS	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(this.recordSize))    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
271	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.recordSize)  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.recordSize)  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.recordSize)	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(this.recordSize))    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
272	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.recordSize))  {  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.recordSize))  {  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.recordSize))  {	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(this.recordSize))    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
273	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.recordSize  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.recordSize  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.recordSize	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(this.recordSize))    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
274	[BUG]  [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.recordSize)  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.recordSize)  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.recordSize)	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(this.recordSize))    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
275	[BUG]  [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.recordS  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.recordS  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.recordS	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(this.recordSize))    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
276	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.recordSize,  is);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.recordSize,  is);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.recordSize,  is);	  long    skipped    =    IOUtils.skip(this.recordSize,    is);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
277	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.recordSize,  is);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(this.recordSize,  is);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.recordSize,  is);	  long    skipped    =    IOUtils.skip(this.recordSize,    is);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
278	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getName!=  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getName!=  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getName!=	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    if(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
279	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getName  ==  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getName  ==  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getName  ==	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    if(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
280	[BUG]  [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getName!=  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getName!=  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getName!=	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    if(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
281	[BUG]  [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getName  ==  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getName  ==  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getName  ==	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    if(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
282	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getName!=  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getName!=  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getName!=	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    if(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
283	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.entryOffset,  available,  padding);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.entryOffset,  available,  padding);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.entryOffset,  available,  padding);	  long    skipped    =    IOUtils.skip(this.entryOffset,    available,    padding);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
284	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  available,  padding,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  available,  padding,  hasHitEOF);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  available,  padding,  hasHitEOF);	  long    skipped    =    IOUtils.skip(this.entryOffset,    available,    padding);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
285	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available,  this.entryOffset,  padding);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(available,  this.entryOffset,  padding);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(available,  this.entryOffset,  padding);	  long    skipped    =    IOUtils.skip(this.entryOffset,    available,    padding);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
286	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  available,  padding,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  available,  padding,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  available,  padding,  this.recordSize);	  long    skipped    =    IOUtils.skip(this.entryOffset,    available,    padding);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
287	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  available,  padding,  numRecords);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  available,  padding,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  available,  padding,  numRecords);	  long    skipped    =    IOUtils.skip(this.entryOffset,    available,    padding);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
288	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  available,  padding);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  available,  padding);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entrySize,  available,  padding);	  long    skipped    =    IOUtils.skip(this.entryOffset,    available,    padding);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
289	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  padding,  this.recordSize  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  padding,  this.recordSize  +  1);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  padding,  this.recordSize  +  1);	  long    skipped    =    IOUtils.skip(this.entryOffset,    padding,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
290	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(  padding,  this.entryOffset,  this.recordSize);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(  padding,  this.entryOffset,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(  padding,  this.entryOffset,  this.recordSize);	  long    skipped    =    IOUtils.skip(this.entryOffset,    padding,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
291	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entryOffset,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entryOffset,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.entryOffset,  this.recordSize);	  Integer    skipped    =    IOUtils.skip(this.entryOffset,    padding);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
292	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(  padding,  recordSize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(  padding,  recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(  padding,  recordSize);	  Integer    skipped    =    IOUtils.skip(recordSize,    padding);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
293	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  padding  +=  currEntry.get  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  padding  +=  currEntry.get  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  padding  +=  currEntry.get	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    padding    +=    currEntry.get    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
294	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  padding  +=  currEntry.get  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  padding  +=  currEntry.get  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  padding  +=  currEntry.get	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    padding    +=    currEntry.get    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
295	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  padding  +=  currEntry.get  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  padding  +=  currEntry.get  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  padding  +=  currEntry.get	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    padding    +=    currEntry.get    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
296	[BUG]  [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  padding  +=  currEntry.get  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  padding  +=  currEntry.get  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  padding  +=  currEntry.get	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    padding    +=    currEntry.get    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
297	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(  padding,  this.available);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(  padding,  this.available);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(  padding,  this.available);	  int    skipped    =    IOUtils.skip(this.available,    padding);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
298	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    if(currEntry!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
299	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    if(currEntry!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
300	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    if(currEntry!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
301	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  padding;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  padding;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  padding;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    if(currEntry!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
302	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    if(currEntry!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
303	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(  padding,  records);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(  padding,  records);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(  padding,  records);	  Integer    skipped    =    IOUtils.skip(records,    padding);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
304	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(records,  numRecords);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(records,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(records,  numRecords);	  long    skipped    =    IOUtils.skip(records,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
305	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(padding,  this.records);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(padding,  this.records);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(padding,  this.records);	  long    skipped    =    IOUtils.skip(    padding,    records);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
306	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(numRecords,  padding,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(numRecords,  padding,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(numRecords,  padding,  this.recordSize);	  Integer    skipped    =    IOUtils.skip(numRecords,    padding);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
307	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(Padding,  numRecords);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(Padding,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(Padding,  numRecords);	  Integer    skipped    =    IOUtils.skip(numRecords,    padding);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
308	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(records,  numRecords);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(records,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(records,  numRecords);	  long    skipped    =    IOUtils.skip(records,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
309	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    if(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
310	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValu  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(!hasHitEOF)  {  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValu  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(!hasHitEOF)  {  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValu	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    if(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
311	[BUG]  [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getName!=  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getName!=  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getName!=	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    if(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
312	[BUG]  [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getName!=  illegal  start  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getName!=  illegal  start  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getName!=  illegal  start	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    if(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
313	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  numRecords,  0);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  numRecords,  0);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  numRecords,  0);	  long    skipped    =    IOUtils.skip(this.entryOffset,    padding,    0);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
314	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  available,  0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  available,  0);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  available,  0);	  long    skipped    =    IOUtils.skip(this.entryOffset,    padding,    0);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
315	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(recordSize,  is);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(recordSize,  is);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(recordSize,  is);	  long    skipped    =    IOUtils.skip(recordSize,    is);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
316	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(is,  recordSize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(is,  recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(is,  recordSize);	  long    skipped    =    IOUtils.skip(recordSize,    is);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
317	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()    ==    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
318	[BUG]  [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  skipRe  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  skipRe	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()    ==    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
319	[BUG]  [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  skip  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  skip  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  skip	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()    ==    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
320	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entrySize,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entrySize,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.entrySize,  this.recordSize);	  Integer    skipped    =    IOUtils.skip(this.entrySize,    padding);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
321	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  padding.length;  ++i)  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  padding.length;  ++i)  {  skipRecordPadding();  }  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  padding.length;  ++i)  {  skipRecordPadding();  }	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
322	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  PaddingCount;  ++i)  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  PaddingCount;  ++i)  {  skipRecordPadding();  }  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  PaddingCount;  ++i)  {  skipRecordPadding();  }	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
323	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  this.recordSize,  is);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  this.recordSize,  is);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  this.recordSize,  is);	  long    skipped    =    IOUtils.skip(this.entryOffset,    padding,    is);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
324	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.record  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.record  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.record	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(this.recordSize))    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
325	[BUG]  [BUGGY]  if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.record  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.record  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.record	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(this.recordSize))    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
326	[BUG]  [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.record  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.record  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.record	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(this.recordSize))    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
327	[BUG]  [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.record  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.record  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.record	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(this.recordSize))    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
328	[BUG]  [BUGGY]  if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.recordSize)  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.recordSize)  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.recordSize)	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(this.recordSize))    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
329	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(  padding,  numberRecords);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(  padding,  numberRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(  padding,  numberRecords);	  Integer    skipped    =    IOUtils.skip(numRecords,    padding);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
330	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(padding,  0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(padding,  0);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(padding,  0);	  long    skipped    =    IOUtils.skip(    padding,    recordSize);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
331	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(recordSize,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(recordSize,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(recordSize,  this.recordSize);	  Integer    skipped    =    IOUtils.skip(recordSize,    padding);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
332	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.recordSize,  this.entryOffset,  padding);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.recordSize,  this.entryOffset,  padding);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.recordSize,  this.entryOffset,  padding);	  long    skipped    =    IOUtils.skip(this.entryOffset,    this.recordSize,    padding);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
333	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  this.recordSize,  numRecords);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  this.recordSize,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entrySize,  this.recordSize,  numRecords);	  long    skipped    =    IOUtils.skip(this.entrySize,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
334	[BUG]  [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    if(currEntry!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
335	[BUG]  [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    if(currEntry!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
336	[BUG]  [BUGGY]  if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry!=  null)  {	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    if(currEntry!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
337	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  available);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  available);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.recordSize,  available);	  long    skipped    =    IOUtils.skip(this.entryOffset,    available);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
338	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entryOffset,  available);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entryOffset,  available);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.entryOffset,  available);	  long    skipped    =    IOUtils.skip(this.entryOffset,    available);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
339	[BUG]  [BUGGY]  short  skipped  =  IOUtils.skip(this.entryOffset,  available);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  short  skipped  =  IOUtils.skip(this.entryOffset,  available);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	short  skipped  =  IOUtils.skip(this.entryOffset,  available);	  long    skipped    =    IOUtils.skip(this.entryOffset,    available);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
340	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  numRecords,  padding);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  numRecords,  padding);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.recordSize,  numRecords,  padding);	  long    skipped    =    IOUtils.skip(this.entryOffset,    numRecords,    padding);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
341	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  numRecords,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  numRecords,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  numRecords,  this.recordSize);	  long    skipped    =    IOUtils.skip(this.entryOffset,    numRecords,    padding);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
342	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  padding,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  padding,  this.entryOffset);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entrySize,  padding,  this.entryOffset);	  long    skipped    =    IOUtils.skip(this.entryOffset,    numRecords,    padding);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
343	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  bufferSize;  ++i)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  bufferSize;  ++i)  {  skipRecordPadding(i);  }  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  bufferSize;  ++i)  {  skipRecordPadding(i);  }	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
344	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  padding.length;  ++i)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  padding.length;  ++i)  {  skipRecordPadding(i);  }  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  padding.length;  ++i)  {  skipRecordPadding(i);  }	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
345	[BUG]  [BUGGY]  int  numRecords  =  skipRecordPadding(numRecords);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  numRecords  =  skipRecordPadding(numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  numRecords  =  skipRecordPadding(numRecords);	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
346	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.available,  this.recordSize);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.available,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.available,  this.recordSize);	  int    skipped    =    IOUtils.skip(this.available,    padding);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
347	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  this.recordSize,  0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  this.recordSize,  0);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entrySize,  this.recordSize,  0);	  long    skipped    =    IOUtils.skip(this.entrySize,    padding,    0);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
348	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  numRecords,  0);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  numRecords,  0);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entrySize,  numRecords,  0);	  long    skipped    =    IOUtils.skip(this.entrySize,    padding,    0);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
349	[BUG]  [BUGGY]  short  skipped  =  IOUtils.skip(this.entrySize,  padding,  0);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  short  skipped  =  IOUtils.skip(this.entrySize,  padding,  0);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	short  skipped  =  IOUtils.skip(this.entrySize,  padding,  0);	  long    skipped    =    IOUtils.skip(this.entrySize,    padding,    0);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
350	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.available,  numRecords);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(this.available,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.available,  numRecords);	  Integer    skipped    =    IOUtils.skip(this.available,    padding);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
351	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.available,  padding  -  this.recordSize);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(this.available,  padding  -  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.available,  padding  -  this.recordSize);	  Integer    skipped    =    IOUtils.skip(this.available,    padding);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
352	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.available,  padding  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(this.available,  padding  +  1);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.available,  padding  +  1);	  Integer    skipped    =    IOUtils.skip(this.available,    padding);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
353	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.available,  padding,  0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(this.available,  padding,  0);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.available,  padding,  0);	  Integer    skipped    =    IOUtils.skip(this.available,    padding);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
354	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  this.available,  numRecords);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  this.available,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.recordSize,  this.available,  numRecords);	  long    skipped    =    IOUtils.skip(this.recordSize,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
355	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  available,  padding);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  available,  padding);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.recordSize,  available,  padding);	  long    skipped    =    IOUtils.skip(this.entryOffset,    available,    padding);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
356	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  available,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  available,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  available,  this.recordSize);	  long    skipped    =    IOUtils.skip(this.entryOffset,    available,    padding);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
357	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  available,  numRecords);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  available,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  available,  numRecords);	  long    skipped    =    IOUtils.skip(this.entryOffset,    available,    padding);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
358	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(available,  this.entrySize,  padding);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(available,  this.entrySize,  padding);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(available,  this.entrySize,  padding);	  long    skipped    =    IOUtils.skip(this.entryOffset,    available,    padding);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
359	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(padding,  this.recordSize  -  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(padding,  this.recordSize  -  1);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(padding,  this.recordSize  -  1);	  long    skipped    =    IOUtils.skip(    padding,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
360	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  this.entryOffset);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entrySize,  this.entryOffset);	  long    skipped    =    IOUtils.skip(    padding,    this.entryOffset);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
361	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryBuffer,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entryBuffer,  this.entryOffset);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryBuffer,  this.entryOffset);	  long    skipped    =    IOUtils.skip(    padding,    this.entryOffset);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
362	[BUG]  [BUGGY]  Short  skipped  =  IOUtils.skip(padding,  numRecords);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Short  skipped  =  IOUtils.skip(padding,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Short  skipped  =  IOUtils.skip(padding,  numRecords);	  short    skipped    =    IOUtils.skip(padding,    recordSize);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
363	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(recordSize,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(recordSize,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(recordSize,  this.recordSize);	  int    skipped    =    IOUtils.skip(recordSize,    padding);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
364	[BUG]  [BUGGY]  short  skipped  =  IOUtils.skip(this.recordSize,  is);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  short  skipped  =  IOUtils.skip(this.recordSize,  is);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	short  skipped  =  IOUtils.skip(this.recordSize,  is);	  long    skipped    =    IOUtils.skip(this.recordSize,    is);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
365	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize  -  padding,  is);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize  -  padding,  is);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.recordSize  -  padding,  is);	  long    skipped    =    IOUtils.skip(this.recordSize,    is);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
366	[BUG]  [BUGGY]  short  skipped  =  IOUtils.skip(this.entrySize,  numRecords);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  short  skipped  =  IOUtils.skip(this.entrySize,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	short  skipped  =  IOUtils.skip(this.entrySize,  numRecords);	  long    skipped    =    IOUtils.skip(this.entrySize,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
367	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  this.entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  this.entrySize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  this.entrySize);	  long    skipped    =    IOUtils.skip(    padding,    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
368	[BUG]  [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordP    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
369	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skip  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(!hasHitEOF)  {  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skip  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(!hasHitEOF)  {  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skip	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordP    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
370	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(records,  numRecords,  0);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(records,  numRecords,  0);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(records,  numRecords,  0);	  long    skipped    =    IOUtils.skip(records,    padding,    0);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
371	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(records,  padding,  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(records,  padding,  1);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(records,  padding,  1);	  long    skipped    =    IOUtils.skip(records,    padding,    0);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
372	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(records,  padding,  -1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(records,  padding,  -1);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(records,  padding,  -1);	  long    skipped    =    IOUtils.skip(records,    padding,    0);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
373	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.recordSize,  this.available);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(this.recordSize,  this.available);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.recordSize,  this.available);	  Integer    skipped    =    IOUtils.skip(this.recordSize,    padding);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
374	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.recordSize,  padding  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(this.recordSize,  padding  +  1);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.recordSize,  padding  +  1);	  Integer    skipped    =    IOUtils.skip(this.recordSize,    padding);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
375	[BUG]  [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
376	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
377	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
378	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  this.entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  this.entrySize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.recordSize,  this.entrySize);	  long    skipped    =    IOUtils.skip(this.entrySize,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
379	[BUG]  [BUGGY]  short  skipped  =  IOUtils.skip(this.recordSize,  this.entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  short  skipped  =  IOUtils.skip(this.recordSize,  this.entrySize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	short  skipped  =  IOUtils.skip(this.recordSize,  this.entrySize);	  long    skipped    =    IOUtils.skip(this.entrySize,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
380	[BUG]  [BUGGY]  short  skipped  =  IOUtils.skip(this.available,  numRecords);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  short  skipped  =  IOUtils.skip(this.available,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	short  skipped  =  IOUtils.skip(this.available,  numRecords);	  long    skipped    =    IOUtils.skip(this.available,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
381	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.recordSize,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(this.recordSize,  this.entryOffset);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.recordSize,  this.entryOffset);	  long    skipped    =    IOUtils.skip(this.entryOffset,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
382	[BUG]  [BUGGY]  short  skipped  =  IOUtils.skip(this.recordSize,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  short  skipped  =  IOUtils.skip(this.recordSize,  this.entryOffset);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	short  skipped  =  IOUtils.skip(this.recordSize,  this.entryOffset);	  long    skipped    =    IOUtils.skip(this.entryOffset,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
383	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(  padding,  this.available);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(  padding,  this.available);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(  padding,  this.available);	  long    skipped    =    IOUtils.skip(this.recordSize,    this.available);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
384	[BUG]  [BUGGY]  short  skipped  =  IOUtils.skip(this.recordSize,  this.available);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  short  skipped  =  IOUtils.skip(this.recordSize,  this.available);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	short  skipped  =  IOUtils.skip(this.recordSize,  this.available);	  long    skipped    =    IOUtils.skip(this.recordSize,    this.available);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
385	[BUG]  [BUGGY]  short  skipped  =  IOUtils.skip(this.entrySize,  is);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  short  skipped  =  IOUtils.skip(this.entrySize,  is);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	short  skipped  =  IOUtils.skip(this.entrySize,  is);	  long    skipped    =    IOUtils.skip(this.entrySize,    is);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
386	[BUG]  [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.isEnabled(Feature.QUOTE  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.isEnabled(Feature.QUOTE  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.isEnabled(Feature.QUOTE	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.isEnabled(Feature.QUOTE_    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
387	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEnt  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(!hasHitEOF)  {  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEnt  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(!hasHitEOF)  {  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEnt	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.isEnabled(Feature.QUOTE_    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
388	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.isEnable  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.isEnable  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.isEnable	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.isEnabled(Feature.QUOTE_    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
389	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(is,  numRecords,  padding);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(is,  numRecords,  padding);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(is,  numRecords,  padding);	  Integer    skipped    =    IOUtils.skip(is,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
390	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(is,  padding,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(is,  padding,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(is,  padding,  this.recordSize);	  Integer    skipped    =    IOUtils.skip(is,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
391	[BUG]  [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
392	[BUG]  [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
393	[BUG]  [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
394	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  nu  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(!hasHitEOF)  {  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  nu  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(!hasHitEOF)  {  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  nu	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
395	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.available,  numRecords,  padding);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.available,  numRecords,  padding);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.available,  numRecords,  padding);	  long    skipped    =    IOUtils.skip(this.available,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
396	[BUG]  [BUGGY]  short  skipped  =  IOUtils.skip(this.available,  padding,  numRecords);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  short  skipped  =  IOUtils.skip(this.available,  padding,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	short  skipped  =  IOUtils.skip(this.available,  padding,  numRecords);	  long    skipped    =    IOUtils.skip(this.available,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
397	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.recordSize,  is,  padding);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(this.recordSize,  is,  padding);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.recordSize,  is,  padding);	  Integer    skipped    =    IOUtils.skip(this.entryOffset,    is,    padding);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
398	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entryOffset,  available,  padding);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entryOffset,  available,  padding);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.entryOffset,  available,  padding);	  Integer    skipped    =    IOUtils.skip(this.entryOffset,    is,    padding);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
399	[BUG]  [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.getType()  ==  Token.FUNCTION)  {  skip  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.getType()  ==  Token.FUNCTION)  {  skip  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.getType()  ==  Token.FUNCTION)  {  skip	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    if(currEntry.getType()    ==    Token.FUNCTION)    {    skipRecordP    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
400	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.entrySize,  is,  padding,  numRecords);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.entrySize,  is,  padding,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.entrySize,  is,  padding,  numRecords);	  int    skipped    =    IOUtils.skip(is,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
401	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(is,  numRecords,  padding);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(is,  numRecords,  padding);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(is,  numRecords,  padding);	  int    skipped    =    IOUtils.skip(is,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
402	[BUG]  [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.recordName))  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.recordName))  {  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.recordName))  {	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(this.recordName))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
403	[BUG]  [BUGGY]  if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.recordName))  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.recordName))  {  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.recordName))  {	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(this.recordName))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
404	[BUG]  [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.recordName))  {  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.recordName))  {  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.recordName))  {	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(this.recordName))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
405	[BUG]  [BUGGY]  if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.recordName)  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.recordName)  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.recordName)	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(this.recordName))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
406	[BUG]  [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.recordName)  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.recordName)  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.recordName)	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(this.recordName))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
407	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.available,  numRecords,  0);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.available,  numRecords,  0);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.available,  numRecords,  0);	  long    skipped    =    IOUtils.skip(this.available,    padding,    0);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
408	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.available,  this.recordSize,  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.available,  this.recordSize,  0);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.available,  this.recordSize,  0);	  long    skipped    =    IOUtils.skip(this.available,    padding,    0);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
409	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.available,  padding,  0,  numRecords);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.available,  padding,  0,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.available,  padding,  0,  numRecords);	  long    skipped    =    IOUtils.skip(this.available,    padding,    0);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
410	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.records,  numRecords);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.records,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.records,  numRecords);	  long    skipped    =    IOUtils.skip(this.records,    padding);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
411	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.records,  padding,  this.available);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.records,  padding,  this.available);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.records,  padding,  this.available);	  long    skipped    =    IOUtils.skip(this.records,    padding);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
412	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.records,  padding  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.records,  padding  +  1);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.records,  padding  +  1);	  long    skipped    =    IOUtils.skip(this.records,    padding);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
413	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.available,  numRecords,  this.recordSize);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.available,  numRecords,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.available,  numRecords,  this.recordSize);	  long    skipped    =    IOUtils.skip(this.available,    padding,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
414	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.available,  this.recordSize,  padding);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.available,  this.recordSize,  padding);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.available,  this.recordSize,  padding);	  long    skipped    =    IOUtils.skip(this.available,    padding,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
415	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  this.available,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  this.available,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  this.available,  this.recordSize);	  long    skipped    =    IOUtils.skip(this.available,    padding,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
416	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.available,  this.entryOffset,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.available,  this.entryOffset,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.available,  this.entryOffset,  this.recordSize);	  long    skipped    =    IOUtils.skip(this.available,    padding,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
417	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  is,  numRecords);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  is,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.recordSize,  is,  numRecords);	  long    skipped    =    IOUtils.skip(this.entryOffset,    is,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
418	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.entryOffset,  numRecords,  is);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.entryOffset,  numRecords,  is);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.entryOffset,  numRecords,  is);	  long    skipped    =    IOUtils.skip(this.entryOffset,    is,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
419	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entry,  padding,  numRecords);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entry,  padding,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entry,  padding,  numRecords);	  long    skipped    =    IOUtils.skip(this.entryOffset,    is,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
420	[BUG]  [BUGGY]  short  skipped  =  IOUtils.skip(this.recordSize,  numRecords);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  short  skipped  =  IOUtils.skip(this.recordSize,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	short  skipped  =  IOUtils.skip(this.recordSize,  numRecords);	  long    skipped    =    IOUtils.skip(this.recordSize,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
421	[BUG]  [BUGGY]  short  skipped  =  IOUtils.skip(this.recordSize,  padding,  0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  short  skipped  =  IOUtils.skip(this.recordSize,  padding,  0);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	short  skipped  =  IOUtils.skip(this.recordSize,  padding,  0);	  short    skipped    =    IOUtils.skip(this.recordSize,    padding);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
422	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(is,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(is,  this.entryOffset);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(is,  this.entryOffset);	  long    skipped    =    IOUtils.skip(this.entryOffset,    is);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
423	[BUG]  [BUGGY]  short  skipped  =  IOUtils.skip(this.entryOffset,  is);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  short  skipped  =  IOUtils.skip(this.entryOffset,  is);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	short  skipped  =  IOUtils.skip(this.entryOffset,  is);	  long    skipped    =    IOUtils.skip(this.entryOffset,    is);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
424	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  this.available,  padding);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  this.available,  padding);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.recordSize,  this.available,  padding);	  long    skipped    =    IOUtils.skip(this.recordSize,    padding,    this.available);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
425	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.recordSize,  this.available,  padding);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.recordSize,  this.available,  padding);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.recordSize,  this.available,  padding);	  long    skipped    =    IOUtils.skip(this.recordSize,    padding,    this.available);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
426	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  available,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  available,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.recordSize,  available,  this.recordSize);	  long    skipped    =    IOUtils.skip(this.recordSize,    padding,    this.available);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
427	[BUG]  [BUGGY]  if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(   "    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
428	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(   "    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
429	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(   "    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
430	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.available,  numRecords  -  this.recordSize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.available,  numRecords  -  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.available,  numRecords  -  this.recordSize);	  long    skipped    =    IOUtils.skip(this.available,    padding    -    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
431	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.available,  padding  -  this.recordSize  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.available,  padding  -  this.recordSize  +  1);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.available,  padding  -  this.recordSize  +  1);	  long    skipped    =    IOUtils.skip(this.available,    padding    -    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
432	[BUG]  [BUGGY]  if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  padding  +=  currEntry.get  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  padding  +=  currEntry.get  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  padding  +=  currEntry.get	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    padding    +=    currEntry.get    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
433	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  this.entrySize,  padding);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  this.entrySize,  padding);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.recordSize,  this.entrySize,  padding);	  long    skipped    =    IOUtils.skip(this.entrySize,    padding,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
434	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.entrySize,  this.recordSize,  padding);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.entrySize,  this.recordSize,  padding);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.entrySize,  this.recordSize,  padding);	  long    skipped    =    IOUtils.skip(this.entrySize,    padding,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
435	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  numRecords,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  numRecords,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entrySize,  numRecords,  this.recordSize);	  long    skipped    =    IOUtils.skip(this.entrySize,    padding,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
436	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  numRecords,  0);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  numRecords,  0);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.recordSize,  numRecords,  0);	  long    skipped    =    IOUtils.skip(this.recordSize,    padding,    0);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
437	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  this.available,  0);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  this.available,  0);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.recordSize,  this.available,  0);	  long    skipped    =    IOUtils.skip(this.recordSize,    padding,    0);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
438	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  padding,  0,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.recordSize,  padding,  0,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.recordSize,  padding,  0,  this.recordSize);	  long    skipped    =    IOUtils.skip(this.recordSize,    padding,    0);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
439	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    this.currEntry.getValue();    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
440	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if(currEntry.getName().equals(  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if(currEntry.getName().equals(  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if(currEntry.getName().equals(	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    this.currEntry.getValue();    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
441	[BUG]  [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if(currEntry.getName().equals(currEntry  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if(currEntry.getName().equals(currEntry  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if(currEntry.getName().equals(currEntry	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    this.currEntry.getValue();    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
442	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if(currEntry.getName().equals(currEntry  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if(currEntry.getName().equals(currEntry  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if(currEntry.getName().equals(currEntry	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    this.currEntry.getValue();    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
443	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(!hasHitEOF)  {  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(!hasHitEOF)  {  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    this.currEntry.getValue();    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
444	[BUG]  [BUGGY]  if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
445	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  padding;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  padding;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  padding;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
446	[BUG]  [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName()))  {  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName()))  {  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName()))  {	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    this.currEntry.getValue();    if(currEntry.getName().equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
447	[BUG]  [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName()))  {  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName()))  {  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName()))  {	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    this.currEntry.getValue();    if(currEntry.getName().equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
448	[BUG]  [BUGGY]  if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName()))  {  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName()))  {  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName()))  {	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    this.currEntry.getValue();    if(currEntry.getName().equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
449	[BUG]  [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName())  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName())  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName())	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    this.currEntry.getValue();    if(currEntry.getName().equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
450	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName()))  {  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName()))  {  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName()))  {	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    this.currEntry.getValue();    if(currEntry.getName().equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
451	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName())  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName())  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName())	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    this.currEntry.getValue();    if(currEntry.getName().equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
452	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName()))  {  [CE]  illegal  start  of  type  [FE]                                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName()))  {  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  this.currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName()))  {	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    this.currEntry.getValue();    if(currEntry.getName().equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
453	[BUG]  [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRe  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRe	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
454	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
455	[BUG]  [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRe  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRe	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
456	[BUG]  [BUGGY]  if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  padding);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  padding);  }  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  padding);  }	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i,    padding);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
457	[BUG]  [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  padding);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  padding);  }  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  padding);  }	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i,    padding);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
458	[BUG]  [BUGGY]  if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i,    padding);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
459	[BUG]  [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i,    padding);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
460	[BUG]  [BUGGY]  if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  padding  =  currEntry.getPadding();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  padding  =  currEntry.getPadding();  }  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  padding  =  currEntry.getPadding();  }	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    padding    =    currEntry.getPadding();    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
461	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  padding  =  currEntry.getPadding();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  padding  =  currEntry.getPadding();  }  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  padding  =  currEntry.getPadding();  }	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    padding    =    currEntry.getPadding();    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
462	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(is,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(is,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(is,  this.recordSize);	  long    skipped    =    IOUtils.skip(this.recordSize,    is);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
463	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  numRecords,  padding,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entryOffset,  numRecords,  padding,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entryOffset,  numRecords,  padding,  this.recordSize);	  long    skipped    =    IOUtils.skip(this.entryOffset,    numRecords,    padding);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
464	[BUG]  [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(   "    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
465	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.getType  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.getType  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =(TarArchiveEntry)currEntry.getValue();  if(currEntry.getType	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    if(currEntry.getType()    ==    Token.FUNCTION)    {    skipRecordP    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
466	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getType  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getType  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getType	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    if(currEntry.getType()    ==    Token.FUNCTION)    {    skipRecordP    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
467	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(numRecords,  recordSize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(numRecords,  recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(numRecords,  recordSize);	  long    skipped    =    IOUtils.skip(recordSize,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
468	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.record  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.record  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.record	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(this.recordSize))    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
469	[BUG]  [BUGGY]  if(hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.record  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.record  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(this.record	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(this.recordSize))    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
470	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.records,  padding,  this.entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.records,  padding,  this.entrySize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.records,  padding,  this.entrySize);	  long    skipped    =    IOUtils.skip(this.records,    padding);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
471	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.records,  padding);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(this.records,  padding);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.records,  padding);	  long    skipped    =    IOUtils.skip(this.records,    padding);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
472	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(numRecords,  available,  padding);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(numRecords,  available,  padding);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(numRecords,  available,  padding);	  long    skipped    =    IOUtils.skip(this.entryOffset,    available,    padding);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
473	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(is,  padding,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(is,  padding,  this.entryOffset);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(is,  padding,  this.entryOffset);	  long    skipped    =    IOUtils.skip(this.entryOffset,    padding,    is);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
474	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.available,  0,  padding);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.available,  0,  padding);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.available,  0,  padding);	  long    skipped    =    IOUtils.skip(this.available,    padding,    0);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
475	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    this.currEntry.getValue();    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
476	[BUG]  [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    this.currEntry.getValue();    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
477	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEnt  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEnt  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEnt	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    this.currEntry.getValue();    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
478	[BUG]  [BUGGY]  if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    this.currEntry.getValue();    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
479	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
480	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
481	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.available,  padding,  numRecords,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.available,  padding,  numRecords,  hasHitEOF);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.available,  padding,  numRecords,  hasHitEOF);	  long    skipped    =    IOUtils.skip(this.available,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
482	[BUG]  [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.recordName)  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.recordName)  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.recordName)	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(this.recordName))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
483	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.record  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.record  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(this.record	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(this.recordName))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
484	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(is,  padding,  this.entrySize);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(is,  padding,  this.entrySize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(is,  padding,  this.entrySize);	  int    skipped    =    IOUtils.skip(is,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
485	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(is,  padding,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(is,  padding,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(is,  padding,  this.recordSize);	  int    skipped    =    IOUtils.skip(is,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
486	[BUG]  [BUGGY]  while(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  while(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	while(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
487	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
488	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(records,  padding,  this.entrySize);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(records,  padding,  this.entrySize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(records,  padding,  this.entrySize);	  int    skipped    =    IOUtils.skip(records,    padding);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
489	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(records,  this.entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(records,  this.entrySize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(records,  this.entrySize);	  int    skipped    =    IOUtils.skip(records,    padding);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
490	[BUG]  [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  skip  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  skip  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  skip	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()    ==    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
491	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  skipRe  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()  ==  null)  {  skipRe	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()    ==    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
492	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.available,  this.recordSize);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(this.available,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.available,  this.recordSize);	  Integer    skipped    =    IOUtils.skip(this.available,    padding);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
493	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(numRecords,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(numRecords,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(numRecords,  this.recordSize);	  long    skipped    =    IOUtils.skip(this.recordSize,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
494	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(is,  this.entryOffset,  numRecords);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(is,  this.entryOffset,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(is,  this.entryOffset,  numRecords);	  long    skipped    =    IOUtils.skip(this.entryOffset,    is,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
495	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.isEnabled(Feature.QUOTE_  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.isEnabled(Feature.QUOTE_  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.isEnabled(Feature.QUOTE_	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.isEnabled(Feature.QUOTE_    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
496	[BUG]  [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.isEnabled(Feature.QUOTE  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.isEnabled(Feature.QUOTE  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.isEnabled(Feature.QUOTE	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.isEnabled(Feature.QUOTE_    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
497	[BUG]  [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.isEnabled(Feature.QUOTE_  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.isEnabled(Feature.QUOTE_  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.isEnabled(Feature.QUOTE_	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.isEnabled(Feature.QUOTE_    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
498	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(is,  this.entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(is,  this.entrySize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(is,  this.entrySize);	  long    skipped    =    IOUtils.skip(this.entrySize,    is);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
499	[BUG]  [BUGGY]  while(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  while(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding();  }  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	while(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding();  }	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
500	[BUG]  [BUGGY]  int  i  =  numRecords;  ++i)  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  i  =  numRecords;  ++i)  {  skipRecordPadding();  }  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  i  =  numRecords;  ++i)  {  skipRecordPadding();  }	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
501	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding();  }  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding();  }	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
502	[BUG]  [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordP    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
503	[BUG]  [BUGGY]  if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordP    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
504	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecord  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecord  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecord	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordP    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
505	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.entryOffset,  is,  padding,  this.recordSize);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.entryOffset,  is,  padding,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.entryOffset,  is,  padding,  this.recordSize);	  int    skipped    =    IOUtils.skip(this.entryOffset,    is,    padding);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
506	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(is,  this.entryOffset,  padding);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(is,  this.entryOffset,  padding);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(is,  this.entryOffset,  padding);	  int    skipped    =    IOUtils.skip(this.entryOffset,    is,    padding);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
507	[BUG]  [BUGGY]  if(hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
508	[BUG]  [BUGGY]  short  skipped  =  IOUtils.skip(this.recordSize,  this.entryOffset,  padding);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  short  skipped  =  IOUtils.skip(this.recordSize,  this.entryOffset,  padding);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	short  skipped  =  IOUtils.skip(this.recordSize,  this.entryOffset,  padding);	  long    skipped    =    IOUtils.skip(this.entryOffset,    this.recordSize,    padding);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
509	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRe  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRe	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
510	[BUG]  [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRe  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRe	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
511	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getName!=  illegal  start  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getName!=  illegal  start  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getName!=  illegal  start	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    if(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
512	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getName!=  illegal  start  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getName!=  illegal  start  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getName!=  illegal  start	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    if(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
513	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getName  ==  illegal  start  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getName  ==  illegal  start  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getName  ==  illegal  start	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    if(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
514	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    if(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
515	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getName  >=  illegal  start  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getName  >=  illegal  start  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  (TarArchiveEntry)currEntry.getValue();  if(currEntry.getName  >=  illegal  start	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    (TarArchiveEntry)currEntry.getValue();    if(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
516	[BUG]  [BUGGY]  short  skipped  =  IOUtils.skip(records,  numRecords);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  short  skipped  =  IOUtils.skip(records,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	short  skipped  =  IOUtils.skip(records,  numRecords);	  long    skipped    =    IOUtils.skip(records,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
517	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(numRecords,  this.entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(numRecords,  this.entrySize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(numRecords,  this.entrySize);	  long    skipped    =    IOUtils.skip(this.entrySize,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
518	[BUG]  [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skip  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skip  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skip	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
519	[BUG]  [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRe  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRe	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
520	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  padding,  this.recordOffset);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(this.entrySize,  padding,  this.recordOffset);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(this.entrySize,  padding,  this.recordOffset);	  long    skipped    =    IOUtils.skip(this.entryOffset,    padding,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
521	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entryOffset,  is,  padding,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entryOffset,  is,  padding,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.entryOffset,  is,  padding,  this.recordSize);	  Integer    skipped    =    IOUtils.skip(this.entryOffset,    is,    padding);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
522	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entryOffset,  is,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(this.entryOffset,  is,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(this.entryOffset,  is,  this.recordSize);	  Integer    skipped    =    IOUtils.skip(this.entryOffset,    is,    padding);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
523	[BUG]  [BUGGY]  Integer  skipped  =  IOUtils.skip(pattern,  numRecords);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  Integer  skipped  =  IOUtils.skip(pattern,  numRecords);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	Integer  skipped  =  IOUtils.skip(pattern,  numRecords);	  Integer    skipped    =    IOUtils.skip(numRecords,    padding);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
524	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    this.currEntry.getValue();    if(currEntry.getName().equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
525	[BUG]  [BUGGY]  if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName())  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName())  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(padding!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName())	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    this.currEntry.getValue();    if(currEntry.getName().equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
526	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  }  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  }	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    this.currEntry.getValue();    if(currEntry.getName().equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
527	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName())  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName())  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName())	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    this.currEntry.getValue();    if(currEntry.getName().equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
528	[BUG]  [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry.getName().equals(currEntry.getName	  if(padding    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    this.currEntry.getValue();    if(currEntry.getName().equals(currEntry.getName()))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
529	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(input,  is);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  long  skipped  =  IOUtils.skip(input,  is);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	long  skipped  =  IOUtils.skip(input,  is);	  long    skipped    =    IOUtils.skip(numRecords,    is);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
530	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(pattern,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(pattern,  this.recordSize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(pattern,  this.recordSize);	  int    skipped    =    IOUtils.skip(recordSize,    padding);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
531	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(this.recordSize,  padding,  this.entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;      [BUGGY]  int  skipped  =  IOUtils.skip(this.recordSize,  padding,  this.entrySize);  [BUGGY]      count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	304	304	1	replace	int  skipped  =  IOUtils.skip(this.recordSize,  padding,  this.entrySize);	  long    skipped    =    IOUtils.skip(this.entrySize,    padding,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
