bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  numRecords  =  (this.recordSize  *  this.recordSize)/  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  (this.recordSize  *  this.recordSize)/  1;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  (this.recordSize  *  this.recordSize)/  1;	  long    numRecords    =    (this.recordSize    *    this.recordSize)/    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
2	[BUG]  [BUGGY]  long  numRecords  =  (this.recordSize  *  this.recordSize)/  2;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  long  numRecords  =  (this.recordSize  *  this.recordSize)/  2;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	long  numRecords  =  (this.recordSize  *  this.recordSize)/  2;	  long    numRecords    =    (this.recordSize    *    this.recordSize)/    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
3	[BUG]  [BUGGY]  long  numRecords  =  (this.recordSize  *  this.entrySize)/  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  long  numRecords  =  (this.recordSize  *  this.entrySize)/  1;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	long  numRecords  =  (this.recordSize  *  this.entrySize)/  1;	  long    numRecords    =    (this.recordSize    *    this.recordSize)/    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
4	[BUG]  [BUGGY]  long  numRecords  =  (this.recordSize  *  this.recordSize)/  1L;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  long  numRecords  =  (this.recordSize  *  this.recordSize)/  1L;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	long  numRecords  =  (this.recordSize  *  this.recordSize)/  1L;	  long    numRecords    =    (this.recordSize    *    this.recordSize)/    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
5	[BUG]  [BUGGY]  int  numRecords  =  this.recordSize  *  this.entryOffset;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  this.recordSize  *  this.entryOffset;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  this.recordSize  *  this.entryOffset;	  int    numRecords    =    this.entryOffset    *    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
6	[BUG]  [BUGGY]  int  numRecords  =  this.entrySize  *  this.recordOffset;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  this.entrySize  *  this.recordOffset;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  this.entrySize  *  this.recordOffset;	  int    numRecords    =    this.entryOffset    *    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
7	[BUG]  [BUGGY]  int  numRecords  =  this.entrySize  *  this.recordSize;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  this.entrySize  *  this.recordSize;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  this.entrySize  *  this.recordSize;	  int    numRecords    =    this.entryOffset    *    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
8	[BUG]  [BUGGY]  int  numRecords  =  this.length  *  this.recordSize;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  this.length  *  this.recordSize;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  this.length  *  this.recordSize;	  int    numRecords    =    this.entryOffset    *    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
9	[BUG]  [BUGGY]  int  numRecords  =  this.entrySize  *  this.entryOffset;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  this.entrySize  *  this.entryOffset;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  this.entrySize  *  this.entryOffset;	  int    numRecords    =    this.entryOffset    *    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
10	[BUG]  [BUGGY]  int  numRecords  =  this.entryOffset  *  this.recordSize  +  1;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  this.entryOffset  *  this.recordSize  +  1;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  this.entryOffset  *  this.recordSize  +  1;	  int    numRecords    =    this.entryOffset    *    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
11	[BUG]  [BUGGY]  int  numRecords  =  this.blockSize  *  this.recordSize;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  this.blockSize  *  this.recordSize;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  this.blockSize  *  this.recordSize;	  int    numRecords    =    this.entryOffset    *    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
12	[BUG]  [BUGGY]  int  numRecords  =  this.recordSize  *  this.recordSize)+  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  this.recordSize  *  this.recordSize)+  1;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  this.recordSize  *  this.recordSize)+  1;	  int    numRecords    =    this.recordSize    /    this.recordSize)+    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
13	[BUG]  [BUGGY]  int  numRecords  =  this.entrySize  /  this.recordSize)+  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  this.entrySize  /  this.recordSize)+  1;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  this.entrySize  /  this.recordSize)+  1;	  int    numRecords    =    this.recordSize    /    this.recordSize)+    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
14	[BUG]  [BUGGY]  int  numRecords  =  this.recordSize  /  this.entrySize)+  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  this.recordSize  /  this.entrySize)+  1;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  this.recordSize  /  this.entrySize)+  1;	  int    numRecords    =    this.recordSize    /    this.recordSize)+    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
15	[BUG]  [BUGGY]  int  numRecords  =  this.recordSize  /  this.recordSize)+  2;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  this.recordSize  /  this.recordSize)+  2;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  this.recordSize  /  this.recordSize)+  2;	  int    numRecords    =    this.recordSize    /    this.recordSize)+    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
16	[BUG]  [BUGGY]  int  numRecords  =  this.recordSize  /  this.blockSize)+  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  this.recordSize  /  this.blockSize)+  1;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  this.recordSize  /  this.blockSize)+  1;	  int    numRecords    =    this.recordSize    /    this.recordSize)+    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
17	[BUG]  [BUGGY]  int  numRecords  =  this.recordSize  %  this.recordSize)+  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  this.recordSize  %  this.recordSize)+  1;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  this.recordSize  %  this.recordSize)+  1;	  int    numRecords    =    this.recordSize    /    this.recordSize)+    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
18	[BUG]  [BUGGY]  int  numRecords  =  this.recordSize  +  this.entryOffset;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  this.recordSize  +  this.entryOffset;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  this.recordSize  +  this.entryOffset;	  int    numRecords    =    this.entryOffset    +    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
19	[BUG]  [BUGGY]  int  numRecords  =  this.entrySize  +  this.recordOffset;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  this.entrySize  +  this.recordOffset;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  this.entrySize  +  this.recordOffset;	  int    numRecords    =    this.entryOffset    +    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
20	[BUG]  [BUGGY]  int  numRecords  =  this.length  +  this.recordSize;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  this.length  +  this.recordSize;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  this.length  +  this.recordSize;	  int    numRecords    =    this.entryOffset    +    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
21	[BUG]  [BUGGY]  long  numRecords  =  this.entryOffset  +  this.recordSize;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  long  numRecords  =  this.entryOffset  +  this.recordSize;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	long  numRecords  =  this.entryOffset  +  this.recordSize;	  int    numRecords    =    this.entryOffset    +    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
22	[BUG]  [BUGGY]  InputStream  is  =  getRecordInputStream(this.entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  InputStream  is  =  getRecordInputStream(this.entrySize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	InputStream  is  =  getRecordInputStream(this.entrySize);	  InputStream    is    =    getRecordInputStream();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
23	[BUG]  [BUGGY]  InputStream  is  =  this.getRecordInputStream();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  InputStream  is  =  this.getRecordInputStream();  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	InputStream  is  =  this.getRecordInputStream();	  InputStream    is    =    getRecordInputStream();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
24	[BUG]  [BUGGY]  InputStream  is  =  getRecordInputStream(),  this.entrySize);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  InputStream  is  =  getRecordInputStream(),  this.entrySize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	InputStream  is  =  getRecordInputStream(),  this.entrySize);	  InputStream    is    =    getRecordInputStream();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
25	[BUG]  [BUGGY]  InputStream  is  =  getRecordInputStream().getChars(0,  this.entrySize);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  InputStream  is  =  getRecordInputStream().getChars(0,  this.entrySize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	InputStream  is  =  getRecordInputStream().getChars(0,  this.entrySize);	  InputStream    is    =    getRecordInputStream();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
26	[BUG]  [BUGGY]  InputStream  is  =  this.currEntry.getRecordInputStream();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  InputStream  is  =  this.currEntry.getRecordInputStream();  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	InputStream  is  =  this.currEntry.getRecordInputStream();	  InputStream    is    =    getRecordInputStream();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
27	[BUG]  [BUGGY]  InputStream  is  =  getRecordInputStream(),  this.entrySize;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  InputStream  is  =  getRecordInputStream(),  this.entrySize;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	InputStream  is  =  getRecordInputStream(),  this.entrySize;	  InputStream    is    =    getRecordInputStream();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
28	[BUG]  [BUGGY]  Integer  numRecords  =  IOUtils.skipRecordPadding(this.entrySize,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  Integer  numRecords  =  IOUtils.skipRecordPadding(this.entrySize,  this.recordSize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	Integer  numRecords  =  IOUtils.skipRecordPadding(this.entrySize,  this.recordSize);	  Integer    numRecords    =    IOUtils.skipRecordPadding(this.entryOffset);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
29	[BUG]  [BUGGY]  Integer  numRecords  =  IOUtils.skipRecordPadding(this.entryOffset,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  Integer  numRecords  =  IOUtils.skipRecordPadding(this.entryOffset,  this.recordSize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	Integer  numRecords  =  IOUtils.skipRecordPadding(this.entryOffset,  this.recordSize);	  Integer    numRecords    =    IOUtils.skipRecordPadding(this.entryOffset);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
30	[BUG]  [BUGGY]  Integer  numRecords  =  IOUtils.skipRecordPadding(this.recordSize,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  Integer  numRecords  =  IOUtils.skipRecordPadding(this.recordSize,  this.entryOffset);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	Integer  numRecords  =  IOUtils.skipRecordPadding(this.recordSize,  this.entryOffset);	  Integer    numRecords    =    IOUtils.skipRecordPadding(this.entryOffset);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
31	[BUG]  [BUGGY]  Integer  numRecords  =  IOUtils.skipRecordPadding(this.available);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  Integer  numRecords  =  IOUtils.skipRecordPadding(this.available);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	Integer  numRecords  =  IOUtils.skipRecordPadding(this.available);	  Integer    numRecords    =    IOUtils.skipRecordPadding(this.entryOffset);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
32	[BUG]  [BUGGY]  Integer  numRecords  =  IOUtils.skipRecordPadding(this.recordSize,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  Integer  numRecords  =  IOUtils.skipRecordPadding(this.recordSize,  this.recordSize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	Integer  numRecords  =  IOUtils.skipRecordPadding(this.recordSize,  this.recordSize);	  Integer    numRecords    =    IOUtils.skipRecordPadding(this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
33	[BUG]  [BUGGY]  Integer  numRecords  =  IOUtils.skipRecordPadding(this.recordSize  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  Integer  numRecords  =  IOUtils.skipRecordPadding(this.recordSize  +  1);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	Integer  numRecords  =  IOUtils.skipRecordPadding(this.recordSize  +  1);	  Integer    numRecords    =    IOUtils.skipRecordPadding(this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
34	[BUG]  [BUGGY]  Integer  numRecords  =  IOUtils.skipRecordPadding(this.recordSize,  this.length);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  Integer  numRecords  =  IOUtils.skipRecordPadding(this.recordSize,  this.length);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	Integer  numRecords  =  IOUtils.skipRecordPadding(this.recordSize,  this.length);	  Integer    numRecords    =    IOUtils.skipRecordPadding(this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
35	[BUG]  [BUGGY]  int  numRecords  =  IOUtils.skip(this.recordSize,  this.entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  IOUtils.skip(this.recordSize,  this.entrySize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  IOUtils.skip(this.recordSize,  this.entrySize);	  int    numRecords    =    IOUtils.skip(this.entrySize,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
36	[BUG]  [BUGGY]  int  numRecords  =  IOUtils.skip(this.entrySize,  this.recordSize  +  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  IOUtils.skip(this.entrySize,  this.recordSize  +  1);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  IOUtils.skip(this.entrySize,  this.recordSize  +  1);	  int    numRecords    =    IOUtils.skip(this.entrySize,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
37	[BUG]  [BUGGY]  long  numRecords  =  IOUtils.skip(this.entrySize,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  long  numRecords  =  IOUtils.skip(this.entrySize,  this.recordSize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	long  numRecords  =  IOUtils.skip(this.entrySize,  this.recordSize);	  int    numRecords    =    IOUtils.skip(this.entrySize,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
38	[BUG]  [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.entrySize,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.entrySize,  this.recordSize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	Integer  numRecords  =  IOUtils.skip(this.entrySize,  this.recordSize);	  int    numRecords    =    IOUtils.skip(this.entrySize,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
39	[BUG]  [BUGGY]  int  numRecords  =  IOUtils.skip(this.recordSize,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  IOUtils.skip(this.recordSize,  this.entryOffset);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  IOUtils.skip(this.recordSize,  this.entryOffset);	  int    numRecords    =    IOUtils.skip(this.entrySize,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
40	[BUG]  [BUGGY]  int  numRecords  =  (this.entrySize  *  this.recordSize)/  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  (this.entrySize  *  this.recordSize)/  1;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  (this.entrySize  *  this.recordSize)/  1;	  int    numRecords    =    (this.entrySize    *    this.recordSize)+    1;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
41	[BUG]  [BUGGY]  int  numRecords  =  (this.entrySize  *  this.recordSize)-  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  (this.entrySize  *  this.recordSize)-  1;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  (this.entrySize  *  this.recordSize)-  1;	  int    numRecords    =    (this.entrySize    *    this.recordSize)+    1;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
42	[BUG]  [BUGGY]  int  numRecords  =  (this.recordSize  *  this.recordSize)+  2;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  (this.recordSize  *  this.recordSize)+  2;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  (this.recordSize  *  this.recordSize)+  2;	  int    numRecords    =    (this.recordSize    *    this.recordSize)+    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
43	[BUG]  [BUGGY]  int  numRecords  =  this.entrySize;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  this.entrySize;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  this.entrySize;	  int    numRecords    =    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
44	[BUG]  [BUGGY]  int  numRecords  =  this.recordSize  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  this.recordSize  +  1;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  this.recordSize  +  1;	  int    numRecords    =    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
45	[BUG]  [BUGGY]  int  numRecords  =  this.recordSize  *  this.entrySize;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  this.recordSize  *  this.entrySize;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  this.recordSize  *  this.entrySize;	  int    numRecords    =    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
46	[BUG]  [BUGGY]  int  numRecords  =  this.entryOffset;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  this.entryOffset;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  this.entryOffset;	  int    numRecords    =    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
47	[BUG]  [BUGGY]  long  numRecords  =  this.recordSize;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  long  numRecords  =  this.recordSize;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	long  numRecords  =  this.recordSize;	  int    numRecords    =    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
48	[BUG]  [BUGGY]  int  numRecords  =  this.recordSize  -  1;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  this.recordSize  -  1;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  this.recordSize  -  1;	  int    numRecords    =    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
49	[BUG]  [BUGGY]  int  numRecords  =  this.recordSize  +  this.entrySize;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  this.recordSize  +  this.entrySize;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  this.recordSize  +  this.entrySize;	  int    numRecords    =    this.entrySize    +    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
50	[BUG]  [BUGGY]  int  numRecords  =  this.entrySize  +  this.blockSize;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  this.entrySize  +  this.blockSize;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  this.entrySize  +  this.blockSize;	  int    numRecords    =    this.entrySize    +    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
51	[BUG]  [BUGGY]  int  numRecords  =  IOUtils.skipRecordPadding(this.entrySize,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  IOUtils.skipRecordPadding(this.entrySize,  this.recordSize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  IOUtils.skipRecordPadding(this.entrySize,  this.recordSize);	  int    numRecords    =    IOUtils.skipRecordPadding(this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
52	[BUG]  [BUGGY]  int  numRecords  =  IOUtils.skipRecordPadding(this.entryOffset);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  IOUtils.skipRecordPadding(this.entryOffset);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  IOUtils.skipRecordPadding(this.entryOffset);	  int    numRecords    =    IOUtils.skipRecordPadding(this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
53	[BUG]  [BUGGY]  int  numRecords  =  IOUtils.skipRecordPadding(this.recordSize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  IOUtils.skipRecordPadding(this.recordSize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  IOUtils.skipRecordPadding(this.recordSize);	  int    numRecords    =    IOUtils.skipRecordPadding(this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
54	[BUG]  [BUGGY]  int  numRecords  =  IOUtils.skipRecordPadding(this.recordSize,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  IOUtils.skipRecordPadding(this.recordSize,  this.entryOffset);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  IOUtils.skipRecordPadding(this.recordSize,  this.entryOffset);	  int    numRecords    =    IOUtils.skipRecordPadding(this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
55	[BUG]  [BUGGY]  int  numRecords  =  IOUtils.skipRecordPadding(this.recordSize,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  IOUtils.skipRecordPadding(this.recordSize,  this.recordSize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  IOUtils.skipRecordPadding(this.recordSize,  this.recordSize);	  int    numRecords    =    IOUtils.skipRecordPadding(this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
56	[BUG]  [BUGGY]  int  numRecords  =  IOUtils.skipRecordPadding(this.entryOffset,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  IOUtils.skipRecordPadding(this.entryOffset,  this.recordSize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  IOUtils.skipRecordPadding(this.entryOffset,  this.recordSize);	  int    numRecords    =    IOUtils.skipRecordPadding(this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
57	[BUG]  [BUGGY]  long  numRecords  =  IOUtils.skipRecordPadding(this.entrySize);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  long  numRecords  =  IOUtils.skipRecordPadding(this.entrySize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	long  numRecords  =  IOUtils.skipRecordPadding(this.entrySize);	  int    numRecords    =    IOUtils.skipRecordPadding(this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
58	[BUG]  [BUGGY]  Integer  numRecords  =  IOUtils.skipRecordPadding(this.entrySize  +  this.recordSize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  Integer  numRecords  =  IOUtils.skipRecordPadding(this.entrySize  +  this.recordSize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	Integer  numRecords  =  IOUtils.skipRecordPadding(this.entrySize  +  this.recordSize);	  Integer    numRecords    =    IOUtils.skipRecordPadding(this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
59	[BUG]  [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.recordSize,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.recordSize,  this.entryOffset);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	Integer  numRecords  =  IOUtils.skip(this.recordSize,  this.entryOffset);	  Integer    numRecords    =    IOUtils.skip(this.entryOffset);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
60	[BUG]  [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.entryOffset,  this.recordSize  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.entryOffset,  this.recordSize  +  1);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	Integer  numRecords  =  IOUtils.skip(this.entryOffset,  this.recordSize  +  1);	  Integer    numRecords    =    IOUtils.skip(this.entryOffset,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
61	[BUG]  [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.entryStart,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.entryStart,  this.recordSize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	Integer  numRecords  =  IOUtils.skip(this.entryStart,  this.recordSize);	  Integer    numRecords    =    IOUtils.skip(this.entryOffset,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
62	[BUG]  [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.entrySize,  this.recordOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.entrySize,  this.recordOffset);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	Integer  numRecords  =  IOUtils.skip(this.entrySize,  this.recordOffset);	  Integer    numRecords    =    IOUtils.skip(this.entryOffset,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
63	[BUG]  [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.entryBuffer,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.entryBuffer,  this.recordSize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	Integer  numRecords  =  IOUtils.skip(this.entryBuffer,  this.recordSize);	  Integer    numRecords    =    IOUtils.skip(this.entryOffset,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
64	[BUG]  [BUGGY]  int  numRecords  =  (this.recordSize  *  this.entrySize)/  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  (this.recordSize  *  this.entrySize)/  1;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  (this.recordSize  *  this.entrySize)/  1;	  int    numRecords    =    (this.recordSize    *    this.entrySize)+    1;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
65	[BUG]  [BUGGY]  int  numRecords  =  (this.recordSize  *  this.entrySize)-  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  (this.recordSize  *  this.entrySize)-  1;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  (this.recordSize  *  this.entrySize)-  1;	  int    numRecords    =    (this.recordSize    *    this.entrySize)+    1;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
66	[BUG]  [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.recordSize,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.recordSize,  this.recordSize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	Integer  numRecords  =  IOUtils.skip(this.recordSize,  this.recordSize);	  Integer    numRecords    =    IOUtils.skip(this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
67	[BUG]  [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.recordSize  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.recordSize  +  1);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	Integer  numRecords  =  IOUtils.skip(this.recordSize  +  1);	  Integer    numRecords    =    IOUtils.skip(this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
68	[BUG]  [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.recordSize,  this.length);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.recordSize,  this.length);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	Integer  numRecords  =  IOUtils.skip(this.recordSize,  this.length);	  Integer    numRecords    =    IOUtils.skip(this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
69	[BUG]  [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.entrySize  +  this.recordSize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.entrySize  +  this.recordSize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	Integer  numRecords  =  IOUtils.skip(this.entrySize  +  this.recordSize);	  Integer    numRecords    =    IOUtils.skip(this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
70	[BUG]  [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.recordSize,  this.entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.recordSize,  this.entrySize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	Integer  numRecords  =  IOUtils.skip(this.recordSize,  this.entrySize);	  Integer    numRecords    =    IOUtils.skip(this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
71	[BUG]  [BUGGY]  long  numRecords  =  (this.entrySize  *  this.recordSize)/  2;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  long  numRecords  =  (this.entrySize  *  this.recordSize)/  2;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	long  numRecords  =  (this.entrySize  *  this.recordSize)/  2;	  long    numRecords    =    (this.entrySize    *    this.recordSize)/    1;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
72	[BUG]  [BUGGY]  long  numRecords  =  (this.recordSize  *  this.entrySize)/  2;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  long  numRecords  =  (this.recordSize  *  this.entrySize)/  2;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	long  numRecords  =  (this.recordSize  *  this.entrySize)/  2;	  long    numRecords    =    (this.entrySize    *    this.recordSize)/    1;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
73	[BUG]  [BUGGY]  InputStream  is  =  new  FileInputStream(this.recordSize,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  InputStream  is  =  new  FileInputStream(this.recordSize,  this.entryOffset);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	InputStream  is  =  new  FileInputStream(this.recordSize,  this.entryOffset);	  InputStream    is    =    new    FileInputStream(this.entryOffset,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
74	[BUG]  [BUGGY]  InputStream  is  =  new  FileInputStream(this.entrySize,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  InputStream  is  =  new  FileInputStream(this.entrySize,  this.recordSize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	InputStream  is  =  new  FileInputStream(this.entrySize,  this.recordSize);	  InputStream    is    =    new    FileInputStream(this.entryOffset,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
75	[BUG]  [BUGGY]  InputStream  is  =  new  FileInputStream(this.entrySize,  this.recordOffset);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  InputStream  is  =  new  FileInputStream(this.entrySize,  this.recordOffset);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	InputStream  is  =  new  FileInputStream(this.entrySize,  this.recordOffset);	  InputStream    is    =    new    FileInputStream(this.entryOffset,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
76	[BUG]  [BUGGY]  InputStream  is  =  new  FileInputStream(this.length,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  InputStream  is  =  new  FileInputStream(this.length,  this.recordSize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	InputStream  is  =  new  FileInputStream(this.length,  this.recordSize);	  InputStream    is    =    new    FileInputStream(this.entryOffset,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
77	[BUG]  [BUGGY]  InputStream  is  =  new  FileInputStream(this.inputBuffer,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  InputStream  is  =  new  FileInputStream(this.inputBuffer,  this.recordSize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	InputStream  is  =  new  FileInputStream(this.inputBuffer,  this.recordSize);	  InputStream    is    =    new    FileInputStream(this.entryOffset,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
78	[BUG]  [BUGGY]  InputStream  is  =  new  FileInputStream(this.entryOffset,  this.recordSize  +  1);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  InputStream  is  =  new  FileInputStream(this.entryOffset,  this.recordSize  +  1);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	InputStream  is  =  new  FileInputStream(this.entryOffset,  this.recordSize  +  1);	  InputStream    is    =    new    FileInputStream(this.entryOffset,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
79	[BUG]  [BUGGY]  InputStream  is  =  new  FileInputStream(this.outputBuffer,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  InputStream  is  =  new  FileInputStream(this.outputBuffer,  this.recordSize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	InputStream  is  =  new  FileInputStream(this.outputBuffer,  this.recordSize);	  InputStream    is    =    new    FileInputStream(this.entryOffset,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
80	[BUG]  [BUGGY]  int  numRecords  =  (this.recordSize  /  this.entrySize)+  2;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  (this.recordSize  /  this.entrySize)+  2;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  (this.recordSize  /  this.entrySize)+  2;	  int    numRecords    =    (this.recordSize    /    this.recordSize)+    2;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
81	[BUG]  [BUGGY]  int  numRecords  =  (this.recordSize  /  this.recordSize)/  2;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  (this.recordSize  /  this.recordSize)/  2;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  (this.recordSize  /  this.recordSize)/  2;	  int    numRecords    =    (this.recordSize    /    this.recordSize)+    2;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
82	[BUG]  [BUGGY]  InputStream  is  =  getInputStream(this.entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  InputStream  is  =  getInputStream(this.entrySize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	InputStream  is  =  getInputStream(this.entrySize);	  InputStream    is    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
83	[BUG]  [BUGGY]  InputStream  is  =  this.getInputStream();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  InputStream  is  =  this.getInputStream();  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	InputStream  is  =  this.getInputStream();	  InputStream    is    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
84	[BUG]  [BUGGY]  InputStream  is  =  getInputStream(),  this.entrySize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  InputStream  is  =  getInputStream(),  this.entrySize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	InputStream  is  =  getInputStream(),  this.entrySize);	  InputStream    is    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
85	[BUG]  [BUGGY]  InputStream  is  =  getInputStream(),  this.entrySize;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  InputStream  is  =  getInputStream(),  this.entrySize;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	InputStream  is  =  getInputStream(),  this.entrySize;	  InputStream    is    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
86	[BUG]  [BUGGY]  InputStream  is  =  getInputStream(this.recordSize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  InputStream  is  =  getInputStream(this.recordSize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	InputStream  is  =  getInputStream(this.recordSize);	  InputStream    is    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
87	[BUG]  [BUGGY]  int  numRecords  =  (this.recordSize  *  this.recordSize)-  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  (this.recordSize  *  this.recordSize)-  1;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  (this.recordSize  *  this.recordSize)-  1;	  long    numRecords    =    (this.recordSize    *    this.recordSize)-    1;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
88	[BUG]  [BUGGY]  long  numRecords  =  (this.recordSize  *  this.entrySize)-  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  long  numRecords  =  (this.recordSize  *  this.entrySize)-  1;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	long  numRecords  =  (this.recordSize  *  this.entrySize)-  1;	  long    numRecords    =    (this.recordSize    *    this.recordSize)-    1;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
89	[BUG]  [BUGGY]  int  numRecords  =  this.inputStream.readLine(this.entrySize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  this.inputStream.readLine(this.entrySize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  this.inputStream.readLine(this.entrySize);	  int    numRecords    =    this.inputStream.readLine();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
90	[BUG]  [BUGGY]  int  numRecords  =  this.inputStream.readLineBytes(this.entrySize);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  this.inputStream.readLineBytes(this.entrySize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  this.inputStream.readLineBytes(this.entrySize);	  int    numRecords    =    this.inputStream.readLine();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
91	[BUG]  [BUGGY]  int  numRecords  =  this.inputStream.readLine()  +  1;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  this.inputStream.readLine()  +  1;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  this.inputStream.readLine()  +  1;	  int    numRecords    =    this.inputStream.readLine();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
92	[BUG]  [BUGGY]  Integer  numRecords  =  this.inputStream.readLine();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  Integer  numRecords  =  this.inputStream.readLine();  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	Integer  numRecords  =  this.inputStream.readLine();	  int    numRecords    =    this.inputStream.readLine();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
93	[BUG]  [BUGGY]  int  numRecords  =  this.inputStream.readLine(this.entrySize,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  this.inputStream.readLine(this.entrySize,  this.recordSize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  this.inputStream.readLine(this.entrySize,  this.recordSize);	  int    numRecords    =    this.inputStream.readLine();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
94	[BUG]  [BUGGY]  int  numRecords  =  IOUtils.skip(this.entryOffset,  this.recordSize  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  IOUtils.skip(this.entryOffset,  this.recordSize  +  1);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  IOUtils.skip(this.entryOffset,  this.recordSize  +  1);	  int    numRecords    =    IOUtils.skip(this.entryOffset,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
95	[BUG]  [BUGGY]  int  numRecords  =  IOUtils.skip(this.entrySize,  this.recordOffset);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  IOUtils.skip(this.entrySize,  this.recordOffset);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  IOUtils.skip(this.entrySize,  this.recordOffset);	  int    numRecords    =    IOUtils.skip(this.entryOffset,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
96	[BUG]  [BUGGY]  long  numRecords  =  IOUtils.skip(this.entryOffset,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  long  numRecords  =  IOUtils.skip(this.entryOffset,  this.recordSize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	long  numRecords  =  IOUtils.skip(this.entryOffset,  this.recordSize);	  int    numRecords    =    IOUtils.skip(this.entryOffset,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
97	[BUG]  [BUGGY]  int  numRecords  =  IOUtils.skip(this.entryStart,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  IOUtils.skip(this.entryStart,  this.recordSize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  IOUtils.skip(this.entryStart,  this.recordSize);	  int    numRecords    =    IOUtils.skip(this.entryOffset,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
98	[BUG]  [BUGGY]  Integer  numRecords  =  IOUtils.skipRecordPadding(this.recordSize,  this.available);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  Integer  numRecords  =  IOUtils.skipRecordPadding(this.recordSize,  this.available);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	Integer  numRecords  =  IOUtils.skipRecordPadding(this.recordSize,  this.available);	  Integer    numRecords    =    IOUtils.skipRecordPadding(this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
99	[BUG]  [BUGGY]  Integer  numRecords  =  IOUtils.skipRecordPadding(this.recordSize  +  this.recordSize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  Integer  numRecords  =  IOUtils.skipRecordPadding(this.recordSize  +  this.recordSize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	Integer  numRecords  =  IOUtils.skipRecordPadding(this.recordSize  +  this.recordSize);	  Integer    numRecords    =    IOUtils.skipRecordPadding(this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
100	[BUG]  [BUGGY]  Integer  numRecords  =  IOUtils.skipRecordPadding();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  Integer  numRecords  =  IOUtils.skipRecordPadding();  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	Integer  numRecords  =  IOUtils.skipRecordPadding();	  Integer    numRecords    =    IOUtils.skipRecordPadding(this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
101	[BUG]  [BUGGY]  long  numRecords  =  (this.recordSize  *  this.recordSize)-  1L;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  long  numRecords  =  (this.recordSize  *  this.recordSize)-  1L;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	long  numRecords  =  (this.recordSize  *  this.recordSize)-  1L;	  long    numRecords    =    (this.recordSize    *    this.recordSize)-    1;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
102	[BUG]  [BUGGY]  int  numRecords  =  IOUtils.skipRecordPadding(this.recordSize,  this.available);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  IOUtils.skipRecordPadding(this.recordSize,  this.available);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  IOUtils.skipRecordPadding(this.recordSize,  this.available);	  int    numRecords    =    IOUtils.skipRecordPadding(this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
103	[BUG]  [BUGGY]  int  numRecords  =  IOUtils.skipRecordPadding(this.recordSize  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  IOUtils.skipRecordPadding(this.recordSize  +  1);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  IOUtils.skipRecordPadding(this.recordSize  +  1);	  int    numRecords    =    IOUtils.skipRecordPadding(this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
104	[BUG]  [BUGGY]  int  numRecords  =  IOUtils.skipRecordPadding(this.recordSize  +  this.recordSize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  IOUtils.skipRecordPadding(this.recordSize  +  this.recordSize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  IOUtils.skipRecordPadding(this.recordSize  +  this.recordSize);	  int    numRecords    =    IOUtils.skipRecordPadding(this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
105	[BUG]  [BUGGY]  int  numRecords  =  IOUtils.skipRecordPadding();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  IOUtils.skipRecordPadding();  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  IOUtils.skipRecordPadding();	  int    numRecords    =    IOUtils.skipRecordPadding(this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
106	[BUG]  [BUGGY]  Integer  numRecords  =  IOUtils.skipRecordPadding(this.length);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  Integer  numRecords  =  IOUtils.skipRecordPadding(this.length);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	Integer  numRecords  =  IOUtils.skipRecordPadding(this.length);	  Integer    numRecords    =    IOUtils.skipRecordPadding(this.entryOffset);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
107	[BUG]  [BUGGY]  Integer  numRecords  =  IOUtils.skipRecordPadding(this.release);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  Integer  numRecords  =  IOUtils.skipRecordPadding(this.release);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	Integer  numRecords  =  IOUtils.skipRecordPadding(this.release);	  Integer    numRecords    =    IOUtils.skipRecordPadding(this.entryOffset);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
108	[BUG]  [BUGGY]  int  numRecords  =(this.recordSize  *  this.entrySize)+  2;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =(this.recordSize  *  this.entrySize)+  2;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =(this.recordSize  *  this.entrySize)+  2;	  int    numRecords    =    (this.entrySize    *    this.recordSize)+    1;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
109	[BUG]  [BUGGY]  long  numRecords  =  IOUtils.skip(this.recordSize,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  long  numRecords  =  IOUtils.skip(this.recordSize,  this.entryOffset);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	long  numRecords  =  IOUtils.skip(this.recordSize,  this.entryOffset);	  int    numRecords    =    IOUtils.skip(this.entryOffset,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
110	[BUG]  [BUGGY]  long  numRecords  =  this.recordSize  +  this.entryOffset;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  long  numRecords  =  this.recordSize  +  this.entryOffset;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	long  numRecords  =  this.recordSize  +  this.entryOffset;	  int    numRecords    =    this.entryOffset    +    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
111	[BUG]  [BUGGY]  int  numRecords  =  this.recordSize  *  this.blockSize;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  this.recordSize  *  this.blockSize;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  this.recordSize  *  this.blockSize;	  int    numRecords    =    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
112	[BUG]  [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.recordSize,  this.available);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.recordSize,  this.available);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	Integer  numRecords  =  IOUtils.skip(this.recordSize,  this.available);	  Integer    numRecords    =    IOUtils.skip(this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
113	[BUG]  [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.recordSize  +  this.recordSize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.recordSize  +  this.recordSize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	Integer  numRecords  =  IOUtils.skip(this.recordSize  +  this.recordSize);	  Integer    numRecords    =    IOUtils.skip(this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
114	[BUG]  [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.recordSize  +  this.length);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.recordSize  +  this.length);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	Integer  numRecords  =  IOUtils.skip(this.recordSize  +  this.length);	  Integer    numRecords    =    IOUtils.skip(this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
115	[BUG]  [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.length,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.length,  this.recordSize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	Integer  numRecords  =  IOUtils.skip(this.length,  this.recordSize);	  Integer    numRecords    =    IOUtils.skip(this.entryOffset,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
116	[BUG]  [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.recordPadding,  this.entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.recordPadding,  this.entrySize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	Integer  numRecords  =  IOUtils.skip(this.recordPadding,  this.entrySize);	  Integer    numRecords    =    IOUtils.skip(this.entryOffset,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
117	[BUG]  [BUGGY]  long  numRecords  =  (this.recordSize  /  this.recordSize)+  1L;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  long  numRecords  =  (this.recordSize  /  this.recordSize)+  1L;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	long  numRecords  =  (this.recordSize  /  this.recordSize)+  1L;	  long    numRecords    =    (this.recordSize    /    this.recordSize)+    1;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
118	[BUG]  [BUGGY]  long  numRecords  =  (this.recordSize  *  this.recordSize)/  4;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  long  numRecords  =  (this.recordSize  *  this.recordSize)/  4;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	long  numRecords  =  (this.recordSize  *  this.recordSize)/  4;	  long    numRecords    =    (this.recordSize    *    this.recordSize)/    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
119	[BUG]  [BUGGY]  InputStream  is  =  new  FileInputStream(this.recordPadding,  this.entrySize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  InputStream  is  =  new  FileInputStream(this.recordPadding,  this.entrySize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	InputStream  is  =  new  FileInputStream(this.recordPadding,  this.entrySize);	  InputStream    is    =    new    FileInputStream(this.entryOffset,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
120	[BUG]  [BUGGY]  InputStream  is  =  new  FileInputStream(this.recordPadding,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  InputStream  is  =  new  FileInputStream(this.recordPadding,  this.recordSize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	InputStream  is  =  new  FileInputStream(this.recordPadding,  this.recordSize);	  InputStream    is    =    new    FileInputStream(this.entryOffset,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
121	[BUG]  [BUGGY]  InputStream  is  =  new  FileInputStream(this.recordPadding,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  InputStream  is  =  new  FileInputStream(this.recordPadding,  this.entryOffset);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	InputStream  is  =  new  FileInputStream(this.recordPadding,  this.entryOffset);	  InputStream    is    =    new    FileInputStream(this.entryOffset,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
122	[BUG]  [BUGGY]  int  numRecords  =  (this.recordSize  /  this.recordSize)-  2;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  (this.recordSize  /  this.recordSize)-  2;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  (this.recordSize  /  this.recordSize)-  2;	  int    numRecords    =    (this.recordSize    /    this.recordSize)+    2;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
123	[BUG]  [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.recordPadding);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.recordPadding);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	Integer  numRecords  =  IOUtils.skip(this.recordPadding);	  Integer    numRecords    =    IOUtils.skip(this.entryOffset);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
124	[BUG]  [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.recordSize  +  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.recordSize  +  this.entryOffset);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	Integer  numRecords  =  IOUtils.skip(this.recordSize  +  this.entryOffset);	  Integer    numRecords    =    IOUtils.skip(this.entryOffset);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
125	[BUG]  [BUGGY]  Integer  numRecords  =  IOUtils.skipPadding(this.entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  Integer  numRecords  =  IOUtils.skipPadding(this.entrySize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	Integer  numRecords  =  IOUtils.skipPadding(this.entrySize);	  Integer    numRecords    =    IOUtils.skip(this.entryOffset);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
126	[BUG]  [BUGGY]  InputStream  is  =  getRecordInputStream(this.recordSize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  InputStream  is  =  getRecordInputStream(this.recordSize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	InputStream  is  =  getRecordInputStream(this.recordSize);	  InputStream    is    =    getRecordInputStream();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
127	[BUG]  [BUGGY]  InputStream  is  =  getRecordInputStream(this.length);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  InputStream  is  =  getRecordInputStream(this.length);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	InputStream  is  =  getRecordInputStream(this.length);	  InputStream    is    =    getRecordInputStream();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
128	[BUG]  [BUGGY]  InputStream  is  =  getRecordInputStream(this.available);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  InputStream  is  =  getRecordInputStream(this.available);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	InputStream  is  =  getRecordInputStream(this.available);	  InputStream    is    =    getRecordInputStream();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
129	[BUG]  [BUGGY]  InputStream  is  =  getOutputStream();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  InputStream  is  =  getOutputStream();  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	InputStream  is  =  getOutputStream();	  InputStream    is    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
130	[BUG]  [BUGGY]  InputStream  is  =  getInputStream().readLine();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  InputStream  is  =  getInputStream().readLine();  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	InputStream  is  =  getInputStream().readLine();	  InputStream    is    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
131	[BUG]  [BUGGY]  int  numRecords  =  is.readLine();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  is.readLine();  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  is.readLine();	  int    numRecords    =    this.inputStream.readLine();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
132	[BUG]  [BUGGY]  long  numRecords  =  this.recordSize  *  this.entryOffset;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  long  numRecords  =  this.recordSize  *  this.entryOffset;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	long  numRecords  =  this.recordSize  *  this.entryOffset;	  int    numRecords    =    this.entryOffset    *    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
133	[BUG]  [BUGGY]  int  numRecords  =(this.recordSize  *  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =(this.recordSize  *  this.entryOffset);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =(this.recordSize  *  this.entryOffset);	  int    numRecords    =    this.entryOffset    *    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
134	[BUG]  [BUGGY]  long  numRecords  =  this.recordSize  +  this.entrySize;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  long  numRecords  =  this.recordSize  +  this.entrySize;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	long  numRecords  =  this.recordSize  +  this.entrySize;	  int    numRecords    =    this.entrySize    +    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
135	[BUG]  [BUGGY]  int  numRecords  =  this.length  /  this.recordSize)+  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  this.length  /  this.recordSize)+  1;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  this.length  /  this.recordSize)+  1;	  int    numRecords    =    this.recordSize    /    this.recordSize)+    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
136	[BUG]  [BUGGY]  int  numRecords  =  this.recordSize  /  this.recordSize)+  1L;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  this.recordSize  /  this.recordSize)+  1L;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  this.recordSize  /  this.recordSize)+  1L;	  int    numRecords    =    this.recordSize    /    this.recordSize)+    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
137	[BUG]  [BUGGY]  InputStream  is  =  new  FileInputStream(this.readLine(),  this.recordSize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  InputStream  is  =  new  FileInputStream(this.readLine(),  this.recordSize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	InputStream  is  =  new  FileInputStream(this.readLine(),  this.recordSize);	  InputStream    is    =    new    FileInputStream(this.entryOffset,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
138	[BUG]  [BUGGY]  InputStream  is  =  getInputStream().skipRecordPadding();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  InputStream  is  =  getInputStream().skipRecordPadding();  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	InputStream  is  =  getInputStream().skipRecordPadding();	  InputStream    is    =    getInputStream();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
139	[BUG]  [BUGGY]  short  numRecords  =  (this.recordSize  /  this.recordSize)+  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  short  numRecords  =  (this.recordSize  /  this.recordSize)+  1;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	short  numRecords  =  (this.recordSize  /  this.recordSize)+  1;	  long    numRecords    =    (this.recordSize    /    this.recordSize)+    1;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
140	[BUG]  [BUGGY]  Integer  numRecords  =  IOUtils.skipRecordPadding(this.entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  Integer  numRecords  =  IOUtils.skipRecordPadding(this.entrySize  +  1);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	Integer  numRecords  =  IOUtils.skipRecordPadding(this.entrySize  +  1);	  Integer    numRecords    =    IOUtils.skipRecordPadding(this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
141	[BUG]  [BUGGY]  long  numRecords  =  (this.recordSize  *  this.length)-  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  long  numRecords  =  (this.recordSize  *  this.length)-  1;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	long  numRecords  =  (this.recordSize  *  this.length)-  1;	  long    numRecords    =    (this.recordSize    *    this.recordSize)-    1;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
142	[BUG]  [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.blockSize,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.blockSize,  this.recordSize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	Integer  numRecords  =  IOUtils.skip(this.blockSize,  this.recordSize);	  Integer    numRecords    =    IOUtils.skip(this.entryOffset,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
143	[BUG]  [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.entry,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.entry,  this.recordSize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	Integer  numRecords  =  IOUtils.skip(this.entry,  this.recordSize);	  Integer    numRecords    =    IOUtils.skip(this.entryOffset,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
144	[BUG]  [BUGGY]  Integer  numRecords  =  IOUtils.skipRecordPadding(this.inputStream);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  Integer  numRecords  =  IOUtils.skipRecordPadding(this.inputStream);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	Integer  numRecords  =  IOUtils.skipRecordPadding(this.inputStream);	  Integer    numRecords    =    IOUtils.skipRecordPadding(this.entryOffset);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
145	[BUG]  [BUGGY]  int  numRecords  =  this.inputStream.readLine()  +  this.entrySize;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  this.inputStream.readLine()  +  this.entrySize;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  this.inputStream.readLine()  +  this.entrySize;	  int    numRecords    =    this.inputStream.readLine();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
146	[BUG]  [BUGGY]  int  numRecords  =  this.inputStream.readLine()  *  this.entrySize;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  this.inputStream.readLine()  *  this.entrySize;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  this.inputStream.readLine()  *  this.entrySize;	  int    numRecords    =    this.inputStream.readLine();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
147	[BUG]  [BUGGY]  int  numRecords  =  IOUtils.skipRecordPadding(this.recordSize,  this.entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  IOUtils.skipRecordPadding(this.recordSize,  this.entrySize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  IOUtils.skipRecordPadding(this.recordSize,  this.entrySize);	  int    numRecords    =    IOUtils.skipRecordPadding(this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
148	[BUG]  [BUGGY]  int  numRecords  =  this.entrySize  *  this.recordSize)+  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  this.entrySize  *  this.recordSize)+  1;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  this.entrySize  *  this.recordSize)+  1;	  int    numRecords    =    this.recordSize    /    this.recordSize)+    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
149	[BUG]  [BUGGY]  long  numRecords  =  (this.recordSize  *  this.length)/  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  long  numRecords  =  (this.recordSize  *  this.length)/  1;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	long  numRecords  =  (this.recordSize  *  this.length)/  1;	  long    numRecords    =    (this.recordSize    *    this.recordSize)/    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
150	[BUG]  [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.inputBuffer,  this.entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  Integer  numRecords  =  IOUtils.skip(this.inputBuffer,  this.entrySize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	Integer  numRecords  =  IOUtils.skip(this.inputBuffer,  this.entrySize);	  Integer    numRecords    =    IOUtils.skip(this.entryOffset);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
151	[BUG]  [BUGGY]  int  numRecords  =  this.inputSize;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  this.inputSize;  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  this.inputSize;	  int    numRecords    =    this.recordSize;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
152	[BUG]  [BUGGY]  InputStream  is  =  getIOUtils().skipRecordPadding();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  InputStream  is  =  getIOUtils().skipRecordPadding();  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	InputStream  is  =  getIOUtils().skipRecordPadding();	  InputStream    is    =    getRecordInputStream();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
153	[BUG]  [BUGGY]  long  numRecords  =  IOUtils.skip(this.recordSize,  this.entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  long  numRecords  =  IOUtils.skip(this.recordSize,  this.entrySize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	long  numRecords  =  IOUtils.skip(this.recordSize,  this.entrySize);	  int    numRecords    =    IOUtils.skip(this.entrySize,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
154	[BUG]  [BUGGY]  int  numRecords  =  IOUtils.skip(this.entry,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {      [BUGGY]  int  numRecords  =  IOUtils.skip(this.entry,  this.recordSize);  [BUGGY]      long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  count(skipped);  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	302	302	1	replace	int  numRecords  =  IOUtils.skip(this.entry,  this.recordSize);	  int    numRecords    =    IOUtils.skip(this.entrySize,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
