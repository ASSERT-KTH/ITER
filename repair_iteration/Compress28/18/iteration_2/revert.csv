projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(paint);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped+skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped+numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped*skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped/1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped+1,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(paint+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding,skipd);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding,sink);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped,padding,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding,cached);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(switchRecordPadding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipRecordPadding,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skip,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=skipRecordPadding(skip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=skipRecordPadding(padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords*skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords*this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding*skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped*this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped*this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords*this.recordSize,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped*this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){for(inti=0;i<numRecords;++i){skipRecordPadding(i,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){for(inti=0;i<numRecords;++i){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){for(inti=0;i<numRecords;++i){skipRecordPadding(i,padding);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){for(inti=0;i<numRecords;i++){skipRecordPadding(i,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305this.currEntry.skipRecordPadding();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){for(inti=0;i<numRecords;i++){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;++i){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords+skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding+numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped/numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords+sink);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords+skipd);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords+squeezed);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding+skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped/skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped+this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped+this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords,skipped-this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords,skipped-this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped-skipped,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords*skipped-this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(skip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(skip,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(skipd);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(peek);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(switchToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(switchOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(paint,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords,skipd);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(lineno,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305encoding.skipRecordPadding(skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=skipRecordPadding(skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(switchToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped+1,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped+2);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=IOUtils.next(is,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=IOUtils.skip(skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=skipRecordPadding();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords+SHORT_BUFFER_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped*numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordPadding
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordPadding
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordPadding
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getTarEntry(i);if(currEntry!=null){skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getTarEntry(i);if(currEntry!=null){skipRecordPadding
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordP
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped,0,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped-skipped,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped-skipped+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped-this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped-skipped,is.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped-skipped,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords*skipd);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305encoding.skipRecordPadding();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305initPadding(padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().equals(currEntry.getName
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith("
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){skipRecordPadding
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith("
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){skipRecordPadding
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305encoding.skipRecordPadding(padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped+numRecords,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){skipRecordPadding(numRecords);}else{skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){skipRecordPadding(numRecords);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){skipRecordPadding(numRecords);}else{System.arraycopy(this.entrySize,numRecords,padding,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){skipRecordPadding(numRecords);}else{System.arraycopy(this.entrySize,numRecords,0,padding);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skip,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped+this.recordSize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped,padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){count(numRecords);}else{skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){count(numRecords);}else{System.arraycopy(this.entrySize,numRecords,padding,skipped);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){count(numRecords);}else{System.arraycopy(this.entrySize,numRecords,numToSkip,skipped);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){count(numRecords);}else{System.arraycopy(this.entrySize,numRecords,skipped,this.recordSize);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){count(numRecords);}else{System.arraycopy(this.entry,0,padding,numRecords,skipped);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped-this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped-is.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=IOUtils.skip(is,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords,0,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding,0,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped,0,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords,0,skipd);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(paint,0,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding,0,skipd);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305for(inti=0;i<numRecords;++i){skipRecordPadding(i,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305intskipped=0;for(inti=0;i<numRecords;++i){skipRecordPadding(i,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305for(inti=0;i<numRecords;++i){skipRecordPadding(i,padding);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(numRecords>0){for(inti=0;i<this.recordSize;++i){skipRecordPadding(i,padding);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(numRecords>0){for(inti=0;i<this.recordSize;++i){skipRecordPadding(i,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords-skipped+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding-skipped+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped-skipped,padding+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords*skipped+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped-skipped+1,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding+skipped,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding+skipped,this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding+this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding+skipped,this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding+skipped,is.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding+skipped,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords,skipp);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords,skip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(numRecords,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords/skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding/skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords/this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped/this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords/skipd);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){skipRecordPadding();}else{System.arraycopy(this.entrySize,numRecords,numToSkip,skipped);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){count(padding);}else{System.arraycopy(this.entrySize,numRecords,numToSkip,skipped);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){System.arraycopy(this.entrySize,numRecords,numToSkip,skipped);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(!hasHitEOF){if(skipped>0){count(numRecords);}else{System.arraycopy(this.entrySize,numRecords,numToSkip,skipped);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305System.arraycopy(this.entrySize,numRecords,numToSkip,skipped);skipRecordPadding();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(!hasHitEOF){if(skipped>0){count(numRecords);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){skip
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){skipRecordP
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){skip
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){skipRecord
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(preferred);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(skipped,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305for(inti=0;i<numRecords;i++){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305intskipped=0;for(inti=0;i<numRecords;i++){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){for(inti=0;i<this.recordSize;i++){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){for(inti=0;i<skipped;i++){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305intskipped=0;for(inti=0;i<numRecords;i++){skipRecordPadding(i,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(switchToSkip,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(switchToSkip,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=skipRecordPadding(preferred);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=skipRecordPadding(skip,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=skipRecordPadding(padding,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=skipRecordPadding(recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=skipRecordPadding(pivot);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords/1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding/1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped*1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped/2);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords*1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(paint/1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords,sink);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords+this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped+this.recordSize,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(paint+this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=count(padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding,numberRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding,null);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=skipRecordPadding(skipd);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=skipRecordPadding(this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=skipRecordPadding(skipred);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=skipRecordPadding(skipd,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=IOUtils.next(is,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=IOUtils.next(padding,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=IOUtils.next(skip,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=IOUtils.next(this.entrySize,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=IOUtils.next(this.entryOffset,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=IOUtils.next(recordSize,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=IOUtils.next(skip,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding*skipd);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords*this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipd*numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding*numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305encoding.skipRecordPadding(this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305encoding.skipRecordPadding(this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305encoding.skipRecordPadding(skip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305encoding.skipRecordPadding(this.entrySize,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(switchOffset,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(switchOffset+skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(switchOffset-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords-skipped,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding-skipped,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped-this.entrySize,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(this.recordSize-skipped,this.skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords*skipped,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(currentSize-skipped,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getTarEntry(i);if(currEntry!=null){skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getTarEntry(i);if(currEntry!=null){skipRecordPadding
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getTarEntry(i);if(currEntry!=null){skipRecordP
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getTarEntry(i);if(currEntry!=null){skipRecordP
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getTarEntry(i);if(currEntry!=null){skipRecordPadding()
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){skip
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(padding>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding*this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding*this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(available,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(displayed,available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(available,skipd);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords+padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding/numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped,lineno);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(lineno,padding,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipd,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding,skipped,TarArchiveEntry.SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding,skipped,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding,skipd,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords,skipped+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords+1,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding+sink);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding+this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords*sink);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=IOUtils.skip(this.entrySize,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=IOUtils.skip(this.entryOffset,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=IOUtils.skip(padding,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=IOUtils.skip(recordSize,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=IOUtils.skip(this.recordSize,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=IOUtils.skip(this.entryOffset,is,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=IOUtils.skip(null,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordP
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(padding>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordP
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordP
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(padding>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305for(inti=0;i<numRecords;++i){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;++i){skipRecordPadding(i,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<this.recordSize;++i){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;++i){skipped=IOUtils.skip(is,padding);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305intskipped=IOUtils.skip(is,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305longskipped=IOUtils.skip(is,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>=0){skipRecordPadding(numRecords);}else{skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped<0){skipRecordPadding(numRecords);}else{skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){skipRecordPadding(numRecords);}else{skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){skipRecordPadding(padding);}else{skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){skipRecordPadding(numRecords,skipped);}else{skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding+1,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped/1,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords/1,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(paint+1,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding,skipped-this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords,padding-this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped,numRecords-this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords,padding-this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(this.entrySize,skipped-this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(this.entrySize,skipped-this.numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(padding>0){skipRecordPadding(numRecords);}else{System.arraycopy(this.entrySize,numRecords,padding,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){skipRecordPadding(numRecords);}else{System.arraycopy(this.entrySize,numRecords,padding,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){skipRecordPadding(this.entrySize);}else{System.arraycopy(this.entrySize,numRecords,padding,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(!hasHitEOF){if(skipped>0){skipRecordPadding(numRecords);}else{System.arraycopy(this.entrySize,numRecords,padding,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped<0){skipRecordPadding(numRecords);}else{System.arraycopy(this.entrySize,numRecords,padding,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(numRecords>0){skipRecordPadding(numRecords);}else{System.arraycopy(this.entrySize,numRecords,padding,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding,skipped,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding,skipped,this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding,numRecords,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipRecordPadding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(numRecords,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){System.arraycopy(this.entry,0,padding,numRecords,skipped);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){skipRecordPadding();}else{System.arraycopy(this.entry,0,padding,skipped);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){count(numRecords);}else{System.arraycopy(this.entry,0,padding,this.recordSize,skipped);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305System.arraycopy(this.entry,0,padding,numRecords,skipped);skipRecordPadding();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(!hasHitEOF){if(skipped>0){count(numRecords);}else{System.arraycopy(this.entry,0,padding,skipped);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped*this.entrySize,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped*this.recordSize,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped/this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(paint*this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords+skipped,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding+skipd);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipd+numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords+skipd,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(switchRecordPadding,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding=IOUtils.skip(switchRecordPadding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding=IOUtils.skip(is,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding=IOUtils.skip(switchRecordPadding,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=skipRecordPadding;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(switchRecordPadding+skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords-is.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped-is.length,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding-is.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped-is.length+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped-is.length,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords+skipped,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding+numRecords,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped+numRecords,padding,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped/numRecords,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords+skip,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords+s,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords+sum,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().equals(currEntry
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().equals(currEntry.
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().equals(currEntry.getName
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().equals(curr
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().equals(currEntry
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(!hasHitEOF){if(skip>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().equals(currEntry
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(padding,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(skip,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(skip,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(numRecords,padding,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(numRecords-skipped,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords*this.recordSize-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding*this.recordSize-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped*this.recordSize-this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding*this.recordSize-this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords/skipped-this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords*this.entrySize-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding*this.recordSize-skipd);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords-skipped,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding-skipped,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding-skipped,skipd);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped-skipped,padding,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped-skipped,padding,this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped-skipped,padding,this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords-skipped,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords-skipped,skipd);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding-skipped,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords-skipped,sink);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords-skipped,saved);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords,buffer);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords,cached);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipRecordPadding,cached);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped,cached);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped,padding,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(paint,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(inputBuffer,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(this.recordSize,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordP
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordP
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordP
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordPadding
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){skipRecordPadding(numRecords);}else{System.arraycopy(this.entrySize,numRecords,0,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>=0){skipRecordPadding(numRecords);}else{System.arraycopy(this.entrySize,numRecords,0,padding);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(padding>0){skipRecordPadding(numRecords);}else{System.arraycopy(this.entrySize,numRecords,0,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){skipRecordPadding(this.entrySize);}else{System.arraycopy(this.entrySize,numRecords,0,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){skipRecordPadding(numRecords);}else{System.arraycopy(this.entrySize,numRecords,0,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){skipRecordPadding(padding);}else{System.arraycopy(this.entrySize,numRecords,0,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped<0){skipRecordPadding(numRecords);}else{System.arraycopy(this.entrySize,numRecords,0,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipd,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords,padding,skipd);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords,skipped,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords,padding,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=skipRecordPadding(skip+skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=skipRecordPadding(skip+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=skipRecordPadding(this.entrySize,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(!hasHitEOF){if(skip>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith("
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith("
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(padding>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith("
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith("}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(!hasHitEOF){if(skip>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith(
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305initPadding(skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305initPadding(skip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305initPadding(numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305initPadding(switchRecordPadding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305initPadding(numRecords,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305initPadding(this.entryOffset,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305initPadding(skip,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding,skipped-this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped,numRecords-this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(this.recordSize,skipped-this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skip,skipped-this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords,this.recordSize-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(peek,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(switch);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords*this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding*this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped/this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){skipRecordPadding();}else{skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>=0){count(numRecords);}else{skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped<0){count(numRecords);}else{skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped==0){count(numRecords);}else{skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){count(numRecords);}else{skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){count(padding);}else{skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords/sink);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords/skip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords/split);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords/SHORT_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords/squeezed);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){skipRecordPadding();}else{System.arraycopy(this.entrySize,numRecords,skipped,this.recordSize);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(!hasHitEOF){if(skipped>0){count(numRecords);}else{System.arraycopy(this.entrySize,numRecords,skipped,this.recordSize);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){System.arraycopy(this.entrySize,numRecords,skipped,this.recordSize);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped<0){count(numRecords);}else{System.arraycopy(this.entrySize,numRecords,skipped,this.recordSize);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){count(padding);}else{System.arraycopy(this.entrySize,numRecords,skipped,this.recordSize);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){System.arraycopy(this.entrySize,numRecords,padding,this.recordSize);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords-this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding-this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(paint-this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(currentSize-this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(this.recordSize-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords+this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(paint+this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305encoding.skipRecordPadding(numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305encoding.skipRecordPadding(numRecords,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305encoding.skipRecordPadding(this.entryOffset,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305encoding.skipRecordPadding(buffer,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305encoding.skipRecordPadding(skipped,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305intskipped=0;for(inti=0;i<numRecords;++i){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){for(inti=0;i<this.recordSize;++i){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){for(inti=0;i<skipped;++i){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){for(inti=0;i<numRecords;++i){skipped=IOUtils.skip(is,padding);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){skipRecordPadding();}else{System.arraycopy(this.entrySize,numRecords,padding,skipped);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){System.arraycopy(this.entrySize,numRecords,padding,skipped);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(!hasHitEOF){if(skipped>0){count(numRecords);}else{System.arraycopy(this.entrySize,numRecords,padding,skipped);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped<0){count(numRecords);}else{System.arraycopy(this.entrySize,numRecords,padding,skipped);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305System.arraycopy(this.entrySize,numRecords,padding,skipped);skipRecordPadding();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305this.currEntry.skipRecordPadding(skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305this.currEntry.skipRecordPadding(skip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipRecordPadding>0){this.currEntry.skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipRecordPadding>0){this.currEntry.skipRecordPadding();}else{skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305this.currEntry.skipPadding();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipRecordPadding>0){this.currEntry.skipRecordPadding();}else{skipRecordPadding=false;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipRecordPadding,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped,skipRecordPadding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords-this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding-this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords*this.entrySize-this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(paint-this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords*this.entrySize-this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(currentSize-this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(paint+skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(paint,skipped+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords*squeezed);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding+this.skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordPa
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecord
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry==null){skipRecordP
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding*this.recordSize,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords*this.recordSize,padding,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords/this.recordSize,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped*this.recordSize,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(this.recordSize*numRecords,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords*this.recordSize,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords*this.recordSize,skipped,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(numRecords>0){for(inti=0;i<numRecords;++i){skipRecordPadding(i,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){for(inti=0;i<numRecords;++i){skipRecordPadding(i+1,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){for(inti=0;i<numRecords;++i){skipRecordPadding(i,skipped+1);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding-skipped,this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding-skipped,is.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding-skipped,this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){skipRecordPadding();}else{thrownewIllegalArgumentException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){skipRecordPadding();}else{thrownewIllegalArgumentException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords+1,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped+1,padding,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding+1,sink);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding+1,cached);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305Count(numRecords,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding,padding,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped,padding,0,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords,padding,sink);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding,padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords,padding,SHORT_BUFFER_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords,padding,cache);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipred,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords-skipped,is.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped-skipped,padding,is.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped-skipd,padding,is.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords-skipped,file.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped-1,is.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(!hasHitEOF){if(skipped>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith("
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(!hasHitEOF){if(skipped>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith(
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith("}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skip,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getTarEntry(i);if(currEntry!=null){skipRecordPa
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getTarEntry(i);if(currEntry!=null){skipRecord
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getTarEntry(i);if(currEntry!=null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getTarEntry(i);if(currEntry==null){skipRecordPadding
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped,padding,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped,0,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305for(inti=0;i<numRecords;i++){skipRecordPadding(i,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(numRecords>0){for(inti=0;i<numRecords;i++){skipRecordPadding(i,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(numRecords>0){for(inti=0;i<this.recordSize;i++){skipRecordPadding(i,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(numRecords>0){for(inti=0;i<this.entrySize;i++){skipRecordPadding(i,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){for(inti=0;i<numRecords;i++){skipRecordPadding(i+1,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){skipRecordPadding(padding);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>=0){skipRecordPadding(numRecords);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped<0){skipRecordPadding(numRecords);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){skipRecordPadding(numRecords,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305intskipped=skipRecordPadding(numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(switchToSkip,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(switch,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(paint*this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped*this.recordSize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords-skipped,this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped-numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords*this.entrySize,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords*this.recordSize+skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(this.recordSize*numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding/this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=IOUtils.skip(is,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=IOUtils.skip(recordSize,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=IOUtils.skip(this.entryOffset,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=IOUtils.skip(recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=IOUtils.skip(this.entrySize,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=IOUtils.skip(null,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=IOUtils.skip(this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=skipped;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=skipRecordPadding()+skipped;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=skipped+skipRecordPadding();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords+this.recordSize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding+this.recordSize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped/this.recordSize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(this.recordSize+skipped+this.recordSize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords/this.recordSize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords*this.recordSize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(skipd,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(skipd,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(skipd,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(skipd,buffer);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding+SHORT_BUFFER_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped+SHORT_BUFFER_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords*SHORT_BUFFER_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords/SHORT_BUFFER_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(this.entrySize+SHORT_BUFFER_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(paint+SHORT_BUFFER_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords+padding,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords+this.recordSize,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords+2);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding+2);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped*2);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped+3);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding,skipped+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305encoding.skipRecordPadding(success);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(this.recordSize*this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(skipd-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().equals(currEnt
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().equals(currEntry
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip<0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().equals(currEntry
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().equals(cur
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(switched);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(switchToSkip+skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped,available,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(available,escapeSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped,numRecords,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=skipRecordPadding(this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=skipRecordPadding(switchToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=IOUtils.skip(skip,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=IOUtils.skip(skipped,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=IOUtils.skip(skip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){skipRecordPadding();}else{System.arraycopy(this.recordSize,numRecords,padding,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){skipRecordPadding();}else{thrownewIllegalStateException("");}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(switchToSkip+SHORT_BUFFER_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped*SHORT_BUFFER_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skip+SHORT_BUFFER_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(maximumRecords+SHORT_BUFFER_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>=0){count(numRecords);}else{System.arraycopy(this.entry,0,padding,skipped);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>=0){count(numRecords);}else{System.arraycopy(this.entry,0,padding,numRecords,skipped);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){System.arraycopy(this.entry,0,padding,skipped);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(!hasHitEOF){if(skipped>0){count(numRecords);}else{System.arraycopy(this.entry,0,padding,numRecords,skipped);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped<0){count(numRecords);}else{System.arraycopy(this.entry,0,padding,skipped);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){count(numRecords);}else{System.arraycopy(this.entry,0,padding,skipped);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding-numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skip+numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(this.recordSize-this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skip
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped==0){skipRecordPadding(numRecords);}else{skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped!=0){skipRecordPadding(numRecords);}else{skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){skipRecordPadding(this.recordSize);}else{skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped*numberRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){skippe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped-this.recordSize,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped-skipped*1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped*skipped+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(skip+skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped,skipd);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(null,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped-is.length-1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>=0){for(inti=0;i<numRecords;++i){skipRecordPadding(i,padding);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;++i){skipRecordPadding(i,padding);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(skipped,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(skipped-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(skipped,false);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(cached,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>=0){count(numRecords);}else{System.arraycopy(this.entrySize,numRecords,numToSkip,skipped);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){count(numRecords);}else{System.arraycopy(this.entrySize,numRecords,numToSkip,skipped);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped<0){count(numRecords);}else{System.arraycopy(this.entrySize,numRecords,numToSkip,skipped);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){System.arraycopy(this.entrySize,numRecords,numToSkip,skipped);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){System.arraycopy(this.entrySize,numRecords,0,skipped);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){System.arraycopy(this.recordSize,numRecords,numToSkip,skipped);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped-skipped,is.length-1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped-skipped,is.length+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(is.length-skipped,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped+1,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped+1,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped+1,skipd);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip<0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith("
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith(
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding*1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getTarEntry(i);if(currEntry!=null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getTarEntry(i);if(currEntry!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getTarEntry(i);if(currEntry!=null){skip
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(null,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped,this.recordSize-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped,this.recordSize+skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped,this.recordSize,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped,this.recordSize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305encoding.initPadding(padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305initPadding(switchToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skip,numRecords-this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(this.recordSize-skipped,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped-skipped,this.recordSize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords-skipd,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped!=0){count(numRecords);}else{skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped<=0){count(numRecords);}else{skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding,skipped-1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=IOUtils.next(this.recordSize,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=IOUtils.next(is,padding,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=IOUtils.next(is,padding+skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped,0,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){for(inti=0;i<numRecords+1;++i){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped-padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding-skipped,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(this.recordSize*this.entryOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords*this.recordOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped+skipped,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped+numRecords,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305encoding.skipRecordPadding(this.available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305encoding.skipRecordPadding(skipped,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305encoding.skipRecordPadding(this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305encoding.skipRecordPadding(skipped+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skip
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skip
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped,1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped,-1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords+skipped,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords+skipped,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skip-numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords-skipped,this.available);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(numRecords>0){for(inti=0;i<skipped;++i){skipRecordPadding(i,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(numRecords>0){for(inti=0;i<skipRecords;++i){skipRecordPadding(i,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords,padding,shipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords,padding,skip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped+1,is.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(switchToSkip+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skip,numRecords+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skip+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(numRecords>0){for(inti=0;i<skipped;i++){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(numRecords>0){for(inti=0;i<this.recordSize;i++){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(numRecords>0){for(inti=0;i<skipRecords;i++){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords+skipped-1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped*padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305encoding.skipRecordPadding(switchToSkip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305Encoding.skipRecordPadding(skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305encoding.skipPadding(skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>=0){count(numRecords);}else{System.arraycopy(this.entrySize,numRecords,padding,skipped);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){count(numRecords);}else{System.arraycopy(this.entrySize,numRecords,padding,skipped);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){System.arraycopy(this.entrySize,numRecords,padding,skipped);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){System.arraycopy(this.entrySize,numRecords,padding,skipd);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){System.arraycopy(this.entry,numRecords,padding,skipped);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped*this.recordSize-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(switchToSkip+skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(switchToSkip-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(switchToSkip,skipd);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped-skipped,padding,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped-skipped,padding,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords*skipped,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>=0){count(numRecords);}else{System.arraycopy(this.entrySize,numRecords,skipped,this.recordSize);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){System.arraycopy(this.recordSize,numRecords,skipped,this.recordSize);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped!=0){count(numRecords);}else{System.arraycopy(this.entrySize,numRecords,skipped,this.recordSize);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){count(numRecords);}else{System.arraycopy(this.entrySize,numRecords,skipped,this.recordSize);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){System.arraycopy(this.entrySize,numRecords,skipped,this.recordSize);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){System.arraycopy(this.entrySize,numRecords,skipd,this.recordSize);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped+numberRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(switched+numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=IOUtils.skip(record);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=IOUtils.skip(this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=IOUtils.skip(skipped,is);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=skipped*skipRecordPadding();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped+this.recordSize+numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(this.recordSize+skipped+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords-skipped,shipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords-skipped,skip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>=0){skipRecordPadding(numRecords);}else{System.arraycopy(this.entrySize,numRecords,padding,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){System.arraycopy(this.entrySize,numRecords,padding,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){skipRecordPadding(this.recordSize);}else{System.arraycopy(this.entrySize,numRecords,padding,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(!hasHitEOF){skipRecordPadding(numRecords);}else{System.arraycopy(this.entrySize,numRecords,padding,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){System.arraycopy(this.entrySize,numRecords,padding,skipped);}else{System.arraycopy(this.entrySize,numRecords,padding,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<skipped;++i){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords+1;++i){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;++i){skipRecordPadding(i+1);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords,skipped,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords,skipped,TarArchiveEntry.SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped,skipp);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305this.currEntry.skippedRecordPadding();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305this.currEntry.switchRecordPadding();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305this.currEntry.skipRecordPadding(switched);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){skipRecordPadding(this.recordSize);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped!=0){skipRecordPadding(numRecords);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){skipRecordPadding(skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(!hasHitEOF){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith("
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>=0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith("
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipping>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith("
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(numRecords>0){for(inti=0;i<skipped;i++){skipRecordPadding(i,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(numRecords>0){for(inti=0;i<skipRecords;i++){skipRecordPadding(i,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){for(inti=0;i<numRecords;i++){skipRecordPadding(i,skipped+1);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skip,padding+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=count(switchRecordPadding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(switchRecordPadding-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(switchRecordPadding,skipd);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=count(padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped+this.recordSize-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305zipEncoding.skipRecordPadding();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305Encoding.skipRecordPadding();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped/10);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped/4);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped,is,padding,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skip,padding,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped==0){skipRecordPadding(numRecords);}else{System.arraycopy(this.entrySize,numRecords,0,padding);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped!=0){skipRecordPadding(numRecords);}else{System.arraycopy(this.entrySize,numRecords,0,padding);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){skipRecordPadding(numRecords);}else{System.arraycopy(this.entrySize,numRecords,0,padding);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){System.arraycopy(this.entrySize,numRecords,0,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(this.recordSize*skipped-this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skip+this.recordSize*skipped-this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=skipRecordPadding(skipped+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=skipRecordPadding(skipped,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(this.recordSize*this.recordSize,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords*this.recordSize,skipped+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords*this.recordSize,skipped-1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords*this.recordSize,skipped,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding+skipped-1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped+padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(recordSize,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped*this.recordSize-1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(this.entrySize+sink);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped,available,hasHitEOF);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305encoding.skipRecordPadding(switchOffset);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skippingRecordPadding(switchOffset,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped+1,this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(numRecords>0){for(inti=0;i<skipped;++i){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped<0){for(inti=0;i<numRecords;++i){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(numRecords>0){for(inti=0;i<skipRecords;++i){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(numRecords>0){for(inti=0;i<this.recordSize;++i){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped-is.length-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped+this.entrySize,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped-numRecords,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped<0){count(padding);}else{skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped<0){skipRecordPadding();}else{skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding-skipped,0);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skippingRecordPadding(skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(!hasHitEOF){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getTarEntry(i);if(currEntry!=null){skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getTarEntry(i);if(currEntry!=null){skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getTarEntry(i);if(currEntry!=null){skipRecordPadding()
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=IOUtils.next(is,skipped,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){skipRecordPadding();}else{System.arraycopy(this.entrySize,numRecords,padding,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){skipRecordPadding();}else{System.arraycopy(this.entrySize,numRecords,padding,skipped);return;}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(skip+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(this.recordSize,skipped-this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(!hasHitEOF){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getTarEntry(i);if(currEntry!=null){skipRecordPadding
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getTarEntry(i);if(currEntry!=null){skipRecordPadding
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305zipEncoding.skipRecordPadding(skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){System.arraycopy(this.recordSize,numRecords,padding,this.recordSize);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(hasHitEOF){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith("
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith(".
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped<=0){skipRecordPadding(numRecords);}else{skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(switching);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipRecords,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=IOUtils.skip(this.recordSize,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped-this.recordSize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped-this.entrySize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords-skipd+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(skipped,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(skipped+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(this.entrySize+skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(this.recordSize*numRecords-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(this.entrySize*skipped-this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(0,numRecords+SHORT_BUFFER_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(this.recordSize+SHORT_BUFFER_SIZE);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped-1,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding,numRecords*this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(this.entrySize*this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(!hasHitEOF){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordPadding
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordPadding
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(!hasHitEOF){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordPadding
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(numRecords>0){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordPadding
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){for(inti=0;i<this.recordSize;++i){skipRecordPadding(i,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=IOUtils.skip(skipped,is,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=padding;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=IOUtils.skipRecordPadding();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(this.entrySize*this.recordSize,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(0,numRecords*this.recordSize,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305encoding.skipRecordPadding(this.available,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=IOUtils.skipRecordPadding(skip);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305encoding.switchRecordPadding();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipd=count(padding,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(numRecords>0){for(inti=0;i<numRecords;++i){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(numRecords>0){for(inti=0;i<recordSize;++i){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){for(inti=0;i<this.recordSize;i++){skipRecordPadding(i,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(numRecords>0){for(inti=0;i<recordSize;i++){skipRecordPadding(i,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords-skipd,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped-skipped,this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding+this.recordSize,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped,numRecords,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords,padding,header);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped<0){for(inti=0;i<numRecords;++i){skipRecordPadding(i,padding);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped<0){for(inti=0;i<numRecords;++i){skipRecordPadding(i,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(numRecords>0){for(inti=0;i<skipped;++i){skipRecordPadding(i,padding);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=count(skipd,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipd=count(numRecords,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(switchd,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(!hasHitEOF){for(inti=0;i<numRecords;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){skipRecordP
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(this.entrySize+skipd);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=skipped?skipRecordPadding(padding):numRecords;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=skipped?skipRecordPadding(padding):0;
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305this.currEntry=currEntry.skipRecordPadding();
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(padding,numRecords*skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305numRecords=count(padding,this.recordSize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){skipRecordPadding(this.recordSize);}else{System.arraycopy(this.entrySize,numRecords,0,padding);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){skipRecordPadding(this.entrySize);}else{System.arraycopy(this.entrySize,numRecords,0,padding);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){System.arraycopy(this.entrySize,numRecords,0,padding);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){skipRecordPadding(this.recordSize);}else{System.arraycopy(this.entrySize,numRecords,0,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped<=0){skipRecordPadding(numRecords);}else{System.arraycopy(this.entrySize,numRecords,0,padding);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped<0){skipRecordPadding(this.recordSize);}else{System.arraycopy(this.entrySize,numRecords,0,padding);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(padding>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){skip
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(!hasHitEOF){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getValue()!=null){skipRe
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(switchToSkip,cached);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipRecords,cached);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(switchToSkip,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305while(skipped>0){for(inti=0;i<numRecords;i++){skipRecordPadding(i);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){for(inti=0;i<numRecords;i++){skipRecordPadding(i+1);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped/1,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305initPadding(padding,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped,is,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped,skipped,padding);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped*skipd);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){System.arraycopy(this.entrySize,numRecords,-1,skipped);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){System.arraycopy(this.entry,0,padding,this.recordSize,skipped);skipRecordPadding();}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(this.recordSize,skipped-this.numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305skipRecordPadding(skip,skipped,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(!hasHitEOF){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().equals(currEntry
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(padding>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().equals(currEntry
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(numRecords>0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().equals(curr
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped>0){skipRecordPadding(skip);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords-skipd,is.length);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped-skipped,is.length-skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skip,0,numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(paint+numRecords);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords,padding+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(this.recordSize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(this.entrySize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skip>0){skipRecordPadding(this.entrySize);}else{System.arraycopy(this.entrySize,numRecords,padding,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped<0){skipRecordPadding(this.entrySize);}else{System.arraycopy(this.entrySize,numRecords,padding,skipped);}
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(skipped,this.entrySize);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(this.entrySize+this.recordSize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(this.recordSize+this.recordSize+1);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305count(numRecords-this.recordSize,skipped);
projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java305if(skipped<0){for(inti=0;i<numRecords;++i){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry.getName().endsWith("
