bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  count(numRecords,  0,  skipped);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords,  0,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords,  0,  skipped);	  count(skipped,    0,    skipped);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
2	[BUG]  [BUGGY]  count(padding,  0,  skipped);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding,  0,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding,  0,  skipped);	  count(skipped,    0,    skipped);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
3	[BUG]  [BUGGY]  count(skipped,  0,  padding);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped,  0,  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped,  0,  padding);	  count(skipped,    0,    skipped);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
4	[BUG]  [BUGGY]  count(numRecords,  0,  skipd);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords,  0,  skipd);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords,  0,  skipd);	  count(skipped,    0,    skipped);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
5	[BUG]  [BUGGY]  count(paint,  0,  skipped);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(paint,  0,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(paint,  0,  skipped);	  count(skipped,    0,    skipped);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
6	[BUG]  [BUGGY]  count(padding,  0,  skipd);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding,  0,  skipd);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding,  0,  skipd);	  count(skipped,    0,    skipped);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  skipped);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  skipped);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i,    padding);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
8	[BUG]  [BUGGY]  int  skipped  =  0;  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  skipped);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  int  skipped  =  0;  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	int  skipped  =  0;  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  skipped);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i,    padding);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  padding);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  padding);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  padding);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i,    padding);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
10	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  skipRecordPadding(i,  padding);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  skipRecordPadding(i,  padding);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  skipRecordPadding(i,  padding);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i,    padding);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
11	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  skipRecordPadding(i,  skipped);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  skipRecordPadding(i,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  skipRecordPadding(i,  skipped);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i,    padding);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
12	[BUG]  [BUGGY]  count(numRecords  -  skipped  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  -  skipped  +  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  -  skipped  +  1);	  count(skipped    -    skipped    +    1);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
13	[BUG]  [BUGGY]  count(padding  -  skipped  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  -  skipped  +  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  -  skipped  +  1);	  count(skipped    -    skipped    +    1);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
14	[BUG]  [BUGGY]  count(skipped  -  skipped,  padding  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  -  skipped,  padding  +  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  -  skipped,  padding  +  1);	  count(skipped    -    skipped    +    1);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
15	[BUG]  [BUGGY]  count(numRecords  *  skipped  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  *  skipped  +  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  *  skipped  +  1);	  count(skipped    -    skipped    +    1);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
16	[BUG]  [BUGGY]  count(skipped  -  skipped  +  1,  padding);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  -  skipped  +  1,  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  -  skipped  +  1,  padding);	  count(skipped    -    skipped    +    1);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
17	[BUG]  [BUGGY]  count(padding  +  skipped,  numRecords);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  +  skipped,  numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  +  skipped,  numRecords);	  count(padding    +    skipped);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
18	[BUG]  [BUGGY]  count(padding  +  skipped,  this.entrySize);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  +  skipped,  this.entrySize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  +  skipped,  this.entrySize);	  count(padding    +    skipped);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
19	[BUG]  [BUGGY]  count(padding  +  this.recordSize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  +  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  +  this.recordSize);	  count(padding    +    skipped);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
20	[BUG]  [BUGGY]  count(padding  +  skipped,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  +  skipped,  this.entryOffset);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  +  skipped,  this.entryOffset);	  count(padding    +    skipped);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
21	[BUG]  [BUGGY]  count(padding  +  skipped,  is.length);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  +  skipped,  is.length);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  +  skipped,  is.length);	  count(padding    +    skipped);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
22	[BUG]  [BUGGY]  count(padding  +  skipped,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  +  skipped,  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  +  skipped,  this.recordSize);	  count(padding    +    skipped);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
23	[BUG]  [BUGGY]  count(numRecords,  skipp);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords,  skipp);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords,  skipp);	  count(skip,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
24	[BUG]  [BUGGY]  count(numRecords,  skip);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords,  skip);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords,  skip);	  count(skip,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
25	[BUG]  [BUGGY]  skipRecordPadding(numRecords,  skipped);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skipRecordPadding(numRecords,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(numRecords,  skipped);	  count(skip,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
26	[BUG]  [BUGGY]  count(numRecords  /  skipped);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  /  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  /  skipped);	  count(skipped    /    skipped);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
27	[BUG]  [BUGGY]  count(padding  /  skipped);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  /  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  /  skipped);	  count(skipped    /    skipped);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
28	[BUG]  [BUGGY]  count(numRecords  /  this.recordSize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  /  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  /  this.recordSize);	  count(skipped    /    skipped);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
29	[BUG]  [BUGGY]  count(skipped  /  this.recordSize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  /  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  /  this.recordSize);	  count(skipped    /    skipped);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
30	[BUG]  [BUGGY]  count(numRecords  /  skipd);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  /  skipd);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  /  skipd);	  count(skipped    /    skipped);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
31	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipRecordPadding();  }  else  {  System.arraycopy(this.entrySize,  numRecords,  numToSkip,  skipped);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  skipRecordPadding();  }  else  {  System.arraycopy(this.entrySize,  numRecords,  numToSkip,  skipped);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  skipRecordPadding();  }  else  {  System.arraycopy(this.entrySize,  numRecords,  numToSkip,  skipped);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    numToSkip,    skipped);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
32	[BUG]  [BUGGY]  if(skipped  >  0)  {  count(padding);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  numToSkip,  skipped);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  count(padding);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  numToSkip,  skipped);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  count(padding);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  numToSkip,  skipped);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    numToSkip,    skipped);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
33	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  numToSkip,  skipped);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  numToSkip,  skipped);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  numToSkip,  skipped);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    numToSkip,    skipped);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
34	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(skipped  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  numToSkip,  skipped);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(!hasHitEOF)  {  if(skipped  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  numToSkip,  skipped);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(!hasHitEOF)  {  if(skipped  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  numToSkip,  skipped);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    numToSkip,    skipped);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
35	[BUG]  [BUGGY]  System.arraycopy(this.entrySize,  numRecords,  numToSkip,  skipped);  skipRecordPadding();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  System.arraycopy(this.entrySize,  numRecords,  numToSkip,  skipped);  skipRecordPadding();  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	System.arraycopy(this.entrySize,  numRecords,  numToSkip,  skipped);  skipRecordPadding();	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    numToSkip,    skipped);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
36	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(skipped  >  0)  {  count(numRecords);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(!hasHitEOF)  {  if(skipped  >  0)  {  count(numRecords);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(!hasHitEOF)  {  if(skipped  >  0)  {  count(numRecords);  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    numToSkip,    skipped);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
37	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    numToSkip,    skipped);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
38	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRe  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRe	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
39	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skip  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skip  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skip	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
40	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRecordP  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRecordP  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRecordP	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
41	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
42	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRe  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRe	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
43	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skip  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skip  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skip	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
44	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRecord  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRecord  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRecord	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
45	[BUG]  [BUGGY]  skipRecordPadding(preferred);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skipRecordPadding(preferred);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(preferred);	  skipRecordPadding(skipped);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
46	[BUG]  [BUGGY]  skipRecordPadding(skipped,  padding);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skipRecordPadding(skipped,  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(skipped,  padding);	  skipRecordPadding(skipped);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
47	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  skipRecordPadding(i);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	for(int  i  =  0;  i  <  numRecords;  i++)  {  skipRecordPadding(i);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
48	[BUG]  [BUGGY]  int  skipped  =  0;  for(int  i  =  0;  i  <  numRecords;  i++)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  int  skipped  =  0;  for(int  i  =  0;  i  <  numRecords;  i++)  {  skipRecordPadding(i);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	int  skipped  =  0;  for(int  i  =  0;  i  <  numRecords;  i++)  {  skipRecordPadding(i);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
49	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  i++)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  i++)  {  skipRecordPadding(i);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  i++)  {  skipRecordPadding(i);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
50	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipRecordPadding(i);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipRecordPadding(i);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
51	[BUG]  [BUGGY]  int  skipped  =  0;  for(int  i  =  0;  i  <  numRecords;  i++)  {  skipRecordPadding(i,  skipped);  }  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  int  skipped  =  0;  for(int  i  =  0;  i  <  numRecords;  i++)  {  skipRecordPadding(i,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	int  skipped  =  0;  for(int  i  =  0;  i  <  numRecords;  i++)  {  skipRecordPadding(i,  skipped);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
52	[BUG]  [BUGGY]  count(switchToSkip,  skipped);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(switchToSkip,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(switchToSkip,  skipped);	  count(switchToSkip);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
53	[BUG]  [BUGGY]  count(switchToSkip,  numRecords);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(switchToSkip,  numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(switchToSkip,  numRecords);	  count(switchToSkip);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
54	[BUG]  [BUGGY]  numRecords  =  skipRecordPadding(preferred);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  skipRecordPadding(preferred);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  skipRecordPadding(preferred);	  numRecords    =    skipRecordPadding(skipped);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
55	[BUG]  [BUGGY]  numRecords  =  skipRecordPadding(skip,  skipped);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  skipRecordPadding(skip,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  skipRecordPadding(skip,  skipped);	  numRecords    =    skipRecordPadding(skipped);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
56	[BUG]  [BUGGY]  numRecords  =  skipRecordPadding(padding,  skipped);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  skipRecordPadding(padding,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  skipRecordPadding(padding,  skipped);	  numRecords    =    skipRecordPadding(skipped);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
57	[BUG]  [BUGGY]  numRecords  =  skipRecordPadding(recordSize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  skipRecordPadding(recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  skipRecordPadding(recordSize);	  numRecords    =    skipRecordPadding(skipped);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
58	[BUG]  [BUGGY]  numRecords  =  skipRecordPadding(pivot);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  skipRecordPadding(pivot);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  skipRecordPadding(pivot);	  numRecords    =    skipRecordPadding(skipped);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
59	[BUG]  [BUGGY]  count(numRecords  /  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  /  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  /  1);	  count(skipped    /    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
60	[BUG]  [BUGGY]  count(padding  /  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  /  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  /  1);	  count(skipped    /    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
61	[BUG]  [BUGGY]  count(skipped  *  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  *  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  *  1);	  count(skipped    /    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
62	[BUG]  [BUGGY]  count(skipped  /  2);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  /  2);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  /  2);	  count(skipped    /    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
63	[BUG]  [BUGGY]  count(numRecords  *  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  *  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  *  1);	  count(skipped    /    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
64	[BUG]  [BUGGY]  count(paint  /  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(paint  /  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(paint  /  1);	  count(skipped    /    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
65	[BUG]  [BUGGY]  count(numRecords,  sink);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords,  sink);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords,  sink);	  count(skipped,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
66	[BUG]  [BUGGY]  count(numRecords  +  this.recordSize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  +  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  +  this.recordSize);	  count(skipped    +    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
67	[BUG]  [BUGGY]  count(skipped  +  this.recordSize,  skipped);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  +  this.recordSize,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  +  this.recordSize,  skipped);	  count(skipped    +    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
68	[BUG]  [BUGGY]  count(paint  +  this.recordSize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(paint  +  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(paint  +  this.recordSize);	  count(skipped    +    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
69	[BUG]  [BUGGY]  numRecords  =  count(padding,  numRecords);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  count(padding,  numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  count(padding,  numRecords);	  count(numRecords,    padding);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
70	[BUG]  [BUGGY]  count(padding,  numberRecords);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding,  numberRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding,  numberRecords);	  count(numRecords,    padding);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
71	[BUG]  [BUGGY]  count(padding,  null);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding,  null);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding,  null);	  count(numRecords,    padding);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
72	[BUG]  [BUGGY]  numRecords  =  skipRecordPadding(skipd);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  skipRecordPadding(skipd);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  skipRecordPadding(skipd);	  numRecords    =    skipRecordPadding(padding);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
73	[BUG]  [BUGGY]  numRecords  =  skipRecordPadding(this.entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  skipRecordPadding(this.entrySize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  skipRecordPadding(this.entrySize);	  numRecords    =    skipRecordPadding(padding);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
74	[BUG]  [BUGGY]  numRecords  =  skipRecordPadding(skipred);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  skipRecordPadding(skipred);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  skipRecordPadding(skipred);	  numRecords    =    skipRecordPadding(padding);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
75	[BUG]  [BUGGY]  numRecords  =  skipRecordPadding(skipd,  skipped);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  skipRecordPadding(skipd,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  skipRecordPadding(skipd,  skipped);	  numRecords    =    skipRecordPadding(padding);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
76	[BUG]  [BUGGY]  numRecords  =  IOUtils.next(is,  padding);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  IOUtils.next(is,  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  IOUtils.next(is,  padding);	  numRecords    =    IOUtils.next(is,    skipped);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
77	[BUG]  [BUGGY]  numRecords  =  IOUtils.next(padding,  skipped);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  IOUtils.next(padding,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  IOUtils.next(padding,  skipped);	  numRecords    =    IOUtils.next(is,    skipped);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
78	[BUG]  [BUGGY]  numRecords  =  IOUtils.next(skip,  is);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  IOUtils.next(skip,  is);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  IOUtils.next(skip,  is);	  numRecords    =    IOUtils.next(is,    skipped);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
79	[BUG]  [BUGGY]  numRecords  =  IOUtils.next(this.entrySize,  skipped);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  IOUtils.next(this.entrySize,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  IOUtils.next(this.entrySize,  skipped);	  numRecords    =    IOUtils.next(is,    skipped);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
80	[BUG]  [BUGGY]  numRecords  =  IOUtils.next(this.entryOffset,  skipped);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  IOUtils.next(this.entryOffset,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  IOUtils.next(this.entryOffset,  skipped);	  numRecords    =    IOUtils.next(is,    skipped);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
81	[BUG]  [BUGGY]  numRecords  =  IOUtils.next(recordSize,  skipped);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  IOUtils.next(recordSize,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  IOUtils.next(recordSize,  skipped);	  numRecords    =    IOUtils.next(is,    skipped);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
82	[BUG]  [BUGGY]  numRecords  =  IOUtils.next(skip,  skipped);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  IOUtils.next(skip,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  IOUtils.next(skip,  skipped);	  numRecords    =    IOUtils.next(is,    skipped);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
83	[BUG]  [BUGGY]  count(padding  *  skipd);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  *  skipd);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  *  skipd);	  count(numRecords    *    skipd);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
84	[BUG]  [BUGGY]  count(numRecords  *  this.entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  *  this.entrySize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  *  this.entrySize);	  count(numRecords    *    skipd);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
85	[BUG]  [BUGGY]  count(skipd  *  numRecords);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipd  *  numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipd  *  numRecords);	  count(numRecords    *    skipd);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
86	[BUG]  [BUGGY]  count(padding  *  numRecords);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  *  numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  *  numRecords);	  count(numRecords    *    skipd);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
87	[BUG]  [BUGGY]  encoding.skipRecordPadding(this.entryOffset);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  encoding.skipRecordPadding(this.entryOffset);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	encoding.skipRecordPadding(this.entryOffset);	  encoding.skipRecordPadding(padding);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
88	[BUG]  [BUGGY]  encoding.skipRecordPadding(this.entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  encoding.skipRecordPadding(this.entrySize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	encoding.skipRecordPadding(this.entrySize);	  encoding.skipRecordPadding(padding);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
89	[BUG]  [BUGGY]  encoding.skipRecordPadding(skip);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  encoding.skipRecordPadding(skip);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	encoding.skipRecordPadding(skip);	  encoding.skipRecordPadding(padding);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
90	[BUG]  [BUGGY]  encoding.skipRecordPadding(this.entrySize,  skipped);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  encoding.skipRecordPadding(this.entrySize,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	encoding.skipRecordPadding(this.entrySize,  skipped);	  encoding.skipRecordPadding(padding);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
91	[BUG]  [BUGGY]  skipRecordPadding(switchOffset,  skipped);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skipRecordPadding(switchOffset,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(switchOffset,  skipped);	  skipRecordPadding(switchOffset);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
92	[BUG]  [BUGGY]  skipRecordPadding(switchOffset  +  skipped);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skipRecordPadding(switchOffset  +  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(switchOffset  +  skipped);	  skipRecordPadding(switchOffset);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
93	[BUG]  [BUGGY]  skipRecordPadding(switchOffset  -  skipped);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skipRecordPadding(switchOffset  -  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(switchOffset  -  skipped);	  skipRecordPadding(switchOffset);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
94	[BUG]  [BUGGY]  count(numRecords  -  skipped,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  -  skipped,  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  -  skipped,  this.recordSize);	  count(skipped    -    skipped,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
95	[BUG]  [BUGGY]  count(padding  -  skipped,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  -  skipped,  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  -  skipped,  this.recordSize);	  count(skipped    -    skipped,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
96	[BUG]  [BUGGY]  count(skipped  -  this.entrySize,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  -  this.entrySize,  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  -  this.entrySize,  this.recordSize);	  count(skipped    -    skipped,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
97	[BUG]  [BUGGY]  count(this.recordSize  -  skipped,  this.skipped);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(this.recordSize  -  skipped,  this.skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(this.recordSize  -  skipped,  this.skipped);	  count(skipped    -    skipped,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
98	[BUG]  [BUGGY]  count(numRecords  *  skipped,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  *  skipped,  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  *  skipped,  this.recordSize);	  count(skipped    -    skipped,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
99	[BUG]  [BUGGY]  count(currentSize  -  skipped,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(currentSize  -  skipped,  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(currentSize  -  skipped,  this.recordSize);	  count(skipped    -    skipped,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
100	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecordPadding();  }	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getTarEntry(i);    if(currEntry!=    null)    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
101	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecordPadding  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecordPadding  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecordPadding	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getTarEntry(i);    if(currEntry!=    null)    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
102	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecordP  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecordP  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecordP	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getTarEntry(i);    if(currEntry!=    null)    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
103	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecordP  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecordP  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecordP	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getTarEntry(i);    if(currEntry!=    null)    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
104	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecordPadding()  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecordPadding()  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecordPadding()	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getTarEntry(i);    if(currEntry!=    null)    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
105	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRe  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRe	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
106	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skip  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skip  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skip	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
107	[BUG]  [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRe  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRe	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
108	[BUG]  [BUGGY]  count(padding  *  this.recordSize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  *  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  *  this.recordSize);	  count(padding    *    skipped);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
109	[BUG]  [BUGGY]  count(padding  *  this.entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  *  this.entrySize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  *  this.entrySize);	  count(padding    *    skipped);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
110	[BUG]  [BUGGY]  count(numRecords,  available);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords,  available);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords,  available);	  count(skipped,    available);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
111	[BUG]  [BUGGY]  count(available,  skipped);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(available,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(available,  skipped);	  count(skipped,    available);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
112	[BUG]  [BUGGY]  count(padding,  available);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding,  available);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding,  available);	  count(skipped,    available);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
113	[BUG]  [BUGGY]  count(displayed,  available);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(displayed,  available);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(displayed,  available);	  count(skipped,    available);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
114	[BUG]  [BUGGY]  count(available,  skipd);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(available,  skipd);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(available,  skipd);	  count(skipped,    available);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
115	[BUG]  [BUGGY]  count(numRecords  +  padding);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  +  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  +  padding);	  count(padding    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
116	[BUG]  [BUGGY]  count(padding  /  numRecords);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  /  numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  /  numRecords);	  count(padding    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
117	[BUG]  [BUGGY]  count(skipped,  lineno);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped,  lineno);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped,  lineno);	  count(lineno,    skipped);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
118	[BUG]  [BUGGY]  count(lineno,  padding,  skipped);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(lineno,  padding,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(lineno,  padding,  skipped);	  count(lineno,    skipped);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
119	[BUG]  [BUGGY]  count(skipd,  padding);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipd,  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipd,  padding);	  count(padding,    skipd);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
120	[BUG]  [BUGGY]  count(padding,  skipped,  TarArchiveEntry.SIZE);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding,  skipped,  TarArchiveEntry.SIZE);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding,  skipped,  TarArchiveEntry.SIZE);	  count(padding,    skipd);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
121	[BUG]  [BUGGY]  count(padding,  skipped,  numRecords);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding,  skipped,  numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding,  skipped,  numRecords);	  count(padding,    skipd);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
122	[BUG]  [BUGGY]  count(padding,  skipd,  numRecords);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding,  skipd,  numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding,  skipd,  numRecords);	  count(padding,    skipd);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
123	[BUG]  [BUGGY]  count(numRecords,  skipped  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords,  skipped  +  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords,  skipped  +  1);	  count(numRecords    +    1);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
124	[BUG]  [BUGGY]  count(numRecords  +  1,  skipped);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  +  1,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  +  1,  skipped);	  count(numRecords    +    1);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
125	[BUG]  [BUGGY]  count(padding  +  sink);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  +  sink);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  +  sink);	  count(numRecords    +    sink);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
126	[BUG]  [BUGGY]  count(padding  +  this.entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  +  this.entrySize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  +  this.entrySize);	  count(numRecords    +    sink);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
127	[BUG]  [BUGGY]  count(numRecords  *  sink);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  *  sink);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  *  sink);	  count(numRecords    +    sink);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
128	[BUG]  [BUGGY]  numRecords  =  IOUtils.skip(this.entrySize,  padding);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  IOUtils.skip(this.entrySize,  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  IOUtils.skip(this.entrySize,  padding);	  numRecords    =    IOUtils.skip(is,    padding);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
129	[BUG]  [BUGGY]  numRecords  =  IOUtils.skip(this.entryOffset,  padding);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  IOUtils.skip(this.entryOffset,  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  IOUtils.skip(this.entryOffset,  padding);	  numRecords    =    IOUtils.skip(is,    padding);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
130	[BUG]  [BUGGY]  numRecords  =  IOUtils.skip(padding,  is);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  IOUtils.skip(padding,  is);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  IOUtils.skip(padding,  is);	  numRecords    =    IOUtils.skip(is,    padding);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
131	[BUG]  [BUGGY]  numRecords  =  IOUtils.skip(recordSize,  padding);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  IOUtils.skip(recordSize,  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  IOUtils.skip(recordSize,  padding);	  numRecords    =    IOUtils.skip(is,    padding);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
132	[BUG]  [BUGGY]  numRecords  =  IOUtils.skip(this.recordSize,  padding);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  IOUtils.skip(this.recordSize,  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  IOUtils.skip(this.recordSize,  padding);	  numRecords    =    IOUtils.skip(is,    padding);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
133	[BUG]  [BUGGY]  numRecords  =  IOUtils.skip(this.entryOffset,  is,  padding);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  IOUtils.skip(this.entryOffset,  is,  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  IOUtils.skip(this.entryOffset,  is,  padding);	  numRecords    =    IOUtils.skip(is,    padding);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
134	[BUG]  [BUGGY]  numRecords  =  IOUtils.skip(null,  padding);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  IOUtils.skip(null,  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  IOUtils.skip(null,  padding);	  numRecords    =    IOUtils.skip(is,    padding);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
135	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordP    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
136	[BUG]  [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordP    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
137	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordP    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
138	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordP    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
139	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordP    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
140	[BUG]  [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordP    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
141	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
142	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  skipped);  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  skipped);  }	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
143	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  skipRecordPadding(i);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  skipRecordPadding(i);  }	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
144	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipped  =  IOUtils.skip(is,  padding);  }  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipped  =  IOUtils.skip(is,  padding);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipped  =  IOUtils.skip(is,  padding);  }	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
145	[BUG]  [BUGGY]  int  skipped  =  IOUtils.skip(is,  padding);  [CE]  illegal  start  of  type  [FE]                                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  int  skipped  =  IOUtils.skip(is,  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	int  skipped  =  IOUtils.skip(is,  padding);	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
146	[BUG]  [BUGGY]  long  skipped  =  IOUtils.skip(is,  padding);  [CE]  illegal  start  of  type  [FE]                                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  long  skipped  =  IOUtils.skip(is,  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	long  skipped  =  IOUtils.skip(is,  padding);	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
147	[BUG]  [BUGGY]  if(skipped  >=  0)  {  skipRecordPadding(numRecords);  }  else  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >=  0)  {  skipRecordPadding(numRecords);  }  else  {  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >=  0)  {  skipRecordPadding(numRecords);  }  else  {  skipRecordPadding();  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    else    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
148	[BUG]  [BUGGY]  if(skipped  <  0)  {  skipRecordPadding(numRecords);  }  else  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  <  0)  {  skipRecordPadding(numRecords);  }  else  {  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  <  0)  {  skipRecordPadding(numRecords);  }  else  {  skipRecordPadding();  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    else    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
149	[BUG]  [BUGGY]  if(skip  >  0)  {  skipRecordPadding(numRecords);  }  else  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  skipRecordPadding(numRecords);  }  else  {  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  skipRecordPadding(numRecords);  }  else  {  skipRecordPadding();  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    else    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
150	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(padding);  }  else  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(padding);  }  else  {  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  skipRecordPadding(padding);  }  else  {  skipRecordPadding();  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    else    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
151	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(numRecords,  skipped);  }  else  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(numRecords,  skipped);  }  else  {  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  skipRecordPadding(numRecords,  skipped);  }  else  {  skipRecordPadding();  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    else    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
152	[BUG]  [BUGGY]  count(padding  +  1,  skipped);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  +  1,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  +  1,  skipped);	  count(skipped    +    1,    skipped);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
153	[BUG]  [BUGGY]  count(skipped  /  1,  skipped);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  /  1,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  /  1,  skipped);	  count(skipped    +    1,    skipped);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
154	[BUG]  [BUGGY]  count(numRecords  /  1,  skipped);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  /  1,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  /  1,  skipped);	  count(skipped    +    1,    skipped);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
155	[BUG]  [BUGGY]  count(paint  +  1,  skipped);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(paint  +  1,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(paint  +  1,  skipped);	  count(skipped    +    1,    skipped);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
156	[BUG]  [BUGGY]  count(padding,  skipped  -  this.entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding,  skipped  -  this.entrySize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding,  skipped  -  this.entrySize);	  count(numRecords,    skipped    -    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
157	[BUG]  [BUGGY]  count(numRecords,  padding  -  this.entrySize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords,  padding  -  this.entrySize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords,  padding  -  this.entrySize);	  count(numRecords,    skipped    -    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
158	[BUG]  [BUGGY]  count(skipped,  numRecords  -  this.entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped,  numRecords  -  this.entrySize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped,  numRecords  -  this.entrySize);	  count(numRecords,    skipped    -    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
159	[BUG]  [BUGGY]  count(numRecords,  padding  -  this.recordSize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords,  padding  -  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords,  padding  -  this.recordSize);	  count(numRecords,    skipped    -    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
160	[BUG]  [BUGGY]  count(this.entrySize,  skipped  -  this.recordSize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(this.entrySize,  skipped  -  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(this.entrySize,  skipped  -  this.recordSize);	  count(numRecords,    skipped    -    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
161	[BUG]  [BUGGY]  count(this.entrySize,  skipped  -  this.numRecords);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(this.entrySize,  skipped  -  this.numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(this.entrySize,  skipped  -  this.numRecords);	  count(numRecords,    skipped    -    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
162	[BUG]  [BUGGY]  if(padding  >  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(padding  >  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(padding  >  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    padding,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
163	[BUG]  [BUGGY]  if(skip  >  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    padding,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
164	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(this.entrySize);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(this.entrySize);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  skipRecordPadding(this.entrySize);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    padding,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
165	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(skipped  >  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(!hasHitEOF)  {  if(skipped  >  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(!hasHitEOF)  {  if(skipped  >  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    padding,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
166	[BUG]  [BUGGY]  if(skipped  <  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  <  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  <  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    padding,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
167	[BUG]  [BUGGY]  if(numRecords  >  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(numRecords  >  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(numRecords  >  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    padding,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
168	[BUG]  [BUGGY]  count(padding,  skipped,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding,  skipped,  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding,  skipped,  this.recordSize);	  count(padding,    skipped);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
169	[BUG]  [BUGGY]  count(padding,  skipped,  this.entrySize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding,  skipped,  this.entrySize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding,  skipped,  this.entrySize);	  count(padding,    skipped);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
170	[BUG]  [BUGGY]  count(padding,  numRecords,  skipped);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding,  numRecords,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding,  numRecords,  skipped);	  count(padding,    skipped);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
171	[BUG]  [BUGGY]  count(skipRecordPadding,  numRecords);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipRecordPadding,  numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipRecordPadding,  numRecords);	  count(padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
172	[BUG]  [BUGGY]  skipRecordPadding(numRecords,  padding);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skipRecordPadding(numRecords,  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(numRecords,  padding);	  count(padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
173	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(this.entry,  0,  padding,  numRecords,  skipped);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  System.arraycopy(this.entry,  0,  padding,  numRecords,  skipped);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  System.arraycopy(this.entry,  0,  padding,  numRecords,  skipped);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entry,    0,    padding,    numRecords,    skipped);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
174	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipRecordPadding();  }  else  {  System.arraycopy(this.entry,  0,  padding,  skipped);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  skipRecordPadding();  }  else  {  System.arraycopy(this.entry,  0,  padding,  skipped);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  skipRecordPadding();  }  else  {  System.arraycopy(this.entry,  0,  padding,  skipped);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entry,    0,    padding,    numRecords,    skipped);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
175	[BUG]  [BUGGY]  if(skipped  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entry,  0,  padding,  this.recordSize,  skipped);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entry,  0,  padding,  this.recordSize,  skipped);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entry,  0,  padding,  this.recordSize,  skipped);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entry,    0,    padding,    numRecords,    skipped);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
176	[BUG]  [BUGGY]  System.arraycopy(this.entry,  0,  padding,  numRecords,  skipped);  skipRecordPadding();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  System.arraycopy(this.entry,  0,  padding,  numRecords,  skipped);  skipRecordPadding();  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	System.arraycopy(this.entry,  0,  padding,  numRecords,  skipped);  skipRecordPadding();	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entry,    0,    padding,    numRecords,    skipped);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
177	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(skipped  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entry,  0,  padding,  skipped);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(!hasHitEOF)  {  if(skipped  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entry,  0,  padding,  skipped);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(!hasHitEOF)  {  if(skipped  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entry,  0,  padding,  skipped);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entry,    0,    padding,    numRecords,    skipped);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
178	[BUG]  [BUGGY]  count(skipped  *  this.entrySize,  skipped);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  *  this.entrySize,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  *  this.entrySize,  skipped);	  count(skipped    *    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
179	[BUG]  [BUGGY]  count(skipped  *  this.recordSize,  skipped);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  *  this.recordSize,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  *  this.recordSize,  skipped);	  count(skipped    *    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
180	[BUG]  [BUGGY]  count(skipped  /  this.entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  /  this.entrySize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  /  this.entrySize);	  count(skipped    *    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
181	[BUG]  [BUGGY]  count(paint  *  this.entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(paint  *  this.entrySize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(paint  *  this.entrySize);	  count(skipped    *    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
182	[BUG]  [BUGGY]  count(numRecords  +  skipped,  padding);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  +  skipped,  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  +  skipped,  padding);	  count(numRecords    +    skipd);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
183	[BUG]  [BUGGY]  count(padding  +  skipd);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  +  skipd);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  +  skipd);	  count(numRecords    +    skipd);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
184	[BUG]  [BUGGY]  count(skipd  +  numRecords);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipd  +  numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipd  +  numRecords);	  count(numRecords    +    skipd);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
185	[BUG]  [BUGGY]  count(numRecords  +  skipd,  padding);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  +  skipd,  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  +  skipd,  padding);	  count(numRecords    +    skipd);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
186	[BUG]  [BUGGY]  count(switchRecordPadding,  skipped);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(switchRecordPadding,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(switchRecordPadding,  skipped);	  count(switchRecordPadding);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
187	[BUG]  [BUGGY]  skipRecordPadding  =  IOUtils.skip(switchRecordPadding);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skipRecordPadding  =  IOUtils.skip(switchRecordPadding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding  =  IOUtils.skip(switchRecordPadding);	  count(switchRecordPadding);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
188	[BUG]  [BUGGY]  skipRecordPadding  =  IOUtils.skip(is,  skipped);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skipRecordPadding  =  IOUtils.skip(is,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding  =  IOUtils.skip(is,  skipped);	  count(switchRecordPadding);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
189	[BUG]  [BUGGY]  skipRecordPadding  =  IOUtils.skip(switchRecordPadding,  skipped);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skipRecordPadding  =  IOUtils.skip(switchRecordPadding,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding  =  IOUtils.skip(switchRecordPadding,  skipped);	  count(switchRecordPadding);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
190	[BUG]  [BUGGY]  numRecords  =  skipRecordPadding;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  skipRecordPadding;  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  skipRecordPadding;	  count(switchRecordPadding);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
191	[BUG]  [BUGGY]  count(switchRecordPadding  +  skipped);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(switchRecordPadding  +  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(switchRecordPadding  +  skipped);	  count(switchRecordPadding);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
192	[BUG]  [BUGGY]  count(numRecords  -  is.length);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  -  is.length);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  -  is.length);	  count(skipped    -    is.length);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
193	[BUG]  [BUGGY]  count(skipped  -  is.length,  skipped);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  -  is.length,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  -  is.length,  skipped);	  count(skipped    -    is.length);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
194	[BUG]  [BUGGY]  count(padding  -  is.length);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  -  is.length);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  -  is.length);	  count(skipped    -    is.length);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
195	[BUG]  [BUGGY]  count(skipped  -  is.length  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  -  is.length  +  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  -  is.length  +  1);	  count(skipped    -    is.length);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
196	[BUG]  [BUGGY]  count(skipped  -  is.length,  padding);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  -  is.length,  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  -  is.length,  padding);	  count(skipped    -    is.length);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
197	[BUG]  [BUGGY]  count(numRecords  +  skipped,  skipped);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  +  skipped,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  +  skipped,  skipped);	  count(skipped    +    numRecords,    skipped);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
198	[BUG]  [BUGGY]  count(padding  +  numRecords,  skipped);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  +  numRecords,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  +  numRecords,  skipped);	  count(skipped    +    numRecords,    skipped);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
199	[BUG]  [BUGGY]  count(skipped  +  numRecords,  padding,  skipped);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  +  numRecords,  padding,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  +  numRecords,  padding,  skipped);	  count(skipped    +    numRecords,    skipped);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
200	[BUG]  [BUGGY]  count(skipped  /  numRecords,  skipped);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  /  numRecords,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  /  numRecords,  skipped);	  count(skipped    +    numRecords,    skipped);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
201	[BUG]  [BUGGY]  count(numRecords  +  skip,  skipped);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  +  skip,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  +  skip,  skipped);	  count(skipped    +    numRecords,    skipped);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
202	[BUG]  [BUGGY]  count(numRecords  +  s,  skipped);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  +  s,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  +  s,  skipped);	  count(skipped    +    numRecords,    skipped);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
203	[BUG]  [BUGGY]  count(numRecords  +  sum,  skipped);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  +  sum,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  +  sum,  skipped);	  count(skipped    +    numRecords,    skipped);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
204	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
205	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
206	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.getName  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.getName  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.getName	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
207	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(curr  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(curr  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(curr	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
208	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
209	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(!hasHitEOF)  {  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(!hasHitEOF)  {  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
210	[BUG]  [BUGGY]  skipRecordPadding(padding,  skipped);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skipRecordPadding(padding,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(padding,  skipped);	  skipRecordPadding(skip,    skipped);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
211	[BUG]  [BUGGY]  skipRecordPadding(skip,  padding);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skipRecordPadding(skip,  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(skip,  padding);	  skipRecordPadding(skip,    skipped);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
212	[BUG]  [BUGGY]  skipRecordPadding(skip,  numRecords);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skipRecordPadding(skip,  numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(skip,  numRecords);	  skipRecordPadding(skip,    skipped);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
213	[BUG]  [BUGGY]  skipRecordPadding(numRecords,  padding,  skipped);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skipRecordPadding(numRecords,  padding,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(numRecords,  padding,  skipped);	  skipRecordPadding(skip,    skipped);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
214	[BUG]  [BUGGY]  skipRecordPadding(numRecords  -  skipped,  padding);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skipRecordPadding(numRecords  -  skipped,  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(numRecords  -  skipped,  padding);	  skipRecordPadding(skip,    skipped);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
215	[BUG]  [BUGGY]  count(numRecords  *  this.recordSize  -  skipped);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  *  this.recordSize  -  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  *  this.recordSize  -  skipped);	  count(numRecords    *    skipped    -    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
216	[BUG]  [BUGGY]  count(padding  *  this.recordSize  -  skipped);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  *  this.recordSize  -  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  *  this.recordSize  -  skipped);	  count(numRecords    *    skipped    -    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
217	[BUG]  [BUGGY]  count(skipped  *  this.recordSize  -  this.recordSize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  *  this.recordSize  -  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  *  this.recordSize  -  this.recordSize);	  count(numRecords    *    skipped    -    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
218	[BUG]  [BUGGY]  count(padding  *  this.recordSize  -  this.recordSize);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  *  this.recordSize  -  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  *  this.recordSize  -  this.recordSize);	  count(numRecords    *    skipped    -    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
219	[BUG]  [BUGGY]  count(numRecords  /  skipped  -  this.recordSize);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  /  skipped  -  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  /  skipped  -  this.recordSize);	  count(numRecords    *    skipped    -    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
220	[BUG]  [BUGGY]  count(numRecords  *  this.entrySize  -  skipped);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  *  this.entrySize  -  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  *  this.entrySize  -  skipped);	  count(numRecords    *    skipped    -    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
221	[BUG]  [BUGGY]  count(padding  *  this.recordSize  -  skipd);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  *  this.recordSize  -  skipd);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  *  this.recordSize  -  skipd);	  count(numRecords    *    skipped    -    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
222	[BUG]  [BUGGY]  count(numRecords  -  skipped,  padding);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  -  skipped,  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  -  skipped,  padding);	  count(skipped    -    skipped,    padding);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
223	[BUG]  [BUGGY]  count(padding  -  skipped,  skipped);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  -  skipped,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  -  skipped,  skipped);	  count(skipped    -    skipped,    padding);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
224	[BUG]  [BUGGY]  count(padding  -  skipped,  skipd);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  -  skipped,  skipd);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  -  skipped,  skipd);	  count(skipped    -    skipped,    padding);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
225	[BUG]  [BUGGY]  count(skipped  -  skipped,  padding,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  -  skipped,  padding,  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  -  skipped,  padding,  this.recordSize);	  count(skipped    -    skipped,    padding);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
226	[BUG]  [BUGGY]  count(skipped  -  skipped,  padding,  this.entrySize);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  -  skipped,  padding,  this.entrySize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  -  skipped,  padding,  this.entrySize);	  count(skipped    -    skipped,    padding);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
227	[BUG]  [BUGGY]  count(skipped  -  skipped,  padding,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  -  skipped,  padding,  this.entryOffset);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  -  skipped,  padding,  this.entryOffset);	  count(skipped    -    skipped,    padding);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
228	[BUG]  [BUGGY]  count(numRecords  -  skipped,  skipped);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  -  skipped,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  -  skipped,  skipped);	  count(skipped    -    skipped,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
229	[BUG]  [BUGGY]  count(numRecords  -  skipped,  skipd);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  -  skipped,  skipd);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  -  skipped,  skipd);	  count(skipped    -    skipped,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
230	[BUG]  [BUGGY]  count(padding  -  skipped,  numRecords);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  -  skipped,  numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  -  skipped,  numRecords);	  count(skipped    -    skipped,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
231	[BUG]  [BUGGY]  count(numRecords  -  skipped,  sink);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  -  skipped,  sink);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  -  skipped,  sink);	  count(skipped    -    skipped,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
232	[BUG]  [BUGGY]  count(numRecords  -  skipped,  saved);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  -  skipped,  saved);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  -  skipped,  saved);	  count(skipped    -    skipped,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
233	[BUG]  [BUGGY]  count(numRecords,  buffer);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords,  buffer);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords,  buffer);	  count(padding,    sink);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
234	[BUG]  [BUGGY]  count(numRecords,  cached);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords,  cached);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords,  cached);	  count(padding,    cached);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
235	[BUG]  [BUGGY]  count(skipRecordPadding,  cached);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipRecordPadding,  cached);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipRecordPadding,  cached);	  count(padding,    cached);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
236	[BUG]  [BUGGY]  count(skipped,  cached);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped,  cached);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped,  cached);	  count(padding,    cached);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
237	[BUG]  [BUGGY]  count(numRecords,  this.recordSize);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords,  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords,  this.recordSize);	  count(skipped,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
238	[BUG]  [BUGGY]  count(padding,  this.recordSize);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding,  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding,  this.recordSize);	  count(skipped,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
239	[BUG]  [BUGGY]  count(skipped,  padding,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped,  padding,  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped,  padding,  this.recordSize);	  count(skipped,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
240	[BUG]  [BUGGY]  count(paint,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(paint,  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(paint,  this.recordSize);	  count(skipped,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
241	[BUG]  [BUGGY]  count(inputBuffer,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(inputBuffer,  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(inputBuffer,  this.recordSize);	  count(skipped,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
242	[BUG]  [BUGGY]  count(this.recordSize,  skipped);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(this.recordSize,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(this.recordSize,  skipped);	  count(skipped,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
243	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
244	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
245	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
246	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
247	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
248	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
249	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  skipped);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  skipped);  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    0,    padding);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
250	[BUG]  [BUGGY]  if(skipped  >=  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  padding);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >=  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  padding);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >=  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  padding);  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    0,    padding);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
251	[BUG]  [BUGGY]  if(padding  >  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  skipped);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(padding  >  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(padding  >  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  skipped);  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    0,    padding);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
252	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(this.entrySize);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  skipped);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(this.entrySize);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  skipRecordPadding(this.entrySize);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  skipped);  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    0,    padding);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
253	[BUG]  [BUGGY]  if(skip  >  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  skipped);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  skipped);  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    0,    padding);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
254	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(padding);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  skipped);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(padding);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  skipRecordPadding(padding);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  skipped);  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    0,    padding);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
255	[BUG]  [BUGGY]  if(skipped  <  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  skipped);  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  <  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  <  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  skipped);  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    0,    padding);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
256	[BUG]  [BUGGY]  count(skipd,  numRecords);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipd,  numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipd,  numRecords);	  count(numRecords,    skipd);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
257	[BUG]  [BUGGY]  count(numRecords,  padding,  skipd);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords,  padding,  skipd);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords,  padding,  skipd);	  count(numRecords,    skipd);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
258	[BUG]  [BUGGY]  count(numRecords,  skipped,  padding);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords,  skipped,  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords,  skipped,  padding);	  count(numRecords,    skipd);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
259	[BUG]  [BUGGY]  count(numRecords,  padding,  skipped);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords,  padding,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords,  padding,  skipped);	  count(numRecords,    skipd);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
260	[BUG]  [BUGGY]  numRecords  =  skipRecordPadding(skip  +  skipped);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  skipRecordPadding(skip  +  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  skipRecordPadding(skip  +  skipped);	  numRecords    =    skipRecordPadding(skip);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
261	[BUG]  [BUGGY]  numRecords  =  skipRecordPadding(skip  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  skipRecordPadding(skip  +  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  skipRecordPadding(skip  +  1);	  numRecords    =    skipRecordPadding(skip);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
262	[BUG]  [BUGGY]  numRecords  =  skipRecordPadding(this.entrySize,  skipped);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  skipRecordPadding(this.entrySize,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  skipRecordPadding(this.entrySize,  skipped);	  numRecords    =    skipRecordPadding(skip);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
263	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(!hasHitEOF)  {  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(!hasHitEOF)  {  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(   "    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
264	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(   "    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
265	[BUG]  [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(   "    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
266	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  }	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(   "    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
267	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(!hasHitEOF)  {  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(!hasHitEOF)  {  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(   "    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
268	[BUG]  [BUGGY]  initPadding(skipped);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  initPadding(skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	initPadding(skipped);	  initPadding(padding);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
269	[BUG]  [BUGGY]  initPadding(skip);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  initPadding(skip);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	initPadding(skip);	  initPadding(padding);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
270	[BUG]  [BUGGY]  initPadding(numRecords);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  initPadding(numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	initPadding(numRecords);	  initPadding(padding);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
271	[BUG]  [BUGGY]  initPadding(switchRecordPadding);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  initPadding(switchRecordPadding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	initPadding(switchRecordPadding);	  initPadding(padding);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
272	[BUG]  [BUGGY]  initPadding(numRecords,  skipped);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  initPadding(numRecords,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	initPadding(numRecords,  skipped);	  initPadding(padding);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
273	[BUG]  [BUGGY]  initPadding(this.entryOffset,  skipped);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  initPadding(this.entryOffset,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	initPadding(this.entryOffset,  skipped);	  initPadding(padding);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
274	[BUG]  [BUGGY]  initPadding(skip,  skipped);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  initPadding(skip,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	initPadding(skip,  skipped);	  initPadding(padding);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
275	[BUG]  [BUGGY]  count(padding,  skipped  -  this.recordSize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding,  skipped  -  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding,  skipped  -  this.recordSize);	  count(numRecords,    skipped    -    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
276	[BUG]  [BUGGY]  count(skipped,  numRecords  -  this.recordSize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped,  numRecords  -  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped,  numRecords  -  this.recordSize);	  count(numRecords,    skipped    -    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
277	[BUG]  [BUGGY]  count(this.recordSize,  skipped  -  this.recordSize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(this.recordSize,  skipped  -  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(this.recordSize,  skipped  -  this.recordSize);	  count(numRecords,    skipped    -    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
278	[BUG]  [BUGGY]  count(skip,  skipped  -  this.recordSize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skip,  skipped  -  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skip,  skipped  -  this.recordSize);	  count(numRecords,    skipped    -    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
279	[BUG]  [BUGGY]  count(numRecords,  this.recordSize  -  skipped);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords,  this.recordSize  -  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords,  this.recordSize  -  skipped);	  count(numRecords,    skipped    -    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
280	[BUG]  [BUGGY]  skipRecordPadding(peek,  skipped);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skipRecordPadding(peek,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(peek,  skipped);	  skipRecordPadding(peek);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
281	[BUG]  [BUGGY]  skipRecordPadding(switch);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skipRecordPadding(switch);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(switch);	  skipRecordPadding(peek);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
282	[BUG]  [BUGGY]  count(numRecords  *  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  *  this.entryOffset);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  *  this.entryOffset);	  count(skipped    *    this.entryOffset);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
283	[BUG]  [BUGGY]  count(padding  *  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  *  this.entryOffset);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  *  this.entryOffset);	  count(skipped    *    this.entryOffset);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
284	[BUG]  [BUGGY]  count(skipped  /  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  /  this.entryOffset);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  /  this.entryOffset);	  count(skipped    *    this.entryOffset);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
285	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipRecordPadding();  }  else  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  skipRecordPadding();  }  else  {  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  skipRecordPadding();  }  else  {  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
286	[BUG]  [BUGGY]  if(skipped  >=  0)  {  count(numRecords);  }  else  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >=  0)  {  count(numRecords);  }  else  {  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >=  0)  {  count(numRecords);  }  else  {  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
287	[BUG]  [BUGGY]  if(skipped  <  0)  {  count(numRecords);  }  else  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  <  0)  {  count(numRecords);  }  else  {  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  <  0)  {  count(numRecords);  }  else  {  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
288	[BUG]  [BUGGY]  if(skipped  ==  0)  {  count(numRecords);  }  else  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  ==  0)  {  count(numRecords);  }  else  {  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  ==  0)  {  count(numRecords);  }  else  {  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
289	[BUG]  [BUGGY]  if(skip  >  0)  {  count(numRecords);  }  else  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  count(numRecords);  }  else  {  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  count(numRecords);  }  else  {  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
290	[BUG]  [BUGGY]  if(skipped  >  0)  {  count(padding);  }  else  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  count(padding);  }  else  {  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  count(padding);  }  else  {  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
291	[BUG]  [BUGGY]  count(numRecords  /  sink);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  /  sink);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  /  sink);	  count(skipped    /    numRecords);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
292	[BUG]  [BUGGY]  count(numRecords  /  skip);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  /  skip);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  /  skip);	  count(skipped    /    numRecords);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
293	[BUG]  [BUGGY]  count(numRecords  /  split);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  /  split);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  /  split);	  count(skipped    /    numRecords);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
294	[BUG]  [BUGGY]  count(numRecords  /  SHORT_SIZE);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  /  SHORT_SIZE);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  /  SHORT_SIZE);	  count(skipped    /    numRecords);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
295	[BUG]  [BUGGY]  count(numRecords  /  squeezed);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  /  squeezed);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  /  squeezed);	  count(skipped    /    numRecords);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
296	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipRecordPadding();  }  else  {  System.arraycopy(this.entrySize,  numRecords,  skipped,  this.recordSize);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  skipRecordPadding();  }  else  {  System.arraycopy(this.entrySize,  numRecords,  skipped,  this.recordSize);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  skipRecordPadding();  }  else  {  System.arraycopy(this.entrySize,  numRecords,  skipped,  this.recordSize);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    skipped,    this.recordSize);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
297	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(skipped  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  skipped,  this.recordSize);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(!hasHitEOF)  {  if(skipped  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  skipped,  this.recordSize);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(!hasHitEOF)  {  if(skipped  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  skipped,  this.recordSize);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    skipped,    this.recordSize);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
298	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  skipped,  this.recordSize);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  skipped,  this.recordSize);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  skipped,  this.recordSize);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    skipped,    this.recordSize);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
299	[BUG]  [BUGGY]  if(skipped  <  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  skipped,  this.recordSize);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  <  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  skipped,  this.recordSize);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  <  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  skipped,  this.recordSize);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    skipped,    this.recordSize);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
300	[BUG]  [BUGGY]  if(skipped  >  0)  {  count(padding);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  skipped,  this.recordSize);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  count(padding);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  skipped,  this.recordSize);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  count(padding);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  skipped,  this.recordSize);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    skipped,    this.recordSize);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
301	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  padding,  this.recordSize);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  padding,  this.recordSize);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  padding,  this.recordSize);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    skipped,    this.recordSize);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
302	[BUG]  [BUGGY]  count(numRecords  -  this.recordSize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  -  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  -  this.recordSize);	  count(skipped    -    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
303	[BUG]  [BUGGY]  count(padding  -  this.recordSize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  -  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  -  this.recordSize);	  count(skipped    -    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
304	[BUG]  [BUGGY]  count(paint  -  this.recordSize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(paint  -  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(paint  -  this.recordSize);	  count(skipped    -    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
305	[BUG]  [BUGGY]  count(currentSize  -  this.recordSize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(currentSize  -  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(currentSize  -  this.recordSize);	  count(skipped    -    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
306	[BUG]  [BUGGY]  count(this.recordSize  -  skipped);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(this.recordSize  -  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(this.recordSize  -  skipped);	  count(skipped    -    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
307	[BUG]  [BUGGY]  count(numRecords  +  this.entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  +  this.entrySize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  +  this.entrySize);	  count(skipped    +    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
308	[BUG]  [BUGGY]  count(paint  +  this.entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(paint  +  this.entrySize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(paint  +  this.entrySize);	  count(skipped    +    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
309	[BUG]  [BUGGY]  encoding.skipRecordPadding(numRecords);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  encoding.skipRecordPadding(numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	encoding.skipRecordPadding(numRecords);	  encoding.skipRecordPadding(skipped);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
310	[BUG]  [BUGGY]  encoding.skipRecordPadding(numRecords,  skipped);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  encoding.skipRecordPadding(numRecords,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	encoding.skipRecordPadding(numRecords,  skipped);	  encoding.skipRecordPadding(skipped);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
311	[BUG]  [BUGGY]  encoding.skipRecordPadding(this.entryOffset,  skipped);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  encoding.skipRecordPadding(this.entryOffset,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	encoding.skipRecordPadding(this.entryOffset,  skipped);	  encoding.skipRecordPadding(skipped);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
312	[BUG]  [BUGGY]  encoding.skipRecordPadding(buffer,  skipped);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  encoding.skipRecordPadding(buffer,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	encoding.skipRecordPadding(buffer,  skipped);	  encoding.skipRecordPadding(skipped);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
313	[BUG]  [BUGGY]  encoding.skipRecordPadding(skipped,  padding);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  encoding.skipRecordPadding(skipped,  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	encoding.skipRecordPadding(skipped,  padding);	  encoding.skipRecordPadding(skipped);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
314	[BUG]  [BUGGY]  int  skipped  =  0;  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  int  skipped  =  0;  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	int  skipped  =  0;  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
315	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  skipRecordPadding(i);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  skipRecordPadding(i);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
316	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipRecordPadding(i);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipRecordPadding(i);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
317	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipped  =  IOUtils.skip(is,  padding);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipped  =  IOUtils.skip(is,  padding);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipped  =  IOUtils.skip(is,  padding);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
318	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipRecordPadding();  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  skipRecordPadding();  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  skipRecordPadding();  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    padding,    skipped);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
319	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    padding,    skipped);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
320	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(skipped  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(!hasHitEOF)  {  if(skipped  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(!hasHitEOF)  {  if(skipped  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    padding,    skipped);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
321	[BUG]  [BUGGY]  if(skipped  <  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  <  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  <  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    padding,    skipped);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
322	[BUG]  [BUGGY]  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  skipRecordPadding();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  skipRecordPadding();  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  skipRecordPadding();	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    padding,    skipped);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
323	[BUG]  [BUGGY]  this.currEntry.skipRecordPadding(skipped);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  this.currEntry.skipRecordPadding(skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	this.currEntry.skipRecordPadding(skipped);	  this.currEntry.skipRecordPadding();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
324	[BUG]  [BUGGY]  this.currEntry.skipRecordPadding(skip);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  this.currEntry.skipRecordPadding(skip);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	this.currEntry.skipRecordPadding(skip);	  this.currEntry.skipRecordPadding();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
325	[BUG]  [BUGGY]  if(skipRecordPadding  >  0)  {  this.currEntry.skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipRecordPadding  >  0)  {  this.currEntry.skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipRecordPadding  >  0)  {  this.currEntry.skipRecordPadding();  }	  this.currEntry.skipRecordPadding();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
326	[BUG]  [BUGGY]  if(skipRecordPadding  >  0)  {  this.currEntry.skipRecordPadding();  }  else  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipRecordPadding  >  0)  {  this.currEntry.skipRecordPadding();  }  else  {  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipRecordPadding  >  0)  {  this.currEntry.skipRecordPadding();  }  else  {  skipRecordPadding();  }	  this.currEntry.skipRecordPadding();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
327	[BUG]  [BUGGY]  this.currEntry.skipPadding();  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  this.currEntry.skipPadding();  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	this.currEntry.skipPadding();	  this.currEntry.skipRecordPadding();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
328	[BUG]  [BUGGY]  if(skipRecordPadding  >  0)  {  this.currEntry.skipRecordPadding();  }  else  {  skipRecordPadding  =  false;  }  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipRecordPadding  >  0)  {  this.currEntry.skipRecordPadding();  }  else  {  skipRecordPadding  =  false;  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipRecordPadding  >  0)  {  this.currEntry.skipRecordPadding();  }  else  {  skipRecordPadding  =  false;  }	  this.currEntry.skipRecordPadding();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
329	[BUG]  [BUGGY]  count(skipRecordPadding,  padding);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipRecordPadding,  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipRecordPadding,  padding);	  count(skipRecordPadding,    skipped);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
330	[BUG]  [BUGGY]  count(skipped,  skipRecordPadding);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped,  skipRecordPadding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped,  skipRecordPadding);	  count(skipRecordPadding,    skipped);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
331	[BUG]  [BUGGY]  count(numRecords  -  this.entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  -  this.entrySize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  -  this.entrySize);	  count(skipped    -    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
332	[BUG]  [BUGGY]  count(padding  -  this.entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  -  this.entrySize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  -  this.entrySize);	  count(skipped    -    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
333	[BUG]  [BUGGY]  count(numRecords  *  this.entrySize  -  this.entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  *  this.entrySize  -  this.entrySize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  *  this.entrySize  -  this.entrySize);	  count(skipped    -    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
334	[BUG]  [BUGGY]  count(paint  -  this.entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(paint  -  this.entrySize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(paint  -  this.entrySize);	  count(skipped    -    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
335	[BUG]  [BUGGY]  count(numRecords  *  this.entrySize  -  this.recordSize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  *  this.entrySize  -  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  *  this.entrySize  -  this.recordSize);	  count(skipped    -    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
336	[BUG]  [BUGGY]  count(currentSize  -  this.entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(currentSize  -  this.entrySize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(currentSize  -  this.entrySize);	  count(skipped    -    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
337	[BUG]  [BUGGY]  count(paint  +  skipped);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(paint  +  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(paint  +  skipped);	  count(paint    +    1);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
338	[BUG]  [BUGGY]  count(paint,  skipped  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(paint,  skipped  +  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(paint,  skipped  +  1);	  count(paint    +    1);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
339	[BUG]  [BUGGY]  count(numRecords  *  squeezed);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  *  squeezed);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  *  squeezed);	  count(numRecords    +    squeezed);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
340	[BUG]  [BUGGY]  count(padding  +  this.skipped);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  +  this.skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  +  this.skipped);	  count(numRecords    +    squeezed);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
341	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPa  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPa  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPa	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
342	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecord  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecord  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecord	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
343	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  skipRecordP  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  skipRecordP  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  skipRecordP	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
344	[BUG]  [BUGGY]  count(padding  *  this.recordSize,  skipped);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  *  this.recordSize,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  *  this.recordSize,  skipped);	  count(numRecords    *    this.recordSize,    skipped);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
345	[BUG]  [BUGGY]  count(numRecords  *  this.recordSize,  padding,  skipped);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  *  this.recordSize,  padding,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  *  this.recordSize,  padding,  skipped);	  count(numRecords    *    this.recordSize,    skipped);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
346	[BUG]  [BUGGY]  count(numRecords  /  this.recordSize,  skipped);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  /  this.recordSize,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  /  this.recordSize,  skipped);	  count(numRecords    *    this.recordSize,    skipped);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
347	[BUG]  [BUGGY]  count(skipped  *  this.recordSize,  numRecords);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  *  this.recordSize,  numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  *  this.recordSize,  numRecords);	  count(numRecords    *    this.recordSize,    skipped);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
348	[BUG]  [BUGGY]  count(this.recordSize  *  numRecords,  skipped);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(this.recordSize  *  numRecords,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(this.recordSize  *  numRecords,  skipped);	  count(numRecords    *    this.recordSize,    skipped);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
349	[BUG]  [BUGGY]  count(numRecords  *  this.recordSize,  padding);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  *  this.recordSize,  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  *  this.recordSize,  padding);	  count(numRecords    *    this.recordSize,    skipped);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
350	[BUG]  [BUGGY]  count(numRecords  *  this.recordSize,  skipped,  padding);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  *  this.recordSize,  skipped,  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  *  this.recordSize,  skipped,  padding);	  count(numRecords    *    this.recordSize,    skipped);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
351	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  skipped);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  skipped);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
352	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i  +  1,  skipped);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i  +  1,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i  +  1,  skipped);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
353	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  skipped  +  1);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  skipped  +  1);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  skipped  +  1);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
354	[BUG]  [BUGGY]  count(padding  -  skipped,  this.entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  -  skipped,  this.entrySize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  -  skipped,  this.entrySize);	  count(padding    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
355	[BUG]  [BUGGY]  count(padding  -  skipped,  is.length);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  -  skipped,  is.length);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  -  skipped,  is.length);	  count(padding    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
356	[BUG]  [BUGGY]  count(padding  -  skipped,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  -  skipped,  this.entryOffset);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  -  skipped,  this.entryOffset);	  count(padding    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
357	[BUG]  [BUGGY]  if(skip  >  0)  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  skipRecordPadding();  }	  skipRecordPadding();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
358	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipRecordPadding();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  skipRecordPadding();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  skipRecordPadding();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipRecordPadding();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
359	[BUG]  [BUGGY]  if(skip  >  0)  {  skipRecordPadding();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  skipRecordPadding();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  skipRecordPadding();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipRecordPadding();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
360	[BUG]  [BUGGY]  count(numRecords  +  1,  padding);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  +  1,  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  +  1,  padding);	  count(skipped    +    1,    padding);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
361	[BUG]  [BUGGY]  count(skipped  +  1,  padding,  skipped);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  +  1,  padding,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  +  1,  padding,  skipped);	  count(skipped    +    1,    padding);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
362	[BUG]  [BUGGY]  count(padding  +  1,  sink);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  +  1,  sink);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  +  1,  sink);	  count(skipped    +    1,    padding);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
363	[BUG]  [BUGGY]  count(padding  +  1,  cached);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  +  1,  cached);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  +  1,  cached);	  count(skipped    +    1,    padding);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
364	[BUG]  [BUGGY]  Count(numRecords,  skipped);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  Count(numRecords,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	Count(numRecords,  skipped);	  count(paint,    skipped);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
365	[BUG]  [BUGGY]  count(padding,  padding,  skipped);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding,  padding,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding,  padding,  skipped);	  count(skipped,    padding,    skipped);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
366	[BUG]  [BUGGY]  count(skipped,  padding,  0,  skipped);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped,  padding,  0,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped,  padding,  0,  skipped);	  count(skipped,    padding,    skipped);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
367	[BUG]  [BUGGY]  count(numRecords,  padding,  sink);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords,  padding,  sink);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords,  padding,  sink);	  count(skipped,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
368	[BUG]  [BUGGY]  count(padding,  padding,  numRecords);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding,  padding,  numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding,  padding,  numRecords);	  count(skipped,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
369	[BUG]  [BUGGY]  count(numRecords,  padding,  SHORT_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords,  padding,  SHORT_BUFFER_SIZE);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords,  padding,  SHORT_BUFFER_SIZE);	  count(skipped,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
370	[BUG]  [BUGGY]  count(numRecords,  padding,  cache);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords,  padding,  cache);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords,  padding,  cache);	  count(skipped,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
371	[BUG]  [BUGGY]  count(skipred,  numRecords);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipred,  numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipred,  numRecords);	  count(numRecords,    skipped);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
372	[BUG]  [BUGGY]  count(numRecords  -  skipped,  is.length);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  -  skipped,  is.length);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  -  skipped,  is.length);	  count(skipped    -    skipped,    is.length);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
373	[BUG]  [BUGGY]  count(skipped  -  skipped,  padding,  is.length);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  -  skipped,  padding,  is.length);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  -  skipped,  padding,  is.length);	  count(skipped    -    skipped,    is.length);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
374	[BUG]  [BUGGY]  count(skipped  -  skipd,  padding,  is.length);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  -  skipd,  padding,  is.length);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  -  skipd,  padding,  is.length);	  count(skipped    -    skipped,    is.length);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
375	[BUG]  [BUGGY]  count(numRecords  -  skipped,  file.length);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  -  skipped,  file.length);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  -  skipped,  file.length);	  count(skipped    -    skipped,    is.length);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
376	[BUG]  [BUGGY]  count(skipped  -  1,  is.length);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  -  1,  is.length);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  -  1,  is.length);	  count(skipped    -    skipped,    is.length);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
377	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(!hasHitEOF)  {  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(!hasHitEOF)  {  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(   "    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
378	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(!hasHitEOF)  {  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(!hasHitEOF)  {  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(   "    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
379	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(   "    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
380	[BUG]  [BUGGY]  count(skip,  padding);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skip,  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skip,  padding);	  count(skip,    skipped);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
381	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecordPa  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecordPa  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecordPa	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getTarEntry(i);    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
382	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecord  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecord  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecord	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getTarEntry(i);    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
383	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRe  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRe	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getTarEntry(i);    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
384	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry  ==  null)  {  skipRecordPadding  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry  ==  null)  {  skipRecordPadding  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry  ==  null)  {  skipRecordPadding	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getTarEntry(i);    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
385	[BUG]  [BUGGY]  count(numRecords,  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords,  0);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords,  0);	  count(skipped,    0);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
386	[BUG]  [BUGGY]  count(padding,  0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding,  0);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding,  0);	  count(skipped,    0);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
387	[BUG]  [BUGGY]  count(skipped,  padding,  0);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped,  padding,  0);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped,  padding,  0);	  count(skipped,    0);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
388	[BUG]  [BUGGY]  count(skipped,  0,  numRecords);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped,  0,  numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped,  0,  numRecords);	  count(skipped,    0);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
389	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  skipRecordPadding(i,  skipped);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  skipRecordPadding(i,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	for(int  i  =  0;  i  <  numRecords;  i++)  {  skipRecordPadding(i,  skipped);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    skipRecordPadding(i,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
390	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  skipRecordPadding(i,  skipped);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  skipRecordPadding(i,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  skipRecordPadding(i,  skipped);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    skipRecordPadding(i,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
391	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  i++)  {  skipRecordPadding(i,  skipped);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  i++)  {  skipRecordPadding(i,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  i++)  {  skipRecordPadding(i,  skipped);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    skipRecordPadding(i,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
392	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.entrySize;  i++)  {  skipRecordPadding(i,  skipped);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.entrySize;  i++)  {  skipRecordPadding(i,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.entrySize;  i++)  {  skipRecordPadding(i,  skipped);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    skipRecordPadding(i,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
393	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  skipRecordPadding(i  +  1,  skipped);  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  skipRecordPadding(i  +  1,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  skipRecordPadding(i  +  1,  skipped);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    skipRecordPadding(i,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
394	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(padding);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(padding);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  skipRecordPadding(padding);  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
395	[BUG]  [BUGGY]  if(skipped  >=  0)  {  skipRecordPadding(numRecords);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >=  0)  {  skipRecordPadding(numRecords);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >=  0)  {  skipRecordPadding(numRecords);  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
396	[BUG]  [BUGGY]  if(skipped  <  0)  {  skipRecordPadding(numRecords);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  <  0)  {  skipRecordPadding(numRecords);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  <  0)  {  skipRecordPadding(numRecords);  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
397	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(numRecords,  skipped);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(numRecords,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  skipRecordPadding(numRecords,  skipped);  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
398	[BUG]  [BUGGY]  int  skipped  =  skipRecordPadding(numRecords);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  int  skipped  =  skipRecordPadding(numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	int  skipped  =  skipRecordPadding(numRecords);	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
399	[BUG]  [BUGGY]  skipRecordPadding(switchToSkip,  skipped);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skipRecordPadding(switchToSkip,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(switchToSkip,  skipped);	  skipRecordPadding(switchToSkip);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
400	[BUG]  [BUGGY]  skipRecordPadding(switch,  skipped);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skipRecordPadding(switch,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(switch,  skipped);	  skipRecordPadding(switchToSkip);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
401	[BUG]  [BUGGY]  count(paint  *  this.recordSize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(paint  *  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(paint  *  this.recordSize);	  count(skipped    *    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
402	[BUG]  [BUGGY]  count(skipped  *  this.recordSize  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  *  this.recordSize  +  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  *  this.recordSize  +  1);	  count(skipped    *    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
403	[BUG]  [BUGGY]  count(numRecords  -  skipped,  this.entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  -  skipped,  this.entrySize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  -  skipped,  this.entrySize);	  count(numRecords    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
404	[BUG]  [BUGGY]  count(skipped  -  numRecords);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  -  numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  -  numRecords);	  count(numRecords    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
405	[BUG]  [BUGGY]  count(numRecords  *  this.entrySize,  skipped);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  *  this.entrySize,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  *  this.entrySize,  skipped);	  count(numRecords    *    skipped);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
406	[BUG]  [BUGGY]  count(numRecords  *  this.recordSize  +  skipped);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  *  this.recordSize  +  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  *  this.recordSize  +  skipped);	  count(numRecords    *    skipped);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
407	[BUG]  [BUGGY]  count(this.recordSize  *  numRecords);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(this.recordSize  *  numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(this.recordSize  *  numRecords);	  count(numRecords    *    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
408	[BUG]  [BUGGY]  count(padding  /  this.recordSize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  /  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  /  this.recordSize);	  count(numRecords    *    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
409	[BUG]  [BUGGY]  numRecords  =  IOUtils.skip(is,  skipped);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  IOUtils.skip(is,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  IOUtils.skip(is,  skipped);	  numRecords    =    IOUtils.skip(skipped);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
410	[BUG]  [BUGGY]  numRecords  =  IOUtils.skip(recordSize,  skipped);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  IOUtils.skip(recordSize,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  IOUtils.skip(recordSize,  skipped);	  numRecords    =    IOUtils.skip(skipped);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
411	[BUG]  [BUGGY]  numRecords  =  IOUtils.skip(this.entryOffset,  skipped);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  IOUtils.skip(this.entryOffset,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  IOUtils.skip(this.entryOffset,  skipped);	  numRecords    =    IOUtils.skip(skipped);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
412	[BUG]  [BUGGY]  numRecords  =  IOUtils.skip(recordSize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  IOUtils.skip(recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  IOUtils.skip(recordSize);	  numRecords    =    IOUtils.skip(skipped);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
413	[BUG]  [BUGGY]  numRecords  =  IOUtils.skip(this.entrySize,  skipped);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  IOUtils.skip(this.entrySize,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  IOUtils.skip(this.entrySize,  skipped);	  numRecords    =    IOUtils.skip(skipped);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
414	[BUG]  [BUGGY]  numRecords  =  IOUtils.skip(null,  skipped);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  IOUtils.skip(null,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  IOUtils.skip(null,  skipped);	  numRecords    =    IOUtils.skip(skipped);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
415	[BUG]  [BUGGY]  numRecords  =  IOUtils.skip(this.entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  IOUtils.skip(this.entrySize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  IOUtils.skip(this.entrySize);	  numRecords    =    IOUtils.skip(skipped);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
416	[BUG]  [BUGGY]  numRecords  =  skipped;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  skipped;  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  skipped;	  numRecords    =    skipRecordPadding();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
417	[BUG]  [BUGGY]  numRecords  =  skipRecordPadding()  +  skipped;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  skipRecordPadding()  +  skipped;  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  skipRecordPadding()  +  skipped;	  numRecords    =    skipRecordPadding();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
418	[BUG]  [BUGGY]  numRecords  =  skipped  +  skipRecordPadding();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  skipped  +  skipRecordPadding();  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  skipped  +  skipRecordPadding();	  numRecords    =    skipRecordPadding();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
419	[BUG]  [BUGGY]  count(numRecords  +  this.recordSize  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  +  this.recordSize  +  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  +  this.recordSize  +  1);	  count(skipped    +    this.recordSize    +    1);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
420	[BUG]  [BUGGY]  count(padding  +  this.recordSize  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  +  this.recordSize  +  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  +  this.recordSize  +  1);	  count(skipped    +    this.recordSize    +    1);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
421	[BUG]  [BUGGY]  count(skipped  /  this.recordSize  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  /  this.recordSize  +  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  /  this.recordSize  +  1);	  count(skipped    +    this.recordSize    +    1);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
422	[BUG]  [BUGGY]  count(this.recordSize  +  skipped  +  this.recordSize  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(this.recordSize  +  skipped  +  this.recordSize  +  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(this.recordSize  +  skipped  +  this.recordSize  +  1);	  count(skipped    +    this.recordSize    +    1);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
423	[BUG]  [BUGGY]  count(numRecords  /  this.recordSize  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  /  this.recordSize  +  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  /  this.recordSize  +  1);	  count(skipped    +    this.recordSize    +    1);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
424	[BUG]  [BUGGY]  count(numRecords  *  this.recordSize  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  *  this.recordSize  +  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  *  this.recordSize  +  1);	  count(skipped    +    this.recordSize    +    1);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
425	[BUG]  [BUGGY]  skipRecordPadding(skipd,  skipped);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skipRecordPadding(skipd,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(skipd,  skipped);	  skipRecordPadding(skipd);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
426	[BUG]  [BUGGY]  skipRecordPadding(skipd,  numRecords);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skipRecordPadding(skipd,  numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(skipd,  numRecords);	  skipRecordPadding(skipd);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
427	[BUG]  [BUGGY]  skipRecordPadding(skipd,  padding);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skipRecordPadding(skipd,  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(skipd,  padding);	  skipRecordPadding(skipd);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
428	[BUG]  [BUGGY]  skipRecordPadding(skipd,  buffer);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skipRecordPadding(skipd,  buffer);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(skipd,  buffer);	  skipRecordPadding(skipd);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
429	[BUG]  [BUGGY]  count(padding  +  SHORT_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  +  SHORT_BUFFER_SIZE);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  +  SHORT_BUFFER_SIZE);	  count(numRecords    +    SHORT_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
430	[BUG]  [BUGGY]  count(skipped  +  SHORT_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  +  SHORT_BUFFER_SIZE);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  +  SHORT_BUFFER_SIZE);	  count(numRecords    +    SHORT_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
431	[BUG]  [BUGGY]  count(numRecords  *  SHORT_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  *  SHORT_BUFFER_SIZE);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  *  SHORT_BUFFER_SIZE);	  count(numRecords    +    SHORT_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
432	[BUG]  [BUGGY]  count(numRecords  /  SHORT_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  /  SHORT_BUFFER_SIZE);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  /  SHORT_BUFFER_SIZE);	  count(numRecords    +    SHORT_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
433	[BUG]  [BUGGY]  count(this.entrySize  +  SHORT_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(this.entrySize  +  SHORT_BUFFER_SIZE);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(this.entrySize  +  SHORT_BUFFER_SIZE);	  count(numRecords    +    SHORT_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
434	[BUG]  [BUGGY]  count(paint  +  SHORT_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(paint  +  SHORT_BUFFER_SIZE);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(paint  +  SHORT_BUFFER_SIZE);	  count(numRecords    +    SHORT_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
435	[BUG]  [BUGGY]  count(numRecords  +  padding,  skipped);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  +  padding,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  +  padding,  skipped);	  count(numRecords    +    skipped);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
436	[BUG]  [BUGGY]  count(numRecords  +  this.recordSize,  skipped);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  +  this.recordSize,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  +  this.recordSize,  skipped);	  count(numRecords    +    skipped);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
437	[BUG]  [BUGGY]  count(numRecords  +  2);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  +  2);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  +  2);	  count(skipped    +    2);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
438	[BUG]  [BUGGY]  count(padding  +  2);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  +  2);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  +  2);	  count(skipped    +    2);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
439	[BUG]  [BUGGY]  count(skipped  *  2);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  *  2);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  *  2);	  count(skipped    +    2);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
440	[BUG]  [BUGGY]  count(skipped  +  3);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  +  3);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  +  3);	  count(skipped    +    2);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
441	[BUG]  [BUGGY]  count(padding,  skipped  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding,  skipped  +  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding,  skipped  +  1);	  count(padding    +    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
442	[BUG]  [BUGGY]  encoding.skipRecordPadding(success);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  encoding.skipRecordPadding(success);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	encoding.skipRecordPadding(success);	  encoding.skipRecordPadding();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
443	[BUG]  [BUGGY]  count(this.recordSize  *  this.entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(this.recordSize  *  this.entrySize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(this.recordSize  *  this.entrySize);	  count(skipped    *    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
444	[BUG]  [BUGGY]  skipRecordPadding(skipd  -  skipped);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skipRecordPadding(skipd  -  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(skipd  -  skipped);	  skipRecordPadding(skipd);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
445	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEnt  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEnt  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEnt	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
446	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
447	[BUG]  [BUGGY]  if(skip  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
448	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(cur  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(cur  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(cur	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
449	[BUG]  [BUGGY]  skipRecordPadding(switched);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skipRecordPadding(switched);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(switched);	  skipRecordPadding(switchToSkip);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
450	[BUG]  [BUGGY]  skipRecordPadding(switchToSkip  +  skipped);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skipRecordPadding(switchToSkip  +  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(switchToSkip  +  skipped);	  skipRecordPadding(switchToSkip);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
451	[BUG]  [BUGGY]  count(skipped,  available,  skipped);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped,  available,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped,  available,  skipped);	  count(skipped,    available);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
452	[BUG]  [BUGGY]  count(available,  escapeSkip);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(available,  escapeSkip);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(available,  escapeSkip);	  count(skipped,    available);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
453	[BUG]  [BUGGY]  count(skipped,  numRecords,  skipped);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped,  numRecords,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped,  numRecords,  skipped);	  count(skipped,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
454	[BUG]  [BUGGY]  numRecords  =  skipRecordPadding(this.recordSize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  skipRecordPadding(this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  skipRecordPadding(this.recordSize);	  numRecords    =    skipRecordPadding(padding);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
455	[BUG]  [BUGGY]  numRecords  =  skipRecordPadding(switchToSkip);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  skipRecordPadding(switchToSkip);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  skipRecordPadding(switchToSkip);	  numRecords    =    skipRecordPadding(padding);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
456	[BUG]  [BUGGY]  numRecords  =  IOUtils.skip(skip,  is);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  IOUtils.skip(skip,  is);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  IOUtils.skip(skip,  is);	  numRecords    =    IOUtils.skip(is,    padding);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
457	[BUG]  [BUGGY]  numRecords  =  IOUtils.skip(skipped,  padding);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  IOUtils.skip(skipped,  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  IOUtils.skip(skipped,  padding);	  numRecords    =    IOUtils.skip(is,    padding);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
458	[BUG]  [BUGGY]  numRecords  =  IOUtils.skip(skip);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  IOUtils.skip(skip);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  IOUtils.skip(skip);	  numRecords    =    IOUtils.skip(is,    padding);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
459	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipRecordPadding();  }  else  {  System.arraycopy(this.recordSize,  numRecords,  padding,  skipped);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  skipRecordPadding();  }  else  {  System.arraycopy(this.recordSize,  numRecords,  padding,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  skipRecordPadding();  }  else  {  System.arraycopy(this.recordSize,  numRecords,  padding,  skipped);  }	  skipRecordPadding();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
460	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipRecordPadding();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  skipRecordPadding();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  skipRecordPadding();  }  else  {  throw  new  IllegalStateException( " ");  }	  skipRecordPadding();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
461	[BUG]  [BUGGY]  count(switchToSkip  +  SHORT_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(switchToSkip  +  SHORT_BUFFER_SIZE);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(switchToSkip  +  SHORT_BUFFER_SIZE);	  count(numRecords    +    SHORT_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
462	[BUG]  [BUGGY]  count(skipped  *  SHORT_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  *  SHORT_BUFFER_SIZE);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  *  SHORT_BUFFER_SIZE);	  count(numRecords    +    SHORT_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
463	[BUG]  [BUGGY]  count(skip  +  SHORT_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skip  +  SHORT_BUFFER_SIZE);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skip  +  SHORT_BUFFER_SIZE);	  count(numRecords    +    SHORT_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
464	[BUG]  [BUGGY]  count(maximumRecords  +  SHORT_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(maximumRecords  +  SHORT_BUFFER_SIZE);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(maximumRecords  +  SHORT_BUFFER_SIZE);	  count(numRecords    +    SHORT_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
465	[BUG]  [BUGGY]  if(skipped  >=  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entry,  0,  padding,  skipped);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >=  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entry,  0,  padding,  skipped);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >=  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entry,  0,  padding,  skipped);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entry,    0,    padding,    numRecords,    skipped);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
466	[BUG]  [BUGGY]  if(skipped  >=  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entry,  0,  padding,  numRecords,  skipped);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >=  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entry,  0,  padding,  numRecords,  skipped);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >=  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entry,  0,  padding,  numRecords,  skipped);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entry,    0,    padding,    numRecords,    skipped);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
467	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(this.entry,  0,  padding,  skipped);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  System.arraycopy(this.entry,  0,  padding,  skipped);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  System.arraycopy(this.entry,  0,  padding,  skipped);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entry,    0,    padding,    numRecords,    skipped);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
468	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(skipped  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entry,  0,  padding,  numRecords,  skipped);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(!hasHitEOF)  {  if(skipped  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entry,  0,  padding,  numRecords,  skipped);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(!hasHitEOF)  {  if(skipped  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entry,  0,  padding,  numRecords,  skipped);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entry,    0,    padding,    numRecords,    skipped);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
469	[BUG]  [BUGGY]  if(skipped  <  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entry,  0,  padding,  skipped);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  <  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entry,  0,  padding,  skipped);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  <  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entry,  0,  padding,  skipped);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entry,    0,    padding,    numRecords,    skipped);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
470	[BUG]  [BUGGY]  if(skip  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entry,  0,  padding,  skipped);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entry,  0,  padding,  skipped);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entry,  0,  padding,  skipped);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entry,    0,    padding,    numRecords,    skipped);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
471	[BUG]  [BUGGY]  count(padding  -  numRecords);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  -  numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  -  numRecords);	  count(padding    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
472	[BUG]  [BUGGY]  count(skip  +  numRecords);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skip  +  numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skip  +  numRecords);	  count(padding    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
473	[BUG]  [BUGGY]  count(this.recordSize  -  this.entrySize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(this.recordSize  -  this.entrySize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(this.recordSize  -  this.entrySize);	  count(skipped    -    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
474	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
475	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skip  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skip  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skip	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
476	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
477	[BUG]  [BUGGY]  if(skipped  ==  0)  {  skipRecordPadding(numRecords);  }  else  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  ==  0)  {  skipRecordPadding(numRecords);  }  else  {  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  ==  0)  {  skipRecordPadding(numRecords);  }  else  {  skipRecordPadding();  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    else    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
478	[BUG]  [BUGGY]  if(skipped!=  0)  {  skipRecordPadding(numRecords);  }  else  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped!=  0)  {  skipRecordPadding(numRecords);  }  else  {  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped!=  0)  {  skipRecordPadding(numRecords);  }  else  {  skipRecordPadding();  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    else    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
479	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(this.recordSize);  }  else  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(this.recordSize);  }  else  {  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  skipRecordPadding(this.recordSize);  }  else  {  skipRecordPadding();  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    else    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
480	[BUG]  [BUGGY]  count(skipped  *  numberRecords);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  *  numberRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  *  numberRecords);	  count(numRecords    *    skipped);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
481	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
482	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skippe  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skippe  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skippe	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
483	[BUG]  [BUGGY]  count(skipped  -  this.recordSize,  skipped);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  -  this.recordSize,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  -  this.recordSize,  skipped);	  count(skipped    -    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
484	[BUG]  [BUGGY]  count(skipped  -  skipped  *  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  -  skipped  *  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  -  skipped  *  1);	  count(skipped    -    skipped    +    1);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
485	[BUG]  [BUGGY]  count(skipped  *  skipped  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  *  skipped  +  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  *  skipped  +  1);	  count(skipped    -    skipped    +    1);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
486	[BUG]  [BUGGY]  skipRecordPadding(skip  +  skipped);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skipRecordPadding(skip  +  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(skip  +  skipped);	  skipRecordPadding(skip);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
487	[BUG]  [BUGGY]  count(skipped,  skipd);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped,  skipd);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped,  skipd);	  count(lineno,    skipped);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
488	[BUG]  [BUGGY]  count(null,  skipped);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(null,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(null,  skipped);	  count(lineno,    skipped);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
489	[BUG]  [BUGGY]  count(skipped  -  is.length  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  -  is.length  -  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  -  is.length  -  1);	  count(skipped    -    is.length);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
490	[BUG]  [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  padding);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  padding);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  padding);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i,    padding);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
491	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  padding);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  padding);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  padding);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i,    padding);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
492	[BUG]  [BUGGY]  skipRecordPadding(skipped,  numRecords);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skipRecordPadding(skipped,  numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(skipped,  numRecords);	  skipRecordPadding(skipped);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
493	[BUG]  [BUGGY]  skipRecordPadding(skipped  -  skipped);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skipRecordPadding(skipped  -  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(skipped  -  skipped);	  skipRecordPadding(skipped);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
494	[BUG]  [BUGGY]  skipRecordPadding(skipped,  false);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skipRecordPadding(skipped,  false);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(skipped,  false);	  skipRecordPadding(skipped);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
495	[BUG]  [BUGGY]  count(cached,  padding);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(cached,  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(cached,  padding);	  count(padding,    cached);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
496	[BUG]  [BUGGY]  if(skipped  >=  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  numToSkip,  skipped);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >=  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  numToSkip,  skipped);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >=  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  numToSkip,  skipped);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    numToSkip,    skipped);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
497	[BUG]  [BUGGY]  if(skip  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  numToSkip,  skipped);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  numToSkip,  skipped);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  numToSkip,  skipped);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    numToSkip,    skipped);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
498	[BUG]  [BUGGY]  if(skipped  <  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  numToSkip,  skipped);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  <  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  numToSkip,  skipped);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  <  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  numToSkip,  skipped);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    numToSkip,    skipped);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
499	[BUG]  [BUGGY]  if(skip  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  numToSkip,  skipped);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  numToSkip,  skipped);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  numToSkip,  skipped);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    numToSkip,    skipped);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
500	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  0,  skipped);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  0,  skipped);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  0,  skipped);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    numToSkip,    skipped);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
501	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(this.recordSize,  numRecords,  numToSkip,  skipped);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  System.arraycopy(this.recordSize,  numRecords,  numToSkip,  skipped);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  System.arraycopy(this.recordSize,  numRecords,  numToSkip,  skipped);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    numToSkip,    skipped);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
502	[BUG]  [BUGGY]  count(skipped  -  skipped,  is.length  -  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  -  skipped,  is.length  -  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  -  skipped,  is.length  -  1);	  count(skipped    -    skipped,    is.length);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
503	[BUG]  [BUGGY]  count(skipped  -  skipped,  is.length  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  -  skipped,  is.length  +  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  -  skipped,  is.length  +  1);	  count(skipped    -    skipped,    is.length);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
504	[BUG]  [BUGGY]  count(is.length  -  skipped,  skipped);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(is.length  -  skipped,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(is.length  -  skipped,  skipped);	  count(skipped    -    skipped,    is.length);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
505	[BUG]  [BUGGY]  count(skipped  +  1,  numRecords);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  +  1,  numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  +  1,  numRecords);	  count(skipped    +    1,    padding);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
506	[BUG]  [BUGGY]  count(skipped  +  1,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  +  1,  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  +  1,  this.recordSize);	  count(skipped    +    1,    padding);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
507	[BUG]  [BUGGY]  count(skipped  +  1,  skipd);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  +  1,  skipd);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  +  1,  skipd);	  count(skipped    +    1,    padding);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
508	[BUG]  [BUGGY]  if(skip  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(   "    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
509	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith(	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(   "    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
510	[BUG]  [BUGGY]  count(padding  *  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  *  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  *  1);	  count(padding    +    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
511	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRe  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRe	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getTarEntry(i);    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
512	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getTarEntry(i);    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
513	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skip  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skip  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skip	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getTarEntry(i);    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
514	[BUG]  [BUGGY]  skipRecordPadding(null,  skipped);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skipRecordPadding(null,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(null,  skipped);	  skipRecordPadding(skip,    skipped);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
515	[BUG]  [BUGGY]  count(skipped,  this.recordSize  -  skipped);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped,  this.recordSize  -  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped,  this.recordSize  -  skipped);	  count(skipped,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
516	[BUG]  [BUGGY]  count(skipped,  this.recordSize  +  skipped);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped,  this.recordSize  +  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped,  this.recordSize  +  skipped);	  count(skipped,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
517	[BUG]  [BUGGY]  count(skipped,  this.recordSize,  skipped);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped,  this.recordSize,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped,  this.recordSize,  skipped);	  count(skipped,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
518	[BUG]  [BUGGY]  count(skipped,  this.recordSize  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped,  this.recordSize  +  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped,  this.recordSize  +  1);	  count(skipped,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
519	[BUG]  [BUGGY]  encoding.initPadding(padding);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  encoding.initPadding(padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	encoding.initPadding(padding);	  initPadding(padding);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
520	[BUG]  [BUGGY]  initPadding(switchToSkip);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  initPadding(switchToSkip);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	initPadding(switchToSkip);	  initPadding(padding);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
521	[BUG]  [BUGGY]  count(skip,  numRecords  -  this.recordSize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skip,  numRecords  -  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skip,  numRecords  -  this.recordSize);	  count(numRecords,    skipped    -    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
522	[BUG]  [BUGGY]  count(this.recordSize  -  skipped,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(this.recordSize  -  skipped,  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(this.recordSize  -  skipped,  this.recordSize);	  count(skipped    -    skipped,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
523	[BUG]  [BUGGY]  count(skipped  -  skipped,  this.recordSize  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  -  skipped,  this.recordSize  +  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  -  skipped,  this.recordSize  +  1);	  count(skipped    -    skipped,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
524	[BUG]  [BUGGY]  count(numRecords  -  skipd,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  -  skipd,  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  -  skipd,  this.recordSize);	  count(skipped    -    skipped,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
525	[BUG]  [BUGGY]  if(skipped!=  0)  {  count(numRecords);  }  else  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped!=  0)  {  count(numRecords);  }  else  {  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped!=  0)  {  count(numRecords);  }  else  {  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
526	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  count(numRecords);  }  else  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  <  =  0)  {  count(numRecords);  }  else  {  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  <  =  0)  {  count(numRecords);  }  else  {  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
527	[BUG]  [BUGGY]  count(padding,  skipped  -  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding,  skipped  -  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding,  skipped  -  1);	  count(padding,    skipped);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
528	[BUG]  [BUGGY]  numRecords  =  IOUtils.next(this.recordSize,  skipped);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  IOUtils.next(this.recordSize,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  IOUtils.next(this.recordSize,  skipped);	  numRecords    =    IOUtils.next(is,    skipped);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
529	[BUG]  [BUGGY]  numRecords  =  IOUtils.next(is,  padding,  skipped);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  IOUtils.next(is,  padding,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  IOUtils.next(is,  padding,  skipped);	  numRecords    =    IOUtils.next(is,    skipped);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
530	[BUG]  [BUGGY]  numRecords  =  IOUtils.next(is,  padding  +  skipped);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  IOUtils.next(is,  padding  +  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  IOUtils.next(is,  padding  +  skipped);	  numRecords    =    IOUtils.next(is,    skipped);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
531	[BUG]  [BUGGY]  count(skipped,  0,  this.recordSize);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped,  0,  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped,  0,  this.recordSize);	  count(skipped,    0,    skipped);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
532	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRe	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
533	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords  +  1;  ++i)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords  +  1;  ++i)  {  skipRecordPadding(i);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords  +  1;  ++i)  {  skipRecordPadding(i);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
534	[BUG]  [BUGGY]  count(skipped  -  padding);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  -  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  -  padding);	  count(padding    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
535	[BUG]  [BUGGY]  count(padding  -  skipped,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  -  skipped,  hasHitEOF);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  -  skipped,  hasHitEOF);	  count(padding    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
536	[BUG]  [BUGGY]  count(this.recordSize  *  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(this.recordSize  *  this.entryOffset);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(this.recordSize  *  this.entryOffset);	  count(skipped    *    this.entryOffset);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
537	[BUG]  [BUGGY]  count(numRecords  *  this.recordOffset);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  *  this.recordOffset);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  *  this.recordOffset);	  count(skipped    *    this.entryOffset);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
538	[BUG]  [BUGGY]  count(skipped  +  skipped,  numRecords);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  +  skipped,  numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  +  skipped,  numRecords);	  count(skipped    +    numRecords,    skipped);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
539	[BUG]  [BUGGY]  count(skipped  +  numRecords,  padding);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  +  numRecords,  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  +  numRecords,  padding);	  count(skipped    +    numRecords,    skipped);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
540	[BUG]  [BUGGY]  encoding.skipRecordPadding(this.available);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  encoding.skipRecordPadding(this.available);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	encoding.skipRecordPadding(this.available);	  encoding.skipRecordPadding(skipped);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
541	[BUG]  [BUGGY]  encoding.skipRecordPadding(skipped,  skipped);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  encoding.skipRecordPadding(skipped,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	encoding.skipRecordPadding(skipped,  skipped);	  encoding.skipRecordPadding(skipped);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
542	[BUG]  [BUGGY]  encoding.skipRecordPadding(this.recordSize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  encoding.skipRecordPadding(this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	encoding.skipRecordPadding(this.recordSize);	  encoding.skipRecordPadding(skipped);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
543	[BUG]  [BUGGY]  encoding.skipRecordPadding(skipped  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  encoding.skipRecordPadding(skipped  +  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	encoding.skipRecordPadding(skipped  +  1);	  encoding.skipRecordPadding(skipped);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
544	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skip  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skip  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skip	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordP    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
545	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skip  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skip  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skip	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordP    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
546	[BUG]  [BUGGY]  count(skipped,  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped,  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped,  1);	  count(skipped,    0);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
547	[BUG]  [BUGGY]  count(skipped,  -1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped,  -1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped,  -1);	  count(skipped,    0);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
548	[BUG]  [BUGGY]  count(numRecords  +  skipped,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  +  skipped,  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  +  skipped,  this.recordSize);	  count(numRecords    +    skipd);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
549	[BUG]  [BUGGY]  count(numRecords  +  skipped,  0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  +  skipped,  0);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  +  skipped,  0);	  count(numRecords    +    skipd);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
550	[BUG]  [BUGGY]  count(skip  -  numRecords);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skip  -  numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skip  -  numRecords);	  count(numRecords    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
551	[BUG]  [BUGGY]  count(numRecords  -  skipped,  this.available);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  -  skipped,  this.available);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  -  skipped,  this.available);	  count(numRecords    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
552	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipRecordPadding(i,  skipped);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipRecordPadding(i,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipRecordPadding(i,  skipped);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
553	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  skipRecords;  ++i)  {  skipRecordPadding(i,  skipped);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  skipRecords;  ++i)  {  skipRecordPadding(i,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  skipRecords;  ++i)  {  skipRecordPadding(i,  skipped);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
554	[BUG]  [BUGGY]  count(numRecords,  padding,  shipped);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords,  padding,  shipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords,  padding,  shipped);	  count(skipped,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
555	[BUG]  [BUGGY]  count(numRecords,  padding,  skip);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords,  padding,  skip);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords,  padding,  skip);	  count(skipped,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
556	[BUG]  [BUGGY]  count(skipped  +  1,  is.length);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  +  1,  is.length);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  +  1,  is.length);	  count(skipped    +    1,    skipped);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
557	[BUG]  [BUGGY]  count(switchToSkip  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(switchToSkip  +  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(switchToSkip  +  1);	  count(numRecords    +    1);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
558	[BUG]  [BUGGY]  count(skip,  numRecords  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skip,  numRecords  +  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skip,  numRecords  +  1);	  count(numRecords    +    1);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
559	[BUG]  [BUGGY]  count(skip  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skip  +  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skip  +  1);	  count(numRecords    +    1);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
560	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
561	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipRecordPadding(i);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipRecordPadding(i);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
562	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  i++)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  i++)  {  skipRecordPadding(i);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  i++)  {  skipRecordPadding(i);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
563	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  skipRecords;  i++)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  skipRecords;  i++)  {  skipRecordPadding(i);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  skipRecords;  i++)  {  skipRecordPadding(i);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
564	[BUG]  [BUGGY]  count(numRecords  +  skipped  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  +  skipped  -  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  +  skipped  -  1);	  count(numRecords    +    skipped);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
565	[BUG]  [BUGGY]  count(skipped  *  padding);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  *  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  *  padding);	  count(padding    *    skipped);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
566	[BUG]  [BUGGY]  encoding.skipRecordPadding(switchToSkip);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  encoding.skipRecordPadding(switchToSkip);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	encoding.skipRecordPadding(switchToSkip);	  encoding.skipRecordPadding(padding);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
567	[BUG]  [BUGGY]  Encoding.skipRecordPadding(skipped);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  Encoding.skipRecordPadding(skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	Encoding.skipRecordPadding(skipped);	  encoding.skipRecordPadding(padding);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
568	[BUG]  [BUGGY]  encoding.skipPadding(skipped);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  encoding.skipPadding(skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	encoding.skipPadding(skipped);	  encoding.skipRecordPadding(padding);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
569	[BUG]  [BUGGY]  if(skipped  >=  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >=  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >=  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    padding,    skipped);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
570	[BUG]  [BUGGY]  if(skip  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    padding,    skipped);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
571	[BUG]  [BUGGY]  if(skip  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    padding,    skipped);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
572	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipd);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipd);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipd);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    padding,    skipped);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
573	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(this.entry,  numRecords,  padding,  skipped);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  System.arraycopy(this.entry,  numRecords,  padding,  skipped);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  System.arraycopy(this.entry,  numRecords,  padding,  skipped);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    padding,    skipped);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
574	[BUG]  [BUGGY]  count(skipped  *  this.recordSize  -  skipped);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  *  this.recordSize  -  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  *  this.recordSize  -  skipped);	  count(skipped    *    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
575	[BUG]  [BUGGY]  count(switchToSkip  +  skipped);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(switchToSkip  +  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(switchToSkip  +  skipped);	  count(switchToSkip);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
576	[BUG]  [BUGGY]  count(switchToSkip  -  skipped);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(switchToSkip  -  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(switchToSkip  -  skipped);	  count(switchToSkip);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
577	[BUG]  [BUGGY]  count(switchToSkip,  skipd);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(switchToSkip,  skipd);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(switchToSkip,  skipd);	  count(switchToSkip);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
578	[BUG]  [BUGGY]  count(skipped  -  skipped,  padding,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  -  skipped,  padding,  hasHitEOF);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  -  skipped,  padding,  hasHitEOF);	  count(skipped    -    skipped,    padding);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
579	[BUG]  [BUGGY]  count(skipped  -  skipped,  padding,  numRecords);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  -  skipped,  padding,  numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  -  skipped,  padding,  numRecords);	  count(skipped    -    skipped,    padding);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
580	[BUG]  [BUGGY]  count(numRecords  *  skipped,  padding);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  *  skipped,  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  *  skipped,  padding);	  count(skipped    -    skipped,    padding);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
581	[BUG]  [BUGGY]  if(skipped  >=  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  skipped,  this.recordSize);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >=  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  skipped,  this.recordSize);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >=  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  skipped,  this.recordSize);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    skipped,    this.recordSize);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
582	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(this.recordSize,  numRecords,  skipped,  this.recordSize);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  System.arraycopy(this.recordSize,  numRecords,  skipped,  this.recordSize);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  System.arraycopy(this.recordSize,  numRecords,  skipped,  this.recordSize);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    skipped,    this.recordSize);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
583	[BUG]  [BUGGY]  if(skipped!=  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  skipped,  this.recordSize);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped!=  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  skipped,  this.recordSize);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped!=  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  skipped,  this.recordSize);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    skipped,    this.recordSize);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
584	[BUG]  [BUGGY]  if(skip  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  skipped,  this.recordSize);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  skipped,  this.recordSize);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  skipped,  this.recordSize);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    skipped,    this.recordSize);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
585	[BUG]  [BUGGY]  if(skip  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  skipped,  this.recordSize);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  skipped,  this.recordSize);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  skipped,  this.recordSize);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    skipped,    this.recordSize);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
586	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  skipd,  this.recordSize);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  skipd,  this.recordSize);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  skipd,  this.recordSize);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    skipped,    this.recordSize);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
587	[BUG]  [BUGGY]  count(skipped  +  numberRecords);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  +  numberRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  +  numberRecords);	  count(numRecords    +    squeezed);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
588	[BUG]  [BUGGY]  count(switched  +  numRecords);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(switched  +  numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(switched  +  numRecords);	  count(numRecords    +    squeezed);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
589	[BUG]  [BUGGY]  numRecords  =  IOUtils.skip(record);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  IOUtils.skip(record);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  IOUtils.skip(record);	  numRecords    =    IOUtils.skip(skipped);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
590	[BUG]  [BUGGY]  numRecords  =  IOUtils.skip(this.recordSize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  IOUtils.skip(this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  IOUtils.skip(this.recordSize);	  numRecords    =    IOUtils.skip(skipped);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
591	[BUG]  [BUGGY]  numRecords  =  IOUtils.skip(skipped,  is);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  IOUtils.skip(skipped,  is);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  IOUtils.skip(skipped,  is);	  numRecords    =    IOUtils.skip(skipped);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
592	[BUG]  [BUGGY]  numRecords  =  skipped  *  skipRecordPadding();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  skipped  *  skipRecordPadding();  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  skipped  *  skipRecordPadding();	  numRecords    =    skipRecordPadding();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
593	[BUG]  [BUGGY]  count(skipped  +  this.recordSize  +  numRecords);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  +  this.recordSize  +  numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  +  this.recordSize  +  numRecords);	  count(skipped    +    this.recordSize    +    1);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
594	[BUG]  [BUGGY]  count(this.recordSize  +  skipped  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(this.recordSize  +  skipped  +  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(this.recordSize  +  skipped  +  1);	  count(skipped    +    this.recordSize    +    1);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
595	[BUG]  [BUGGY]  count(numRecords  -  skipped,  shipped);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  -  skipped,  shipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  -  skipped,  shipped);	  count(skipped    -    skipped,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
596	[BUG]  [BUGGY]  count(numRecords  -  skipped,  skip);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  -  skipped,  skip);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  -  skipped,  skip);	  count(skipped    -    skipped,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
597	[BUG]  [BUGGY]  if(skipped  >=  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >=  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >=  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    padding,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
598	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    padding,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
599	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(this.recordSize);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(this.recordSize);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  skipRecordPadding(this.recordSize);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    padding,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
600	[BUG]  [BUGGY]  if(!hasHitEOF)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(!hasHitEOF)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(!hasHitEOF)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    padding,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
601	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    padding,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
602	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipRecordPadding(i);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipRecordPadding(i);  }	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
603	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords  +  1;  ++i)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords  +  1;  ++i)  {  skipRecordPadding(i);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords  +  1;  ++i)  {  skipRecordPadding(i);  }	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
604	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i  +  1);  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i  +  1);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i  +  1);  }	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
605	[BUG]  [BUGGY]  count(numRecords,  skipped,  this.recordSize);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords,  skipped,  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords,  skipped,  this.recordSize);	  count(numRecords,    skipd);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
606	[BUG]  [BUGGY]  count(numRecords,  skipped,  TarArchiveEntry.SIZE);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords,  skipped,  TarArchiveEntry.SIZE);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords,  skipped,  TarArchiveEntry.SIZE);	  count(numRecords,    skipd);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
607	[BUG]  [BUGGY]  count(skipped,  skipp);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped,  skipp);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped,  skipp);	  count(skip,    skipped);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
608	[BUG]  [BUGGY]  this.currEntry.skippedRecordPadding();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  this.currEntry.skippedRecordPadding();  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	this.currEntry.skippedRecordPadding();	  this.currEntry.skipRecordPadding();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
609	[BUG]  [BUGGY]  this.currEntry.switchRecordPadding();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  this.currEntry.switchRecordPadding();  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	this.currEntry.switchRecordPadding();	  this.currEntry.skipRecordPadding();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
610	[BUG]  [BUGGY]  this.currEntry.skipRecordPadding(switched);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  this.currEntry.skipRecordPadding(switched);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	this.currEntry.skipRecordPadding(switched);	  this.currEntry.skipRecordPadding();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
611	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(this.recordSize);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(this.recordSize);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  skipRecordPadding(this.recordSize);  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
612	[BUG]  [BUGGY]  if(skipped!=  0)  {  skipRecordPadding(numRecords);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped!=  0)  {  skipRecordPadding(numRecords);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped!=  0)  {  skipRecordPadding(numRecords);  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
613	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(skipped);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  skipRecordPadding(skipped);  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
614	[BUG]  [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(   "    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
615	[BUG]  [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(   "    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
616	[BUG]  [BUGGY]  if(skipping  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipping  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipping  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(   "    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
617	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipRecordPadding(i,  skipped);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipRecordPadding(i,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skipRecordPadding(i,  skipped);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    skipRecordPadding(i,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
618	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  skipRecords;  i++)  {  skipRecordPadding(i,  skipped);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  skipRecords;  i++)  {  skipRecordPadding(i,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  skipRecords;  i++)  {  skipRecordPadding(i,  skipped);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    skipRecordPadding(i,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
619	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  skipRecordPadding(i,  skipped  +  1);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  skipRecordPadding(i,  skipped  +  1);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  skipRecordPadding(i,  skipped  +  1);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    skipRecordPadding(i,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
620	[BUG]  [BUGGY]  count(skip,  padding  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skip,  padding  +  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skip,  padding  +  1);	  count(paint    +    1);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
621	[BUG]  [BUGGY]  numRecords  =  count(switchRecordPadding);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  count(switchRecordPadding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  count(switchRecordPadding);	  count(switchRecordPadding);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
622	[BUG]  [BUGGY]  count(switchRecordPadding  -  skipped);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(switchRecordPadding  -  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(switchRecordPadding  -  skipped);	  count(switchRecordPadding);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
623	[BUG]  [BUGGY]  count(switchRecordPadding,  skipd);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(switchRecordPadding,  skipd);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(switchRecordPadding,  skipd);	  count(switchRecordPadding);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
624	[BUG]  [BUGGY]  numRecords  =  count(padding);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  count(padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  count(padding);	  count(numRecords,    padding);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
625	[BUG]  [BUGGY]  count(skipped  +  this.recordSize  -  skipped);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  +  this.recordSize  -  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  +  this.recordSize  -  skipped);	  count(skipped    +    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
626	[BUG]  [BUGGY]  zipEncoding.skipRecordPadding();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  zipEncoding.skipRecordPadding();  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	zipEncoding.skipRecordPadding();	  encoding.skipRecordPadding();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
627	[BUG]  [BUGGY]  Encoding.skipRecordPadding();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  Encoding.skipRecordPadding();  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	Encoding.skipRecordPadding();	  encoding.skipRecordPadding();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
628	[BUG]  [BUGGY]  count(skipped  /  10);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  /  10);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  /  10);	  count(skipped    /    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
629	[BUG]  [BUGGY]  count(skipped  /  4);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  /  4);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  /  4);	  count(skipped    /    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
630	[BUG]  [BUGGY]  count(skipped,  is,  padding,  skipped);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped,  is,  padding,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped,  is,  padding,  skipped);	  count(skipped,    padding,    skipped);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
631	[BUG]  [BUGGY]  count(skip,  padding,  skipped);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skip,  padding,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skip,  padding,  skipped);	  count(skipped,    padding,    skipped);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
632	[BUG]  [BUGGY]  if(skipped  ==  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  padding);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  ==  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  padding);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  ==  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  padding);  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    0,    padding);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
633	[BUG]  [BUGGY]  if(skipped!=  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  padding);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped!=  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  padding);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped!=  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  padding);  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    0,    padding);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
634	[BUG]  [BUGGY]  if(skip  >  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  padding);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  padding);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  padding);  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    0,    padding);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
635	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  0,  skipped);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  0,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  0,  skipped);  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    0,    padding);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
636	[BUG]  [BUGGY]  count(this.recordSize  *  skipped  -  this.recordSize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(this.recordSize  *  skipped  -  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(this.recordSize  *  skipped  -  this.recordSize);	  count(numRecords    *    skipped    -    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
637	[BUG]  [BUGGY]  count(skip  +  this.recordSize  *  skipped  -  this.recordSize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skip  +  this.recordSize  *  skipped  -  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skip  +  this.recordSize  *  skipped  -  this.recordSize);	  count(numRecords    *    skipped    -    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
638	[BUG]  [BUGGY]  numRecords  =  skipRecordPadding(skipped  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  skipRecordPadding(skipped  +  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  skipRecordPadding(skipped  +  1);	  numRecords    =    skipRecordPadding(skipped);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
639	[BUG]  [BUGGY]  numRecords  =  skipRecordPadding(skipped,  skipped);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  skipRecordPadding(skipped,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  skipRecordPadding(skipped,  skipped);	  numRecords    =    skipRecordPadding(skipped);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
640	[BUG]  [BUGGY]  count(this.recordSize  *  this.recordSize,  skipped);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(this.recordSize  *  this.recordSize,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(this.recordSize  *  this.recordSize,  skipped);	  count(numRecords    *    this.recordSize,    skipped);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
641	[BUG]  [BUGGY]  count(numRecords  *  this.recordSize,  skipped  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  *  this.recordSize,  skipped  +  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  *  this.recordSize,  skipped  +  1);	  count(numRecords    *    this.recordSize,    skipped);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
642	[BUG]  [BUGGY]  count(numRecords  *  this.recordSize,  skipped  -  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  *  this.recordSize,  skipped  -  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  *  this.recordSize,  skipped  -  1);	  count(numRecords    *    this.recordSize,    skipped);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
643	[BUG]  [BUGGY]  count(numRecords  *  this.recordSize,  skipped,  0);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  *  this.recordSize,  skipped,  0);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  *  this.recordSize,  skipped,  0);	  count(numRecords    *    this.recordSize,    skipped);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
644	[BUG]  [BUGGY]  count(padding  +  skipped  -  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  +  skipped  -  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  +  skipped  -  1);	  count(padding    +    skipped);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
645	[BUG]  [BUGGY]  count(skipped  +  padding);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  +  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  +  padding);	  count(padding    +    skipped);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
646	[BUG]  [BUGGY]  count(recordSize,  numRecords);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(recordSize,  numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(recordSize,  numRecords);	  count(skipped,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
647	[BUG]  [BUGGY]  count(skipped  *  this.recordSize  -  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  *  this.recordSize  -  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  *  this.recordSize  -  1);	  count(skipped    *    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
648	[BUG]  [BUGGY]  count(this.entrySize  +  sink);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(this.entrySize  +  sink);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(this.entrySize  +  sink);	  count(numRecords    +    sink);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
649	[BUG]  [BUGGY]  count(skipped,  available,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped,  available,  hasHitEOF);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped,  available,  hasHitEOF);	  count(skipped,    available);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
650	[BUG]  [BUGGY]  count(numRecords,  numRecords);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords,  numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords,  numRecords);	  count(skip,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
651	[BUG]  [BUGGY]  encoding.skipRecordPadding(switchOffset);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  encoding.skipRecordPadding(switchOffset);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	encoding.skipRecordPadding(switchOffset);	  skipRecordPadding(switchOffset);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
652	[BUG]  [BUGGY]  skippingRecordPadding(switchOffset,  skipped);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skippingRecordPadding(switchOffset,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skippingRecordPadding(switchOffset,  skipped);	  skipRecordPadding(switchOffset);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
653	[BUG]  [BUGGY]  count(skipped  +  1,  this.entrySize);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  +  1,  this.entrySize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  +  1,  this.entrySize);	  count(skipped    +    1,    skipped);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
654	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipRecordPadding(i);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipRecordPadding(i);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
655	[BUG]  [BUGGY]  if(skipped  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
656	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  skipRecords;  ++i)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  skipRecords;  ++i)  {  skipRecordPadding(i);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  skipRecords;  ++i)  {  skipRecordPadding(i);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
657	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  skipRecordPadding(i);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  skipRecordPadding(i);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
658	[BUG]  [BUGGY]  count(skipped  -  is.length  -  skipped);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  -  is.length  -  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  -  is.length  -  skipped);	  count(skipped    -    is.length);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
659	[BUG]  [BUGGY]  count(skipped  +  this.entrySize,  skipped);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  +  this.entrySize,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  +  this.entrySize,  skipped);	  count(skipped    +    numRecords,    skipped);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
660	[BUG]  [BUGGY]  count(skipped  -  numRecords,  skipped);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  -  numRecords,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  -  numRecords,  skipped);	  count(skipped    +    numRecords,    skipped);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
661	[BUG]  [BUGGY]  if(skipped  <  0)  {  count(padding);  }  else  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  <  0)  {  count(padding);  }  else  {  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  <  0)  {  count(padding);  }  else  {  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
662	[BUG]  [BUGGY]  if(skipped  <  0)  {  skipRecordPadding();  }  else  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  <  0)  {  skipRecordPadding();  }  else  {  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  <  0)  {  skipRecordPadding();  }  else  {  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
663	[BUG]  [BUGGY]  count(padding  -  skipped,  0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  -  skipped,  0);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  -  skipped,  0);	  count(padding    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
664	[BUG]  [BUGGY]  skippingRecordPadding(skipped);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skippingRecordPadding(skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skippingRecordPadding(skipped);	  skipRecordPadding(peek);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
665	[BUG]  [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecordPadding();  }	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getTarEntry(i);    if(currEntry!=    null)    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
666	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecordPadding();  }	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getTarEntry(i);    if(currEntry!=    null)    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
667	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecordPadding()  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecordPadding()  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecordPadding()	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getTarEntry(i);    if(currEntry!=    null)    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
668	[BUG]  [BUGGY]  numRecords  =  IOUtils.next(is,  skipped,  padding);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  IOUtils.next(is,  skipped,  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  IOUtils.next(is,  skipped,  padding);	  numRecords    =    IOUtils.next(is,    skipped);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
669	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipRecordPadding();  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  skipRecordPadding();  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  skipRecordPadding();  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }	  skipRecordPadding();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
670	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipRecordPadding();  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  return;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  skipRecordPadding();  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  return;  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  skipRecordPadding();  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  return;  }	  skipRecordPadding();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
671	[BUG]  [BUGGY]  skipRecordPadding(skip  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skipRecordPadding(skip  +  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(skip  +  1);	  skipRecordPadding(skip);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
672	[BUG]  [BUGGY]  count(this.recordSize,  skipped  -  this.entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(this.recordSize,  skipped  -  this.entrySize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(this.recordSize,  skipped  -  this.entrySize);	  count(numRecords,    skipped    -    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
673	[BUG]  [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecordPadding  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecordPadding  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecordPadding	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getTarEntry(i);    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
674	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecordPadding  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecordPadding  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecordPadding	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getTarEntry(i);    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
675	[BUG]  [BUGGY]  zipEncoding.skipRecordPadding(skipped);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  zipEncoding.skipRecordPadding(skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	zipEncoding.skipRecordPadding(skipped);	  encoding.skipRecordPadding(padding);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
676	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(this.recordSize,  numRecords,  padding,  this.recordSize);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  System.arraycopy(this.recordSize,  numRecords,  padding,  this.recordSize);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  System.arraycopy(this.recordSize,  numRecords,  padding,  this.recordSize);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    skipped,    this.recordSize);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
677	[BUG]  [BUGGY]  if(hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(   "    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
678	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( ".  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( ".  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( ".	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(   "    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
679	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  skipRecordPadding(numRecords);  }  else  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  <  =  0)  {  skipRecordPadding(numRecords);  }  else  {  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  <  =  0)  {  skipRecordPadding(numRecords);  }  else  {  skipRecordPadding();  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    else    {    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
680	[BUG]  [BUGGY]  skipRecordPadding(switching);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skipRecordPadding(switching);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(switching);	  skipRecordPadding(switchToSkip);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
681	[BUG]  [BUGGY]  count(skipRecords,  skipped);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipRecords,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipRecords,  skipped);	  count(skipRecordPadding,    skipped);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
682	[BUG]  [BUGGY]  numRecords  =  IOUtils.skip(this.recordSize,  skipped);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  IOUtils.skip(this.recordSize,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  IOUtils.skip(this.recordSize,  skipped);	  numRecords    =    IOUtils.skip(skipped);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
683	[BUG]  [BUGGY]  count(skipped  -  this.recordSize  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  -  this.recordSize  +  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  -  this.recordSize  +  1);	  count(skipped    -    skipped    +    1);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
684	[BUG]  [BUGGY]  count(skipped  -  this.entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  -  this.entrySize  +  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  -  this.entrySize  +  1);	  count(skipped    -    skipped    +    1);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
685	[BUG]  [BUGGY]  count(numRecords  -  skipd  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  -  skipd  +  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  -  skipd  +  1);	  count(skipped    -    skipped    +    1);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
686	[BUG]  [BUGGY]  skipRecordPadding(skipped,  skipped);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skipRecordPadding(skipped,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(skipped,  skipped);	  skipRecordPadding(skipped);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
687	[BUG]  [BUGGY]  skipRecordPadding(skipped  +  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skipRecordPadding(skipped  +  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(skipped  +  1);	  skipRecordPadding(skipped);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
688	[BUG]  [BUGGY]  count(this.entrySize  +  skipped);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(this.entrySize  +  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(this.entrySize  +  skipped);	  count(numRecords    +    skipped);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
689	[BUG]  [BUGGY]  count(this.recordSize  *  numRecords  -  skipped);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(this.recordSize  *  numRecords  -  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(this.recordSize  *  numRecords  -  skipped);	  count(numRecords    *    skipped    -    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
690	[BUG]  [BUGGY]  count(this.entrySize  *  skipped  -  this.recordSize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(this.entrySize  *  skipped  -  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(this.entrySize  *  skipped  -  this.recordSize);	  count(numRecords    *    skipped    -    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
691	[BUG]  [BUGGY]  count(0,  numRecords  +  SHORT_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(0,  numRecords  +  SHORT_BUFFER_SIZE);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(0,  numRecords  +  SHORT_BUFFER_SIZE);	  count(numRecords    +    SHORT_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
692	[BUG]  [BUGGY]  count(this.recordSize  +  SHORT_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(this.recordSize  +  SHORT_BUFFER_SIZE);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(this.recordSize  +  SHORT_BUFFER_SIZE);	  count(numRecords    +    SHORT_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
693	[BUG]  [BUGGY]  count(skipped  -  1,  numRecords);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  -  1,  numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  -  1,  numRecords);	  count(skipped    -    skipped,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
694	[BUG]  [BUGGY]  count(padding,  numRecords  *  this.recordSize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding,  numRecords  *  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding,  numRecords  *  this.recordSize);	  count(numRecords    *    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
695	[BUG]  [BUGGY]  count(this.entrySize  *  this.recordSize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(this.entrySize  *  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(this.entrySize  *  this.recordSize);	  count(numRecords    *    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
696	[BUG]  [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
697	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
698	[BUG]  [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
699	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
700	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  skipRecordPadding(i,  skipped);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  skipRecordPadding(i,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  ++i)  {  skipRecordPadding(i,  skipped);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
701	[BUG]  [BUGGY]  numRecords  =  IOUtils.skip(skipped,  is,  padding);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  IOUtils.skip(skipped,  is,  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  IOUtils.skip(skipped,  is,  padding);	  numRecords    =    IOUtils.skip(is,    padding);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
702	[BUG]  [BUGGY]  numRecords  =  padding;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  padding;  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  padding;	  numRecords    =    skipRecordPadding();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
703	[BUG]  [BUGGY]  numRecords  =  IOUtils.skipRecordPadding();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  IOUtils.skipRecordPadding();  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  IOUtils.skipRecordPadding();	  numRecords    =    skipRecordPadding();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
704	[BUG]  [BUGGY]  count(this.entrySize  *  this.recordSize,  skipped);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(this.entrySize  *  this.recordSize,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(this.entrySize  *  this.recordSize,  skipped);	  count(numRecords    *    this.recordSize,    skipped);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
705	[BUG]  [BUGGY]  count(0,  numRecords  *  this.recordSize,  skipped);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(0,  numRecords  *  this.recordSize,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(0,  numRecords  *  this.recordSize,  skipped);	  count(numRecords    *    this.recordSize,    skipped);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
706	[BUG]  [BUGGY]  encoding.skipRecordPadding(this.available,  skipped);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  encoding.skipRecordPadding(this.available,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	encoding.skipRecordPadding(this.available,  skipped);	  encoding.skipRecordPadding(skipped);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
707	[BUG]  [BUGGY]  numRecords  =  IOUtils.skipRecordPadding(skip);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  IOUtils.skipRecordPadding(skip);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  IOUtils.skipRecordPadding(skip);	  numRecords    =    skipRecordPadding(skip);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
708	[BUG]  [BUGGY]  encoding.switchRecordPadding();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  encoding.switchRecordPadding();  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	encoding.switchRecordPadding();	  count(switchRecordPadding);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
709	[BUG]  [BUGGY]  skipd  =  count(padding,  skipped);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skipd  =  count(padding,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipd  =  count(padding,  skipped);	  count(padding,    skipd);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
710	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
711	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  recordSize;  ++i)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  recordSize;  ++i)  {  skipRecordPadding(i);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  recordSize;  ++i)  {  skipRecordPadding(i);  }	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
712	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  i++)  {  skipRecordPadding(i,  skipped);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  i++)  {  skipRecordPadding(i,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  this.recordSize;  i++)  {  skipRecordPadding(i,  skipped);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    skipRecordPadding(i,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
713	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  recordSize;  i++)  {  skipRecordPadding(i,  skipped);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  recordSize;  i++)  {  skipRecordPadding(i,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  recordSize;  i++)  {  skipRecordPadding(i,  skipped);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    skipRecordPadding(i,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
714	[BUG]  [BUGGY]  count(numRecords  -  skipd,  padding);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  -  skipd,  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  -  skipd,  padding);	  count(skipped    -    skipped,    padding);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
715	[BUG]  [BUGGY]  count(skipped  -  skipped,  this.entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  -  skipped,  this.entrySize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  -  skipped,  this.entrySize);	  count(skipped    -    skipped,    padding);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
716	[BUG]  [BUGGY]  count(padding  +  this.recordSize,  skipped);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding  +  this.recordSize,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  +  this.recordSize,  skipped);	  count(padding    +    skipped);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
717	[BUG]  [BUGGY]  count(skipped,  numRecords,  padding);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped,  numRecords,  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped,  numRecords,  padding);	  count(skipped,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
718	[BUG]  [BUGGY]  count(numRecords,  padding,  header);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords,  padding,  header);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords,  padding,  header);	  count(skipped,    padding,    numRecords);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
719	[BUG]  [BUGGY]  if(skipped  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  padding);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  padding);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  padding);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i,    padding);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
720	[BUG]  [BUGGY]  if(skipped  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  skipped);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  skipped);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i,    padding);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
721	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipRecordPadding(i,  padding);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipRecordPadding(i,  padding);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  skipped;  ++i)  {  skipRecordPadding(i,  padding);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    skipRecordPadding(i,    padding);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
722	[BUG]  [BUGGY]  numRecords  =  count(skipd,  numRecords);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  count(skipd,  numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  count(skipd,  numRecords);	  count(numRecords,    skipd);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
723	[BUG]  [BUGGY]  skipd  =  count(numRecords,  skipped);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skipd  =  count(numRecords,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipd  =  count(numRecords,  skipped);	  count(numRecords,    skipd);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
724	[BUG]  [BUGGY]  count(switchd,  numRecords);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(switchd,  numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(switchd,  numRecords);	  count(numRecords,    skipd);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
725	[BUG]  [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    skipRecordP    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
726	[BUG]  [BUGGY]  count(this.entrySize  +  skipd);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(this.entrySize  +  skipd);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(this.entrySize  +  skipd);	  count(numRecords    +    skipd);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
727	[BUG]  [BUGGY]  numRecords  =  skipped?  skipRecordPadding(padding):  numRecords;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  skipped?  skipRecordPadding(padding):  numRecords;  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  skipped?  skipRecordPadding(padding):  numRecords;	  numRecords    =    skipRecordPadding(padding);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
728	[BUG]  [BUGGY]  numRecords  =  skipped?  skipRecordPadding(padding):  0;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  skipped?  skipRecordPadding(padding):  0;  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  skipped?  skipRecordPadding(padding):  0;	  numRecords    =    skipRecordPadding(padding);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
729	[BUG]  [BUGGY]  this.currEntry  =  currEntry.skipRecordPadding();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  this.currEntry  =  currEntry.skipRecordPadding();  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	this.currEntry  =  currEntry.skipRecordPadding();	  this.currEntry.skipRecordPadding();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
730	[BUG]  [BUGGY]  count(padding,  numRecords  *  skipped);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(padding,  numRecords  *  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding,  numRecords  *  skipped);	  count(numRecords    *    skipped);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
731	[BUG]  [BUGGY]  numRecords  =  count(padding,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  numRecords  =  count(padding,  this.recordSize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  count(padding,  this.recordSize);	  count(numRecords,    padding);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
732	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(this.recordSize);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  padding);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(this.recordSize);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  padding);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  skipRecordPadding(this.recordSize);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  padding);  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    0,    padding);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
733	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(this.entrySize);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  padding);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(this.entrySize);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  padding);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  skipRecordPadding(this.entrySize);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  padding);  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    0,    padding);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
734	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  0,  padding);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  0,  padding);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  0,  padding);  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    0,    padding);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
735	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(this.recordSize);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  skipped);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(this.recordSize);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  skipRecordPadding(this.recordSize);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  skipped);  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    0,    padding);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
736	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  padding);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  <  =  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  padding);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  <  =  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  padding);  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    0,    padding);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
737	[BUG]  [BUGGY]  if(skipped  <  0)  {  skipRecordPadding(this.recordSize);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  padding);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  <  0)  {  skipRecordPadding(this.recordSize);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  padding);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  <  0)  {  skipRecordPadding(this.recordSize);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  padding);  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    0,    padding);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
738	[BUG]  [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skip  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skip  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skip	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
739	[BUG]  [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRe  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRe  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRe	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getValue()!=    null)    {    skipRecordPadding    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
740	[BUG]  [BUGGY]  count(switchToSkip,  cached);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(switchToSkip,  cached);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(switchToSkip,  cached);	  count(padding,    cached);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
741	[BUG]  [BUGGY]  count(skipRecords,  cached);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipRecords,  cached);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipRecords,  cached);	  count(padding,    cached);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
742	[BUG]  [BUGGY]  count(switchToSkip,  padding);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(switchToSkip,  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(switchToSkip,  padding);	  count(padding,    cached);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
743	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  skipRecordPadding(i);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  skipRecordPadding(i);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
744	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  skipRecordPadding(i  +  1);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  skipRecordPadding(i  +  1);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  skipRecordPadding(i  +  1);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    skipRecordPadding(i);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
745	[BUG]  [BUGGY]  count(skipped  /  1,  padding);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  /  1,  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  /  1,  padding);	  count(skipped    +    1,    padding);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
746	[BUG]  [BUGGY]  initPadding(padding,  skipped);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  initPadding(padding,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	initPadding(padding,  skipped);	  initPadding(padding);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
747	[BUG]  [BUGGY]  count(skipped,  is,  skipped);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped,  is,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped,  is,  skipped);	  count(skipped,    padding,    skipped);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
748	[BUG]  [BUGGY]  count(skipped,  skipped,  padding);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped,  skipped,  padding);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped,  skipped,  padding);	  count(skipped,    padding,    skipped);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
749	[BUG]  [BUGGY]  count(skipped  *  skipd);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  *  skipd);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  *  skipd);	  count(numRecords    *    skipd);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
750	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  -1,  skipped);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  -1,  skipped);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  System.arraycopy(this.entrySize,  numRecords,  -1,  skipped);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    numToSkip,    skipped);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
751	[BUG]  [BUGGY]  if(skipped  >  0)  {  System.arraycopy(this.entry,  0,  padding,  this.recordSize,  skipped);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  System.arraycopy(this.entry,  0,  padding,  this.recordSize,  skipped);  skipRecordPadding();  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  System.arraycopy(this.entry,  0,  padding,  this.recordSize,  skipped);  skipRecordPadding();  }	  if(skipped    >    0)    {    count(numRecords);    }    else    {    System.arraycopy(this.entry,    0,    padding,    numRecords,    skipped);    skipRecordPadding();    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
752	[BUG]  [BUGGY]  count(this.recordSize,  skipped  -  this.numRecords);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(this.recordSize,  skipped  -  this.numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(this.recordSize,  skipped  -  this.numRecords);	  count(numRecords,    skipped    -    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
753	[BUG]  [BUGGY]  skipRecordPadding(skip,  skipped,  numRecords);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  skipRecordPadding(skip,  skipped,  numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(skip,  skipped,  numRecords);	  skipRecordPadding(skip,    skipped);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
754	[BUG]  [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
755	[BUG]  [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(padding  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
756	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(curr  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(curr  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(curr	  if(skip    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
757	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(skip);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(skip);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  skipRecordPadding(skip);  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
758	[BUG]  [BUGGY]  count(numRecords  -  skipd,  is.length);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  -  skipd,  is.length);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  -  skipd,  is.length);	  count(skipped    -    skipped,    is.length);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
759	[BUG]  [BUGGY]  count(skipped  -  skipped,  is.length  -  skipped);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped  -  skipped,  is.length  -  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  -  skipped,  is.length  -  skipped);	  count(skipped    -    skipped,    is.length);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
760	[BUG]  [BUGGY]  count(skip,  0,  numRecords);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skip,  0,  numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skip,  0,  numRecords);	  count(skipped,    0,    skipped);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
761	[BUG]  [BUGGY]  count(paint  +  numRecords);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(paint  +  numRecords);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(paint  +  numRecords);	  count(paint    +    1);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
762	[BUG]  [BUGGY]  count(numRecords,  padding  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords,  padding  +  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords,  padding  +  1);	  count(paint    +    1);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
763	[BUG]  [BUGGY]  count(this.recordSize  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(this.recordSize  +  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(this.recordSize  +  1);	  count(numRecords    +    1);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
764	[BUG]  [BUGGY]  count(this.entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(this.entrySize  +  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(this.entrySize  +  1);	  count(numRecords    +    1);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
765	[BUG]  [BUGGY]  if(skip  >  0)  {  skipRecordPadding(this.entrySize);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skip  >  0)  {  skipRecordPadding(this.entrySize);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  skipRecordPadding(this.entrySize);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    padding,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
766	[BUG]  [BUGGY]  if(skipped  <  0)  {  skipRecordPadding(this.entrySize);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  <  0)  {  skipRecordPadding(this.entrySize);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  <  0)  {  skipRecordPadding(this.entrySize);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }	  if(skipped    >    0)    {    skipRecordPadding(numRecords);    }    else    {    System.arraycopy(this.entrySize,    numRecords,    padding,    skipped);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
767	[BUG]  [BUGGY]  count(skipped,  this.entrySize);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(skipped,  this.entrySize);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped,  this.entrySize);	  count(skipped,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
768	[BUG]  [BUGGY]  count(this.entrySize  +  this.recordSize  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(this.entrySize  +  this.recordSize  +  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(this.entrySize  +  this.recordSize  +  1);	  count(skipped    +    this.recordSize    +    1);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
769	[BUG]  [BUGGY]  count(this.recordSize  +  this.recordSize  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(this.recordSize  +  this.recordSize  +  1);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(this.recordSize  +  this.recordSize  +  1);	  count(skipped    +    this.recordSize    +    1);    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
770	[BUG]  [BUGGY]  count(numRecords  -  this.recordSize,  skipped);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  count(numRecords  -  this.recordSize,  skipped);  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  -  this.recordSize,  skipped);	  count(skipped    -    skipped,    this.recordSize);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
771	[BUG]  [BUGGY]  if(skipped  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);      [BUGGY]  if(skipped  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [BUGGY]      }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().endsWith(   "    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
