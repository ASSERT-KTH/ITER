bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  count(numRecords  +  1);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(numRecords  +  1);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  +  1);	  count(skipped    +    1);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
2	[BUG]  [BUGGY]  count(padding  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(padding  +  1);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  +  1);	  count(skipped    +    1);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
3	[BUG]  [BUGGY]  count(skipped  /  1);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(skipped  /  1);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  /  1);	  count(skipped    +    1);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
4	[BUG]  [BUGGY]  count(skipped  +  1,  padding);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(skipped  +  1,  padding);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  +  1,  padding);	  count(skipped    +    1);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
5	[BUG]  [BUGGY]  count(paint  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(paint  +  1);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(paint  +  1);	  count(skipped    +    1);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
6	[BUG]  [BUGGY]  count(numRecords,  padding);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(numRecords,  padding);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords,  padding);	  count(skipped,    padding);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
7	[BUG]  [BUGGY]  count(padding,  skipped);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(padding,  skipped);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding,  skipped);	  count(skipped,    padding);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
8	[BUG]  [BUGGY]  count(padding,  skipd);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(padding,  skipd);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding,  skipd);	  count(skipped,    padding);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
9	[BUG]  [BUGGY]  count(padding,  sink);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(padding,  sink);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding,  sink);	  count(skipped,    padding);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
10	[BUG]  [BUGGY]  count(skipped,  padding,  skipped);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(skipped,  padding,  skipped);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped,  padding,  skipped);	  count(skipped,    padding);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
11	[BUG]  [BUGGY]  count(padding,  cached);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(padding,  cached);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding,  cached);	  count(skipped,    padding);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
12	[BUG]  [BUGGY]  count(numRecords,  skipped);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(numRecords,  skipped);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords,  skipped);	  count(paint);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
13	[BUG]  [BUGGY]  count(skip);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(skip);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skip);	  count(paint);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
14	[BUG]  [BUGGY]  count(switchRecordPadding);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(switchRecordPadding);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(switchRecordPadding);	  count(paint);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
15	[BUG]  [BUGGY]  skipRecordPadding(skipped);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  skipRecordPadding(skipped);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(skipped);	  count(paint);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
16	[BUG]  [BUGGY]  count(skipRecordPadding,  skipped);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(skipRecordPadding,  skipped);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipRecordPadding,  skipped);	  count(padding);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
17	[BUG]  [BUGGY]  count(skip,  numRecords);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(skip,  numRecords);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skip,  numRecords);	  count(numRecords);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
18	[BUG]  [BUGGY]  count(padding,  numRecords);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(padding,  numRecords);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding,  numRecords);	  count(numRecords);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
19	[BUG]  [BUGGY]  numRecords  =  skipRecordPadding(skip);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  numRecords  =  skipRecordPadding(skip);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  skipRecordPadding(skip);	  count(numRecords);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
20	[BUG]  [BUGGY]  numRecords  =  skipRecordPadding(padding);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  numRecords  =  skipRecordPadding(padding);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  skipRecordPadding(padding);	  count(numRecords);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
21	[BUG]  [BUGGY]  count(numRecords  *  skipped);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(numRecords  *  skipped);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  *  skipped);	  count(skipped    *    skipped);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
22	[BUG]  [BUGGY]  count(numRecords  *  this.recordSize);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(numRecords  *  this.recordSize);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  *  this.recordSize);	  count(skipped    *    skipped);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
23	[BUG]  [BUGGY]  count(padding  *  skipped);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(padding  *  skipped);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  *  skipped);	  count(skipped    *    skipped);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
24	[BUG]  [BUGGY]  count(skipped  *  this.entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(skipped  *  this.entrySize);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  *  this.entrySize);	  count(skipped    *    skipped);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
25	[BUG]  [BUGGY]  count(skipped  *  this.recordSize);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(skipped  *  this.recordSize);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  *  this.recordSize);	  count(skipped    *    skipped);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
26	[BUG]  [BUGGY]  count(numRecords  *  this.recordSize,  skipped);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(numRecords  *  this.recordSize,  skipped);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  *  this.recordSize,  skipped);	  count(skipped    *    skipped);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
27	[BUG]  [BUGGY]  count(skipped  *  this.entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(skipped  *  this.entryOffset);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  *  this.entryOffset);	  count(skipped    *    skipped);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
28	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  skipped);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  skipped);  }  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  skipped);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
29	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
30	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  padding);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  padding);  }  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i,  padding);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
31	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  skipRecordPadding(i,  skipped);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  skipRecordPadding(i,  skipped);  }  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  skipRecordPadding(i,  skipped);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
32	[BUG]  [BUGGY]  this.currEntry.skipRecordPadding();  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  this.currEntry.skipRecordPadding();  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	this.currEntry.skipRecordPadding();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
33	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  skipRecordPadding(i);  }  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  skipRecordPadding(i);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
34	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  skipRecordPadding(i);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
35	[BUG]  [BUGGY]  count(numRecords  +  skipped);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(numRecords  +  skipped);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  +  skipped);	  count(skipped    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
36	[BUG]  [BUGGY]  count(padding  +  numRecords);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(padding  +  numRecords);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  +  numRecords);	  count(skipped    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
37	[BUG]  [BUGGY]  count(skipped  /  numRecords);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(skipped  /  numRecords);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  /  numRecords);	  count(skipped    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
38	[BUG]  [BUGGY]  count(numRecords  +  sink);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(numRecords  +  sink);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  +  sink);	  count(skipped    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
39	[BUG]  [BUGGY]  count(numRecords  +  skipd);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(numRecords  +  skipd);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  +  skipd);	  count(skipped    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
40	[BUG]  [BUGGY]  count(numRecords  +  squeezed);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(numRecords  +  squeezed);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  +  squeezed);	  count(skipped    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
41	[BUG]  [BUGGY]  count(padding  +  skipped);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(padding  +  skipped);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  +  skipped);	  count(skipped    +    skipped);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
42	[BUG]  [BUGGY]  count(skipped  /  skipped);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(skipped  /  skipped);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  /  skipped);	  count(skipped    +    skipped);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
43	[BUG]  [BUGGY]  count(skipped  +  this.recordSize);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(skipped  +  this.recordSize);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  +  this.recordSize);	  count(skipped    +    skipped);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
44	[BUG]  [BUGGY]  count(skipped  +  this.entrySize);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(skipped  +  this.entrySize);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  +  this.entrySize);	  count(skipped    +    skipped);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
45	[BUG]  [BUGGY]  count(numRecords  -  skipped);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(numRecords  -  skipped);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  -  skipped);	  count(skipped    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
46	[BUG]  [BUGGY]  count(padding  -  skipped);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(padding  -  skipped);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding  -  skipped);	  count(skipped    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
47	[BUG]  [BUGGY]  count(numRecords,  skipped  -  this.recordSize);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(numRecords,  skipped  -  this.recordSize);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords,  skipped  -  this.recordSize);	  count(skipped    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
48	[BUG]  [BUGGY]  count(numRecords,  skipped  -  this.entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(numRecords,  skipped  -  this.entrySize);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords,  skipped  -  this.entrySize);	  count(skipped    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
49	[BUG]  [BUGGY]  count(skipped  -  skipped,  padding);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(skipped  -  skipped,  padding);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  -  skipped,  padding);	  count(skipped    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
50	[BUG]  [BUGGY]  count(numRecords  *  skipped  -  this.recordSize);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(numRecords  *  skipped  -  this.recordSize);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  *  skipped  -  this.recordSize);	  count(skipped    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
51	[BUG]  [BUGGY]  skipRecordPadding(skip);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  skipRecordPadding(skip);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(skip);	  skipRecordPadding(numRecords);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
52	[BUG]  [BUGGY]  skipRecordPadding(skip,  skipped);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  skipRecordPadding(skip,  skipped);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(skip,  skipped);	  skipRecordPadding(numRecords);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
53	[BUG]  [BUGGY]  skipRecordPadding();  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  skipRecordPadding();  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding();	  skipRecordPadding(numRecords);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
54	[BUG]  [BUGGY]  skipRecordPadding(skipd);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  skipRecordPadding(skipd);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(skipd);	  skipRecordPadding(numRecords);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
55	[BUG]  [BUGGY]  skipRecordPadding(peek);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  skipRecordPadding(peek);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(peek);	  skipRecordPadding(numRecords);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
56	[BUG]  [BUGGY]  skipRecordPadding(switchToSkip);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  skipRecordPadding(switchToSkip);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(switchToSkip);	  skipRecordPadding(padding);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
57	[BUG]  [BUGGY]  skipRecordPadding(switchOffset);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  skipRecordPadding(switchOffset);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(switchOffset);	  skipRecordPadding(padding);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
58	[BUG]  [BUGGY]  count(paint,  skipped);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(paint,  skipped);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(paint,  skipped);	  count(skipped,    skipped);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
59	[BUG]  [BUGGY]  count(numRecords,  skipd);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(numRecords,  skipd);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords,  skipd);	  count(skipped,    skipped);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
60	[BUG]  [BUGGY]  count(lineno,  skipped);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(lineno,  skipped);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(lineno,  skipped);	  count(skipped,    skipped);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
61	[BUG]  [BUGGY]  encoding.skipRecordPadding(skipped);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  encoding.skipRecordPadding(skipped);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	encoding.skipRecordPadding(skipped);	  skipRecordPadding(numRecords);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
62	[BUG]  [BUGGY]  numRecords  =  skipRecordPadding(skipped);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  numRecords  =  skipRecordPadding(skipped);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  skipRecordPadding(skipped);	  count(paint);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
63	[BUG]  [BUGGY]  count(switchToSkip);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(switchToSkip);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(switchToSkip);	  count(paint);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
64	[BUG]  [BUGGY]  count(skipped  +  1,  skipped);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(skipped  +  1,  skipped);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  +  1,  skipped);	  count(skipped    +    1);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
65	[BUG]  [BUGGY]  count(skipped  +  2);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(skipped  +  2);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  +  2);	  count(skipped    +    1);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
66	[BUG]  [BUGGY]  numRecords  =  IOUtils.next(is,  skipped);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  numRecords  =  IOUtils.next(is,  skipped);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  IOUtils.next(is,  skipped);	  count(numRecords);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
67	[BUG]  [BUGGY]  numRecords  =  IOUtils.skip(skipped);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  numRecords  =  IOUtils.skip(skipped);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  IOUtils.skip(skipped);	  count(numRecords);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
68	[BUG]  [BUGGY]  numRecords  =  skipRecordPadding();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  numRecords  =  skipRecordPadding();  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  skipRecordPadding();	  count(numRecords);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
69	[BUG]  [BUGGY]  count(numRecords  +  SHORT_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(numRecords  +  SHORT_BUFFER_SIZE);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  +  SHORT_BUFFER_SIZE);	  count(skipped    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
70	[BUG]  [BUGGY]  count(skipped  *  numRecords);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(skipped  *  numRecords);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  *  numRecords);	  count(skipped    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
71	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
72	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
73	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordPadding	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
74	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecordPadding();  }  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecordPadding();  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
75	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecordPadding  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecordPadding  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getTarEntry(i);  if(currEntry!=  null)  {  skipRecordPadding	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
76	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [CE]  illegal  start  of  type  [FE]                                AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  skipRecordP	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
77	[BUG]  [BUGGY]  count(skipped,  numRecords);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(skipped,  numRecords);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped,  numRecords);	  count(skipped,    padding);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
78	[BUG]  [BUGGY]  count(skipped,  0,  skipped);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(skipped,  0,  skipped);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped,  0,  skipped);	  count(skipped,    skipped);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
79	[BUG]  [BUGGY]  count(skipped,  available);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(skipped,  available);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped,  available);	  count(skipped,    skipped);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
80	[BUG]  [BUGGY]  count(skipped,  0);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(skipped,  0);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped,  0);	  count(skipped,    skipped);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
81	[BUG]  [BUGGY]  count(skipped  -  skipped,  numRecords);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(skipped  -  skipped,  numRecords);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  -  skipped,  numRecords);	  count(skipped    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
82	[BUG]  [BUGGY]  count(skipped  -  skipped  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(skipped  -  skipped  +  1);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  -  skipped  +  1);	  count(skipped    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
83	[BUG]  [BUGGY]  count(skipped  -  this.recordSize);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(skipped  -  this.recordSize);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  -  this.recordSize);	  count(skipped    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
84	[BUG]  [BUGGY]  count(skipped  -  skipped,  is.length);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(skipped  -  skipped,  is.length);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  -  skipped,  is.length);	  count(skipped    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
85	[BUG]  [BUGGY]  count(skipped  -  skipped,  this.recordSize);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(skipped  -  skipped,  this.recordSize);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  -  skipped,  this.recordSize);	  count(skipped    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
86	[BUG]  [BUGGY]  count(numRecords  *  skipd);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(numRecords  *  skipd);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords  *  skipd);	  count(skipped    *    skipped);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
87	[BUG]  [BUGGY]  encoding.skipRecordPadding();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  encoding.skipRecordPadding();  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	encoding.skipRecordPadding();	  count(padding);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
88	[BUG]  [BUGGY]  initPadding(padding);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  initPadding(padding);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	initPadding(padding);	  count(padding);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
89	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.getName  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.getName  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.getName	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
90	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
91	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRecordPadding  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRecordPadding  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRecordPadding	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
92	[BUG]  [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skip  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().endsWith( "	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
93	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRecordPadding  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRecordPadding  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getValue()!=  null)  {  skipRecordPadding	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
94	[BUG]  [BUGGY]  encoding.skipRecordPadding(padding);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  encoding.skipRecordPadding(padding);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	encoding.skipRecordPadding(padding);	  skipRecordPadding(padding);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
95	[BUG]  [BUGGY]  count(skipped  +  numRecords,  skipped);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(skipped  +  numRecords,  skipped);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  +  numRecords,  skipped);	  count(skipped    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
96	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(numRecords);  }  else  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(numRecords);  }  else  {  skipRecordPadding();  }  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  skipRecordPadding(numRecords);  }  else  {  skipRecordPadding();  }	  skipRecordPadding(numRecords);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
97	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(numRecords);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(numRecords);  }  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  skipRecordPadding(numRecords);  }	  skipRecordPadding(numRecords);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
98	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  }	  skipRecordPadding(numRecords);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
99	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  padding);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  if(skipped  >  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  padding);  }  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  skipRecordPadding(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  0,  padding);  }	  skipRecordPadding(numRecords);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
100	[BUG]  [BUGGY]  count(skipped,  this.recordSize);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(skipped,  this.recordSize);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped,  this.recordSize);	  count(skipped,    skipped);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
101	[BUG]  [BUGGY]  count(skip,  skipped);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(skip,  skipped);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skip,  skipped);	  count(skipped,    skipped);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
102	[BUG]  [BUGGY]  count(skipped  +  this.recordSize  +  1);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(skipped  +  this.recordSize  +  1);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  +  this.recordSize  +  1);	  count(skipped    +    1);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
103	[BUG]  [BUGGY]  count(skipped,  padding,  numRecords);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(skipped,  padding,  numRecords);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped,  padding,  numRecords);	  count(skipped,    padding);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
104	[BUG]  [BUGGY]  if(skipped  >  0)  {  count(numRecords);  }  else  {  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  if(skipped  >  0)  {  count(numRecords);  }  else  {  skipRecordPadding();  }  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  count(numRecords);  }  else  {  skipRecordPadding();  }	  count(numRecords);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
105	[BUG]  [BUGGY]  if(skipped  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  if(skipped  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  skipRecordPadding();  }  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  padding,  skipped);  skipRecordPadding();  }	  count(numRecords);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
106	[BUG]  [BUGGY]  if(skipped  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  numToSkip,  skipped);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  if(skipped  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  numToSkip,  skipped);  skipRecordPadding();  }  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  numToSkip,  skipped);  skipRecordPadding();  }	  count(numRecords);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
107	[BUG]  [BUGGY]  if(skipped  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  skipped,  this.recordSize);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  if(skipped  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  skipped,  this.recordSize);  skipRecordPadding();  }  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entrySize,  numRecords,  skipped,  this.recordSize);  skipRecordPadding();  }	  count(numRecords);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
108	[BUG]  [BUGGY]  if(skipped  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entry,  0,  padding,  numRecords,  skipped);  skipRecordPadding();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  if(skipped  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entry,  0,  padding,  numRecords,  skipped);  skipRecordPadding();  }  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	if(skipped  >  0)  {  count(numRecords);  }  else  {  System.arraycopy(this.entry,  0,  padding,  numRecords,  skipped);  skipRecordPadding();  }	  count(numRecords);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
109	[BUG]  [BUGGY]  count(skipped  -  this.entrySize);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(skipped  -  this.entrySize);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  -  this.entrySize);	  count(skipped    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
110	[BUG]  [BUGGY]  count(skipped  -  is.length);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  count(skipped  -  is.length);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  -  is.length);	  count(skipped    -    skipped);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
111	[BUG]  [BUGGY]  numRecords  =  IOUtils.skip(is,  padding);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);    [BUGGY]  numRecords  =  IOUtils.skip(is,  padding);  [BUGGY]    }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	numRecords  =  IOUtils.skip(is,  padding);	  count(padding);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
