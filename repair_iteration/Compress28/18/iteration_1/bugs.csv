bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  count(padding);  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  [BUGGY]  count(padding);  [BUGGY]  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(padding);	count(skipped);  	non-compiled	[CE]  illegal  start  of  type	35	None	replace
2	[BUG]  [BUGGY]  count(numRecords);  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  [BUGGY]  count(numRecords);  [BUGGY]  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(numRecords);	count(skipped);  	non-compiled	[CE]  illegal  start  of  type	35	None	replace
3	[BUG]  [BUGGY]  count(skipped  -  skipped);  [CE]  illegal  start  of  type  [FE]        AssertionError  [CONTEXT]  private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  [BUGGY]  count(skipped  -  skipped);  [BUGGY]  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  -  skipped);	count(skipped);  	non-compiled	[CE]  illegal  start  of  type	35	None	replace
4	[BUG]  [BUGGY]  skipRecordPadding(padding);  [CE]  illegal  start  of  type  [FE]          AssertionError  [CONTEXT]  private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  [BUGGY]  skipRecordPadding(padding);  [BUGGY]  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(padding);	count(skipped);  	non-compiled	[CE]  illegal  start  of  type	35	None	replace
5	[BUG]  [BUGGY]  count(skipped,  padding);  [CE]  illegal  start  of  type  [FE]            AssertionError  [CONTEXT]  private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  [BUGGY]  count(skipped,  padding);  [BUGGY]  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped,  padding);	count(skipped);  	non-compiled	[CE]  illegal  start  of  type	35	None	replace
6	[BUG]  [BUGGY]  skipRecordPadding(numRecords);  [CE]  illegal  start  of  type  [FE]              AssertionError  [CONTEXT]  private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  [BUGGY]  skipRecordPadding(numRecords);  [BUGGY]  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	skipRecordPadding(numRecords);	count(skipped);  	non-compiled	[CE]  illegal  start  of  type	35	None	replace
7	[BUG]  [BUGGY]  count(paint);  [CE]  illegal  start  of  type  [FE]                AssertionError  [CONTEXT]  private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  [BUGGY]  count(paint);  [BUGGY]  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(paint);	count(skipped);  	non-compiled	[CE]  illegal  start  of  type	35	None	replace
8	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]                  AssertionError  [CONTEXT]  private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  [BUGGY]    [BUGGY]  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	  	count(skipped);  	non-compiled	[CE]  illegal  start  of  type	35	None	replace
9	[BUG]  [BUGGY]  count(skipped  +  skipped);  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  [BUGGY]  count(skipped  +  skipped);  [BUGGY]  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  +  skipped);	count(skipped);  	non-compiled	[CE]  illegal  start  of  type	35	None	replace
10	[BUG]  [BUGGY]  count(skipped  +  numRecords);  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  [BUGGY]  count(skipped  +  numRecords);  [BUGGY]  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  +  numRecords);	count(skipped);  	non-compiled	[CE]  illegal  start  of  type	35	None	replace
11	[BUG]  [BUGGY]  count(skipped  *  skipped);  [CE]  illegal  start  of  type  [FE]        AssertionError  [CONTEXT]  private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  [BUGGY]  count(skipped  *  skipped);  [BUGGY]  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  *  skipped);	count(skipped);  	non-compiled	[CE]  illegal  start  of  type	35	None	replace
12	[BUG]  [BUGGY]  count(skipped,  skipped);  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  [BUGGY]  count(skipped,  skipped);  [BUGGY]  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped,  skipped);	count(skipped);  	non-compiled	[CE]  illegal  start  of  type	35	None	replace
13	[BUG]  [BUGGY]  count(skipped  +  1);  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  private  void  skipRecordPadding()  throws  IOException  {  if  (this.entrySize  >  0  &&  this.entrySize  %  this.recordSize  !=  0)  {  long  numRecords  =  (this.entrySize  /  this.recordSize)  +  1;  long  padding  =  (numRecords  *  this.recordSize)  -  this.entrySize;  long  skipped  =  IOUtils.skip(is,  padding);  [BUGGY]  count(skipped  +  1);  [BUGGY]  }  }  [CLASS]  TarArchiveInputStream  [METHOD]  skipRecordPadding  [RETURN_TYPE]  void  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  longLinkData  longNameData  boolean  hasHitEOF  ZipEncoding  encoding  InputStream  is  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.4082482904638631	305	305	1	replace	count(skipped  +  1);	count(skipped);  	non-compiled	[CE]  illegal  start  of  type	35	None	replace
