bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entrySize,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entrySize,  numToRead);	  return    is.read(buf,    offset,    entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
2	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entrySize,  hasHitEOF,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entrySize,  hasHitEOF,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entrySize,  hasHitEOF,  hasHitEOF);	  return    is.read(buf,    offset,    entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
3	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entrySize,  hasHitEOF,  numRecords);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entrySize,  hasHitEOF,  numRecords);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entrySize,  hasHitEOF,  numRecords);	  return    is.read(buf,    offset,    entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
4	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entrySize,  hasHitEOF,  shouldReset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entrySize,  hasHitEOF,  shouldReset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entrySize,  hasHitEOF,  shouldReset);	  return    is.read(buf,    offset,    entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
5	[BUG]  [BUGGY]  entryOffset  >  0;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  >  0;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  >  0;	  entryOffset    >    entrySize;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
6	[BUG]  [BUGGY]  entryOffset  >  numRecords;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  >  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  >  numRecords;	  entryOffset    >    entrySize;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
7	[BUG]  [BUGGY]  entryOffset  >  entrySize  +  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  >  entrySize  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  >  entrySize  +  1;	  entryOffset    >    entrySize;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
8	[BUG]  [BUGGY]  entryOffset  >  recordSize;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  >  recordSize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  >  recordSize;	  entryOffset    >    entrySize;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
9	[BUG]  [BUGGY]  entryOffset  <  entrySize;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  <  entrySize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  <  entrySize;	  entryOffset    >    entrySize;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
10	[BUG]  [BUGGY]  entryOffset  >  available;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  >  available;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  >  available;	  entryOffset    >    entrySize;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
11	[BUG]  [BUGGY]  entryOffset  +  entrySize)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  +  entrySize)  {  hasHitEOF  =  false;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  +  entrySize)  {  hasHitEOF  =  false;  }	  entryOffset    >    entrySize)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
12	[BUG]  [BUGGY]  entryOffset  <  entrySize)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  <  entrySize)  {  hasHitEOF  =  false;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  <  entrySize)  {  hasHitEOF  =  false;  }	  entryOffset    >    entrySize)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
13	[BUG]  [BUGGY]  entryOffset  >  0)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  >  0)  {  hasHitEOF  =  false;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  >  0)  {  hasHitEOF  =  false;  }	  entryOffset    >    entrySize)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
14	[BUG]  [BUGGY]  entryOffset  +=  entrySize)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  +=  entrySize)  {  hasHitEOF  =  false;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  +=  entrySize)  {  hasHitEOF  =  false;  }	  entryOffset    >    entrySize)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
15	[BUG]  [BUGGY]  entryOffset  >  numRecords)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  >  numRecords)  {  hasHitEOF  =  false;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  >  numRecords)  {  hasHitEOF  =  false;  }	  entryOffset    >    entrySize)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
16	[BUG]  [BUGGY]  entryOffset  >  entrySize  -  1)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  >  entrySize  -  1)  {  hasHitEOF  =  false;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  >  entrySize  -  1)  {  hasHitEOF  =  false;  }	  entryOffset    >    entrySize)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
17	[BUG]  [BUGGY]  return  is.readByte(buf,  offset,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readByte(buf,  offset,  entryOffset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readByte(buf,  offset,  entryOffset,  hasHitEOF);	  return    is.readByte(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
18	[BUG]  [BUGGY]  return  is.readByte(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readByte(buf,  offset,  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readByte(buf,  offset,  entryOffset);	  return    is.readByte(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
19	[BUG]  [BUGGY]  return  is.readByte(buf,  offset,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readByte(buf,  offset,  entrySize,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readByte(buf,  offset,  entrySize,  hasHitEOF);	  return    is.readByte(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
20	[BUG]  [BUGGY]  return  is.readByte(entryOffset,  buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readByte(entryOffset,  buf,  offset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readByte(entryOffset,  buf,  offset,  hasHitEOF);	  return    is.readByte(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
21	[BUG]  [BUGGY]  return  is.readByte(buf,  offset,  entryOffset  +  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readByte(buf,  offset,  entryOffset  +  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readByte(buf,  offset,  entryOffset  +  hasHitEOF);	  return    is.readByte(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
22	[BUG]  [BUGGY]  return  is.readByte(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readByte(buf,  offset,  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readByte(buf,  offset,  entrySize);	  return    is.readByte(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
23	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  ch  =  is.read(buf,  offset,  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  ch  =  is.read(buf,  offset,  entryOffset);	  int    ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
24	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  ch  =  is.read(buf,  offset,  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  ch  =  is.read(buf,  offset,  entrySize);	  int    ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
25	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  ch  =  is.read(buf,  offset,  entryOffset,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  ch  =  is.read(buf,  offset,  entryOffset,  numToRead);	  int    ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
26	[BUG]  [BUGGY]  char  ch  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  char  ch  =  is.read(buf,  offset,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	char  ch  =  is.read(buf,  offset,  numToRead);	  int    ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
27	[BUG]  [BUGGY]  Integer  ch  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  Integer  ch  =  is.read(buf,  offset,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	Integer  ch  =  is.read(buf,  offset,  numToRead);	  int    ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
28	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  entryOffset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  ch  =  is.read(buf,  offset,  entryOffset  +  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  ch  =  is.read(buf,  offset,  entryOffset  +  numToRead);	  int    ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
29	[BUG]  [BUGGY]  byte  ch  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  byte  ch  =  is.read(buf,  offset,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	byte  ch  =  is.read(buf,  offset,  numToRead);	  int    ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
30	[BUG]  [BUGGY]  int  padding  =  is.read(buf,  offset,  entryOffset);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  padding  =  is.read(buf,  offset,  entryOffset);  hasHitEOF  =  true;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  padding  =  is.read(buf,  offset,  entryOffset);  hasHitEOF  =  true;	  int    padding    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
31	[BUG]  [BUGGY]  int  padding  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  padding  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  false;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  padding  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  false;	  int    padding    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
32	[BUG]  [BUGGY]  int  padding  =  is.read(buf,  offset,  entrySize);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  padding  =  is.read(buf,  offset,  entrySize);  hasHitEOF  =  true;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  padding  =  is.read(buf,  offset,  entrySize);  hasHitEOF  =  true;	  int    padding    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
33	[BUG]  [BUGGY]  byte  padding  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  byte  padding  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	byte  padding  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;	  int    padding    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
34	[BUG]  [BUGGY]  int  padding  =  is.readByte(buf,  offset,  numToRead);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  padding  =  is.readByte(buf,  offset,  numToRead);  hasHitEOF  =  true;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  padding  =  is.readByte(buf,  offset,  numToRead);  hasHitEOF  =  true;	  int    padding    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
35	[BUG]  [BUGGY]  int  padding  =  i.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  padding  =  i.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  padding  =  i.read(buf,  offset,  numToRead);  hasHitEOF  =  true;	  int    padding    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
36	[BUG]  [BUGGY]  return  entryOffset  -  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  entryOffset  -  1;	  return    entryOffset    +    1;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
37	[BUG]  [BUGGY]  return  entryOffset  /  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  /  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  entryOffset  /  1;	  return    entryOffset    +    1;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
38	[BUG]  [BUGGY]  return  entryOffset  +  numRecords.length;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  numRecords.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  entryOffset  +  numRecords.length;	  return    entryOffset    +    1;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
39	[BUG]  [BUGGY]  return  entryOffset  +  2;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  2;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  entryOffset  +  2;	  return    entryOffset    +    1;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
40	[BUG]  [BUGGY]  return  is.read(buf,  offset,  numToRead  -  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  numToRead  -  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  numToRead  -  hasHitEOF);	  return    is.read(buf,    offset,    entryOffset    -    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
41	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entrySize  -  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entrySize  -  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entrySize  -  hasHitEOF);	  return    is.read(buf,    offset,    entryOffset    -    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
42	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset  -  hasHitEOF,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset  -  hasHitEOF,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset  -  hasHitEOF,  hasHitEOF);	  return    is.read(buf,    offset,    entryOffset    -    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
43	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset  -  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset  -  1,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset  -  1,  hasHitEOF);	  return    is.read(buf,    offset,    entryOffset    -    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
44	[BUG]  [BUGGY]  return  entryOffset  +  hasHitEOF;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  entryOffset  +  hasHitEOF;	  return    hasHitEOF    +    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
45	[BUG]  [BUGGY]  return  entrySize  +  hasHitEOF;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  entrySize  +  hasHitEOF;	  return    hasHitEOF    +    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
46	[BUG]  [BUGGY]  return  hasHitEOF  +  entryOffset  +  numRecords;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  +  entryOffset  +  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  hasHitEOF  +  entryOffset  +  numRecords;	  return    hasHitEOF    +    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
47	[BUG]  [BUGGY]  return  hasHitEOF  +  entryOffset  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  +  entryOffset  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  hasHitEOF  +  entryOffset  +  1;	  return    hasHitEOF    +    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
48	[BUG]  [BUGGY]  return  hasHitEOF  &&  entryOffset;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  hasHitEOF  &&  entryOffset;	  return    hasHitEOF    +    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
49	[BUG]  [BUGGY]  return  hasHitEOF  -  entryOffset;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  -  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  hasHitEOF  -  entryOffset;	  return    hasHitEOF    +    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
50	[BUG]  [BUGGY]  return  hasHitEOF  /  entryOffset;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  /  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  hasHitEOF  /  entryOffset;	  return    hasHitEOF    +    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
51	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset,  hasHitEOF,  numRecords);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset,  hasHitEOF,  numRecords);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset,  hasHitEOF,  numRecords);	  return    is.read(buf,    offset,    entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
52	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset,  hasHitEOF,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset,  hasHitEOF,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset,  hasHitEOF,  hasHitEOF);	  return    is.read(buf,    offset,    entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
53	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset,  hasHitEOF,  shouldReset);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset,  hasHitEOF,  shouldReset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset,  hasHitEOF,  shouldReset);	  return    is.read(buf,    offset,    entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
54	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  1,  entryOffset,  entries.length);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  1,  entryOffset,  entries.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  1,  entryOffset,  entries.length);	  return    is.read(buf,    offset    +    1,    entries.length);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
55	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  1,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  1,  entryOffset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  1,  entryOffset,  hasHitEOF);	  return    is.read(buf,    offset    +    1,    entries.length);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
56	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  1,  entrySize,  entries.length);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  1,  entrySize,  entries.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  1,  entrySize,  entries.length);	  return    is.read(buf,    offset    +    1,    entries.length);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
57	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  1,  entries.length,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  1,  entries.length,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  1,  entries.length,  hasHitEOF);	  return    is.read(buf,    offset    +    1,    entries.length);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
58	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  1,  entryOffset,  length);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  1,  entryOffset,  length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  1,  entryOffset,  length);	  return    is.read(buf,    offset    +    1,    entries.length);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
59	[BUG]  [BUGGY]  return  entryOffset  /  numRecords;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  /  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  entryOffset  /  numRecords;	  return    entryOffset    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
60	[BUG]  [BUGGY]  return  entryOffset  +  numRecords  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  numRecords  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  entryOffset  +  numRecords  +  1;	  return    entryOffset    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
61	[BUG]  [BUGGY]  return  entryOffset  -  numRecords;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  entryOffset  -  numRecords;	  return    entryOffset    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
62	[BUG]  [BUGGY]  return  entryOffset  +  numRecords,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  numRecords,  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  entryOffset  +  numRecords,  hasHitEOF;	  return    entryOffset    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
63	[BUG]  [BUGGY]  return  entryOffset  +  numRecords  +  length;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  numRecords  +  length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  entryOffset  +  numRecords  +  length;	  return    entryOffset    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
64	[BUG]  [BUGGY]  return  entryOffset  +  totalRead;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  totalRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  entryOffset  +  totalRead;	  return    entryOffset    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
65	[BUG]  [BUGGY]  return  entryOffset  +  numRecords  *  numRecords;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  numRecords  *  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  entryOffset  +  numRecords  *  numRecords;	  return    entryOffset    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
66	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset,  numToRead,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset,  numToRead,  hasHitEOF);	  return    is.read(buf,    offset,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
67	[BUG]  [BUGGY]  return  is.read(buf,  offset,  numToRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  numToRead,  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  numToRead,  entryOffset);	  return    is.read(buf,    offset,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
68	[BUG]  [BUGGY]  return  is.read(buf,  offset,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  numToRead,  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  numToRead,  entrySize);	  return    is.read(buf,    offset,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
69	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  1,  entrySize  -  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  1,  entrySize  -  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  1,  entrySize  -  numToRead);	  return    is.read(buf,    offset    +    1,    entryOffset    -    numToRead);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
70	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  1,  entryOffset  -  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  1,  entryOffset  -  numToRead,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  1,  entryOffset  -  numToRead,  hasHitEOF);	  return    is.read(buf,    offset    +    1,    entryOffset    -    numToRead);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
71	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  1,  totalRead  -  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  1,  totalRead  -  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  1,  totalRead  -  numToRead);	  return    is.read(buf,    offset    +    1,    entryOffset    -    numToRead);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
72	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  1,  hasHitEOF  -  numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  1,  hasHitEOF  -  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  1,  hasHitEOF  -  numToRead);	  return    is.read(buf,    offset    +    1,    entryOffset    -    numToRead);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
73	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  1,  entryOffset  -  totalRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  1,  entryOffset  -  totalRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  1,  entryOffset  -  totalRead);	  return    is.read(buf,    offset    +    1,    entryOffset    -    numToRead);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
74	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  1,  numToRead  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  1,  numToRead  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  1,  numToRead  -  entryOffset);	  return    is.read(buf,    offset    +    1,    entryOffset    -    numToRead);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
75	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  entryOffset  -  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  entryOffset  -  numToRead,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  entryOffset  -  numToRead,  hasHitEOF);	  return    is.readAndClose(buf,    offset,    entryOffset    -    numToRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
76	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  entrySize  -  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  entrySize  -  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  entrySize  -  numToRead);	  return    is.readAndClose(buf,    offset,    entryOffset    -    numToRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
77	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  entryOffset  -  entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  entryOffset  -  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  entryOffset  -  entrySize);	  return    is.readAndClose(buf,    offset,    entryOffset    -    numToRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
78	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  entryOffset  -  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  entryOffset  -  1,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  entryOffset  -  1,  hasHitEOF);	  return    is.readAndClose(buf,    offset,    entryOffset    -    numToRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
79	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  entryOffset  -  1,  numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  entryOffset  -  1,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  entryOffset  -  1,  numToRead);	  return    is.readAndClose(buf,    offset,    entryOffset    -    numToRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
80	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  1,  entryOffset  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  1,  entryOffset  -  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  1,  entryOffset  -  1);	  return    is.read(buf,    offset    +    1,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
81	[BUG]  [BUGGY]  return  is.readByte(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readByte(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readByte(buf,  offset,  numToRead,  hasHitEOF);	  return    is.readByte(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
82	[BUG]  [BUGGY]  return  is.readByte(buf,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readByte(buf,  entryOffset,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readByte(buf,  entryOffset,  numToRead);	  return    is.readByte(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
83	[BUG]  [BUGGY]  return  is.readByte(buf,  offset,  entryOffset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readByte(buf,  offset,  entryOffset  +  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readByte(buf,  offset,  entryOffset  +  numToRead);	  return    is.readByte(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
84	[BUG]  [BUGGY]  return  is.readByte(buf,  offset,  entryOffset  -  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readByte(buf,  offset,  entryOffset  -  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readByte(buf,  offset,  entryOffset  -  numToRead);	  return    is.readByte(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
85	[BUG]  [BUGGY]  return  is.readInt(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readInt(buf,  offset,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readInt(buf,  offset,  numToRead);	  return    is.readByte(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
86	[BUG]  [BUGGY]  entryOffset  =  entryOffset;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  =  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  =  entryOffset;	  if(entryOffset    >    access)    {    return    entryOffset;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
87	[BUG]  [BUGGY]  if(entryOffset  >=  entrySize)  {  return  entryOffset;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >=  entrySize)  {  return  entryOffset;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  >=  entrySize)  {  return  entryOffset;  }	  if(entryOffset    >    access)    {    return    entryOffset;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
88	[BUG]  [BUGGY]  if(entryOffset  ==  entrySize)  {  return  entryOffset;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  ==  entrySize)  {  return  entryOffset;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  ==  entrySize)  {  return  entryOffset;  }	  if(entryOffset    >    access)    {    return    entryOffset;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
89	[BUG]  [BUGGY]  if(entryOffset  <  access)  {  return  entryOffset;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  <  access)  {  return  entryOffset;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  <  access)  {  return  entryOffset;  }	  if(entryOffset    >    access)    {    return    entryOffset;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
90	[BUG]  [BUGGY]  if(entryOffset  <  access)  {  return  entrySize;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  <  access)  {  return  entrySize;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  <  access)  {  return  entrySize;  }	  if(entryOffset    >    access)    {    return    entryOffset;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
91	[BUG]  [BUGGY]  entryOffset  +=  numRecords;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  +=  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  +=  numRecords;	  entryOffset    +=    entrySize;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
92	[BUG]  [BUGGY]  entryOffset  -=  entrySize;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  -=  entrySize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  -=  entrySize;	  entryOffset    +=    entrySize;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
93	[BUG]  [BUGGY]  entryOffset  +=  totalRead;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  +=  totalRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  +=  totalRead;	  entryOffset    +=    entrySize;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
94	[BUG]  [BUGGY]  entryOffset  +=  numToRead;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  +=  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  +=  numToRead;	  entryOffset    +=    entrySize;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
95	[BUG]  [BUGGY]  entryOffset  +=  length;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  +=  length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  +=  length;	  entryOffset    +=    entrySize;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
96	[BUG]  [BUGGY]  entryOffset  /=  entrySize;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  /=  entrySize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  /=  entrySize;	  entryOffset    +=    entrySize;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
97	[BUG]  [BUGGY]  entryOffset  +=  numToSkip;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  +=  numToSkip;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  +=  numToSkip;	  entryOffset    +=    entrySize;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
98	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entrySize  +  numRecords);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entrySize  +  numRecords);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entrySize  +  numRecords);	  return    is.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
99	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entrySize,  numRecords);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entrySize,  numRecords);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entrySize,  numRecords);	  return    is.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
100	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  1,  entryOffset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  1,  entryOffset,  numToRead,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  1,  entryOffset,  numToRead,  hasHitEOF);	  return    is.read(buf,    offset    +    1,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
101	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  1,  totalRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  1,  totalRead,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  1,  totalRead,  hasHitEOF);	  return    is.read(buf,    offset    +    1,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
102	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  1,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  1,  entrySize,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  1,  entrySize,  hasHitEOF);	  return    is.read(buf,    offset    +    1,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
103	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  1,  entrySize,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  1,  entrySize,  numToRead,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  1,  entrySize,  numToRead,  hasHitEOF);	  return    is.read(buf,    offset    +    1,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
104	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  1,  hasHitEOF,  entryOffset);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  1,  hasHitEOF,  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  1,  hasHitEOF,  entryOffset);	  return    is.read(buf,    offset    +    1,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
105	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  1,  numToRead,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  1,  numToRead,  entryOffset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  1,  numToRead,  entryOffset,  hasHitEOF);	  return    is.read(buf,    offset    +    1,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
106	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset,  hasHitEOF  +  numRecords);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset,  hasHitEOF  +  numRecords);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset,  hasHitEOF  +  numRecords);	  return    is.read(buf,    offset,    entryOffset,    hasHitEOF    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
107	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset,  hasHitEOF  -  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset,  hasHitEOF  -  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset,  hasHitEOF  -  numToRead);	  return    is.read(buf,    offset,    entryOffset,    hasHitEOF    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
108	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset,  hasHitEOF  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset,  hasHitEOF  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset,  hasHitEOF  +  1);	  return    is.read(buf,    offset,    entryOffset,    hasHitEOF    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
109	[BUG]  [BUGGY]  return  is.read(buf,  offset,  numToRead,  hasHitEOF  +  entryOffset);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  numToRead,  hasHitEOF  +  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  numToRead,  hasHitEOF  +  entryOffset);	  return    is.read(buf,    offset,    entryOffset,    hasHitEOF    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
110	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset,  hasHitEOF  /  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset,  hasHitEOF  /  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset,  hasHitEOF  /  numToRead);	  return    is.read(buf,    offset,    entryOffset,    hasHitEOF    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
111	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset,  hasHitEOF  *  numToRead);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset,  hasHitEOF  *  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset,  hasHitEOF  *  numToRead);	  return    is.read(buf,    offset,    entryOffset,    hasHitEOF    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
112	[BUG]  [BUGGY]  int  padding  =  is.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  padding  =  is.read(buf,  offset,  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  padding  =  is.read(buf,  offset,  entryOffset);	  int    padding    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
113	[BUG]  [BUGGY]  int  padding  =  is.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  padding  =  is.read(buf,  offset,  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  padding  =  is.read(buf,  offset,  entrySize);	  int    padding    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
114	[BUG]  [BUGGY]  int  padding  =  is.read(buf,  offset,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  padding  =  is.read(buf,  offset,  entryOffset,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  padding  =  is.read(buf,  offset,  entryOffset,  numToRead);	  int    padding    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
115	[BUG]  [BUGGY]  int  padding  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  padding  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  padding  =  is.read(buf,  offset,  numToRead,  hasHitEOF);	  int    padding    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
116	[BUG]  [BUGGY]  int  padding  =  is.read(buf,  offset,  entryOffset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  padding  =  is.read(buf,  offset,  entryOffset  +  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  padding  =  is.read(buf,  offset,  entryOffset  +  numToRead);	  int    padding    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
117	[BUG]  [BUGGY]  int  padding  =  is.read(buf,  offset,  entryOffset  -  numToRead);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  padding  =  is.read(buf,  offset,  entryOffset  -  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  padding  =  is.read(buf,  offset,  entryOffset  -  numToRead);	  int    padding    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
118	[BUG]  [BUGGY]  byte  padding  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  byte  padding  =  is.read(buf,  offset,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	byte  padding  =  is.read(buf,  offset,  numToRead);	  int    padding    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
119	[BUG]  [BUGGY]  return  is.read(buf,  offset  -  1,  entryOffset);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  -  1,  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  -  1,  entryOffset);	  return    is.read(buf,    offset    -    1,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
120	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset  -  1,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset  -  1,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset  -  1,  numToRead);	  return    is.read(buf,    offset    -    1,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
121	[BUG]  [BUGGY]  return  is.read(buf,  offset  -  1,  entryOffset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  -  1,  entryOffset  +  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  -  1,  entryOffset  +  numToRead);	  return    is.read(buf,    offset    -    1,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
122	[BUG]  [BUGGY]  return  is.read(buf,  offset  -  1,  entrySize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  -  1,  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  -  1,  entrySize);	  return    is.read(buf,    offset    -    1,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
123	[BUG]  [BUGGY]  return  is.read(buf,  offset,  len  -  1,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  len  -  1,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  len  -  1,  numToRead);	  return    is.read(buf,    offset    -    1,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
124	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset  -  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset  -  numToRead,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset  -  numToRead,  hasHitEOF);	  return    is.read(buf,    offset,    entryOffset    -    numToRead);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
125	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entrySize  -  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entrySize  -  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entrySize  -  numToRead);	  return    is.read(buf,    offset,    entryOffset    -    numToRead);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
126	[BUG]  [BUGGY]  return  is.read(buf,  offset,  numToRead  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  numToRead  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  numToRead  -  entryOffset);	  return    is.read(buf,    offset,    entryOffset    -    numToRead);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
127	[BUG]  [BUGGY]  return  is.read(buf,  offset,  numToRead,  entryOffset  -  numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  numToRead,  entryOffset  -  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  numToRead,  entryOffset  -  numToRead);	  return    is.read(buf,    offset,    entryOffset    -    numToRead);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
128	[BUG]  [BUGGY]  return  is.read(buf,  offset  /  entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  /  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  /  entryOffset);	  return    is.read(buf,    offset    /    numToRead);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
129	[BUG]  [BUGGY]  return  is.read(buf,  offset  /  entrySize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  /  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  /  entrySize);	  return    is.read(buf,    offset    /    numToRead);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
130	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset  /  numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset  /  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset  /  numToRead);	  return    is.read(buf,    offset    /    numToRead);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
131	[BUG]  [BUGGY]  return  is.read(buf,  offset  *  numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  *  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  *  numToRead);	  return    is.read(buf,    offset    /    numToRead);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
132	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  entryOffset);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  ch  =  is.read(buf,  offset,  entryOffset);  hasHitEOF  =  true;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  ch  =  is.read(buf,  offset,  entryOffset);  hasHitEOF  =  true;	  int    ch    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
133	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  entrySize);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  ch  =  is.read(buf,  offset,  entrySize);  hasHitEOF  =  true;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  ch  =  is.read(buf,  offset,  entrySize);  hasHitEOF  =  true;	  int    ch    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
134	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  false;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  false;	  int    ch    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
135	[BUG]  [BUGGY]  Integer  ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  Integer  ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	Integer  ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;	  int    ch    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
136	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  len);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  ch  =  is.read(buf,  offset,  len);  hasHitEOF  =  true;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  ch  =  is.read(buf,  offset,  len);  hasHitEOF  =  true;	  int    ch    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
137	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;	  int    ch    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
138	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  numToRead,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  numToRead,  entryOffset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  numToRead,  entryOffset,  hasHitEOF);	  return    is.read(buf,    offset    +    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
139	[BUG]  [BUGGY]  return  hasHitEOF.read(buf,  offset  +  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF.read(buf,  offset  +  numToRead,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  hasHitEOF.read(buf,  offset  +  numToRead,  hasHitEOF);	  return    is.read(buf,    offset    +    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
140	[BUG]  [BUGGY]  return  is.readByte(buf,  offset  +  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readByte(buf,  offset  +  numToRead,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readByte(buf,  offset  +  numToRead,  hasHitEOF);	  return    is.read(buf,    offset    +    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
141	[BUG]  [BUGGY]  return  is.read(buf,  offset  -  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  -  numToRead,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  -  numToRead,  hasHitEOF);	  return    is.read(buf,    offset    +    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
142	[BUG]  [BUGGY]  entryOffset  =  numRecords;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  =  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  =  numRecords;	  entryOffset    =    entrySize;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
143	[BUG]  [BUGGY]  entryOffset  =  0;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  =  0;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  =  0;	  entryOffset    =    entrySize;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
144	[BUG]  [BUGGY]  entryOffset  =  entrySize  +  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  =  entrySize  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  =  entrySize  +  1;	  entryOffset    =    entrySize;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
145	[BUG]  [BUGGY]  entryOffset  =  numToRead;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  =  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  =  numToRead;	  entryOffset    =    entrySize;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
146	[BUG]  [BUGGY]  entryOffset  =  offset;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  =  offset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  =  offset;	  entryOffset    =    entrySize;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
147	[BUG]  [BUGGY]  entryOffset  =  totalRead;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  =  totalRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  =  totalRead;	  entryOffset    =    entrySize;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
148	[BUG]  [BUGGY]  return  hasHitEOF  &&  is.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  is.read(buf,  offset,  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  hasHitEOF  &&  is.read(buf,  offset,  entrySize);	  return    hasHitEOF    &&    is.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
149	[BUG]  [BUGGY]  return  hasHitEOF  &&  is.read(buf,  offset,  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  is.read(buf,  offset,  entryOffset  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  hasHitEOF  &&  is.read(buf,  offset,  entryOffset  +  1);	  return    hasHitEOF    &&    is.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
150	[BUG]  [BUGGY]  return  hasHitEOF  &&  is.read(buf,  offset,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  is.read(buf,  offset,  entryOffset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  hasHitEOF  &&  is.read(buf,  offset,  entryOffset,  hasHitEOF);	  return    hasHitEOF    &&    is.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
151	[BUG]  [BUGGY]  return  hasHitEOF  &&  is.read(buf,  offset,  entryOffset  +  numRecords);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  is.read(buf,  offset,  entryOffset  +  numRecords);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  hasHitEOF  &&  is.read(buf,  offset,  entryOffset  +  numRecords);	  return    hasHitEOF    &&    is.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
152	[BUG]  [BUGGY]  return  hasHitEOF  &&  is.read(buf,  offset,  entryOffset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  is.read(buf,  offset,  entryOffset  +  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  hasHitEOF  &&  is.read(buf,  offset,  entryOffset  +  numToRead);	  return    hasHitEOF    &&    is.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
153	[BUG]  [BUGGY]  return  hasHitEOF  &&  is.read(buf,  offset,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  is.read(buf,  offset,  entryOffset,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  hasHitEOF  &&  is.read(buf,  offset,  entryOffset,  numToRead);	  return    hasHitEOF    &&    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
154	[BUG]  [BUGGY]  return  hasHitEOF  &&  is.readByte(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  is.readByte(buf,  offset,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  hasHitEOF  &&  is.readByte(buf,  offset,  numToRead);	  return    hasHitEOF    &&    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
155	[BUG]  [BUGGY]  return  is.readByte(buf,  offset  +  1,  entryOffset);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readByte(buf,  offset  +  1,  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readByte(buf,  offset  +  1,  entryOffset);	  return    is.readByte(buf,    offset    +    1,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
156	[BUG]  [BUGGY]  return  is.readByte(buf,  offset  +  1,  entrySize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readByte(buf,  offset  +  1,  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readByte(buf,  offset  +  1,  entrySize);	  return    is.readByte(buf,    offset    +    1,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
157	[BUG]  [BUGGY]  return  is.readByte(buf,  offset  +  1,  entryOffset  -  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readByte(buf,  offset  +  1,  entryOffset  -  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readByte(buf,  offset  +  1,  entryOffset  -  numToRead);	  return    is.readByte(buf,    offset    +    1,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
158	[BUG]  [BUGGY]  return  is.readByte(buf,  offset  +  1,  totalRead);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readByte(buf,  offset  +  1,  totalRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readByte(buf,  offset  +  1,  totalRead);	  return    is.readByte(buf,    offset    +    1,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
159	[BUG]  [BUGGY]  return  is.readByte(buf,  offset  +  1,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readByte(buf,  offset  +  1,  numToRead,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readByte(buf,  offset  +  1,  numToRead,  hasHitEOF);	  return    is.readByte(buf,    offset    +    1,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
160	[BUG]  [BUGGY]  return  is.readByte(buf,  offset  -  1,  numToRead);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readByte(buf,  offset  -  1,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readByte(buf,  offset  -  1,  numToRead);	  return    is.readByte(buf,    offset    +    1,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
161	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset,  0);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset,  0);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset,  0);	  return    is.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
162	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entrySize,  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entrySize,  0);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entrySize,  0);	  return    is.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
163	[BUG]  [BUGGY]  if(entryOffset  <  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  i++)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  <  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  i++)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  <  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  i++)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    offset;    i    <    numRecords;    i++)    {    buffer[i]    =    is.read(buf,    offset,    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
164	[BUG]  [BUGGY]  for(int  i  =  offset;  i  <  numRecords;  i++)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  for(int  i  =  offset;  i  <  numRecords;  i++)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	for(int  i  =  offset;  i  <  numRecords;  i++)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    offset;    i    <    numRecords;    i++)    {    buffer[i]    =    is.read(buf,    offset,    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
165	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  numRecords  =  is.read(buf,  offset,  numToRead);	  if(entryOffset    >    entrySize)    {    for(int    i    =    offset;    i    <    numRecords;    i++)    {    buffer[i]    =    is.read(buf,    offset,    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
166	[BUG]  [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  i++)  {  buffer[i]  =  is.read(buf,  offset,  0);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  i++)  {  buffer[i]  =  is.read(buf,  offset,  0);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  >  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  i++)  {  buffer[i]  =  is.read(buf,  offset,  0);  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    offset;    i    <    numRecords;    i++)    {    buffer[i]    =    is.read(buf,    offset,    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
167	[BUG]  [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  i++)  {  buffer[i]  =  is.read(buf,  offset  +  1,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  i++)  {  buffer[i]  =  is.read(buf,  offset  +  1,  numToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  >  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  i++)  {  buffer[i]  =  is.read(buf,  offset  +  1,  numToRead);  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    offset;    i    <    numRecords;    i++)    {    buffer[i]    =    is.read(buf,    offset,    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
168	[BUG]  [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  offset;  i  <  numRecords.length;  i++)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  offset;  i  <  numRecords.length;  i++)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  >  entrySize)  {  for(int  i  =  offset;  i  <  numRecords.length;  i++)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    offset;    i    <    numRecords;    i++)    {    buffer[i]    =    is.read(buf,    offset,    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
169	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset  -  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset  -  entrySize,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset  -  entrySize,  hasHitEOF);	  return    is.read(buf,    offset,    entryOffset    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
170	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset  +  entrySize);	  return    is.read(buf,    offset,    entryOffset    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
171	[BUG]  [BUGGY]  return  is.read(buf,  offset,  numToRead  -  entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  numToRead  -  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  numToRead  -  entrySize);	  return    is.read(buf,    offset,    entryOffset    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
172	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entrySize  -  numRecords);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entrySize  -  numRecords);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entrySize  -  numRecords);	  return    is.read(buf,    offset,    entryOffset    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
173	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  entrySize,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  entrySize,  numToRead);	  return    is.read(buf,    offset    +    entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
174	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  entrySize,  hasHitEOF,  numRecords);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  entrySize,  hasHitEOF,  numRecords);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  entrySize,  hasHitEOF,  numRecords);	  return    is.read(buf,    offset    +    entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
175	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  entrySize,  hasHitEOF,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  entrySize,  hasHitEOF,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  entrySize,  hasHitEOF,  hasHitEOF);	  return    is.read(buf,    offset    +    entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
176	[BUG]  [BUGGY]  return  hasHitEOF  &&  is.read(buf,  offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  is.read(buf,  offset  +  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  hasHitEOF  &&  is.read(buf,  offset  +  numToRead);	  return    hasHitEOF    ||    is.read(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
177	[BUG]  [BUGGY]  return  hasHitEOF  ||  is.read(buf,  offset  +  entryOffset);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  ||  is.read(buf,  offset  +  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  hasHitEOF  ||  is.read(buf,  offset  +  entryOffset);	  return    hasHitEOF    ||    is.read(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
178	[BUG]  [BUGGY]  return  hasHitEOF  ||  is.read(buf,  offset,  entryOffset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  ||  is.read(buf,  offset,  entryOffset  +  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  hasHitEOF  ||  is.read(buf,  offset,  entryOffset  +  numToRead);	  return    hasHitEOF    ||    is.read(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
179	[BUG]  [BUGGY]  return  hasHitEOF  ||  is.read(buf,  offset  +  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  ||  is.read(buf,  offset  +  entryOffset,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  hasHitEOF  ||  is.read(buf,  offset  +  entryOffset,  numToRead);	  return    hasHitEOF    ||    is.read(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
180	[BUG]  [BUGGY]  return  hasHitEOF?  is.read(buf,  offset  +  numToRead):  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF?  is.read(buf,  offset  +  numToRead):  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  hasHitEOF?  is.read(buf,  offset  +  numToRead):  hasHitEOF;	  return    hasHitEOF    ||    is.read(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
181	[BUG]  [BUGGY]  if(entryOffset  <  numRecords)  {  return  entryOffset;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  <  numRecords)  {  return  entryOffset;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  <  numRecords)  {  return  entryOffset;  }	  if(entryOffset    <    entrySize)    {    return    entryOffset;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
182	[BUG]  [BUGGY]  if(entryOffset  <  numToRead)  {  return  entryOffset;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  <  numToRead)  {  return  entryOffset;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  <  numToRead)  {  return  entryOffset;  }	  if(entryOffset    <    entrySize)    {    return    entryOffset;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
183	[BUG]  [BUGGY]  entrySize  =  entryOffset;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entrySize  =  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entrySize  =  entryOffset;	  if(entryOffset    <    entrySize)    {    return    entryOffset;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
184	[BUG]  [BUGGY]  if(entryOffset  <  0)  {  return  entryOffset;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  <  0)  {  return  entryOffset;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  <  0)  {  return  entryOffset;  }	  if(entryOffset    <    entrySize)    {    return    entryOffset;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
185	[BUG]  [BUGGY]  if(entryOffset  <  numToRead)  {  return  entrySize;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  <  numToRead)  {  return  entrySize;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  <  numToRead)  {  return  entrySize;  }	  if(entryOffset    <    entrySize)    {    return    entryOffset;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
186	[BUG]  [BUGGY]  return  is.read(buf,  offset,  numToRead  +  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  numToRead  +  entryOffset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  numToRead  +  entryOffset,  hasHitEOF);	  return    is.read(buf,    offset,    entryOffset    +    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
187	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  totalRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  totalRead,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset  +  totalRead,  hasHitEOF);	  return    is.read(buf,    offset,    entryOffset    +    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
188	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  count(numToRead),  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  count(numToRead),  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset  +  count(numToRead),  hasHitEOF);	  return    is.read(buf,    offset,    entryOffset    +    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
189	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  length,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  length,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset  +  length,  hasHitEOF);	  return    is.read(buf,    offset,    entryOffset    +    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
190	[BUG]  [BUGGY]  return  is.read(buf,  offset,  hasHitEOF  +  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  hasHitEOF  +  entryOffset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  hasHitEOF  +  entryOffset,  hasHitEOF);	  return    is.read(buf,    offset,    entryOffset    +    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
191	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset  -  entryOffset);	  return    is.read(buf,    offset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
192	[BUG]  [BUGGY]  return  is.read(buf,  offset  -  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  -  entryOffset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  -  entryOffset,  hasHitEOF);	  return    is.read(buf,    offset    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
193	[BUG]  [BUGGY]  return  is.read(buf,  offset,  numToRead  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  numToRead  -  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  numToRead  -  1);	  return    is.read(buf,    offset,    entryOffset    -    1);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
194	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entrySize  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entrySize  -  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entrySize  -  1);	  return    is.read(buf,    offset,    entryOffset    -    1);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
195	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset,  hasHitEOF  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset,  hasHitEOF  -  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset,  hasHitEOF  -  1);	  return    is.read(buf,    offset,    entryOffset    -    1);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
196	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  entrySize,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  entrySize,  hasHitEOF);	  return    is.readAndClose(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
197	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  entryOffset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  entryOffset,  hasHitEOF);	  return    is.readAndClose(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
198	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  entryOffset  +  numRecords);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  entryOffset  +  numRecords);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  entryOffset  +  numRecords);	  return    is.readAndClose(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
199	[BUG]  [BUGGY]  if(entryOffset  <  entrySize)  {  return  hasHitEOF;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  <  entrySize)  {  return  hasHitEOF;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  <  entrySize)  {  return  hasHitEOF;  }	  if(entryOffset    >    entrySize)    {    return    hasHitEOF;    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
200	[BUG]  [BUGGY]  if(entryOffset  >=  entrySize)  {  return  hasHitEOF;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >=  entrySize)  {  return  hasHitEOF;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  >=  entrySize)  {  return  hasHitEOF;  }	  if(entryOffset    >    entrySize)    {    return    hasHitEOF;    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
201	[BUG]  [BUGGY]  if(entryOffset  ==  entrySize)  {  return  hasHitEOF;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  ==  entrySize)  {  return  hasHitEOF;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  ==  entrySize)  {  return  hasHitEOF;  }	  if(entryOffset    >    entrySize)    {    return    hasHitEOF;    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
202	[BUG]  [BUGGY]  if(entryOffset!=  entrySize)  {  return  hasHitEOF;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset!=  entrySize)  {  return  hasHitEOF;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset!=  entrySize)  {  return  hasHitEOF;  }	  if(entryOffset    >    entrySize)    {    return    hasHitEOF;    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
203	[BUG]  [BUGGY]  ||  entryOffset  >  entrySize)  {  return  hasHitEOF;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  ||  entryOffset  >  entrySize)  {  return  hasHitEOF;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	||  entryOffset  >  entrySize)  {  return  hasHitEOF;  }	  if(entryOffset    >    entrySize)    {    return    hasHitEOF;    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
204	[BUG]  [BUGGY]  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	hasHitEOF;	  if(entryOffset    >    entrySize)    {    return    hasHitEOF;    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
205	[BUG]  [BUGGY]  entrySize  <  =  entryOffset)  {  return  hasHitEOF;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entrySize  <  =  entryOffset)  {  return  hasHitEOF;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entrySize  <  =  entryOffset)  {  return  hasHitEOF;  }	  entrySize    >    entryOffset)    {    return    hasHitEOF;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
206	[BUG]  [BUGGY]  entrySize  >  entryOffset  +  1)  {  return  hasHitEOF;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entrySize  >  entryOffset  +  1)  {  return  hasHitEOF;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entrySize  >  entryOffset  +  1)  {  return  hasHitEOF;  }	  entrySize    >    entryOffset)    {    return    hasHitEOF;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
207	[BUG]  [BUGGY]  entrySize  >  entryOffset.length)  {  return  hasHitEOF;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entrySize  >  entryOffset.length)  {  return  hasHitEOF;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entrySize  >  entryOffset.length)  {  return  hasHitEOF;  }	  entrySize    >    entryOffset)    {    return    hasHitEOF;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
208	[BUG]  [BUGGY]  entrySize  >  numRecords)  {  return  hasHitEOF;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entrySize  >  numRecords)  {  return  hasHitEOF;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entrySize  >  numRecords)  {  return  hasHitEOF;  }	  entrySize    >    entryOffset)    {    return    hasHitEOF;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
209	[BUG]  [BUGGY]  entrySize  >  0)  {  return  hasHitEOF;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entrySize  >  0)  {  return  hasHitEOF;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entrySize  >  0)  {  return  hasHitEOF;  }	  entrySize    >    entryOffset)    {    return    hasHitEOF;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
210	[BUG]  [BUGGY]  entrySize  +=  entryOffset)  {  return  hasHitEOF;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entrySize  +=  entryOffset)  {  return  hasHitEOF;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entrySize  +=  entryOffset)  {  return  hasHitEOF;  }	  entrySize    >    entryOffset)    {    return    hasHitEOF;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
211	[BUG]  [BUGGY]  if(entryOffset  <  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  <  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  <  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    offset;    i    <    numRecords;    ++i)    {    buffer[i]    =    is.read(buf,    offset,    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
212	[BUG]  [BUGGY]  if(entryOffset  >=  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >=  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  >=  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    offset;    i    <    numRecords;    ++i)    {    buffer[i]    =    is.read(buf,    offset,    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
213	[BUG]  [BUGGY]  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	for(int  i  =  offset;  i  <  numRecords;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    offset;    i    <    numRecords;    ++i)    {    buffer[i]    =    is.read(buf,    offset,    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
214	[BUG]  [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  0);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  0);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  >  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  0);  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    offset;    i    <    numRecords;    ++i)    {    buffer[i]    =    is.read(buf,    offset,    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
215	[BUG]  [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  buffer[i]  =  is.read(buf,  offset  +  1,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  buffer[i]  =  is.read(buf,  offset  +  1,  numToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  >  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  buffer[i]  =  is.read(buf,  offset  +  1,  numToRead);  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    offset;    i    <    numRecords;    ++i)    {    buffer[i]    =    is.read(buf,    offset,    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
216	[BUG]  [BUGGY]  int  padding  =  is.read(buf,  offset,  entryOffset);  hasHitEOF  =  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  padding  =  is.read(buf,  offset,  entryOffset);  hasHitEOF  =  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  padding  =  is.read(buf,  offset,  entryOffset);  hasHitEOF  =  hasHitEOF;	  int    padding    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
217	[BUG]  [BUGGY]  int  padding  =  is.read(buf,  offset,  entrySize);  hasHitEOF  =  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  padding  =  is.read(buf,  offset,  entrySize);  hasHitEOF  =  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  padding  =  is.read(buf,  offset,  entrySize);  hasHitEOF  =  hasHitEOF;	  int    padding    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
218	[BUG]  [BUGGY]  byte  padding  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  byte  padding  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	byte  padding  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  hasHitEOF;	  int    padding    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
219	[BUG]  [BUGGY]  int  padding  =  is.readByte(buf,  offset,  numToRead);  hasHitEOF  =  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  padding  =  is.readByte(buf,  offset,  numToRead);  hasHitEOF  =  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  padding  =  is.readByte(buf,  offset,  numToRead);  hasHitEOF  =  hasHitEOF;	  int    padding    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
220	[BUG]  [BUGGY]  Integer  padding  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  Integer  padding  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	Integer  padding  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  hasHitEOF;	  int    padding    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
221	[BUG]  [BUGGY]  return  is.read(buf,  offset,  numToRead,  hasHitEOF,  entryOffset);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  numToRead,  hasHitEOF,  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  numToRead,  hasHitEOF,  entryOffset);	  return    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
222	[BUG]  [BUGGY]  return  is.read(buf,  offset,  totalRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  totalRead,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  totalRead,  hasHitEOF);	  return    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
223	[BUG]  [BUGGY]  return  is.read(buf,  offset,  len,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  len,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  len,  hasHitEOF);	  return    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
224	[BUG]  [BUGGY]  return  is.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  numToRead  +  1,  hasHitEOF);	  return    is.read(buf,    offset,    entryOffset    +    1,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
225	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  1,  totalRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  1,  totalRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset  +  1,  totalRead);	  return    is.read(buf,    offset,    entryOffset    +    1,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
226	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  1,  numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  1,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset  +  1,  numToRead);	  return    is.read(buf,    offset,    entryOffset    +    1,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
227	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  1,  hasHitEOF,  numRecords);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  1,  hasHitEOF,  numRecords);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset  +  1,  hasHitEOF,  numRecords);	  return    is.read(buf,    offset,    entryOffset    +    1,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
228	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  1,  hasHitEOF,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  1,  hasHitEOF,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset  +  1,  hasHitEOF,  hasHitEOF);	  return    is.read(buf,    offset,    entryOffset    +    1,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
229	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entrySize  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entrySize  +  1,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entrySize  +  1,  hasHitEOF);	  return    is.read(buf,    offset,    entryOffset    +    1,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
230	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  entryOffset  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  entryOffset  +  1);	  return    is.readAndClose(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
231	[BUG]  [BUGGY]  if(entryOffset  <  available)  {  return  entryOffset;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  <  available)  {  return  entryOffset;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  <  available)  {  return  entryOffset;  }	  if(entryOffset    >    available)    {    return    entryOffset;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
232	[BUG]  [BUGGY]  if(entryOffset  >  available)  {  return  entrySize;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >  available)  {  return  entrySize;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  >  available)  {  return  entrySize;  }	  if(entryOffset    >    available)    {    return    entryOffset;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
233	[BUG]  [BUGGY]  if(entryOffset  >=  available)  {  return  entryOffset;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >=  available)  {  return  entryOffset;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  >=  available)  {  return  entryOffset;  }	  if(entryOffset    >    available)    {    return    entryOffset;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
234	[BUG]  [BUGGY]  if(entryOffset  ==  available)  {  return  entryOffset;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  ==  available)  {  return  entryOffset;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  ==  available)  {  return  entryOffset;  }	  if(entryOffset    >    available)    {    return    entryOffset;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
235	[BUG]  [BUGGY]  if(entryOffset  <  available)  {  return  entrySize;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  <  available)  {  return  entrySize;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  <  available)  {  return  entrySize;  }	  if(entryOffset    >    available)    {    return    entryOffset;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
236	[BUG]  [BUGGY]  if(entryOffset!=  available)  {  return  entryOffset;  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset!=  available)  {  return  entryOffset;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset!=  available)  {  return  entryOffset;  }	  if(entryOffset    >    available)    {    return    entryOffset;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
237	[BUG]  [BUGGY]  if(entryOffset  >  available)  {  return  totalRead;  }  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >  available)  {  return  totalRead;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  >  available)  {  return  totalRead;  }	  if(entryOffset    >    available)    {    return    entryOffset;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
238	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entrySize  +  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entrySize  +  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entrySize  +  numToRead);	  return    is.read(buf,    offset,    totalRead    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
239	[BUG]  [BUGGY]  return  is.read(buf,  offset,  numToRead  +  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  numToRead  +  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  numToRead  +  numToRead);	  return    is.read(buf,    offset,    totalRead    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
240	[BUG]  [BUGGY]  return  is.read(buf,  offset,  totalRead  +  entryOffset);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  totalRead  +  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  totalRead  +  entryOffset);	  return    is.read(buf,    offset,    totalRead    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
241	[BUG]  [BUGGY]  return  is.read(buf,  offset,  len  +  numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  len  +  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  len  +  numToRead);	  return    is.read(buf,    offset,    totalRead    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
242	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entries[offset  +  numToRead]);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entries[offset  +  numToRead]);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entries[offset  +  numToRead]);	  return    is.read(buf,    offset,    totalRead    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
243	[BUG]  [BUGGY]  return  entryOffset  -  offset;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  offset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  entryOffset  -  offset;	  return    entryOffset    -    totalRead;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
244	[BUG]  [BUGGY]  return  entryOffset  -  numToRead;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  entryOffset  -  numToRead;	  return    entryOffset    -    totalRead;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
245	[BUG]  [BUGGY]  return  entryOffset  -  totalRead  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  totalRead  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  entryOffset  -  totalRead  +  1;	  return    entryOffset    -    totalRead;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
246	[BUG]  [BUGGY]  return  entryOffset  -  totalRead.length;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  totalRead.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  entryOffset  -  totalRead.length;	  return    entryOffset    -    totalRead;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
247	[BUG]  [BUGGY]  return  entryOffset  /  totalRead;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  /  totalRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  entryOffset  /  totalRead;	  return    entryOffset    -    totalRead;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
248	[BUG]  [BUGGY]  return  entrySize  -  totalRead;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  -  totalRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  entrySize  -  totalRead;	  return    entryOffset    -    totalRead;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
249	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  numToRead,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  numToRead,  entryOffset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  numToRead,  entryOffset,  hasHitEOF);	  return    is.readAndClose(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
250	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  numToRead,  hasHitEOF,  entryOffset);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  numToRead,  hasHitEOF,  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  numToRead,  hasHitEOF,  entryOffset);	  return    is.readAndClose(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
251	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  entrySize,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  entrySize,  numToRead,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  entrySize,  numToRead,  hasHitEOF);	  return    is.readAndClose(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
252	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  numToRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  numToRead,  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  numToRead,  entryOffset);	  return    is.readAndClose(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
253	[BUG]  [BUGGY]  entryOffset  >  entrySize,  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  >  entrySize,  hasHitEOF)  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  >  entrySize,  hasHitEOF)  {	  entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
254	[BUG]  [BUGGY]  entryOffset  >  entrySize  &&  is.read(buf,  offset,  numToRead));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  >  entrySize  &&  is.read(buf,  offset,  numToRead));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  >  entrySize  &&  is.read(buf,  offset,  numToRead));	  entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
255	[BUG]  [BUGGY]  entryOffset  >  entrySize  &&  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  >  entrySize  &&  is.read(buf,  offset,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  >  entrySize  &&  is.read(buf,  offset,  numToRead);	  entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
256	[BUG]  [BUGGY]  entryOffset  <  entrySize)  {  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  <  entrySize)  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  <  entrySize)  {	  entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
257	[BUG]  [BUGGY]  entryOffset  >  entrySize  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  >  entrySize  &&  hasHitEOF)  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  >  entrySize  &&  hasHitEOF)  {	  entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
258	[BUG]  [BUGGY]  entryOffset  >  entrySize.length)  {  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  >  entrySize.length)  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  >  entrySize.length)  {	  entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
259	[BUG]  [BUGGY]  return  is.readAndClose(record,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(record,  offset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(record,  offset,  hasHitEOF);	  return    is.readAndClose(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
260	[BUG]  [BUGGY]  return  is.readAndClose(entryOffset,  buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(entryOffset,  buf,  offset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(entryOffset,  buf,  offset,  hasHitEOF);	  return    is.readAndClose(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
261	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  entryOffset  +  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  entryOffset  +  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  entryOffset  +  hasHitEOF);	  return    is.readAndClose(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
262	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  entryOffset);  hasHitEOF  =  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  ch  =  is.read(buf,  offset,  entryOffset);  hasHitEOF  =  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  ch  =  is.read(buf,  offset,  entryOffset);  hasHitEOF  =  hasHitEOF;	  int    ch    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
263	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  entrySize);  hasHitEOF  =  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  ch  =  is.read(buf,  offset,  entrySize);  hasHitEOF  =  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  ch  =  is.read(buf,  offset,  entrySize);  hasHitEOF  =  hasHitEOF;	  int    ch    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
264	[BUG]  [BUGGY]  Integer  ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  Integer  ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	Integer  ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  hasHitEOF;	  int    ch    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
265	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  entryOffset);  hasHitEOF  =  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  ch  =  is.read(buf,  offset,  entryOffset);  hasHitEOF  =  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	ch  =  is.read(buf,  offset,  entryOffset);  hasHitEOF  =  hasHitEOF;	  int    ch    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
266	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  hasHitEOF;	  int    ch    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
267	[BUG]  [BUGGY]  char  ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  char  ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	char  ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  hasHitEOF;	  int    ch    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
268	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  entryOffset,  0);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  entryOffset,  0);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  entryOffset,  0);	  return    is.readAndClose(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
269	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  entrySize,  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  entrySize,  0);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  entrySize,  0);	  return    is.readAndClose(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
270	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  entryOffset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  entryOffset,  numToRead,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  entryOffset,  numToRead,  hasHitEOF);	  return    is.readAndClose(buf,    offset,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
271	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  entrySize,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  entrySize,  numToRead);	  return    is.readAndClose(buf,    offset,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
272	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  numToRead,  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  numToRead,  entrySize);	  return    is.readAndClose(buf,    offset,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
273	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  entryOffset,  totalRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  entryOffset,  totalRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  entryOffset,  totalRead);	  return    is.readAndClose(buf,    offset,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
274	[BUG]  [BUGGY]  return  hasHitEOF  &&  hasHitEOF;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  hasHitEOF  &&  hasHitEOF;	  return    hasHitEOF    ||    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
275	[BUG]  [BUGGY]  return  hasHitEOF  ||  entryOffset;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  ||  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  hasHitEOF  ||  entryOffset;	  return    hasHitEOF    ||    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
276	[BUG]  [BUGGY]  return  entryOffset  ||  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  ||  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  entryOffset  ||  hasHitEOF;	  return    hasHitEOF    ||    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
277	[BUG]  [BUGGY]  return  hasHitEOF  ||  is.read(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  ||  is.read(buf,  offset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  hasHitEOF  ||  is.read(buf,  offset,  hasHitEOF);	  return    hasHitEOF    ||    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
278	[BUG]  [BUGGY]  return  is.read(buf,  offset,  len  -  numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  len  -  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  len  -  numToRead);	  return    is.read(buf,    offset    -    numToRead);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
279	[BUG]  [BUGGY]  return  is.read(buf,  offset,  totalRead  -  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  totalRead  -  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  totalRead  -  numToRead);	  return    is.read(buf,    offset    -    numToRead);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
280	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  1,  entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  1,  entrySize,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  1,  entrySize,  numToRead);	  return    is.read(buf,    offset    +    1,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
281	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  1,  hasHitEOF,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  1,  hasHitEOF,  entryOffset,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  1,  hasHitEOF,  entryOffset,  numToRead);	  return    is.read(buf,    offset    +    1,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
282	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  1,  totalRead,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  1,  totalRead,  entryOffset,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  1,  totalRead,  entryOffset,  numToRead);	  return    is.read(buf,    offset    +    1,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
283	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  1,  totalRead,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  1,  totalRead,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  1,  totalRead,  numToRead);	  return    is.read(buf,    offset    +    1,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
284	[BUG]  [BUGGY]  return  is.read(buf,  offset,  numToRead  +  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  numToRead  +  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  numToRead  +  entrySize);	  return    is.read(buf,    offset,    numToRead    +    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
285	[BUG]  [BUGGY]  return  is.read(buf,  offset,  hasHitEOF  +  entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  hasHitEOF  +  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  hasHitEOF  +  entryOffset);	  return    is.read(buf,    offset,    numToRead    +    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
286	[BUG]  [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	hasHitEOF  =  is.read(buf,  offset,  numToRead);	  i.remove();    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
287	[BUG]  [BUGGY]  n.remove();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  n.remove();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	n.remove();  hasHitEOF  =  is.read(buf,  offset,  numToRead);	  i.remove();    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
288	[BUG]  [BUGGY]  if(i.hasNext())  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(i.hasNext())  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(i.hasNext())  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  }	  i.remove();    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
289	[BUG]  [BUGGY]  if(!hasHitEOF)  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(!hasHitEOF)  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(!hasHitEOF)  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  }	  i.remove();    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
290	[BUG]  [BUGGY]  if(entryOffset  ==  0)  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  ==  0)  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  ==  0)  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  }	  i.remove();    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
291	[BUG]  [BUGGY]  if(entryOffset!=  0)  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset!=  0)  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset!=  0)  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  }	  i.remove();    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
292	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  entryOffset  +  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  entryOffset  +  numToRead,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  entryOffset  +  numToRead,  hasHitEOF);	  return    is.readAndClose(buf,    offset,    entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
293	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  entryOffset,  hasHitEOF  +  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  entryOffset,  hasHitEOF  +  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  entryOffset,  hasHitEOF  +  numToRead);	  return    is.readAndClose(buf,    offset,    entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
294	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  entrySize  +  numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  entrySize  +  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  entrySize  +  numToRead);	  return    is.readAndClose(buf,    offset,    entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
295	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  1,  entryOffset  -  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  1,  entryOffset  -  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  1,  entryOffset  -  hasHitEOF);	  return    is.read(buf,    offset    +    1,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
296	[BUG]  [BUGGY]  return  is.readByte(buf,  offset  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readByte(buf,  offset  +  1,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readByte(buf,  offset  +  1,  hasHitEOF);	  return    is.read(buf,    offset    +    1,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
297	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  numRecords,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  numRecords,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset  +  numRecords,  hasHitEOF);	  return    is.read(buf,    offset,    entryOffset    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
298	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset  -  numRecords);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset  -  numRecords);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset  -  numRecords);	  return    is.read(buf,    offset,    entryOffset    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
299	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  1,  totalRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  1,  totalRead,  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  1,  totalRead,  entryOffset);	  return    is.read(buf,    offset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
300	[BUG]  [BUGGY]  return  entryOffset  +  numToRead  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  numToRead  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  entryOffset  +  numToRead  +  1;	  return    entryOffset    +    numToRead;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
301	[BUG]  [BUGGY]  return  entryOffset  /  numToRead;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  /  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  entryOffset  /  numToRead;	  return    entryOffset    +    numToRead;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
302	[BUG]  [BUGGY]  return  entryOffset  +  numToRead  +  length;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  numToRead  +  length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  entryOffset  +  numToRead  +  length;	  return    entryOffset    +    numToRead;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
303	[BUG]  [BUGGY]  entryOffset  <  entrySize)  {  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  <  entrySize)  {  hasHitEOF  =  true;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  <  entrySize)  {  hasHitEOF  =  true;	  entryOffset    >    entrySize)    {    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
304	[BUG]  [BUGGY]  entryOffset  >  0)  {  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  >  0)  {  hasHitEOF  =  true;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  >  0)  {  hasHitEOF  =  true;	  entryOffset    >    entrySize)    {    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
305	[BUG]  [BUGGY]  entryOffset  +  entrySize)  {  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  +  entrySize)  {  hasHitEOF  =  true;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  +  entrySize)  {  hasHitEOF  =  true;	  entryOffset    >    entrySize)    {    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
306	[BUG]  [BUGGY]  entryOffset  +=  entrySize)  {  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  +=  entrySize)  {  hasHitEOF  =  true;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  +=  entrySize)  {  hasHitEOF  =  true;	  entryOffset    >    entrySize)    {    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
307	[BUG]  [BUGGY]  entryOffset  >  entrySize  -  1)  {  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  >  entrySize  -  1)  {  hasHitEOF  =  true;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  >  entrySize  -  1)  {  hasHitEOF  =  true;	  entryOffset    >    entrySize)    {    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
308	[BUG]  [BUGGY]  entryOffset  >  entrySize.length)  {  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  >  entrySize.length)  {  hasHitEOF  =  true;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  >  entrySize.length)  {  hasHitEOF  =  true;	  entryOffset    >    entrySize)    {    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
309	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  entryOffset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  entryOffset,  numToRead,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  entryOffset,  numToRead,  hasHitEOF);	  return    is.read(buf,    offset    +    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
310	[BUG]  [BUGGY]  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  hasHitEOF  =  true;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	hasHitEOF  =  true;	  if(entryOffset    >=    0)    {    if(!hasHitEOF)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
311	[BUG]  [BUGGY]  if(entryOffset!=  0)  {  if(!hasHitEOF)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset!=  0)  {  if(!hasHitEOF)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset!=  0)  {  if(!hasHitEOF)  {  hasHitEOF  =  true;  }	  if(entryOffset    >=    0)    {    if(!hasHitEOF)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
312	[BUG]  [BUGGY]  if(entryOffset  ==  0)  {  if(!hasHitEOF)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  ==  0)  {  if(!hasHitEOF)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  ==  0)  {  if(!hasHitEOF)  {  hasHitEOF  =  true;  }	  if(entryOffset    >=    0)    {    if(!hasHitEOF)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
313	[BUG]  [BUGGY]  if(entryOffset  >  0)  {  if(!hasHitEOF)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >  0)  {  if(!hasHitEOF)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  >  0)  {  if(!hasHitEOF)  {  hasHitEOF  =  true;  }	  if(entryOffset    >=    0)    {    if(!hasHitEOF)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
314	[BUG]  [BUGGY]  if(entryOffset  <  0)  {  if(!hasHitEOF)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  <  0)  {  if(!hasHitEOF)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  <  0)  {  if(!hasHitEOF)  {  hasHitEOF  =  true;  }	  if(entryOffset    >=    0)    {    if(!hasHitEOF)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
315	[BUG]  [BUGGY]  if(entryOffset  >=  0)  {  if(!hashEOF)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >=  0)  {  if(!hashEOF)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  >=  0)  {  if(!hashEOF)  {  hasHitEOF  =  true;  }	  if(entryOffset    >=    0)    {    if(!hasHitEOF)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
316	[BUG]  [BUGGY]  return  entrySize  +  numRecords;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  entrySize  +  numRecords;	  return    entrySize;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
317	[BUG]  [BUGGY]  return  entrySize  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  entrySize  +  1;	  return    entrySize;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
318	[BUG]  [BUGGY]  return  entrySize  +  numRecords.length;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  entrySize  +  numRecords.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  entrySize  +  numRecords.length;	  return    entrySize;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
319	[BUG]  [BUGGY]  int  padding  =  is.read(buf,  offset,  numToRead);  entrySize  +=  length;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  padding  =  is.read(buf,  offset,  numToRead);  entrySize  +=  length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  padding  =  is.read(buf,  offset,  numToRead);  entrySize  +=  length;	  int    padding    =    is.read(buf,    offset,    numToRead);    entrySize    +=    padding;    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
320	[BUG]  [BUGGY]  byte  padding  =  is.read(buf,  offset,  numToRead);  entrySize  +=  padding;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  byte  padding  =  is.read(buf,  offset,  numToRead);  entrySize  +=  padding;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	byte  padding  =  is.read(buf,  offset,  numToRead);  entrySize  +=  padding;	  int    padding    =    is.read(buf,    offset,    numToRead);    entrySize    +=    padding;    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
321	[BUG]  [BUGGY]  int  padding  =  is.read(buf,  offset,  entrySize);  entrySize  +=  numRecords;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  padding  =  is.read(buf,  offset,  entrySize);  entrySize  +=  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  padding  =  is.read(buf,  offset,  entrySize);  entrySize  +=  numRecords;	  int    padding    =    is.read(buf,    offset,    numToRead);    entrySize    +=    padding;    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
322	[BUG]  [BUGGY]  int  padding  =  is.read(buf,  offset,  numToRead);  entrySize  +=  blockSize;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  padding  =  is.read(buf,  offset,  numToRead);  entrySize  +=  blockSize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  padding  =  is.read(buf,  offset,  numToRead);  entrySize  +=  blockSize;	  int    padding    =    is.read(buf,    offset,    numToRead);    entrySize    +=    padding;    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
323	[BUG]  [BUGGY]  Integer  padding  =  is.read(buf,  offset,  numToRead);  entrySize  +=  padding;  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  Integer  padding  =  is.read(buf,  offset,  numToRead);  entrySize  +=  padding;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	Integer  padding  =  is.read(buf,  offset,  numToRead);  entrySize  +=  padding;	  int    padding    =    is.read(buf,    offset,    numToRead);    entrySize    +=    padding;    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
324	[BUG]  [BUGGY]  int  padding  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  entrySize  +=  padding;  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  padding  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  entrySize  +=  padding;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  padding  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  entrySize  +=  padding;	  int    padding    =    is.read(buf,    offset,    numToRead);    entrySize    +=    padding;    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
325	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entrySize  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entrySize  +  1);	  return    is.read(buf,    offset,    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
326	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  1  -  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  1  -  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset  +  1  -  entrySize);	  return    is.read(buf,    offset,    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
327	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  2);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  2);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset  +  2);	  return    is.read(buf,    offset,    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
328	[BUG]  [BUGGY]  return  is.read(buf,  offset,  hasHitEOF,  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  hasHitEOF,  entryOffset  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  hasHitEOF,  entryOffset  +  1);	  return    is.read(buf,    offset,    hasHitEOF,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
329	[BUG]  [BUGGY]  entrySize  >  0)  {  return  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entrySize  >  0)  {  return  is.read(buf,  offset,  numToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entrySize  >  0)  {  return  is.read(buf,  offset,  numToRead);  }	  entrySize    >    entryOffset)    {    return    is.read(buf,    offset,    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
330	[BUG]  [BUGGY]  entrySize  >  SMALL_BUFFER_SIZE)  {  return  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entrySize  >  SMALL_BUFFER_SIZE)  {  return  is.read(buf,  offset,  numToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entrySize  >  SMALL_BUFFER_SIZE)  {  return  is.read(buf,  offset,  numToRead);  }	  entrySize    >    entryOffset)    {    return    is.read(buf,    offset,    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
331	[BUG]  [BUGGY]  entrySize  >  numToRead)  {  return  is.read(buf,  offset,  entryOffset);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entrySize  >  numToRead)  {  return  is.read(buf,  offset,  entryOffset);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entrySize  >  numToRead)  {  return  is.read(buf,  offset,  entryOffset);  }	  entrySize    >    entryOffset)    {    return    is.read(buf,    offset,    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
332	[BUG]  [BUGGY]  entrySize  <  =  entryOffset)  {  return  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entrySize  <  =  entryOffset)  {  return  is.read(buf,  offset,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entrySize  <  =  entryOffset)  {  return  is.read(buf,  offset,  numToRead);	  entrySize    >    entryOffset)    {    return    is.read(buf,    offset,    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
333	[BUG]  [BUGGY]  entrySize  <  =  entryOffset)  {  return  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entrySize  <  =  entryOffset)  {  return  is.read(buf,  offset,  numToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entrySize  <  =  entryOffset)  {  return  is.read(buf,  offset,  numToRead);  }	  entrySize    >    entryOffset)    {    return    is.read(buf,    offset,    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
334	[BUG]  [BUGGY]  entrySize  >  numRecords)  {  return  is.read(buf,  offset,  entryOffset);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entrySize  >  numRecords)  {  return  is.read(buf,  offset,  entryOffset);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entrySize  >  numRecords)  {  return  is.read(buf,  offset,  entryOffset);  }	  entrySize    >    entryOffset)    {    return    is.read(buf,    offset,    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
335	[BUG]  [BUGGY]  entrySize  +=  entryOffset)  {  return  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entrySize  +=  entryOffset)  {  return  is.read(buf,  offset,  numToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entrySize  +=  entryOffset)  {  return  is.read(buf,  offset,  numToRead);  }	  entrySize    >    entryOffset)    {    return    is.read(buf,    offset,    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
336	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  numToRead,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  numToRead,  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset  +  numToRead,  hasHitEOF;	  return    is.read(buf,    offset,    entryOffset    +    numToRead;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
337	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset  -  numToRead;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset  -  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset  -  numToRead;	  return    is.read(buf,    offset,    entryOffset    +    numToRead;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
338	[BUG]  [BUGGY]  return  is.read(buf,  offset,  numToRead  +  entryOffset;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  numToRead  +  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  numToRead  +  entryOffset;	  return    is.read(buf,    offset,    entryOffset    +    numToRead;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
339	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  numRecords;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset  +  numRecords;	  return    is.read(buf,    offset,    entryOffset    +    numToRead;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
340	[BUG]  [BUGGY]  entrySize  >  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entrySize  >  SMALL_BUFFER_SIZE;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entrySize  >  SMALL_BUFFER_SIZE;	  entrySize    >    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
341	[BUG]  [BUGGY]  entrySize  >  0;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entrySize  >  0;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entrySize  >  0;	  entrySize    >    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
342	[BUG]  [BUGGY]  entrySize  >  numRecords;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entrySize  >  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entrySize  >  numRecords;	  entrySize    >    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
343	[BUG]  [BUGGY]  entrySize  >  recordSize;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entrySize  >  recordSize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entrySize  >  recordSize;	  entrySize    >    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
344	[BUG]  [BUGGY]  entrySize  >  totalRead;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entrySize  >  totalRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entrySize  >  totalRead;	  entrySize    >    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
345	[BUG]  [BUGGY]  entrySize  >  length;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entrySize  >  length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entrySize  >  length;	  entrySize    >    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
346	[BUG]  [BUGGY]  entrySize  >  available;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entrySize  >  available;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entrySize  >  available;	  entrySize    >    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
347	[BUG]  [BUGGY]  entryOffset  <  entrySize)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  <  entrySize)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  <  entrySize)  {  hasHitEOF  =  true;  }	  entryOffset    >    entrySize)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
348	[BUG]  [BUGGY]  entryOffset  +  entrySize)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  +  entrySize)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  +  entrySize)  {  hasHitEOF  =  true;  }	  entryOffset    >    entrySize)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
349	[BUG]  [BUGGY]  entryOffset  >  0)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  >  0)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  >  0)  {  hasHitEOF  =  true;  }	  entryOffset    >    entrySize)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
350	[BUG]  [BUGGY]  entryOffset  +=  entrySize)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  +=  entrySize)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  +=  entrySize)  {  hasHitEOF  =  true;  }	  entryOffset    >    entrySize)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
351	[BUG]  [BUGGY]  entryOffset  >  entrySize  -  1)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  >  entrySize  -  1)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  >  entrySize  -  1)  {  hasHitEOF  =  true;  }	  entryOffset    >    entrySize)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
352	[BUG]  [BUGGY]  entryOffset  >  numRecords)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  >  numRecords)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  >  numRecords)  {  hasHitEOF  =  true;  }	  entryOffset    >    entrySize)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
353	[BUG]  [BUGGY]  EntryOffset  entrySize  =  entryOffset  +  1;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  EntryOffset  entrySize  =  entryOffset  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	EntryOffset  entrySize  =  entryOffset  +  1;	  EntryOffset    entrySize    =    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
354	[BUG]  [BUGGY]  EntryOffset  entrySize  =  entryOffset  +  numRecords;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  EntryOffset  entrySize  =  entryOffset  +  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	EntryOffset  entrySize  =  entryOffset  +  numRecords;	  EntryOffset    entrySize    =    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
355	[BUG]  [BUGGY]  EntryOffset  entrySize  =  entryOffset  +  numRecords.length;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  EntryOffset  entrySize  =  entryOffset  +  numRecords.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	EntryOffset  entrySize  =  entryOffset  +  numRecords.length;	  EntryOffset    entrySize    =    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
356	[BUG]  [BUGGY]  EntryOffset  entrySize  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  EntryOffset  entrySize  =  is.read(buf,  offset,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	EntryOffset  entrySize  =  is.read(buf,  offset,  numToRead);	  EntryOffset    entrySize    =    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
357	[BUG]  [BUGGY]  EntryOffset  entrySize  =  totalRead;  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  EntryOffset  entrySize  =  totalRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	EntryOffset  entrySize  =  totalRead;	  EntryOffset    entrySize    =    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
358	[BUG]  [BUGGY]  EntryOffset  entrySize  =  entryOffset.length;  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  EntryOffset  entrySize  =  entryOffset.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	EntryOffset  entrySize  =  entryOffset.length;	  EntryOffset    entrySize    =    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
359	[BUG]  [BUGGY]  EntryOffset  entrySize  =  numRecords;  [CE]  illegal  start  of  type  [FE]                                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  EntryOffset  entrySize  =  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	EntryOffset  entrySize  =  numRecords;	  EntryOffset    entrySize    =    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
360	[BUG]  [BUGGY]  if(entryOffset  <  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  <  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  <  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    offset;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
361	[BUG]  [BUGGY]  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	for(int  i  =  offset;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    offset;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
362	[BUG]  [BUGGY]  if(entryOffset  >=  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >=  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  >=  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    offset;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
363	[BUG]  [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  offset;  i  >=  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  offset;  i  >=  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  >  entrySize)  {  for(int  i  =  offset;  i  >=  numRecords;  ++i)  {  hasHitEOF  =  true;  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    offset;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
364	[BUG]  [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  offset;  i  <  numRecords.length;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  offset;  i  <  numRecords.length;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  >  entrySize)  {  for(int  i  =  offset;  i  <  numRecords.length;  ++i)  {  hasHitEOF  =  true;  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    offset;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
365	[BUG]  [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  hasHitEOF  =  false;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  >  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  hasHitEOF  =  false;  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    offset;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
366	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  numToRead,  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  numToRead,  entrySize);	  return    is.read(buf,    offset    +    numToRead,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
367	[BUG]  [BUGGY]  return  is.read(buf,  offset,  numToRead  +  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  numToRead  +  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  numToRead  +  hasHitEOF);	  return    is.read(buf,    offset,    hasHitEOF    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
368	[BUG]  [BUGGY]  return  is.read(buf,  offset,  hasHitEOF  -  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  hasHitEOF  -  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  hasHitEOF  -  numToRead);	  return    is.read(buf,    offset,    hasHitEOF    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
369	[BUG]  [BUGGY]  i.remove();  hasHitEOF  =  is.read(buf,  offset,  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  i.remove();  hasHitEOF  =  is.read(buf,  offset,  entryOffset  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	i.remove();  hasHitEOF  =  is.read(buf,  offset,  entryOffset  +  1);	  i.remove();    hasHitEOF    =    is.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
370	[BUG]  [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  hasHitEOF  =  is.read(buf,  offset,  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	hasHitEOF  =  is.read(buf,  offset,  entryOffset);	  i.remove();    hasHitEOF    =    is.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
371	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  entryOffset);  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  >  entrySize)  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  entryOffset);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entrySize  >  entrySize)  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  entryOffset);  }	  i.remove();    hasHitEOF    =    is.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
372	[BUG]  [BUGGY]  if(entryOffset  >  entrySize)  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  entryOffset);  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >  entrySize)  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  entryOffset);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  >  entrySize)  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  entryOffset);  }	  i.remove();    hasHitEOF    =    is.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
373	[BUG]  [BUGGY]  i.remove();  hasHitEOF  =  is.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  i.remove();  hasHitEOF  =  is.read(buf,  offset,  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	i.remove();  hasHitEOF  =  is.read(buf,  offset,  entrySize);	  i.remove();    hasHitEOF    =    is.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
374	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  entryOffset,  hasHitEOF,  numRecords);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  entryOffset,  hasHitEOF,  numRecords);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  entryOffset,  hasHitEOF,  numRecords);	  return    is.read(buf,    offset    +    entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
375	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  entryOffset,  hasHitEOF,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  entryOffset,  hasHitEOF,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  entryOffset,  hasHitEOF,  numToRead);	  return    is.read(buf,    offset    +    entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
376	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  entryOffset,  hasHitEOF,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  entryOffset,  hasHitEOF,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  entryOffset,  hasHitEOF,  hasHitEOF);	  return    is.read(buf,    offset    +    entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
377	[BUG]  [BUGGY]  if(entryOffset  <  entrySize)  {  return  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  <  entrySize)  {  return  is.read(buf,  offset,  numToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  <  entrySize)  {  return  is.read(buf,  offset,  numToRead);  }	  if(entryOffset    >    entrySize)    {    return    is.read(buf,    offset,    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
378	[BUG]  [BUGGY]  if(entryOffset  >=  entrySize)  {  return  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >=  entrySize)  {  return  is.read(buf,  offset,  numToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  >=  entrySize)  {  return  is.read(buf,  offset,  numToRead);  }	  if(entryOffset    >    entrySize)    {    return    is.read(buf,    offset,    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
379	[BUG]  [BUGGY]  if(entryOffset  ==  entrySize)  {  return  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  ==  entrySize)  {  return  is.read(buf,  offset,  numToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  ==  entrySize)  {  return  is.read(buf,  offset,  numToRead);  }	  if(entryOffset    >    entrySize)    {    return    is.read(buf,    offset,    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
380	[BUG]  [BUGGY]  int  entrySize  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  entrySize  =  is.read(buf,  offset,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  entrySize  =  is.read(buf,  offset,  numToRead);	  if(entryOffset    >    entrySize)    {    return    is.read(buf,    offset,    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
381	[BUG]  [BUGGY]  if(entryOffset  >  entrySize)  {  return  is.read(buf,  offset,  totalRead);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >  entrySize)  {  return  is.read(buf,  offset,  totalRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  >  entrySize)  {  return  is.read(buf,  offset,  totalRead);  }	  if(entryOffset    >    entrySize)    {    return    is.read(buf,    offset,    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
382	[BUG]  [BUGGY]  return  is.readByte(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readByte(buf,  offset,  numToRead  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readByte(buf,  offset,  numToRead  +  1);	  return    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
383	[BUG]  [BUGGY]  return  is.read(buf,  offset,  numToRead  +  2);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  numToRead  +  2);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  numToRead  +  2);	  return    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
384	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  1,  entryOffset  -  entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  1,  entryOffset  -  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  1,  entryOffset  -  entrySize);	  return    is.read(buf,    offset    +    1,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
385	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  1,  entrySize,  numRecords);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  1,  entrySize,  numRecords);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  1,  entrySize,  numRecords);	  return    is.read(buf,    offset    +    1,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
386	[BUG]  [BUGGY]  return  hasHitEOF  ||  is.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  ||  is.read(buf,  offset,  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  hasHitEOF  ||  is.read(buf,  offset,  entryOffset);	  return    hasHitEOF    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
387	[BUG]  [BUGGY]  return  entryOffset  ||  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  ||  is.read(buf,  offset,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  entryOffset  ||  is.read(buf,  offset,  numToRead);	  return    hasHitEOF    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
388	[BUG]  [BUGGY]  return  hasHitEOF  ||  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  ||  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  hasHitEOF  ||  is.read(buf,  offset,  numToRead,  hasHitEOF);	  return    hasHitEOF    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
389	[BUG]  [BUGGY]  return  hasHitEOF  ||  is.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  ||  is.read(buf,  offset,  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  hasHitEOF  ||  is.read(buf,  offset,  entrySize);	  return    hasHitEOF    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
390	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  totalRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  totalRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset  +  totalRead);	  return    is.read(buf,    offset,    entryOffset    +    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
391	[BUG]  [BUGGY]  if(entryOffset!=  0)  {  if(!hasHitEOF)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset!=  0)  {  if(!hasHitEOF)  {  hasHitEOF  =  false;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset!=  0)  {  if(!hasHitEOF)  {  hasHitEOF  =  false;  }	  if(entryOffset    ==    0)    {    if(!hasHitEOF)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
392	[BUG]  [BUGGY]  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  hasHitEOF  =  false;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	hasHitEOF  =  false;	  if(entryOffset    ==    0)    {    if(!hasHitEOF)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
393	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  if(!hasHitEOF)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  ==  0)  {  if(!hasHitEOF)  {  hasHitEOF  =  false;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entrySize  ==  0)  {  if(!hasHitEOF)  {  hasHitEOF  =  false;  }	  if(entryOffset    ==    0)    {    if(!hasHitEOF)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
394	[BUG]  [BUGGY]  if(entryOffset  <  0)  {  if(!hasHitEOF)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  <  0)  {  if(!hasHitEOF)  {  hasHitEOF  =  false;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  <  0)  {  if(!hasHitEOF)  {  hasHitEOF  =  false;  }	  if(entryOffset    ==    0)    {    if(!hasHitEOF)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
395	[BUG]  [BUGGY]  if(entryOffset  ==  0)  {  if(!hashEOF)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  ==  0)  {  if(!hashEOF)  {  hasHitEOF  =  false;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  ==  0)  {  if(!hashEOF)  {  hasHitEOF  =  false;  }	  if(entryOffset    ==    0)    {    if(!hasHitEOF)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
396	[BUG]  [BUGGY]  if(entryOffset  >=  0)  {  if(!hashEOF)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >=  0)  {  if(!hashEOF)  {  hasHitEOF  =  false;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  >=  0)  {  if(!hashEOF)  {  hasHitEOF  =  false;  }	  if(entryOffset    >=    0)    {    if(!hasHitEOF)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
397	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead  +  1);  hasHitEOF  =  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead  +  1);  hasHitEOF  =  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  ch  =  is.read(buf,  offset,  numToRead  +  1);  hasHitEOF  =  hasHitEOF;	  int    ch    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
398	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  0);  hasHitEOF  =  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  ch  =  is.read(buf,  offset,  0);  hasHitEOF  =  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  ch  =  is.read(buf,  offset,  0);  hasHitEOF  =  hasHitEOF;	  int    ch    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
399	[BUG]  [BUGGY]  return  is.read(buf,  offset,  numToRead,  buffer.length);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  numToRead,  buffer.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  numToRead,  buffer.length);	  return    is.read(buf,    offset,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
400	[BUG]  [BUGGY]  return  is.read(buf,  offset,  totalRead,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  totalRead,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  totalRead,  numToRead);	  return    is.read(buf,    offset,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
401	[BUG]  [BUGGY]  entryOffset  >  recordSize)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  >  recordSize)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  >  recordSize)  {  hasHitEOF  =  true;  }	  entryOffset    >    entrySize)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
402	[BUG]  [BUGGY]  entryOffset  >  access)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  >  access)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  >  access)  {  hasHitEOF  =  true;  }	  entryOffset    >    entrySize)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
403	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  0L);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  0L);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  0L);	  return    is.readAndClose(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
404	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  0,  entryOffset);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  0,  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  0,  entryOffset);	  return    is.readAndClose(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
405	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  -1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  -1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  -1);	  return    is.readAndClose(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
406	[BUG]  [BUGGY]  entrySize  +=  entryOffset;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entrySize  +=  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entrySize  +=  entryOffset;	  entrySize    >    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
407	[BUG]  [BUGGY]  return  is.read(buf,  offset  -  1,  totalRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  -  1,  totalRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  -  1,  totalRead);	  return    is.read(buf,    offset    +    1,    totalRead);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
408	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  entryOffset  -  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  entryOffset  -  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  entryOffset  -  hasHitEOF);	  return    is.readAndClose(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
409	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  numToRead,  inputSize);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  numToRead,  inputSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  numToRead,  inputSize);	  return    is.readAndClose(buf,    offset,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
410	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  numToRead,  buffer.length);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  numToRead,  buffer.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  numToRead,  buffer.length);	  return    is.readAndClose(buf,    offset,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
411	[BUG]  [BUGGY]  return  entryOffset  +  length;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  entryOffset  +  length;	  return    entryOffset    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
412	[BUG]  [BUGGY]  return  entryOffset  +  numRecords  +  offset;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  numRecords  +  offset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  entryOffset  +  numRecords  +  offset;	  return    entryOffset    +    numRecords;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
413	[BUG]  [BUGGY]  return  is.read(buf,  offset  -  1,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  -  1,  numToRead,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  -  1,  numToRead,  hasHitEOF);	  return    is.read(buf,    offset    +    1,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
414	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  1,  hasHitEOF,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  1,  hasHitEOF,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  1,  hasHitEOF,  hasHitEOF);	  return    is.read(buf,    offset    +    1,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
415	[BUG]  [BUGGY]  return  hasHitEOF  &&  is.readByte(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  is.readByte(buf,  offset,  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  hasHitEOF  &&  is.readByte(buf,  offset,  entryOffset);	  return    hasHitEOF    &&    is.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
416	[BUG]  [BUGGY]  entryOffset  +=  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  +=  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  +=  hasHitEOF;	  entryOffset    +=    entrySize;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
417	[BUG]  [BUGGY]  entryOffset  -=  totalRead;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  -=  totalRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  -=  totalRead;	  entryOffset    +=    entrySize;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
418	[BUG]  [BUGGY]  return  is.read(buf,  offset  -  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  -  1,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  -  1,  hasHitEOF);	  return    is.read(buf,    offset    -    1,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
419	[BUG]  [BUGGY]  if(entrySize  >=  0)  {  int  padding  =  is.read(buf,  offset,  numToRead);  entrySize  +=  padding;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  >=  0)  {  int  padding  =  is.read(buf,  offset,  numToRead);  entrySize  +=  padding;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entrySize  >=  0)  {  int  padding  =  is.read(buf,  offset,  numToRead);  entrySize  +=  padding;  }	  int    padding    =    is.read(buf,    offset,    numToRead);    entrySize    +=    padding;    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
420	[BUG]  [BUGGY]  if(entrySize  >=  0)  {  int  padding  =  is.read(buf,  offset,  numToRead);  entrySize  +=  padding;  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  >=  0)  {  int  padding  =  is.read(buf,  offset,  numToRead);  entrySize  +=  padding;  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entrySize  >=  0)  {  int  padding  =  is.read(buf,  offset,  numToRead);  entrySize  +=  padding;  }  else  {  hasHitEOF  =  false;  }	  int    padding    =    is.read(buf,    offset,    numToRead);    entrySize    +=    padding;    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
421	[BUG]  [BUGGY]  if(entrySize!=  0)  {  int  padding  =  is.read(buf,  offset,  numToRead);  entrySize  +=  padding;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize!=  0)  {  int  padding  =  is.read(buf,  offset,  numToRead);  entrySize  +=  padding;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entrySize!=  0)  {  int  padding  =  is.read(buf,  offset,  numToRead);  entrySize  +=  padding;  }	  int    padding    =    is.read(buf,    offset,    numToRead);    entrySize    +=    padding;    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
422	[BUG]  [BUGGY]  int  padding  =  is.read(buf,  offset,  numToRead  +  1);  entrySize  +=  padding;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  padding  =  is.read(buf,  offset,  numToRead  +  1);  entrySize  +=  padding;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  padding  =  is.read(buf,  offset,  numToRead  +  1);  entrySize  +=  padding;	  int    padding    =    is.read(buf,    offset,    numToRead);    entrySize    +=    padding;    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
423	[BUG]  [BUGGY]  if(entrySize!=  0)  {  int  padding  =  is.read(buf,  offset,  numToRead);  entrySize  +=  padding;  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize!=  0)  {  int  padding  =  is.read(buf,  offset,  numToRead);  entrySize  +=  padding;  }  else  {  hasHitEOF  =  false;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entrySize!=  0)  {  int  padding  =  is.read(buf,  offset,  numToRead);  entrySize  +=  padding;  }  else  {  hasHitEOF  =  false;  }	  int    padding    =    is.read(buf,    offset,    numToRead);    entrySize    +=    padding;    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
424	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  ch  =  is.read(buf,  offset,  numToRead,  hasHitEOF);	  int    ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
425	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  ch  =  is.read(buf,  offset,  numToRead  +  1);	  int    ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
426	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  ch  =  is.read(buf,  offset,  0);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  ch  =  is.read(buf,  offset,  0);	  int    ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
427	[BUG]  [BUGGY]  if(entryOffset  >  0)  {  if(!hasHitEOF)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >  0)  {  if(!hasHitEOF)  {  hasHitEOF  =  false;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  >  0)  {  if(!hasHitEOF)  {  hasHitEOF  =  false;  }	  if(entryOffset    >=    0)    {    if(!hasHitEOF)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
428	[BUG]  [BUGGY]  if(entrySize  >=  0)  {  if(!hasHitEOF)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  >=  0)  {  if(!hasHitEOF)  {  hasHitEOF  =  false;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entrySize  >=  0)  {  if(!hasHitEOF)  {  hasHitEOF  =  false;  }	  if(entryOffset    >=    0)    {    if(!hasHitEOF)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
429	[BUG]  [BUGGY]  if(entryOffset  >=  numRecords)  {  if(!hasHitEOF)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >=  numRecords)  {  if(!hasHitEOF)  {  hasHitEOF  =  false;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  >=  numRecords)  {  if(!hasHitEOF)  {  hasHitEOF  =  false;  }	  if(entryOffset    >=    0)    {    if(!hasHitEOF)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
430	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  1  -  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  1  -  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset  +  1  -  hasHitEOF);	  return    is.read(buf,    offset,    entryOffset    +    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
431	[BUG]  [BUGGY]  if(entryOffset  >  available)  {  return  hasHitEOF;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >  available)  {  return  hasHitEOF;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  >  available)  {  return  hasHitEOF;  }	  if(entryOffset    >    available)    {    return    entryOffset;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
432	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset  -  totalRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset  -  totalRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset  -  totalRead);	  return    is.read(buf,    offset,    entryOffset    -    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
433	[BUG]  [BUGGY]  if(entryOffset  >=  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  i++)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >=  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  i++)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  >=  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  i++)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    offset;    i    <    numRecords;    i++)    {    buffer[i]    =    is.read(buf,    offset,    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
434	[BUG]  [BUGGY]  if(entryOffset  <  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  i++)  {  buffer[i]  =  is.read(buf,  offset  +  numToRead);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  <  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  i++)  {  buffer[i]  =  is.read(buf,  offset  +  numToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  <  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  i++)  {  buffer[i]  =  is.read(buf,  offset  +  numToRead);  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    offset;    i    <    numRecords;    i++)    {    buffer[i]    =    is.read(buf,    offset,    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
435	[BUG]  [BUGGY]  return  is.read(buf,  offset  /  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  /  numToRead,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  /  numToRead,  hasHitEOF);	  return    is.read(buf,    offset    /    numToRead);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
436	[BUG]  [BUGGY]  return  is.read(buf,  offset  /  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  /  numToRead  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  /  numToRead  +  1);	  return    is.read(buf,    offset    /    numToRead);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
437	[BUG]  [BUGGY]  return  is.read(buf,  offset,  hasHitEOF  /  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  hasHitEOF  /  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  hasHitEOF  /  numToRead);	  return    is.read(buf,    offset,    hasHitEOF    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
438	[BUG]  [BUGGY]  return  is.read(buf,  offset,  hasHitEOF  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  hasHitEOF  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  hasHitEOF  -  entryOffset);	  return    is.read(buf,    offset,    hasHitEOF    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
439	[BUG]  [BUGGY]  return  is.readByte(buf,  offset,  entryOffset  -  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readByte(buf,  offset,  entryOffset  -  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readByte(buf,  offset,  entryOffset  -  hasHitEOF);	  return    is.readByte(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
440	[BUG]  [BUGGY]  return  is.readInt(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readInt(buf,  offset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readInt(buf,  offset,  hasHitEOF);	  return    is.readByte(buf,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
441	[BUG]  [BUGGY]  if(entryOffset  ==  -1)  {  if(!hasHitEOF)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  ==  -1)  {  if(!hasHitEOF)  {  hasHitEOF  =  false;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  ==  -1)  {  if(!hasHitEOF)  {  hasHitEOF  =  false;  }	  if(entryOffset    ==    0)    {    if(!hasHitEOF)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
442	[BUG]  [BUGGY]  if(entryOffset  >=  access)  {  return  entryOffset;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >=  access)  {  return  entryOffset;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  >=  access)  {  return  entryOffset;  }	  if(entryOffset    >    access)    {    return    entryOffset;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
443	[BUG]  [BUGGY]  if(entryOffset  ==  access)  {  return  entryOffset;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  ==  access)  {  return  entryOffset;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  ==  access)  {  return  entryOffset;  }	  if(entryOffset    >    access)    {    return    entryOffset;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
444	[BUG]  [BUGGY]  if(entryOffset!=  access)  {  return  entryOffset;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset!=  access)  {  return  entryOffset;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset!=  access)  {  return  entryOffset;  }	  if(entryOffset    >    access)    {    return    entryOffset;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
445	[BUG]  [BUGGY]  entryOffset  >  access)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  >  access)  {  hasHitEOF  =  false;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  >  access)  {  hasHitEOF  =  false;  }	  if(entryOffset    >    access)    {    return    entryOffset;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
446	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  1,  hasHitEOF  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  1,  hasHitEOF  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  1,  hasHitEOF  -  entryOffset);	  return    is.read(buf,    offset    +    1,    entryOffset    -    numToRead);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
447	[BUG]  [BUGGY]  if(entryOffset  >  access)  {  return  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >  access)  {  return  is.read(buf,  offset,  numToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  >  access)  {  return  is.read(buf,  offset,  numToRead);  }	  if(entryOffset    >    entrySize)    {    return    is.read(buf,    offset,    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
448	[BUG]  [BUGGY]  return  totalRead  -  entryOffset;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  totalRead  -  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  totalRead  -  entryOffset;	  return    entryOffset    -    totalRead;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
449	[BUG]  [BUGGY]  return  entryOffset  -  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  entryOffset  -  hasHitEOF;	  return    entryOffset    -    totalRead;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
450	[BUG]  [BUGGY]  return  hasHitEOF  -  totalRead;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  -  totalRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  hasHitEOF  -  totalRead;	  return    entryOffset    -    totalRead;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
451	[BUG]  [BUGGY]  return  entryOffset  -  inputSize;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  -  inputSize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  entryOffset  -  inputSize;	  return    entryOffset    -    totalRead;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
452	[BUG]  [BUGGY]  entryOffset  >  entrySize  +  numRecords;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  >  entrySize  +  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  >  entrySize  +  numRecords;	  entryOffset    >    entrySize;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
453	[BUG]  [BUGGY]  entryOffset  >  totalRead;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  >  totalRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  >  totalRead;	  entryOffset    >    entrySize;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
454	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  0);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  ch  =  is.read(buf,  offset,  0);  hasHitEOF  =  true;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  ch  =  is.read(buf,  offset,  0);  hasHitEOF  =  true;	  int    ch    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
455	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead  +  1);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead  +  1);  hasHitEOF  =  true;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  ch  =  is.read(buf,  offset,  numToRead  +  1);  hasHitEOF  =  true;	  int    ch    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
456	[BUG]  [BUGGY]  entryOffset  >  recordSize)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  >  recordSize)  {  hasHitEOF  =  false;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  >  recordSize)  {  hasHitEOF  =  false;  }	  entryOffset    >    entrySize)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
457	[BUG]  [BUGGY]  return  is.read(buf,  offset,  hasHitEOF  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  hasHitEOF  -  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  hasHitEOF  -  1);	  return    is.read(buf,    offset,    entryOffset    -    1);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
458	[BUG]  [BUGGY]  return  is.read(buf,  offset,  numToRead  +  buf.length);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  numToRead  +  buf.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  numToRead  +  buf.length);	  return    is.read(buf,    offset,    totalRead    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
459	[BUG]  [BUGGY]  int  padding  =  is.read(buf,  offset,  numToRead  +  1);  hasHitEOF  =  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  padding  =  is.read(buf,  offset,  numToRead  +  1);  hasHitEOF  =  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  padding  =  is.read(buf,  offset,  numToRead  +  1);  hasHitEOF  =  hasHitEOF;	  int    padding    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
460	[BUG]  [BUGGY]  int  padding  =  is.read(buf,  offset,  0);  hasHitEOF  =  hasHitEOF;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  padding  =  is.read(buf,  offset,  0);  hasHitEOF  =  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  padding  =  is.read(buf,  offset,  0);  hasHitEOF  =  hasHitEOF;	  int    padding    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
461	[BUG]  [BUGGY]  return  isEOF  ||  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  isEOF  ||  is.read(buf,  offset,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  isEOF  ||  is.read(buf,  offset,  numToRead);	  return    hasHitEOF    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
462	[BUG]  [BUGGY]  return  is.read  ||  hasHitEOF  ||  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read  ||  hasHitEOF  ||  is.read(buf,  offset,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read  ||  hasHitEOF  ||  is.read(buf,  offset,  numToRead);	  return    hasHitEOF    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
463	[BUG]  [BUGGY]  return  isEOF  &&  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  isEOF  &&  is.read(buf,  offset,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  isEOF  &&  is.read(buf,  offset,  numToRead);	  return    hasHitEOF    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
464	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset,  hasHitEOF  &&  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset,  hasHitEOF  &&  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset,  hasHitEOF  &&  hasHitEOF);	  return    is.read(buf,    offset,    entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
465	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  entryOffset  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  entryOffset  -  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  entryOffset  -  1);	  return    is.readAndClose(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
466	[BUG]  [BUGGY]  return  is.read(buf,  offset  -  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  -  entryOffset,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  -  entryOffset,  numToRead);	  return    is.read(buf,    offset    +    numToRead,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
467	[BUG]  [BUGGY]  return  is.read(buf,  offset,  0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  0,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  0,  hasHitEOF);	  return    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
468	[BUG]  [BUGGY]  return  is.read(buf,  offset  -  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  -  entrySize,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  -  entrySize,  hasHitEOF);	  return    is.read(buf,    offset    +    entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
469	[BUG]  [BUGGY]  int  padding  =  is.read(buf,  offset,  0);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  padding  =  is.read(buf,  offset,  0);  hasHitEOF  =  true;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  padding  =  is.read(buf,  offset,  0);  hasHitEOF  =  true;	  int    padding    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
470	[BUG]  [BUGGY]  int  padding  =  is.read(buf,  offset,  numToRead  +  1);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  padding  =  is.read(buf,  offset,  numToRead  +  1);  hasHitEOF  =  true;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  padding  =  is.read(buf,  offset,  numToRead  +  1);  hasHitEOF  =  true;	  int    padding    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
471	[BUG]  [BUGGY]  return  is.read(buf,  offset,  numToRead,  hasHitEOF  +  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  numToRead,  hasHitEOF  +  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  numToRead,  hasHitEOF  +  numToRead);	  return    is.read(buf,    offset,    entryOffset,    hasHitEOF    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
472	[BUG]  [BUGGY]  return  is.read(buf,  offset,  hasHitEOF  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  hasHitEOF  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  hasHitEOF  +  1);	  return    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
473	[BUG]  [BUGGY]  return  is.read(buf,  offset,  numToRead  *  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  numToRead  *  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  numToRead  *  1);	  return    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
474	[BUG]  [BUGGY]  return  is.read(buf,  offset,  totalRead  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  totalRead  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  totalRead  +  1);	  return    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
475	[BUG]  [BUGGY]  return  hasHitEOF.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF.read(buf,  offset,  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  hasHitEOF.read(buf,  offset,  entrySize);	  return    is.read(buf,    offset,    entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
476	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset  -  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset  -  numToRead  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset  -  numToRead  +  1);	  return    is.read(buf,    offset,    entryOffset    -    numToRead);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
477	[BUG]  [BUGGY]  return  is.read(buf,  offset,  numToRead  -  buf.length);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  numToRead  -  buf.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  numToRead  -  buf.length);	  return    is.read(buf,    offset,    entryOffset    -    numToRead);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
478	[BUG]  [BUGGY]  return  is.read(buf,  offset,  numToRead  -  inputSize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  numToRead  -  inputSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  numToRead  -  inputSize);	  return    is.read(buf,    offset,    entryOffset    -    numToRead);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
479	[BUG]  [BUGGY]  entryOffset  >  0)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  >  0)  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  >  0)  {	  entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
480	[BUG]  [BUGGY]  entryOffset  >  recordSize)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  >  recordSize)  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  >  recordSize)  {	  entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
481	[BUG]  [BUGGY]  entryOffset  +  entrySize)  {  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  +  entrySize)  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  +  entrySize)  {	  entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
482	[BUG]  [BUGGY]  entryOffset  >  entrySize  -  1)  {  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  >  entrySize  -  1)  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  >  entrySize  -  1)  {	  entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
483	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  len,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  len,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  len,  hasHitEOF);	  return    is.readAndClose(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
484	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  0,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  0,  hasHitEOF);	  return    is.readAndClose(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
485	[BUG]  [BUGGY]  return  is.read(buf,  offset,  totalRead  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  totalRead  +  1,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  totalRead  +  1,  hasHitEOF);	  return    is.read(buf,    offset,    entryOffset    +    1,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
486	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  2,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  2,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset  +  2,  hasHitEOF);	  return    is.read(buf,    offset,    entryOffset    +    1,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
487	[BUG]  [BUGGY]  return  is.read(buf,  offset  -  entrySize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  -  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  -  entrySize);	  return    is.read(buf,    offset    -    numToRead);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
488	[BUG]  [BUGGY]  return  entryOffset  +  1L;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  1L;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  entryOffset  +  1L;	  return    entryOffset    +    1;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
489	[BUG]  [BUGGY]  return  hasHitEOF  ||  is.read(buf,  offset,  hasHitEOF;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  ||  is.read(buf,  offset,  hasHitEOF;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  hasHitEOF  ||  is.read(buf,  offset,  hasHitEOF;	  return    hasHitEOF    ||    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
490	[BUG]  [BUGGY]  entryOffset  =  count(entrySize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  =  count(entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  =  count(entrySize);	  entryOffset    =    entrySize;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
491	[BUG]  [BUGGY]  if(i!=  null)  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  entryOffset);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(i!=  null)  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  entryOffset);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(i!=  null)  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  entryOffset);  }	  i.remove();    hasHitEOF    =    is.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
492	[BUG]  [BUGGY]  if(entrySize  >  0)  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  entryOffset);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  >  0)  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  entryOffset);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entrySize  >  0)  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  entryOffset);  }	  i.remove();    hasHitEOF    =    is.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
493	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  entryOffset);  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  ==  0)  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  entryOffset);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entrySize  ==  0)  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  entryOffset);  }	  i.remove();    hasHitEOF    =    is.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
494	[BUG]  [BUGGY]  if(entrySize  >=  0)  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  entryOffset);  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  >=  0)  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  entryOffset);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entrySize  >=  0)  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  entryOffset);  }	  i.remove();    hasHitEOF    =    is.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
495	[BUG]  [BUGGY]  if(entryOffset  >  access)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >  access)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  >  access)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    offset;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
496	[BUG]  [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  offset;  i  <  0;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  offset;  i  <  0;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  >  entrySize)  {  for(int  i  =  offset;  i  <  0;  ++i)  {  hasHitEOF  =  true;  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    offset;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
497	[BUG]  [BUGGY]  return  is.read(buf,  offset,  0,  entryOffset);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  0,  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  0,  entryOffset);	  return    is.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
498	[BUG]  [BUGGY]  return  is.read(buf,  offset,  0L);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  0L);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  0L);	  return    is.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
499	[BUG]  [BUGGY]  return  is.read(buf,  offset,  -1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  -1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  -1);	  return    is.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
500	[BUG]  [BUGGY]  return  isEOF  ||  is.read(buf,  offset  +  numToRead);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  isEOF  ||  is.read(buf,  offset  +  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  isEOF  ||  is.read(buf,  offset  +  numToRead);	  return    hasHitEOF    ||    is.read(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
501	[BUG]  [BUGGY]  return  hasHitEOF  ||  is.read(buf,  offset  +  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  ||  is.read(buf,  offset  +  numToRead,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  hasHitEOF  ||  is.read(buf,  offset  +  numToRead,  hasHitEOF);	  return    hasHitEOF    ||    is.read(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
502	[BUG]  [BUGGY]  return  hasHitEOF  ||  is.read(buf,  offset  +  1,  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  ||  is.read(buf,  offset  +  1,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  hasHitEOF  ||  is.read(buf,  offset  +  1,  numToRead);	  return    hasHitEOF    ||    is.read(buf,    offset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
503	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  totalRead;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  totalRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset  +  totalRead;	  return    is.read(buf,    offset,    entryOffset    +    numToRead;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
504	[BUG]  [BUGGY]  return  is.read(buf,  offset,  numToRead  +  buf.length;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  numToRead  +  buf.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  numToRead  +  buf.length;	  return    is.read(buf,    offset,    entryOffset    +    numToRead;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
505	[BUG]  [BUGGY]  return  is.read(buf,  offset,  totalRead  +  numToRead;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  totalRead  +  numToRead;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  totalRead  +  numToRead;	  return    is.read(buf,    offset,    entryOffset    +    numToRead;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
506	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset  +  1;	  return    is.read(buf,    offset,    entryOffset    +    numToRead;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
507	[BUG]  [BUGGY]  if(entryOffset  <  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  buffer[i]  =  is.read(buf,  offset  +  numToRead);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  <  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  buffer[i]  =  is.read(buf,  offset  +  numToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  <  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  buffer[i]  =  is.read(buf,  offset  +  numToRead);  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    offset;    i    <    numRecords;    ++i)    {    buffer[i]    =    is.read(buf,    offset,    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
508	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  numToRead  +  entryOffset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  numToRead  +  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  numToRead  +  entryOffset);	  return    is.readAndClose(buf,    offset,    entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
509	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  totalRead  +  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  totalRead  +  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  totalRead  +  numToRead);	  return    is.readAndClose(buf,    offset,    entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
510	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  hasHitEOF  +  numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  hasHitEOF  +  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  hasHitEOF  +  numToRead);	  return    is.readAndClose(buf,    offset,    entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
511	[BUG]  [BUGGY]  if(entrySize  >  entryOffset)  {  return  hasHitEOF;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  >  entryOffset)  {  return  hasHitEOF;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entrySize  >  entryOffset)  {  return  hasHitEOF;  }	  if(entryOffset    >    entrySize)    {    return    hasHitEOF;    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
512	[BUG]  [BUGGY]  int  padding  =  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  padding  =  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  padding  =  is.read(buf,  offset,  numToRead  +  1);	  int    padding    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
513	[BUG]  [BUGGY]  int  padding  =  is.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  padding  =  is.read(buf,  offset,  0);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  padding  =  is.read(buf,  offset,  0);	  int    padding    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
514	[BUG]  [BUGGY]  int  padding  =  is.read(buf,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  padding  =  is.read(buf,  offset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  padding  =  is.read(buf,  offset,  hasHitEOF);	  int    padding    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
515	[BUG]  [BUGGY]  return  is.read(buf,  offset,  numToRead  +  numRecords);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  numToRead  +  numRecords);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  numToRead  +  numRecords);	  return    is.read(buf,    offset,    entryOffset    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
516	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  length);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset  +  length);	  return    is.read(buf,    offset,    entryOffset    +    numRecords);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
517	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  entrySize  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  entrySize  -  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  entrySize  -  1);	  return    is.readAndClose(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
518	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  entrySize  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  entrySize  +  1);	  return    is.readAndClose(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
519	[BUG]  [BUGGY]  entryOffset  >  recordSize)  {  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  >  recordSize)  {  hasHitEOF  =  true;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  >  recordSize)  {  hasHitEOF  =  true;	  entryOffset    >    entrySize)    {    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
520	[BUG]  [BUGGY]  entryOffset  >  access)  {  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  >  access)  {  hasHitEOF  =  true;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  >  access)  {  hasHitEOF  =  true;	  entryOffset    >    entrySize)    {    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
521	[BUG]  [BUGGY]  entrySize  >  totalRead)  {  return  hasHitEOF;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entrySize  >  totalRead)  {  return  hasHitEOF;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entrySize  >  totalRead)  {  return  hasHitEOF;  }	  entrySize    >    entryOffset)    {    return    hasHitEOF;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
522	[BUG]  [BUGGY]  entryOffset  >  entrySize)  {  return  hasHitEOF;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  >  entrySize)  {  return  hasHitEOF;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  >  entrySize)  {  return  hasHitEOF;  }	  entrySize    >    entryOffset)    {    return    hasHitEOF;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
523	[BUG]  [BUGGY]  entrySize  >  recordSize)  {  return  hasHitEOF;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entrySize  >  recordSize)  {  return  hasHitEOF;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entrySize  >  recordSize)  {  return  hasHitEOF;  }	  entrySize    >    entryOffset)    {    return    hasHitEOF;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
524	[BUG]  [BUGGY]  if(entrySize  >=  0)  {  if(!hasHitEOF)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  >=  0)  {  if(!hasHitEOF)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entrySize  >=  0)  {  if(!hasHitEOF)  {  hasHitEOF  =  true;  }	  if(entryOffset    >=    0)    {    if(!hasHitEOF)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
525	[BUG]  [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	readNow  =  is.read(buf,  offset,  numToRead);	  if(entryOffset    >=    0)    {    if(!hasHitEOF)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
526	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset  -  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset  -  entrySize  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset  -  entrySize  +  1);	  return    is.read(buf,    offset,    entryOffset    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
527	[BUG]  [BUGGY]  if(i!=  null)  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(i!=  null)  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(i!=  null)  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  }	  i.remove();    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
528	[BUG]  [BUGGY]  i.remove();  hasHitEOF  =  is.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  i.remove();  hasHitEOF  =  is.read(buf,  offset,  0);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	i.remove();  hasHitEOF  =  is.read(buf,  offset,  0);	  i.remove();    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
529	[BUG]  [BUGGY]  if(i  ==  null)  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(i  ==  null)  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(i  ==  null)  {  i.remove();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  }	  i.remove();    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
530	[BUG]  [BUGGY]  i.remove();  hasHitEOF  =  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  i.remove();  hasHitEOF  =  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	i.remove();  hasHitEOF  =  is.read(buf,  offset,  numToRead  +  1);	  i.remove();    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
531	[BUG]  [BUGGY]  entrySize  >  numToRead)  {  return  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entrySize  >  numToRead)  {  return  is.read(buf,  offset,  numToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entrySize  >  numToRead)  {  return  is.read(buf,  offset,  numToRead);  }	  entrySize    >    entryOffset)    {    return    is.read(buf,    offset,    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
532	[BUG]  [BUGGY]  entrySize  >  access)  {  return  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entrySize  >  access)  {  return  is.read(buf,  offset,  numToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entrySize  >  access)  {  return  is.read(buf,  offset,  numToRead);  }	  entrySize    >    entryOffset)    {    return    is.read(buf,    offset,    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
533	[BUG]  [BUGGY]  entrySize  >  totalRead)  {  return  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entrySize  >  totalRead)  {  return  is.read(buf,  offset,  numToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entrySize  >  totalRead)  {  return  is.read(buf,  offset,  numToRead);  }	  entrySize    >    entryOffset)    {    return    is.read(buf,    offset,    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
534	[BUG]  [BUGGY]  entrySize  <  numToRead)  {  return  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entrySize  <  numToRead)  {  return  is.read(buf,  offset,  numToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entrySize  <  numToRead)  {  return  is.read(buf,  offset,  numToRead);  }	  entrySize    >    entryOffset)    {    return    is.read(buf,    offset,    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
535	[BUG]  [BUGGY]  EntryOffset  entrySize  =  0;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  EntryOffset  entrySize  =  0;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	EntryOffset  entrySize  =  0;	  EntryOffset    entrySize    =    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
536	[BUG]  [BUGGY]  EntryOffset  entrySize  =  currEntry.getEntrySize();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  EntryOffset  entrySize  =  currEntry.getEntrySize();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	EntryOffset  entrySize  =  currEntry.getEntrySize();	  EntryOffset    entrySize    =    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
537	[BUG]  [BUGGY]  EntryOffset  entrySize  =  currEntry.entrySize;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  EntryOffset  entrySize  =  currEntry.entrySize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	EntryOffset  entrySize  =  currEntry.entrySize;	  EntryOffset    entrySize    =    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
538	[BUG]  [BUGGY]  EntryOffset  entrySize  =  currEntry.length;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  EntryOffset  entrySize  =  currEntry.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	EntryOffset  entrySize  =  currEntry.length;	  EntryOffset    entrySize    =    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
539	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  1,  hasHitEOF,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  1,  hasHitEOF,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  1,  hasHitEOF,  numToRead);	  return    is.read(buf,    offset    +    1,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
540	[BUG]  [BUGGY]  return  is.read(buf,  offset  -  1,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  -  1,  entryOffset,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  -  1,  entryOffset,  numToRead);	  return    is.read(buf,    offset    +    1,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
541	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  1,  entries.length  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  1,  entries.length  -  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  1,  entries.length  -  1);	  return    is.read(buf,    offset    +    1,    entries.length);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
542	[BUG]  [BUGGY]  return  is.read(buf,  offset  -  1,  entries.length);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  -  1,  entries.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  -  1,  entries.length);	  return    is.read(buf,    offset    +    1,    entries.length);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
543	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  numToRead  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  numToRead  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  numToRead  -  entryOffset);	  return    is.readAndClose(buf,    offset,    entryOffset    -    numToRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
544	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  numToRead  -  buf.length);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  numToRead  -  buf.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  numToRead  -  buf.length);	  return    is.readAndClose(buf,    offset,    entryOffset    -    numToRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
545	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  numToRead  -  inputSize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  numToRead  -  inputSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  numToRead  -  inputSize);	  return    is.readAndClose(buf,    offset,    entryOffset    -    numToRead);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
546	[BUG]  [BUGGY]  return  hasHitEOF  +  entryOffset  -  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  +  entryOffset  -  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  hasHitEOF  +  entryOffset  -  1;	  return    hasHitEOF    +    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
547	[BUG]  [BUGGY]  return  hasHitEOF  +  entrySize;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  +  entrySize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  hasHitEOF  +  entrySize;	  return    hasHitEOF    +    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
548	[BUG]  [BUGGY]  entryOffset  >  entrySize  &&  is.read(buf,  offset,  numToRead))  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  >  entrySize  &&  is.read(buf,  offset,  numToRead))  {  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  >  entrySize  &&  is.read(buf,  offset,  numToRead))  {	  entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
549	[BUG]  [BUGGY]  return  is.readByte(buf,  offset  +  1,  entries.length);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readByte(buf,  offset  +  1,  entries.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readByte(buf,  offset  +  1,  entries.length);	  return    is.readByte(buf,    offset    +    1,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
550	[BUG]  [BUGGY]  entryOffset  >  entrySize.length)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  >  entrySize.length)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  >  entrySize.length)  {  hasHitEOF  =  true;  }	  entryOffset    >    entrySize)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
551	[BUG]  [BUGGY]  if(i.hasNext())  {  hasHitEOF  =  is.read(buf,  offset,  entryOffset);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(i.hasNext())  {  hasHitEOF  =  is.read(buf,  offset,  entryOffset);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(i.hasNext())  {  hasHitEOF  =  is.read(buf,  offset,  entryOffset);  }	  i.remove();    hasHitEOF    =    is.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
552	[BUG]  [BUGGY]  i.remove();  hasHitEOF  =  is.read(buf,  offset,  entryOffset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  i.remove();  hasHitEOF  =  is.read(buf,  offset,  entryOffset  +  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	i.remove();  hasHitEOF  =  is.read(buf,  offset,  entryOffset  +  numToRead);	  i.remove();    hasHitEOF    =    is.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
553	[BUG]  [BUGGY]  i.remove();  hasHitEOF  =  is.read(buf,  offset,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  i.remove();  hasHitEOF  =  is.read(buf,  offset,  entryOffset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	i.remove();  hasHitEOF  =  is.read(buf,  offset,  entryOffset,  hasHitEOF);	  i.remove();    hasHitEOF    =    is.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
554	[BUG]  [BUGGY]  if(entrySize  >  entrySize)  {  return  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  >  entrySize)  {  return  is.read(buf,  offset,  numToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entrySize  >  entrySize)  {  return  is.read(buf,  offset,  numToRead);  }	  if(entryOffset    >    entrySize)    {    return    is.read(buf,    offset,    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
555	[BUG]  [BUGGY]  while(entryOffset  <  entrySize)  {  return  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  while(entryOffset  <  entrySize)  {  return  is.read(buf,  offset,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	while(entryOffset  <  entrySize)  {  return  is.read(buf,  offset,  numToRead);	  if(entryOffset    >    entrySize)    {    return    is.read(buf,    offset,    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
556	[BUG]  [BUGGY]  if(i.hasNext())  {  hasHitEOF  =  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(i.hasNext())  {  hasHitEOF  =  is.read(buf,  offset,  numToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(i.hasNext())  {  hasHitEOF  =  is.read(buf,  offset,  numToRead);  }	  i.remove();    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
557	[BUG]  [BUGGY]  i.remove();  hasHitEOF  =  is.read(buf,  offset,  -1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  i.remove();  hasHitEOF  =  is.read(buf,  offset,  -1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	i.remove();  hasHitEOF  =  is.read(buf,  offset,  -1);	  i.remove();    hasHitEOF    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
558	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  numToRead  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  numToRead  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset  +  numToRead  +  1;	  return    is.read(buf,    offset,    entryOffset    +    numToRead;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
559	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  2,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  2,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  2,  hasHitEOF);	  return    is.read(buf,    offset    +    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
560	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  0,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  0,  hasHitEOF);	  return    is.read(buf,    offset    +    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
561	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  1,  entrySize  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  1,  entrySize  -  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  1,  entrySize  -  1);	  return    is.read(buf,    offset    +    1,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
562	[BUG]  [BUGGY]  entryOffset  =  entrySize  -  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  =  entrySize  -  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  =  entrySize  -  1;	  entryOffset    =    entrySize;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
563	[BUG]  [BUGGY]  entryOffset  =  entrySize  +  numRecords;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  =  entrySize  +  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  =  entrySize  +  numRecords;	  entryOffset    =    entrySize;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
564	[BUG]  [BUGGY]  entryOffset  =  entrySize  +  numRecords.length;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  =  entrySize  +  numRecords.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  =  entrySize  +  numRecords.length;	  entryOffset    =    entrySize;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
565	[BUG]  [BUGGY]  entrySize  <  entryOffset)  {  return  hasHitEOF;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entrySize  <  entryOffset)  {  return  hasHitEOF;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entrySize  <  entryOffset)  {  return  hasHitEOF;  }	  entrySize    >    entryOffset)    {    return    hasHitEOF;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
566	[BUG]  [BUGGY]  return  is.readByte(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readByte(buf,  offset,  0);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readByte(buf,  offset,  0);	  return    is.readByte(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
567	[BUG]  [BUGGY]  entryOffset  <  numRecords)  {  return  entrySize;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  <  numRecords)  {  return  entrySize;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  <  numRecords)  {  return  entrySize;  }	  if(entryOffset    <    entrySize)    {    return    entryOffset;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
568	[BUG]  [BUGGY]  entrySize  >  entryOffset  +  1;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entrySize  >  entryOffset  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entrySize  >  entryOffset  +  1;	  entrySize    >    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
569	[BUG]  [BUGGY]  entrySize  >  entryOffset  +  numRecords;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entrySize  >  entryOffset  +  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entrySize  >  entryOffset  +  numRecords;	  entrySize    >    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
570	[BUG]  [BUGGY]  entrySize  >  blockSize;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entrySize  >  blockSize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entrySize  >  blockSize;	  entrySize    >    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
571	[BUG]  [BUGGY]  entrySize  >  entryOffset  +  numRecords.length;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entrySize  >  entryOffset  +  numRecords.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entrySize  >  entryOffset  +  numRecords.length;	  entrySize    >    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
572	[BUG]  [BUGGY]  return  is.read(buf,  offset,  hasHitEOF,  entrySize);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  hasHitEOF,  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  hasHitEOF,  entrySize);	  return    is.read(buf,    offset,    hasHitEOF,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
573	[BUG]  [BUGGY]  return  is.read(buf,  offset,  hasHitEOF,  entryOffset  -  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  hasHitEOF,  entryOffset  -  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  hasHitEOF,  entryOffset  -  1);	  return    is.read(buf,    offset,    hasHitEOF,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
574	[BUG]  [BUGGY]  int  padding  =  is.read(buf,  offset,  numToSkip);  entrySize  +=  padding;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  padding  =  is.read(buf,  offset,  numToSkip);  entrySize  +=  padding;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  padding  =  is.read(buf,  offset,  numToSkip);  entrySize  +=  padding;	  int    padding    =    is.read(buf,    offset,    numToRead);    entrySize    +=    padding;    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
575	[BUG]  [BUGGY]  int  padding  =  is.read(buf,  offset,  numToRead);  entrySize  +=  numRecords;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  padding  =  is.read(buf,  offset,  numToRead);  entrySize  +=  numRecords;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  padding  =  is.read(buf,  offset,  numToRead);  entrySize  +=  numRecords;	  int    padding    =    is.read(buf,    offset,    numToRead);    entrySize    +=    padding;    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
576	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(!hasHitEOF)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entrySize  >  0)  {  if(!hasHitEOF)  {  hasHitEOF  =  false;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entrySize  >  0)  {  if(!hasHitEOF)  {  hasHitEOF  =  false;  }	  if(entryOffset    >=    0)    {    if(!hasHitEOF)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
577	[BUG]  [BUGGY]  if(entryOffset  >=  0)  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >=  0)  {  hasHitEOF  =  false;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  >=  0)  {  hasHitEOF  =  false;  }	  if(entryOffset    >=    0)    {    if(!hasHitEOF)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
578	[BUG]  [BUGGY]  return  is.read(buf,  offset,  -entryOffset);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  -entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  -entryOffset);	  return    is.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
579	[BUG]  [BUGGY]  entryOffset  >  entrySize  -  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  >  entrySize  -  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  >  entrySize  -  1;	  entryOffset    >    entrySize;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
580	[BUG]  [BUGGY]  entryOffset  >  entrySize  +  numRecords.length;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  >  entrySize  +  numRecords.length;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  >  entrySize  +  numRecords.length;	  entryOffset    >    entrySize;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
581	[BUG]  [BUGGY]  if(entryOffset  >  access)  {  return  entrySize;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >  access)  {  return  entrySize;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  >  access)  {  return  entrySize;  }	  if(entryOffset    >    access)    {    return    entryOffset;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
582	[BUG]  [BUGGY]  if(entryOffset  >  access)  {  return  hasHitEOF;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >  access)  {  return  hasHitEOF;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  >  access)  {  return  hasHitEOF;  }	  if(entryOffset    >    access)    {    return    entryOffset;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
583	[BUG]  [BUGGY]  entryOffset  >  accessRecords)  {  return  entryOffset;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  >  accessRecords)  {  return  entryOffset;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  >  accessRecords)  {  return  entryOffset;  }	  if(entryOffset    >    access)    {    return    entryOffset;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
584	[BUG]  [BUGGY]  EntryOffset  entrySize  =  entryOffset  +  numRecords.size();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  EntryOffset  entrySize  =  entryOffset  +  numRecords.size();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	EntryOffset  entrySize  =  entryOffset  +  numRecords.size();	  EntryOffset    entrySize    =    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
585	[BUG]  [BUGGY]  EntryOffset  entrySize  =  i.getEntrySize();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  EntryOffset  entrySize  =  i.getEntrySize();  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	EntryOffset  entrySize  =  i.getEntrySize();	  EntryOffset    entrySize    =    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
586	[BUG]  [BUGGY]  return  is.read(buf,  offset,  numToRead,  hasHitEOF  +  buf.length);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  numToRead,  hasHitEOF  +  buf.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  numToRead,  hasHitEOF  +  buf.length);	  return    is.read(buf,    offset,    entryOffset,    hasHitEOF    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
587	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset,  hasHitEOF  -  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset,  hasHitEOF  -  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset,  hasHitEOF  -  hasHitEOF);	  return    is.read(buf,    offset,    entryOffset,    hasHitEOF    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
588	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  0,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset  +  0,  hasHitEOF);	  return    is.read(buf,    offset,    entryOffset    +    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
589	[BUG]  [BUGGY]  return  hasHitEOF  ||  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  ||  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  hasHitEOF  ||  is.read(buf,  offset,  numToRead  +  1);	  return    hasHitEOF    ||    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
590	[BUG]  [BUGGY]  if(entryOffset  >  available)  {  return  buf.length;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >  available)  {  return  buf.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  >  available)  {  return  buf.length;  }	  if(entryOffset    >    available)    {    return    entryOffset;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
591	[BUG]  [BUGGY]  return  entryOffset  +  numToRead  +  offset;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  entryOffset  +  numToRead  +  offset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  entryOffset  +  numToRead  +  offset;	  return    entryOffset    +    numToRead;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
592	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  1,  buf.length  -  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  1,  buf.length  -  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  1,  buf.length  -  numToRead);	  return    is.read(buf,    offset    +    1,    entryOffset    -    numToRead);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
593	[BUG]  [BUGGY]  entryOffset  +=  recordSize;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  +=  recordSize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  +=  recordSize;	  entryOffset    +=    entrySize;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
594	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  1,  buf.length,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  1,  buf.length,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  1,  buf.length,  numToRead);	  return    is.read(buf,    offset    +    1,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
595	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  1,  fullNameData,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  1,  fullNameData,  entryOffset,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  1,  fullNameData,  entryOffset,  numToRead);	  return    is.read(buf,    offset    +    1,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
596	[BUG]  [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  numToRead  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  entryOffset  +  numToRead  -  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  entryOffset  +  numToRead  -  1);	  return    is.read(buf,    offset,    entryOffset    -    1);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
597	[BUG]  [BUGGY]  return  is.read(buf,  offset,  count(entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  count(entryOffset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  count(entryOffset,  hasHitEOF);	  return    is.read(buf,    offset,    entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
598	[BUG]  [BUGGY]  entrySize  >  entryOffset)  {  return  is.read(buf,  offset,  numToRead  +  1);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entrySize  >  entryOffset)  {  return  is.read(buf,  offset,  numToRead  +  1);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entrySize  >  entryOffset)  {  return  is.read(buf,  offset,  numToRead  +  1);  }	  entrySize    >    entryOffset)    {    return    is.read(buf,    offset,    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
599	[BUG]  [BUGGY]  entrySize  >  entryOffset)  {  return  is.read(buf,  offset,  0);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entrySize  >  entryOffset)  {  return  is.read(buf,  offset,  0);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entrySize  >  entryOffset)  {  return  is.read(buf,  offset,  0);  }	  entrySize    >    entryOffset)    {    return    is.read(buf,    offset,    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
600	[BUG]  [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  offset;  i  <  SMALL_BUFFER_SIZE;  i++)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  offset;  i  <  SMALL_BUFFER_SIZE;  i++)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  >  entrySize)  {  for(int  i  =  offset;  i  <  SMALL_BUFFER_SIZE;  i++)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    offset;    i    <    numRecords;    i++)    {    buffer[i]    =    is.read(buf,    offset,    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
601	[BUG]  [BUGGY]  if(entryOffset  <  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  i++)  {  buffer[i]  =  is.read(buf,  offset,  0);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  <  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  i++)  {  buffer[i]  =  is.read(buf,  offset,  0);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  <  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  i++)  {  buffer[i]  =  is.read(buf,  offset,  0);  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    offset;    i    <    numRecords;    i++)    {    buffer[i]    =    is.read(buf,    offset,    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
602	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  1,  entries.length  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  1,  entries.length  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  1,  entries.length  -  entryOffset);	  return    is.read(buf,    offset    +    1,    entries.length);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
603	[BUG]  [BUGGY]  return  is.read(buf,  offset,  numToRead  +  len);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  numToRead  +  len);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  numToRead  +  len);	  return    is.read(buf,    offset,    totalRead    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
604	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  totalRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  totalRead,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  totalRead,  hasHitEOF);	  return    is.read(buf,    offset    +    entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
605	[BUG]  [BUGGY]  return  is.readAndClose(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.readAndClose(buf,  offset,  numToRead,  len);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.readAndClose(buf,  offset,  numToRead,  len);	  return    is.readAndClose(buf,    offset,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
606	[BUG]  [BUGGY]  return  is.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  numToRead,  len);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  numToRead,  len);	  return    is.read(buf,    offset,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
607	[BUG]  [BUGGY]  return  is.read(buf,  offset,  numToRead,  buf.length);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset,  numToRead,  buf.length);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset,  numToRead,  buf.length);	  return    is.read(buf,    offset,    entryOffset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
608	[BUG]  [BUGGY]  int  padding  =  is.read(buf,  offset,  0);  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  int  padding  =  is.read(buf,  offset,  0);  hasHitEOF  =  false;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	int  padding  =  is.read(buf,  offset,  0);  hasHitEOF  =  false;	  int    padding    =    is.read(buf,    offset,    numToRead);    hasHitEOF    =    true;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
609	[BUG]  [BUGGY]  if(entryOffset  >=  0)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >=  0)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  >=  0)  {  hasHitEOF  =  true;  }	  if(entryOffset    >=    0)    {    if(!hasHitEOF)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
610	[BUG]  [BUGGY]  if(entryOffset  >  0)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >  0)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  >  0)  {  hasHitEOF  =  true;  }	  if(entryOffset    >=    0)    {    if(!hasHitEOF)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
611	[BUG]  [BUGGY]  if(entryOffset  <  0)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  <  0)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  <  0)  {  hasHitEOF  =  true;  }	  if(entryOffset    >=    0)    {    if(!hasHitEOF)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
612	[BUG]  [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  start;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  >  entrySize)  {  for(int  i  =  start;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  >  entrySize)  {  for(int  i  =  start;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    offset;    i    <    numRecords;    ++i)    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
613	[BUG]  [BUGGY]  return  hasHitEOF  &&  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  is.read(buf,  offset,  totalRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  hasHitEOF  &&  is.read(buf,  offset,  totalRead);	  return    hasHitEOF    &&    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
614	[BUG]  [BUGGY]  return  hasHitEOF  &&  is.read(buf,  offset,  len);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  is.read(buf,  offset,  len);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  hasHitEOF  &&  is.read(buf,  offset,  len);	  return    hasHitEOF    &&    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
615	[BUG]  [BUGGY]  return  hasHitEOF  &&  is.read(buf,  offset,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  &&  is.read(buf,  offset,  0,  numToRead);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  hasHitEOF  &&  is.read(buf,  offset,  0,  numToRead);	  return    hasHitEOF    &&    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
616	[BUG]  [BUGGY]  return  hasHitEOF  ||  is.read(buf);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  hasHitEOF  ||  is.read(buf);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  hasHitEOF  ||  is.read(buf);	  return    hasHitEOF    ||    hasHitEOF;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
617	[BUG]  [BUGGY]  if(entryOffset  <  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  0);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  <  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  0);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  <  entrySize)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  0);  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    offset;    i    <    numRecords;    ++i)    {    buffer[i]    =    is.read(buf,    offset,    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
618	[BUG]  [BUGGY]  if(entryOffset  <  entrySize)  {  for(int  i  =  offset;  i  <  0;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  if(entryOffset  <  entrySize)  {  for(int  i  =  offset;  i  <  0;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	if(entryOffset  <  entrySize)  {  for(int  i  =  offset;  i  <  0;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }	  if(entryOffset    >    entrySize)    {    for(int    i    =    offset;    i    <    numRecords;    ++i)    {    buffer[i]    =    is.read(buf,    offset,    numToRead);    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
619	[BUG]  [BUGGY]  return  is.read(buf,  offset  +  entries.length,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  return  is.read(buf,  offset  +  entries.length,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	return  is.read(buf,  offset  +  entries.length,  hasHitEOF);	  return    is.read(buf,    offset    +    entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
620	[BUG]  [BUGGY]  entryOffset  >  entrySize,  hasHitEOF  =  false;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);  if  (totalRead  ==  -1)  {  hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }      [BUGGY]  entryOffset  >  entrySize,  hasHitEOF  =  false;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	591	591	1	replace	entryOffset  >  entrySize,  hasHitEOF  =  false;	  entryOffset    >    entrySize)    {    hasHitEOF    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
