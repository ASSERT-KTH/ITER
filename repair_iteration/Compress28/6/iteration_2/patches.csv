bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(numToRead  ||  hasHitEOF  ||  totalRead  ==  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ||  hasHitEOF  ||  totalRead  ==  entryOffset)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ||  hasHitEOF  ||  totalRead  ==  entryOffset)  {	  if(numToRead    ||    hasHitEOF    ==    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
2	[BUG]  [BUGGY]  if(numToRead  ||  hasHitEOF  ||  numRecords  ==  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ||  hasHitEOF  ||  numRecords  ==  entryOffset)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ||  hasHitEOF  ||  numRecords  ==  entryOffset)  {	  if(numToRead    ||    hasHitEOF    ==    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
3	[BUG]  [BUGGY]  if(numToRead  ||  hasHitEOF  ||  numToRead  ==  entrySize)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ||  hasHitEOF  ||  numToRead  ==  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ||  hasHitEOF  ||  numToRead  ==  entrySize)  {	  if(numToRead    ||    hasHitEOF    ==    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
4	[BUG]  [BUGGY]  if(entryOffset  ||  numToRead  ==  numToRead)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entryOffset  ||  numToRead  ==  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entryOffset  ||  numToRead  ==  numToRead)  {	  if(numToRead    ||    hasHitEOF    ==    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
5	[BUG]  [BUGGY]  if(entryOffset  ||  numToRead  ==  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entryOffset  ||  numToRead  ==  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entryOffset  ||  numToRead  ==  hasHitEOF)  {	  if(numToRead    ||    hasHitEOF    ==    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
6	[BUG]  [BUGGY]  if(numToRead  ||  hasHitEOF  ||  entrySize  ==  numToRead)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ||  hasHitEOF  ||  entrySize  ==  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ||  hasHitEOF  ||  entrySize  ==  numToRead)  {	  if(numToRead    ||    hasHitEOF    ==    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
7	[BUG]  [BUGGY]  if  (hasHitEOF  &&  buf.length  >=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  buf.length  >=  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  buf.length  >=  numToRead)  {	  if    (hasHitEOF    ||    buf.length    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
8	[BUG]  [BUGGY]  if  (hasHitEOF  &&  buf.length!=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  buf.length!=  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  buf.length!=  numToRead)  {	  if    (hasHitEOF    ||    buf.length    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
9	[BUG]  [BUGGY]  if(numToRead  >=  hasHitEOF  ||  buf.length  >=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  >=  hasHitEOF  ||  buf.length  >=  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  >=  hasHitEOF  ||  buf.length  >=  numToRead)  {	  if    (hasHitEOF    ||    buf.length    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
10	[BUG]  [BUGGY]  if(numToRead  ==  hasHitEOF  ||  buf.length  >=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ==  hasHitEOF  ||  buf.length  >=  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ==  hasHitEOF  ||  buf.length  >=  numToRead)  {	  if    (hasHitEOF    ||    buf.length    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
11	[BUG]  [BUGGY]  if(numToRead!=  hasHitEOF  ||  buf.length  >=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead!=  hasHitEOF  ||  buf.length  >=  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead!=  hasHitEOF  ||  buf.length  >=  numToRead)  {	  if    (hasHitEOF    ||    buf.length    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
12	[BUG]  [BUGGY]  if  (numToRead  >  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  >  entryOffset)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  >  entryOffset)  {	  if    (numToRead    >=    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
13	[BUG]  [BUGGY]  if(numToRead  >=  entrySize)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  >=  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  >=  entrySize)  {	  if    (numToRead    >=    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
14	[BUG]  [BUGGY]  if  (offset  >=  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (offset  >=  entryOffset)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (offset  >=  entryOffset)  {	  if    (numToRead    >=    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
15	[BUG]  [BUGGY]  if  (numToRead  ==  entrySize)  {  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  ==  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  ==  entrySize)  {	  if    (numToRead    >=    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
16	[BUG]  [BUGGY]  if  (numToRead  ==  totalRead)  {  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  ==  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  ==  totalRead)  {	  if    (numToRead    >=    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
17	[BUG]  [BUGGY]  if(numToRead  >=  entrySize  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  >=  entrySize  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  >=  entrySize  ||  hasHitEOF)  {	  if(numToRead    >=    entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
18	[BUG]  [BUGGY]  if(numToRead  ==  entrySize  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ==  entrySize  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ==  entrySize  ||  hasHitEOF)  {	  if(numToRead    >=    entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
19	[BUG]  [BUGGY]  if(numToRead  ==  entryOffset  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ==  entryOffset  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ==  entryOffset  ||  hasHitEOF)  {	  if(numToRead    >=    entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
20	[BUG]  [BUGGY]  if(numToRead  >=  totalRead  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  >=  totalRead  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  >=  totalRead  ||  hasHitEOF)  {	  if(numToRead    >=    entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
21	[BUG]  [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  continue  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  continue  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  continue	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getEntry(i);    if(currEntry!=    null)    {    continue    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
22	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  continue  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  continue  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  continue	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getEntry(i);    if(currEntry!=    null)    {    continue    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
23	[BUG]  [BUGGY]  if(numRecords!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  continue  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numRecords!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  continue  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numRecords!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  continue	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getEntry(i);    if(currEntry!=    null)    {    continue    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
24	[BUG]  [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  continue  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  continue  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  continue	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getEntry(i);    if(currEntry!=    null)    {    continue    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
25	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  continue  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  continue  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  continue	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getEntry(i);    if(currEntry!=    null)    {    continue    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
26	[BUG]  [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  continue  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  continue  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  continue	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getEntry(i);    if(currEntry!=    null)    {    continue    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
27	[BUG]  [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  continue  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  continue  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  continue	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getEntry(i);    if(currEntry!=    null)    {    continue    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
28	[BUG]  [BUGGY]  if  (hasHitEOF  &&  entryOffset  >  totalRead)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  entryOffset  >  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  entryOffset  >  totalRead)  {	  if    (hasHitEOF    ||    entryOffset    >    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
29	[BUG]  [BUGGY]  if  (hasHitEOF  ||  totalRead  >  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  ||  totalRead  >  entryOffset)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  totalRead  >  entryOffset)  {	  if    (hasHitEOF    ||    entryOffset    >    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
30	[BUG]  [BUGGY]  if  (numToRead  >  totalRead  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  >  totalRead  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  >  totalRead  ||  hasHitEOF)  {	  if    (hasHitEOF    ||    entryOffset    >    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
31	[BUG]  [BUGGY]  if  (hasHitEOF  ||  totalRead  >  offset)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  ||  totalRead  >  offset)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  totalRead  >  offset)  {	  if    (hasHitEOF    ||    entryOffset    >    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
32	[BUG]  [BUGGY]  if  (hasHitEOF  &&  totalRead  ==  entrySize)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  totalRead  ==  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  totalRead  ==  entrySize)  {	  if    (hasHitEOF    &&    entryOffset    ==    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
33	[BUG]  [BUGGY]  if  (hasHitEOF  &&  entrySize  ==  numRecords)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  entrySize  ==  numRecords)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  entrySize  ==  numRecords)  {	  if    (hasHitEOF    &&    entryOffset    ==    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
34	[BUG]  [BUGGY]  if(entryOffset  ==  numToRead  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entryOffset  ==  numToRead  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entryOffset  ==  numToRead  ||  hasHitEOF)  {	  if(entrySize    ==    entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
35	[BUG]  [BUGGY]  if(entryOffset  ==  entrySize  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entryOffset  ==  entrySize  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entryOffset  ==  entrySize  ||  hasHitEOF)  {	  if(entrySize    ==    entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
36	[BUG]  [BUGGY]  if(entryOffset  ==  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entryOffset  ==  0  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entryOffset  ==  0  ||  hasHitEOF)  {	  if(entrySize    ==    entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
37	[BUG]  [BUGGY]  if(offset  ==  entryOffset  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(offset  ==  entryOffset  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(offset  ==  entryOffset  ||  hasHitEOF)  {	  if(entrySize    ==    entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
38	[BUG]  [BUGGY]  if  (hasHitEOF  &&  totalRead  <  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  totalRead  <  entryOffset)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  totalRead  <  entryOffset)  {	  if    (hasHitEOF    ||    totalRead    <    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
39	[BUG]  [BUGGY]  if  (!hasHitEOF  &&  totalRead  <  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (!hasHitEOF  &&  totalRead  <  entryOffset)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (!hasHitEOF  &&  totalRead  <  entryOffset)  {	  if    (hasHitEOF    ||    totalRead    <    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
40	[BUG]  [BUGGY]  byte[]  currEntry  =  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =  is.read(buf,  offset,  totalRead);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =  is.read(buf,  offset,  totalRead);	  byte[]    currEntry    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
41	[BUG]  [BUGGY]  byte[]  currEntry  =  is.read(buf,  offset,  numToRead,  totalRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =  is.read(buf,  offset,  numToRead,  totalRead);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =  is.read(buf,  offset,  numToRead,  totalRead);	  byte[]    currEntry    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
42	[BUG]  [BUGGY]  byte[]  currEntry  =  is.read(buf,  offset,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =  is.read(buf,  offset,  0,  numToRead);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =  is.read(buf,  offset,  0,  numToRead);	  byte[]    currEntry    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
43	[BUG]  [BUGGY]  byte[]  currEntry  =  is.read(buf,  offset,  numToRead,  true);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =  is.read(buf,  offset,  numToRead,  true);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =  is.read(buf,  offset,  numToRead,  true);	  byte[]    currEntry    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
44	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buf.length  ==  numToRead)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  buf.length  ==  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  buf.length  ==  numToRead)  {	  if(!hasHitEOF    &&    entryOffset    ==    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
45	[BUG]  [BUGGY]  if(!hasHitEOF  &&  totalRead  ==  numToRead)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  totalRead  ==  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  totalRead  ==  numToRead)  {	  if(!hasHitEOF    &&    entryOffset    ==    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
46	[BUG]  [BUGGY]  if(!hasHitEOF  &&  is.read(buf,  offset,  numToRead))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  is.read(buf,  offset,  numToRead))  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  is.read(buf,  offset,  numToRead))  {	  if(!hasHitEOF    &&    entryOffset    ==    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
47	[BUG]  [BUGGY]  if(!hasHitEOF  &&  entrySize  ==  numToRead)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  entrySize  ==  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  entrySize  ==  numToRead)  {	  if(!hasHitEOF    &&    entryOffset    ==    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
48	[BUG]  [BUGGY]  if(!hasHitEOF  ||  entryOffset  ==  numToRead)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  ||  entryOffset  ==  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  ||  entryOffset  ==  numToRead)  {	  if(!hasHitEOF    &&    entryOffset    ==    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
49	[BUG]  [BUGGY]  if(!hasHitEOF  &&  numToRead  ==  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  numToRead  ==  entryOffset)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  numToRead  ==  entryOffset)  {	  if(!hasHitEOF    &&    entryOffset    ==    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
50	[BUG]  [BUGGY]  if(numToRead  ==  hasHitEOF  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ==  hasHitEOF  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ==  hasHitEOF  ||  hasHitEOF)  {	  if(entryOffset    ==    hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
51	[BUG]  [BUGGY]  if(entrySize  ==  hasHitEOF  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entrySize  ==  hasHitEOF  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entrySize  ==  hasHitEOF  ||  hasHitEOF)  {	  if(entryOffset    ==    hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
52	[BUG]  [BUGGY]  if(numToRead  ==  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ==  0  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ==  0  ||  hasHitEOF)  {	  if(entryOffset    ==    hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
53	[BUG]  [BUGGY]  if(entryOffset  ==  hasHitEOF  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entryOffset  ==  hasHitEOF  &&  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entryOffset  ==  hasHitEOF  &&  hasHitEOF)  {	  if(entryOffset    ==    hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
54	[BUG]  [BUGGY]  if(offset  ==  hasHitEOF  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(offset  ==  hasHitEOF  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(offset  ==  hasHitEOF  ||  hasHitEOF)  {	  if(entryOffset    ==    hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
55	[BUG]  [BUGGY]  if  (hasHitEOF  ||  currEntry!=  null)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  ||  currEntry!=  null)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  currEntry!=  null)  {	  if    (hasHitEOF    &&    currEntry!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
56	[BUG]  [BUGGY]  if  (hasHitEOF  &&  currEntry  ==  null)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  currEntry  ==  null)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  currEntry  ==  null)  {	  if    (hasHitEOF    &&    currEntry!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
57	[BUG]  [BUGGY]  if(!hasHitEOF  &&  currEntry!=  null)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  currEntry!=  null)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  currEntry!=  null)  {	  if    (hasHitEOF    &&    currEntry!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
58	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buf.length  ==  entrySize)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  buf.length  ==  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  buf.length  ==  entrySize)  {	  if(!hasHitEOF    &&    entryOffset    ==    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
59	[BUG]  [BUGGY]  if(!hasHitEOF  &&  entryOffset  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  entryOffset  ==  0)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  entryOffset  ==  0)  {	  if(!hasHitEOF    &&    entryOffset    ==    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
60	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buf.length  ==  totalRead)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  buf.length  ==  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  buf.length  ==  totalRead)  {	  if(!hasHitEOF    &&    entryOffset    ==    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
61	[BUG]  [BUGGY]  if(!hasHitEOF  ||  entryOffset  ==  totalRead)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  ||  entryOffset  ==  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  ||  entryOffset  ==  totalRead)  {	  if(!hasHitEOF    &&    entryOffset    ==    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
62	[BUG]  [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  null)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  null)  {  return  -1;  }  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  null)  {  return  -1;  }	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getValue(i);    if(currEntry!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
63	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  null)  {  return  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  null)  {  return  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  null)  {  return	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getValue(i);    if(currEntry!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
64	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  null)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  null)  {  return  -1;  }  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  null)  {  return  -1;  }	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getValue(i);    if(currEntry!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
65	[BUG]  [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  null)  {  return  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  null)  {  return  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  null)  {  return	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getValue(i);    if(currEntry!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
66	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  null)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  null)  {  return  -1;  }  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  null)  {  return  -1;  }	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getValue(i);    if(currEntry!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
67	[BUG]  [BUGGY]  if(numRecords!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  null)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numRecords!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  null)  {  return  -1;  }  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numRecords!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  null)  {  return  -1;  }	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getValue(i);    if(currEntry!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
68	[BUG]  [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  null)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  null)  {  return  -1;  }  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  null)  {  return  -1;  }	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getValue(i);    if(currEntry!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
69	[BUG]  [BUGGY]  if  (hasHitEOF  &&  buf.length!=  totalRead)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  buf.length!=  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  buf.length!=  totalRead)  {	  if    (hasHitEOF    &&    buf.length!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
70	[BUG]  [BUGGY]  if  (hasHitEOF  &&  buf.length!=  numRecords)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  buf.length!=  numRecords)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  buf.length!=  numRecords)  {	  if    (hasHitEOF    &&    buf.length!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
71	[BUG]  [BUGGY]  if  (hasHitEOF  ||  buf.length!=  entrySize)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  ||  buf.length!=  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  buf.length!=  entrySize)  {	  if    (hasHitEOF    &&    buf.length!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
72	[BUG]  [BUGGY]  if  (hasHitEOF  &&  buf.length  >  entrySize)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  buf.length  >  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  buf.length  >  entrySize)  {	  if    (hasHitEOF    &&    buf.length!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
73	[BUG]  [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =  getCurrentEntry(buf);	  byte[]    currEntry    =    getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
74	[BUG]  [BUGGY]  byte[]  currEntry  =  getCurrentEntry().length;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =  getCurrentEntry().length;  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =  getCurrentEntry().length;	  byte[]    currEntry    =    getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
75	[BUG]  [BUGGY]  byte[]  currEntry  =  getCurrentEntryInput();  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =  getCurrentEntryInput();  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =  getCurrentEntryInput();	  byte[]    currEntry    =    getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
76	[BUG]  [BUGGY]  if  (hasHitEOF  &&  totalRead  <  numToRead)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  totalRead  <  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  totalRead  <  numToRead)  {	  if    (hasHitEOF    ||    totalRead    <    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
77	[BUG]  [BUGGY]  if(numToRead  <  hasHitEOF  ||  totalRead  <  numToRead)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  hasHitEOF  ||  totalRead  <  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  hasHitEOF  ||  totalRead  <  numToRead)  {	  if    (hasHitEOF    ||    totalRead    <    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
78	[BUG]  [BUGGY]  if(numToRead  <  totalRead  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  totalRead  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  totalRead  ||  hasHitEOF)  {	  if    (hasHitEOF    ||    totalRead    <    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
79	[BUG]  [BUGGY]  if  (numToRead  >  entrySize  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  >  entrySize  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  >  entrySize  ||  hasHitEOF)  {	  if    (numToRead    >    entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
80	[BUG]  [BUGGY]  if(numToRead!=  entrySize  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead!=  entrySize  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead!=  entrySize  ||  hasHitEOF)  {	  if    (entrySize    >=    numToRead    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
81	[BUG]  [BUGGY]  if(numToRead  ||  hasHitEOF  ||  totalRead  <  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ||  hasHitEOF  ||  totalRead  <  0)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ||  hasHitEOF  ||  totalRead  <  0)  {	  if(numToRead    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
82	[BUG]  [BUGGY]  if(numToRead  <  =  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  =  0  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  =  0  ||  hasHitEOF)  {	  if(numToRead    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
83	[BUG]  [BUGGY]  if(numToRead  ||  hasHitEOF  ||  totalRead  >  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ||  hasHitEOF  ||  totalRead  >  0)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ||  hasHitEOF  ||  totalRead  >  0)  {	  if(numToRead    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
84	[BUG]  [BUGGY]  if(numToRead  >=  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  >=  0  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  >=  0  ||  hasHitEOF)  {	  if(numToRead    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
85	[BUG]  [BUGGY]  if(numToRead  <  hasHitEOF  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  hasHitEOF  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  hasHitEOF  ||  hasHitEOF)  {	  if(entryOffset    <    hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
86	[BUG]  [BUGGY]  if(numToRead  <  entrySize  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  entrySize  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  entrySize  ||  hasHitEOF)  {	  if(entryOffset    <    hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
87	[BUG]  [BUGGY]  if(offset  <  hasHitEOF  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(offset  <  hasHitEOF  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(offset  <  hasHitEOF  ||  hasHitEOF)  {	  if(entryOffset    <    hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
88	[BUG]  [BUGGY]  if(entrySize  <  hasHitEOF  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entrySize  <  hasHitEOF  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entrySize  <  hasHitEOF  ||  hasHitEOF)  {	  if(entryOffset    <    hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
89	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entryOffset  <  0  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entryOffset  <  0  ||  hasHitEOF)  {	  if(entryOffset    <    hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
90	[BUG]  [BUGGY]  if(numToRead  <  hasHitEOF  ||  is.read(buf,  offset,  numToRead))  {  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  hasHitEOF  ||  is.read(buf,  offset,  numToRead))  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  hasHitEOF  ||  is.read(buf,  offset,  numToRead))  {	  if(entryOffset    <    hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
91	[BUG]  [BUGGY]  if(numToRead  <  length  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  length  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  length  ||  hasHitEOF)  {	  if(entryOffset    <    hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
92	[BUG]  [BUGGY]  if  (hasHitEOF  &&  buf.length  <  totalRead)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  buf.length  <  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  buf.length  <  totalRead)  {	  if    (hasHitEOF    &&    entryOffset    <    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
93	[BUG]  [BUGGY]  if  (hasHitEOF  &&  buf  <  totalRead)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  buf  <  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  buf  <  totalRead)  {	  if    (hasHitEOF    &&    entryOffset    <    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
94	[BUG]  [BUGGY]  if  (hasHitEOF  &&  buf.length  <  =  totalRead)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  buf.length  <  =  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  buf.length  <  =  totalRead)  {	  if    (hasHitEOF    &&    entryOffset    <    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
95	[BUG]  [BUGGY]  if  (entryOffset  ||  numToRead  ==  totalRead)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (entryOffset  ||  numToRead  ==  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (entryOffset  ||  numToRead  ==  totalRead)  {	  if    (numToRead    ||    entryOffset    ==    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
96	[BUG]  [BUGGY]  if  (numToRead  ||  numRecords  ==  totalRead)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  ||  numRecords  ==  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  ||  numRecords  ==  totalRead)  {	  if    (numToRead    ||    entryOffset    ==    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
97	[BUG]  [BUGGY]  if  (numToRead  ||  entryOffset  ==  0)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  ||  entryOffset  ==  0)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  ||  entryOffset  ==  0)  {	  if    (numToRead    ||    entryOffset    ==    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
98	[BUG]  [BUGGY]  if  (offset  ||  entryOffset  ==  numToRead)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (offset  ||  entryOffset  ==  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (offset  ||  entryOffset  ==  numToRead)  {	  if    (numToRead    ||    entryOffset    ==    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
99	[BUG]  [BUGGY]  if  (numToRead  ||  numRecords  ==  entrySize)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  ||  numRecords  ==  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  ||  numRecords  ==  entrySize)  {	  if    (numToRead    ||    entryOffset    ==    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
100	[BUG]  [BUGGY]  if(!hasHitEOF  &&  entrySize  ==  numRecords)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  entrySize  ==  numRecords)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  entrySize  ==  numRecords)  {	  if(!hasHitEOF    &&    entryOffset    ==    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
101	[BUG]  [BUGGY]  if(!hasHitEOF  &&  totalRead  ==  entrySize)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  totalRead  ==  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  totalRead  ==  entrySize)  {	  if(!hasHitEOF    &&    entryOffset    ==    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
102	[BUG]  [BUGGY]  if  (hasHitEOF  &&  buf.length  ==  numToRead)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  buf.length  ==  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  buf.length  ==  numToRead)  {	  if    (hasHitEOF    &&    entryOffset    ==    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
103	[BUG]  [BUGGY]  if(numToRead  <  0  ||  hasHitEOF  &&  entryOffset  ==  numToRead)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  0  ||  hasHitEOF  &&  entryOffset  ==  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  0  ||  hasHitEOF  &&  entryOffset  ==  numToRead)  {	  if    (hasHitEOF    &&    entryOffset    ==    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
104	[BUG]  [BUGGY]  if  (hasHitEOF  &&  totalRead  ==  numToRead)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  totalRead  ==  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  totalRead  ==  numToRead)  {	  if    (hasHitEOF    &&    entryOffset    ==    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
105	[BUG]  [BUGGY]  if  (numToRead  &&  hasHitEOF  ==  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  &&  hasHitEOF  ==  entryOffset)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  &&  hasHitEOF  ==  entryOffset)  {	  if    (hasHitEOF    &&    entryOffset    ==    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
106	[BUG]  [BUGGY]  if  (offset  >=  numToRead  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (offset  >=  numToRead  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (offset  >=  numToRead  ||  hasHitEOF)  {	  if    (entryOffset    >=    numToRead    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
107	[BUG]  [BUGGY]  if  (hasHitEOF  &&  totalRead  >=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  totalRead  >=  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  totalRead  >=  numToRead)  {	  if    (hasHitEOF    ||    totalRead    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
108	[BUG]  [BUGGY]  if  (numToRead  >=  hasHitEOF  ||  totalRead  >=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  >=  hasHitEOF  ||  totalRead  >=  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  >=  hasHitEOF  ||  totalRead  >=  numToRead)  {	  if    (hasHitEOF    ||    totalRead    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
109	[BUG]  [BUGGY]  if  (hasHitEOF  &&  totalRead!=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  totalRead!=  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  totalRead!=  numToRead)  {	  if    (hasHitEOF    ||    totalRead    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
110	[BUG]  [BUGGY]  if(!hasHitEOF  &&  totalRead  >  entrySize)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  totalRead  >  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  totalRead  >  entrySize)  {	  if(!hasHitEOF    &&    totalRead    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
111	[BUG]  [BUGGY]  if(!hasHitEOF  &&  totalRead  >=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  totalRead  >=  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  totalRead  >=  numToRead)  {	  if(!hasHitEOF    &&    totalRead    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
112	[BUG]  [BUGGY]  if(!hasHitEOF  &&  totalRead  <  =  entrySize)  {  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  totalRead  <  =  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  totalRead  <  =  entrySize)  {	  if(!hasHitEOF    &&    totalRead    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
113	[BUG]  [BUGGY]  if(!hasHitEOF  &&  entrySize  >=  numRecords)  {  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  entrySize  >=  numRecords)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  entrySize  >=  numRecords)  {	  if(!hasHitEOF    &&    totalRead    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
114	[BUG]  [BUGGY]  if(!hasHitEOF  &&  totalRead  ==  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  totalRead  ==  entryOffset)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  totalRead  ==  entryOffset)  {	  if(!hasHitEOF    &&    totalRead    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
115	[BUG]  [BUGGY]  if  (hasHitEOF  &&  offset  >=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  offset  >=  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  offset  >=  numToRead)  {	  if    (hasHitEOF    ||    offset    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
116	[BUG]  [BUGGY]  if  (numToRead  ||  offset  >=  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  ||  offset  >=  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  ||  offset  >=  hasHitEOF)  {	  if    (hasHitEOF    ||    offset    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
117	[BUG]  [BUGGY]  if  (numToRead  >=  hasHitEOF  ||  offset  >=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  >=  hasHitEOF  ||  offset  >=  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  >=  hasHitEOF  ||  offset  >=  numToRead)  {	  if    (hasHitEOF    ||    offset    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
118	[BUG]  [BUGGY]  if  (hasHitEOF  &&  offset!=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  offset!=  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  offset!=  numToRead)  {	  if    (hasHitEOF    ||    offset    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
119	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.getName  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.getName  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.getName	  if(numToRead    <    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(currEntry.getName()))    {    return    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
120	[BUG]  [BUGGY]  if(numToRead!=  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.getName  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead!=  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.getName  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead!=  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.getName	  if(numToRead    <    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(currEntry.getName()))    {    return    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
121	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.getName  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  >=  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.getName  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  >=  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.getName	  if(numToRead    <    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(currEntry.getName()))    {    return    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
122	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.get  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.get  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.get	  if(numToRead    <    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(currEntry.getName()))    {    return    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
123	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.getName())  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.getName())  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.getName())	  if(numToRead    <    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(currEntry.getName()))    {    return    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
124	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry	  if(numToRead    <    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(currEntry.getName()))    {    return    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
125	[BUG]  [BUGGY]  if  (numToRead  ||  hasHitEOF  &&  entryOffset  ==  0)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  ||  hasHitEOF  &&  entryOffset  ==  0)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  ||  hasHitEOF  &&  entryOffset  ==  0)  {	  if    (numToRead    ||    hasHitEOF    ||    entryOffset    ==    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
126	[BUG]  [BUGGY]  if  (numToRead  ||  hasHitEOF  &&  entryOffset  ==  totalRead)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  ||  hasHitEOF  &&  entryOffset  ==  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  ||  hasHitEOF  &&  entryOffset  ==  totalRead)  {	  if    (numToRead    ||    hasHitEOF    ||    entryOffset    ==    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
127	[BUG]  [BUGGY]  if  (entryOffset  ||  hasHitEOF  ||  numToRead  ==  totalRead)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (entryOffset  ||  hasHitEOF  ||  numToRead  ==  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (entryOffset  ||  hasHitEOF  ||  numToRead  ==  totalRead)  {	  if    (numToRead    ||    hasHitEOF    ||    entryOffset    ==    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
128	[BUG]  [BUGGY]  if  (numToRead  ||  hasHitEOF  &&  entryOffset  ==  numRecords)  {  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  ||  hasHitEOF  &&  entryOffset  ==  numRecords)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  ||  hasHitEOF  &&  entryOffset  ==  numRecords)  {	  if    (numToRead    ||    hasHitEOF    ||    entryOffset    ==    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
129	[BUG]  [BUGGY]  if  (offset  ||  hasHitEOF  ||  entryOffset  ==  totalRead)  {  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (offset  ||  hasHitEOF  ||  entryOffset  ==  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (offset  ||  hasHitEOF  ||  entryOffset  ==  totalRead)  {	  if    (numToRead    ||    hasHitEOF    ||    entryOffset    ==    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
130	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buf.length  >=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  buf.length  >=  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  buf.length  >=  numToRead)  {	  if(!hasHitEOF    &&    entryOffset    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
131	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buf.length!=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  buf.length!=  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  buf.length!=  numToRead)  {	  if(!hasHitEOF    &&    entryOffset    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
132	[BUG]  [BUGGY]  if(entryOffset  ==  hasHitEOF  &&  entrySize  ==  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entryOffset  ==  hasHitEOF  &&  entrySize  ==  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entryOffset  ==  hasHitEOF  &&  entrySize  ==  hasHitEOF)  {	  if    (entryOffset    ==    hasHitEOF    ||    entrySize    ==    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
133	[BUG]  [BUGGY]  if  (entrySize  ==  hasHitEOF  ||  entrySize  ==  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (entrySize  ==  hasHitEOF  ||  entrySize  ==  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (entrySize  ==  hasHitEOF  ||  entrySize  ==  hasHitEOF)  {	  if    (entryOffset    ==    hasHitEOF    ||    entrySize    ==    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
134	[BUG]  [BUGGY]  if(entrySize  ==  hasHitEOF  ||  entryOffset  ==  numToRead)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entrySize  ==  hasHitEOF  ||  entryOffset  ==  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entrySize  ==  hasHitEOF  ||  entryOffset  ==  numToRead)  {	  if    (entryOffset    ==    hasHitEOF    ||    entrySize    ==    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
135	[BUG]  [BUGGY]  if(entrySize  ==  hasHitEOF  ||  entryOffset  ==  totalRead)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entrySize  ==  hasHitEOF  ||  entryOffset  ==  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entrySize  ==  hasHitEOF  ||  entryOffset  ==  totalRead)  {	  if    (entryOffset    ==    hasHitEOF    ||    entrySize    ==    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
136	[BUG]  [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  totalRead);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	int  currEntrySize  =  is.read(buf,  offset,  totalRead);	  int    currEntrySize    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
137	[BUG]  [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  numToRead,  totalRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  numToRead,  totalRead);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	int  currEntrySize  =  is.read(buf,  offset,  numToRead,  totalRead);	  int    currEntrySize    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
138	[BUG]  [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  numToRead,  true);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  numToRead,  true);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	int  currEntrySize  =  is.read(buf,  offset,  numToRead,  true);	  int    currEntrySize    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
139	[BUG]  [BUGGY]  byte  currEntrySize  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte  currEntrySize  =  is.read(buf,  offset,  numToRead);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte  currEntrySize  =  is.read(buf,  offset,  numToRead);	  int    currEntrySize    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
140	[BUG]  [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  numToRead,  null);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  numToRead,  null);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	int  currEntrySize  =  is.read(buf,  offset,  numToRead,  null);	  int    currEntrySize    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
141	[BUG]  [BUGGY]  Integer  currEntrySize  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  Integer  currEntrySize  =  is.read(buf,  offset,  numToRead);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	Integer  currEntrySize  =  is.read(buf,  offset,  numToRead);	  int    currEntrySize    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
142	[BUG]  [BUGGY]  if(entryOffset!=  numToRead  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entryOffset!=  numToRead  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entryOffset!=  numToRead  ||  hasHitEOF)  {	  if(numToRead!=    entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
143	[BUG]  [BUGGY]  if(numToRead  ==  totalRead  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ==  totalRead  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ==  totalRead  ||  hasHitEOF)  {	  if(numToRead!=    entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
144	[BUG]  [BUGGY]  if  (numToRead  ||  hasHitEOF  ||  totalRead  ==  numToRead)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  ||  hasHitEOF  ||  totalRead  ==  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  ||  hasHitEOF  ||  totalRead  ==  numToRead)  {	  if    (numToRead    ||    hasHitEOF    {    entryOffset    ==    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
145	[BUG]  [BUGGY]  if  (offset  ||  hasHitEOF  {  entryOffset  ==  numToRead)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (offset  ||  hasHitEOF  {  entryOffset  ==  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (offset  ||  hasHitEOF  {  entryOffset  ==  numToRead)  {	  if    (numToRead    ||    hasHitEOF    {    entryOffset    ==    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
146	[BUG]  [BUGGY]  readNow  =  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  readNow  =  is.read(buf,  offset,  totalRead);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	readNow  =  is.read(buf,  offset,  totalRead);	  readNow    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
147	[BUG]  [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead,  totalRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead,  totalRead);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	readNow  =  is.read(buf,  offset,  numToRead,  totalRead);	  readNow    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
148	[BUG]  [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead,  true);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead,  true);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	readNow  =  is.read(buf,  offset,  numToRead,  true);	  readNow    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
149	[BUG]  [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead,  false);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead,  false);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	readNow  =  is.read(buf,  offset,  numToRead,  false);	  readNow    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
150	[BUG]  [BUGGY]  if(numToRead  ==  buf  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ==  buf  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ==  buf  ||  hasHitEOF)  {	  if    (entrySize    ==    numToRead    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
151	[BUG]  [BUGGY]  if(numToRead  ==  numRecords  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ==  numRecords  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ==  numRecords  ||  hasHitEOF)  {	  if    (entrySize    ==    numToRead    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
152	[BUG]  [BUGGY]  if(numToRead  ==  entryOffset)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ==  entryOffset)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ==  entryOffset)  {	  if    (entrySize    ==    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
153	[BUG]  [BUGGY]  if  (offset  ==  entrySize)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (offset  ==  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (offset  ==  entrySize)  {	  if    (entrySize    ==    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
154	[BUG]  [BUGGY]  if  (entrySize  ==  numRecords)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (entrySize  ==  numRecords)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (entrySize  ==  numRecords)  {	  if    (entrySize    ==    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
155	[BUG]  [BUGGY]  if(entryOffset  ==  entrySize)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entryOffset  ==  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entryOffset  ==  entrySize)  {	  if    (entrySize    ==    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
156	[BUG]  [BUGGY]  if  (offset  ==  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (offset  ==  entryOffset)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (offset  ==  entryOffset)  {	  if    (entrySize    ==    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
157	[BUG]  [BUGGY]  if(!hasHitEOF  &&  entryOffset!=  entrySize)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  entryOffset!=  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  entryOffset!=  entrySize)  {	  if(!hasHitEOF    &&    entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
158	[BUG]  [BUGGY]  if(!hasHitEOF  &&  entryOffset  <  =  entrySize)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  entryOffset  <  =  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  entryOffset  <  =  entrySize)  {	  if(!hasHitEOF    &&    entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
159	[BUG]  [BUGGY]  if(!hasHitEOF  &&  entryOffset  >  0)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  entryOffset  >  0)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  entryOffset  >  0)  {	  if(!hasHitEOF    &&    entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
160	[BUG]  [BUGGY]  if(!hasHitEOF  &&  entrySize  >  numRecords)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  entrySize  >  numRecords)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  entrySize  >  numRecords)  {	  if(!hasHitEOF    &&    entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
161	[BUG]  [BUGGY]  if(entrySize!=  entryOffset  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entrySize!=  entryOffset  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entrySize!=  entryOffset  ||  hasHitEOF)  {	  if    (hasHitEOF    ||    entryOffset!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
162	[BUG]  [BUGGY]  if  (entrySize!=  hasHitEOF  ||  entryOffset!=  entrySize)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (entrySize!=  hasHitEOF  ||  entryOffset!=  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (entrySize!=  hasHitEOF  ||  entryOffset!=  entrySize)  {	  if    (hasHitEOF    ||    entryOffset!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
163	[BUG]  [BUGGY]  if  (entrySize!=  hasHitEOF  ||  entryOffset  >=  entrySize)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (entrySize!=  hasHitEOF  ||  entryOffset  >=  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (entrySize!=  hasHitEOF  ||  entryOffset  >=  entrySize)  {	  if    (hasHitEOF    ||    entryOffset!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
164	[BUG]  [BUGGY]  if  (numToRead  ||  numRecords  <  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  ||  numRecords  <  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  ||  numRecords  <  hasHitEOF)  {	  if    (numToRead    ||    entryOffset    <    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
165	[BUG]  [BUGGY]  if  (entryOffset  ||  numToRead  <  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (entryOffset  ||  numToRead  <  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (entryOffset  ||  numToRead  <  hasHitEOF)  {	  if    (numToRead    ||    entryOffset    <    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
166	[BUG]  [BUGGY]  if  (numToRead  ||  totalRead  <  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  ||  totalRead  <  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  ||  totalRead  <  hasHitEOF)  {	  if    (numToRead    ||    entryOffset    <    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
167	[BUG]  [BUGGY]  if  (numToRead  ||  entryOffset  <  totalRead)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  ||  entryOffset  <  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  ||  entryOffset  <  totalRead)  {	  if    (numToRead    ||    entryOffset    <    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
168	[BUG]  [BUGGY]  byte[]  currEntry  =(byte[])currEntry.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =(byte[])currEntry.read(buf,  offset,  totalRead);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =(byte[])currEntry.read(buf,  offset,  totalRead);	  byte[]    currEntry    =(byte[])currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
169	[BUG]  [BUGGY]  byte[]  currEntry  =(byte[])currEntry.read(buf,  offset,  numToRead,  totalRead);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =(byte[])currEntry.read(buf,  offset,  numToRead,  totalRead);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =(byte[])currEntry.read(buf,  offset,  numToRead,  totalRead);	  byte[]    currEntry    =(byte[])currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
170	[BUG]  [BUGGY]  byte[]  currEntry  =(byte[])record.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =(byte[])record.read(buf,  offset,  numToRead);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =(byte[])record.read(buf,  offset,  numToRead);	  byte[]    currEntry    =(byte[])currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
171	[BUG]  [BUGGY]  byte[]  currEntry  =(byte[])currEntry.read(buf,  offset,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =(byte[])currEntry.read(buf,  offset,  0,  numToRead);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =(byte[])currEntry.read(buf,  offset,  0,  numToRead);	  byte[]    currEntry    =(byte[])currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
172	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  -1;  }  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  -1;  }	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getEntry(i);    if(currEntry!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
173	[BUG]  [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  -1;  }  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  -1;  }	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getEntry(i);    if(currEntry!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
174	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getEntry(i);    if(currEntry!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
175	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  -1;  }  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  -1;  }	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getEntry(i);    if(currEntry!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
176	[BUG]  [BUGGY]  if(numRecords!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numRecords!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  -1;  }  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numRecords!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  -1;  }	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getEntry(i);    if(currEntry!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
177	[BUG]  [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getEntry(i);    if(currEntry!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
178	[BUG]  [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  -1;  }  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  -1;  }	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getEntry(i);    if(currEntry!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
179	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  int  ch  =  is.read(buf,  offset,  totalRead);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	int  ch  =  is.read(buf,  offset,  totalRead);	  int    ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
180	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead,  totalRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead,  totalRead);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	int  ch  =  is.read(buf,  offset,  numToRead,  totalRead);	  int    ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
181	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead,  0);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead,  0);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	int  ch  =  is.read(buf,  offset,  numToRead,  0);	  int    ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
182	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead,  toSkip);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead,  toSkip);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	int  ch  =  is.read(buf,  offset,  numToRead,  toSkip);	  int    ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
183	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead,  len);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	int  ch  =  is.read(buf,  offset,  numToRead,  len);	  int    ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
184	[BUG]  [BUGGY]  int  ch  =  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  int  ch  =  currEntry.read(buf,  offset,  numToRead);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	int  ch  =  currEntry.read(buf,  offset,  numToRead);	  int    ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
185	[BUG]  [BUGGY]  if(numToRead  <  0  ||  hasHitEOF  ||  buf.length  <  totalRead)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  0  ||  hasHitEOF  ||  buf.length  <  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  0  ||  hasHitEOF  ||  buf.length  <  totalRead)  {	  if    (hasHitEOF    ||    buf.length    <    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
186	[BUG]  [BUGGY]  if(numToRead  <  totalRead  ||  buf.length  <  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  totalRead  ||  buf.length  <  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  totalRead  ||  buf.length  <  hasHitEOF)  {	  if    (hasHitEOF    ||    buf.length    <    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
187	[BUG]  [BUGGY]  if(numToRead  <  0  ||  hasHitEOF  ||  buf.length  <  =  totalRead)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  0  ||  hasHitEOF  ||  buf.length  <  =  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  0  ||  hasHitEOF  ||  buf.length  <  =  totalRead)  {	  if    (hasHitEOF    ||    buf.length    <    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
188	[BUG]  [BUGGY]  if  (!hasHitEOF  &&  totalRead  <  numToRead)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (!hasHitEOF  &&  totalRead  <  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (!hasHitEOF  &&  totalRead  <  numToRead)  {	  if    (!hasHitEOF    &&    entryOffset    <    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
189	[BUG]  [BUGGY]  if  (!hasHitEOF  &&  buf.length  <  totalRead)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (!hasHitEOF  &&  buf.length  <  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (!hasHitEOF  &&  buf.length  <  totalRead)  {	  if    (!hasHitEOF    &&    entryOffset    <    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
190	[BUG]  [BUGGY]  if  (!hasHitEOF  &&  buf.length  <  =  totalRead)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (!hasHitEOF  &&  buf.length  <  =  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (!hasHitEOF  &&  buf.length  <  =  totalRead)  {	  if    (!hasHitEOF    &&    entryOffset    <    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
191	[BUG]  [BUGGY]  if  (!hasHitEOF  &&  entryOffset  <  numToRead)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (!hasHitEOF  &&  entryOffset  <  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (!hasHitEOF  &&  entryOffset  <  numToRead)  {	  if    (!hasHitEOF    &&    entryOffset    <    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
192	[BUG]  [BUGGY]  if  (!hasHitEOF  &&  numToRead  <  totalRead)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (!hasHitEOF  &&  numToRead  <  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (!hasHitEOF  &&  numToRead  <  totalRead)  {	  if    (!hasHitEOF    &&    entryOffset    <    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
193	[BUG]  [BUGGY]  if(numToRead  ||  offset  ==  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ||  offset  ==  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ||  offset  ==  hasHitEOF)  {	  if    (hasHitEOF    ||    offset    ==    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
194	[BUG]  [BUGGY]  if  (hasHitEOF  &&  offset  ==  numToRead)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  offset  ==  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  offset  ==  numToRead)  {	  if    (hasHitEOF    ||    offset    ==    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
195	[BUG]  [BUGGY]  if  (offset  ==  numToRead  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (offset  ==  numToRead  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (offset  ==  numToRead  ||  hasHitEOF)  {	  if    (hasHitEOF    ||    offset    ==    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
196	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ==  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }	  if(numToRead    <    0)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    buffer[i]    =    is.read(buf,    offset,    i);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
197	[BUG]  [BUGGY]  int  numToRead  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  int  numToRead  =  is.read(buf,  offset,  numToRead);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	int  numToRead  =  is.read(buf,  offset,  numToRead);	  if(numToRead    <    0)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    buffer[i]    =    is.read(buf,    offset,    i);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
198	[BUG]  [BUGGY]  int  len  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  int  len  =  is.read(buf,  offset,  numToRead);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	int  len  =  is.read(buf,  offset,  numToRead);	  if(numToRead    <    0)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    buffer[i]    =    is.read(buf,    offset,    i);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
199	[BUG]  [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i  +  1);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i  +  1);  }  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i  +  1);  }	  if(numToRead    <    0)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    buffer[i]    =    is.read(buf,    offset,    i);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
200	[BUG]  [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  -1);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  -1);  }  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  -1);  }	  if(numToRead    <    0)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    buffer[i]    =    is.read(buf,    offset,    i);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
201	[BUG]  [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  1,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  1,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  0)  {  for(int  i  =  1,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }	  if(numToRead    <    0)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    buffer[i]    =    is.read(buf,    offset,    i);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
202	[BUG]  [BUGGY]  if  (numToRead  ==  hasHitEOF  ||  totalRead  ==  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  ==  hasHitEOF  ||  totalRead  ==  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  ==  hasHitEOF  ||  totalRead  ==  hasHitEOF)  {	  if    (entryOffset    ==    hasHitEOF    ||    totalRead    ==    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
203	[BUG]  [BUGGY]  if  (offset  ==  hasHitEOF  ||  totalRead  ==  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (offset  ==  hasHitEOF  ||  totalRead  ==  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (offset  ==  hasHitEOF  ||  totalRead  ==  hasHitEOF)  {	  if    (entryOffset    ==    hasHitEOF    ||    totalRead    ==    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
204	[BUG]  [BUGGY]  if(numToRead  ==  0  ||  totalRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ==  0  ||  totalRead  ==  0)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ==  0  ||  totalRead  ==  0)  {	  if    (entryOffset    ==    hasHitEOF    ||    totalRead    ==    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
205	[BUG]  [BUGGY]  if  (entryOffset  ==  hasHitEOF  ||  totalRead  ==  numToRead)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (entryOffset  ==  hasHitEOF  ||  totalRead  ==  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (entryOffset  ==  hasHitEOF  ||  totalRead  ==  numToRead)  {	  if    (entryOffset    ==    hasHitEOF    ||    totalRead    ==    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
206	[BUG]  [BUGGY]  if(numToRead  ==  0  ||  numToRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ==  0  ||  numToRead  ==  0)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ==  0  ||  numToRead  ==  0)  {	  if    (entryOffset    ==    hasHitEOF    ||    totalRead    ==    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
207	[BUG]  [BUGGY]  if  (numToRead  <  numRecords  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  <  numRecords  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  <  numRecords  ||  hasHitEOF)  {	  if    (entrySize    <    numToRead    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
208	[BUG]  [BUGGY]  if  (offset  <  numToRead  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (offset  <  numToRead  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (offset  <  numToRead  ||  hasHitEOF)  {	  if    (entrySize    <    numToRead    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
209	[BUG]  [BUGGY]  if  (numToRead  <  buf.length  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  <  buf.length  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  <  buf.length  ||  hasHitEOF)  {	  if    (entrySize    <    numToRead    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
210	[BUG]  [BUGGY]  if(hasHitEOF  &&  entryOffset  >  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(hasHitEOF  &&  entryOffset  >  SMALL_BUFFER_SIZE)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(hasHitEOF  &&  entryOffset  >  SMALL_BUFFER_SIZE)  {	  if(hasHitEOF    ||    entryOffset    >    SMALL_BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
211	[BUG]  [BUGGY]  if(hasHitEOF  ||  entryOffset  ==  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(hasHitEOF  ||  entryOffset  ==  SMALL_BUFFER_SIZE)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(hasHitEOF  ||  entryOffset  ==  SMALL_BUFFER_SIZE)  {	  if(hasHitEOF    ||    entryOffset    >    SMALL_BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
212	[BUG]  [BUGGY]  if(entrySize  >  SMALL_BUFFER_SIZE  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entrySize  >  SMALL_BUFFER_SIZE  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entrySize  >  SMALL_BUFFER_SIZE  ||  hasHitEOF)  {	  if(hasHitEOF    ||    entryOffset    >    SMALL_BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
213	[BUG]  [BUGGY]  if(entryOffset  <  SMALL_BUFFER_SIZE  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entryOffset  <  SMALL_BUFFER_SIZE  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entryOffset  <  SMALL_BUFFER_SIZE  ||  hasHitEOF)  {	  if(hasHitEOF    ||    entryOffset    >    SMALL_BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
214	[BUG]  [BUGGY]  if(!hasHitEOF  &&  entryOffset  >  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  entryOffset  >  SMALL_BUFFER_SIZE)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  entryOffset  >  SMALL_BUFFER_SIZE)  {	  if(hasHitEOF    ||    entryOffset    >    SMALL_BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
215	[BUG]  [BUGGY]  if(hasHitEOF  ||  entryOffset  <  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(hasHitEOF  ||  entryOffset  <  SMALL_BUFFER_SIZE)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(hasHitEOF  ||  entryOffset  <  SMALL_BUFFER_SIZE)  {	  if(hasHitEOF    ||    entryOffset    >    SMALL_BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
216	[BUG]  [BUGGY]  if(entryOffset  >  SMALL_BUFFER_SIZE  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entryOffset  >  SMALL_BUFFER_SIZE  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entryOffset  >  SMALL_BUFFER_SIZE  ||  hasHitEOF)  {	  if(hasHitEOF    ||    entryOffset    >    SMALL_BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
217	[BUG]  [BUGGY]  if  (hasHitEOF  ||  totalRead  >=  entrySize)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  ||  totalRead  >=  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  totalRead  >=  entrySize)  {	  if    (hasHitEOF    &&    totalRead    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
218	[BUG]  [BUGGY]  if  (hasHitEOF  &&  totalRead  >  entrySize)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  totalRead  >  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  totalRead  >  entrySize)  {	  if    (hasHitEOF    &&    totalRead    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
219	[BUG]  [BUGGY]  if  (hasHitEOF  &&  totalRead  <  =  entrySize)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  totalRead  <  =  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  totalRead  <  =  entrySize)  {	  if    (hasHitEOF    &&    totalRead    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
220	[BUG]  [BUGGY]  if  (hasHitEOF  &&  totalRead  >=  numRecords)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  totalRead  >=  numRecords)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  totalRead  >=  numRecords)  {	  if    (hasHitEOF    &&    totalRead    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
221	[BUG]  [BUGGY]  if(numToRead  ||  numRecords  ==  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ||  numRecords  ==  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ||  numRecords  ==  hasHitEOF)  {	  if(numToRead    ||    entryOffset    ==    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
222	[BUG]  [BUGGY]  if(numToRead  ||  entrySize  ==  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ||  entrySize  ==  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ||  entrySize  ==  hasHitEOF)  {	  if(numToRead    ||    entryOffset    ==    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
223	[BUG]  [BUGGY]  if(numToRead  ||  totalRead  ==  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ||  totalRead  ==  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ||  totalRead  ==  hasHitEOF)  {	  if(numToRead    ||    entryOffset    ==    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
224	[BUG]  [BUGGY]  if(entrySize  ||  numToRead  ==  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entrySize  ||  numToRead  ==  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entrySize  ||  numToRead  ==  hasHitEOF)  {	  if(numToRead    ||    entryOffset    ==    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
225	[BUG]  [BUGGY]  if  (hasHitEOF  ||  entryOffset!=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  ||  entryOffset!=  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  entryOffset!=  numToRead)  {	  if    (hasHitEOF    &&    entryOffset!=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
226	[BUG]  [BUGGY]  if  (numToRead  >=  hasHitEOF  &&  entryOffset!=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  >=  hasHitEOF  &&  entryOffset!=  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  >=  hasHitEOF  &&  entryOffset!=  numToRead)  {	  if    (hasHitEOF    &&    entryOffset!=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
227	[BUG]  [BUGGY]  if  (numToRead!=  hasHitEOF  &&  entryOffset!=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead!=  hasHitEOF  &&  entryOffset!=  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead!=  hasHitEOF  &&  entryOffset!=  numToRead)  {	  if    (hasHitEOF    &&    entryOffset!=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
228	[BUG]  [BUGGY]  if  (hasHitEOF  &&  totalRead  ==  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  totalRead  ==  entryOffset)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  totalRead  ==  entryOffset)  {	  if    (hasHitEOF    ||    totalRead    ==    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
229	[BUG]  [BUGGY]  if  (entrySize  >  totalRead  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (entrySize  >  totalRead  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (entrySize  >  totalRead  ||  hasHitEOF)  {	  if    (entrySize    >    entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
230	[BUG]  [BUGGY]  if  (hasHitEOF  &&  buf.length  <  numToRead)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  buf.length  <  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  buf.length  <  numToRead)  {	  if    (hasHitEOF    ||    buf.length    <    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
231	[BUG]  [BUGGY]  if(numToRead  <  hasHitEOF  ||  buf.length  <  numToRead)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  hasHitEOF  ||  buf.length  <  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  hasHitEOF  ||  buf.length  <  numToRead)  {	  if    (hasHitEOF    ||    buf.length    <    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
232	[BUG]  [BUGGY]  if(numToRead  <  HitEOF  ||  buf.length  <  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  HitEOF  ||  buf.length  <  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  HitEOF  ||  buf.length  <  hasHitEOF)  {	  if    (hasHitEOF    ||    buf.length    <    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
233	[BUG]  [BUGGY]  if  (numToRead  ||  buf.length  <  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  ||  buf.length  <  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  ||  buf.length  <  hasHitEOF)  {	  if    (hasHitEOF    ||    buf.length    <    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
234	[BUG]  [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead,  totalRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead,  totalRead);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead,  totalRead);	  byte[]    currEntry    =    getCurrentEntry(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
235	[BUG]  [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  offset,  totalRead);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =  getCurrentEntry(buf,  offset,  totalRead);	  byte[]    currEntry    =    getCurrentEntry(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
236	[BUG]  [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead,  true);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead,  true);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead,  true);	  byte[]    currEntry    =    getCurrentEntry(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
237	[BUG]  [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead,  null);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead,  null);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead,  null);	  byte[]    currEntry    =    getCurrentEntry(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
238	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }	  if(numToRead    <    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    buffer[i]    =    is.read(buf,    offset,    i);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
239	[BUG]  [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  totalRead;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  totalRead;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  0)  {  for(int  i  =  0;  i  <  totalRead;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }	  if(numToRead    <    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    buffer[i]    =    is.read(buf,    offset,    i);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
240	[BUG]  [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  buf.length;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  buf.length;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  0)  {  for(int  i  =  0;  i  <  buf.length;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }	  if(numToRead    <    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    buffer[i]    =    is.read(buf,    offset,    i);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
241	[BUG]  [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  SMALL_BUFFER_SIZE;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  SMALL_BUFFER_SIZE;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  0)  {  for(int  i  =  0;  i  <  SMALL_BUFFER_SIZE;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }	  if(numToRead    <    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    buffer[i]    =    is.read(buf,    offset,    i);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
242	[BUG]  [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  0)  {  for(int  i  =  0;  i  <  length;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }	  if(numToRead    <    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    buffer[i]    =    is.read(buf,    offset,    i);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
243	[BUG]  [BUGGY]  if  (hasHitEOF  &&  offset  <  numToRead)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  offset  <  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  offset  <  numToRead)  {	  if    (hasHitEOF    ||    offset    <    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
244	[BUG]  [BUGGY]  if  (numToRead  ||  offset  <  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  ||  offset  <  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  ||  offset  <  hasHitEOF)  {	  if    (hasHitEOF    ||    offset    <    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
245	[BUG]  [BUGGY]  if  (!hasHitEOF  &&  offset  <  numToRead)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (!hasHitEOF  &&  offset  <  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (!hasHitEOF  &&  offset  <  numToRead)  {	  if    (hasHitEOF    ||    offset    <    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
246	[BUG]  [BUGGY]  if(numToRead  <  offset  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  offset  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  offset  ||  hasHitEOF)  {	  if    (hasHitEOF    ||    offset    <    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
247	[BUG]  [BUGGY]  if  (numToRead  >=  hasHitEOF  &&  entryOffset  >=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  >=  hasHitEOF  &&  entryOffset  >=  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  >=  hasHitEOF  &&  entryOffset  >=  numToRead)  {	  if    (hasHitEOF    &&    entryOffset    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
248	[BUG]  [BUGGY]  if(hasHitEOF  ||  entryOffset  >=  totalRead)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(hasHitEOF  ||  entryOffset  >=  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(hasHitEOF  ||  entryOffset  >=  totalRead)  {	  if(hasHitEOF    &&    entryOffset    >=    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
249	[BUG]  [BUGGY]  if(hasHitEOF  ||  entryOffset!=  totalRead)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(hasHitEOF  ||  entryOffset!=  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(hasHitEOF  ||  entryOffset!=  totalRead)  {	  if(hasHitEOF    &&    entryOffset    >=    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
250	[BUG]  [BUGGY]  if(hasHitEOF  &&  buf.length  >=  totalRead)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(hasHitEOF  &&  buf.length  >=  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(hasHitEOF  &&  buf.length  >=  totalRead)  {	  if(hasHitEOF    &&    entryOffset    >=    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
251	[BUG]  [BUGGY]  if(!hasHitEOF  &&  entryOffset  >>  entrySize)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  entryOffset  >>  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  entryOffset  >>  entrySize)  {	  if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
252	[BUG]  [BUGGY]  if(!hasHitEOF  ||  entryOffset  >=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  ||  entryOffset  >=  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  ||  entryOffset  >=  numToRead)  {	  if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
253	[BUG]  [BUGGY]  if(!hasHitEOF  ||  entryOffset!=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  ||  entryOffset!=  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  ||  entryOffset!=  numToRead)  {	  if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
254	[BUG]  [BUGGY]  if  (offset  ==  totalRead  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (offset  ==  totalRead  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (offset  ==  totalRead  ||  hasHitEOF)  {	  if    (entrySize    ==    totalRead    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
255	[BUG]  [BUGGY]  if  (numToRead  ==  fullNameData  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  ==  fullNameData  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  ==  fullNameData  ||  hasHitEOF)  {	  if    (entrySize    ==    totalRead    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
256	[BUG]  [BUGGY]  if  (numToRead  ||  hasHitEOF  ==  totalRead)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  ||  hasHitEOF  ==  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  ||  hasHitEOF  ==  totalRead)  {	  if    (hasHitEOF    ||    totalRead    ==    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
257	[BUG]  [BUGGY]  if  (hasHitEOF  &&  buf  <  numToRead)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  buf  <  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  buf  <  numToRead)  {	  if    (hasHitEOF    &&    entryOffset    <    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
258	[BUG]  [BUGGY]  if  (numToRead  <  hasHitEOF  &&  entryOffset  <  numToRead)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  <  hasHitEOF  &&  entryOffset  <  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  <  hasHitEOF  &&  entryOffset  <  numToRead)  {	  if    (hasHitEOF    &&    entryOffset    <    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
259	[BUG]  [BUGGY]  if  (hasHitEOF  &&  currEntry.length  >  entrySize)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  currEntry.length  >  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  currEntry.length  >  entrySize)  {	  if    (hasHitEOF    &&    currEntry.length    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
260	[BUG]  [BUGGY]  if  (hasHitEOF  &&  currEntry.length!=  entrySize)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  currEntry.length!=  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  currEntry.length!=  entrySize)  {	  if    (hasHitEOF    &&    currEntry.length    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
261	[BUG]  [BUGGY]  if  (hasHitEOF  &&  currEntry.length!=  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  currEntry.length!=  entryOffset)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  currEntry.length!=  entryOffset)  {	  if    (hasHitEOF    &&    currEntry.length    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
262	[BUG]  [BUGGY]  if  (hasHitEOF  &&  currEntry.length  ==  entrySize)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  currEntry.length  ==  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  currEntry.length  ==  entrySize)  {	  if    (hasHitEOF    &&    currEntry.length    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
263	[BUG]  [BUGGY]  if  (hasHitEOF  ||  currEntry.length  >=  entrySize)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  ||  currEntry.length  >=  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  currEntry.length  >=  entrySize)  {	  if    (hasHitEOF    &&    currEntry.length    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
264	[BUG]  [BUGGY]  byte[]  currEntry  =  is.readByte(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =  is.readByte(buf,  offset,  totalRead);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =  is.readByte(buf,  offset,  totalRead);	  byte[]    currEntry    =    is.readByte(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
265	[BUG]  [BUGGY]  byte[]  currEntry  =  is.readByte(buf,  offset,  numToRead,  totalRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =  is.readByte(buf,  offset,  numToRead,  totalRead);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =  is.readByte(buf,  offset,  numToRead,  totalRead);	  byte[]    currEntry    =    is.readByte(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
266	[BUG]  [BUGGY]  byte[]  currEntry  =  is.readByte(buf,  offset,  numToRead,  true);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =  is.readByte(buf,  offset,  numToRead,  true);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =  is.readByte(buf,  offset,  numToRead,  true);	  byte[]    currEntry    =    is.readByte(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
267	[BUG]  [BUGGY]  if  (hasHitEOF  &&  offset  <  totalRead)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  offset  <  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  offset  <  totalRead)  {	  if    (hasHitEOF    ||    offset    <    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
268	[BUG]  [BUGGY]  if  (offset  <  totalRead  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (offset  <  totalRead  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (offset  <  totalRead  ||  hasHitEOF)  {	  if    (hasHitEOF    ||    offset    <    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
269	[BUG]  [BUGGY]  if  (!hasHitEOF  &&  offset  <  totalRead)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (!hasHitEOF  &&  offset  <  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (!hasHitEOF  &&  offset  <  totalRead)  {	  if    (hasHitEOF    ||    offset    <    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
270	[BUG]  [BUGGY]  if  (offset  <  hasHitEOF  ||  totalRead  <  numToRead)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (offset  <  hasHitEOF  ||  totalRead  <  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (offset  <  hasHitEOF  ||  totalRead  <  numToRead)  {	  if    (hasHitEOF    ||    offset    <    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
271	[BUG]  [BUGGY]  if(entrySize  ==  hasHitEOF  ||  entryOffset  ==  numRecords)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entrySize  ==  hasHitEOF  ||  entryOffset  ==  numRecords)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entrySize  ==  hasHitEOF  ||  entryOffset  ==  numRecords)  {	  if(entryOffset    ==    hasHitEOF    ||    entrySize    ==    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
272	[BUG]  [BUGGY]  if(entryOffset  ==  hasHitEOF  &&  entrySize  ==  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entryOffset  ==  hasHitEOF  &&  entrySize  ==  entryOffset)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entryOffset  ==  hasHitEOF  &&  entrySize  ==  entryOffset)  {	  if(entryOffset    ==    hasHitEOF    ||    entrySize    ==    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
273	[BUG]  [BUGGY]  if(entryOffset  ==  entrySize  ||  entryOffset  ==  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entryOffset  ==  entrySize  ||  entryOffset  ==  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entryOffset  ==  entrySize  ||  entryOffset  ==  hasHitEOF)  {	  if(entryOffset    ==    hasHitEOF    ||    entrySize    ==    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
274	[BUG]  [BUGGY]  if(entryOffset  ==  available  ||  entrySize  ==  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entryOffset  ==  available  ||  entrySize  ==  entryOffset)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entryOffset  ==  available  ||  entrySize  ==  entryOffset)  {	  if(entryOffset    ==    hasHitEOF    ||    entrySize    ==    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
275	[BUG]  [BUGGY]  if(entrySize  ==  hasHitEOF  ||  entryOffset  ==  numRecords.length)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entrySize  ==  hasHitEOF  ||  entryOffset  ==  numRecords.length)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entrySize  ==  hasHitEOF  ||  entryOffset  ==  numRecords.length)  {	  if(entryOffset    ==    hasHitEOF    ||    entrySize    ==    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
276	[BUG]  [BUGGY]  if(recordSize  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(recordSize  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(recordSize  ||  hasHitEOF)  {	  if(entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
277	[BUG]  [BUGGY]  if(offset  <  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(offset  <  0  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(offset  <  0  ||  hasHitEOF)  {	  if(entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
278	[BUG]  [BUGGY]  if(entryOffset  ==  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entryOffset  ==  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entryOffset  ==  hasHitEOF)  {	  if(entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
279	[BUG]  [BUGGY]  if(currEntry.length  <  available()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(currEntry.length  <  available()  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(currEntry.length  <  available()  ||  hasHitEOF)  {	  if(entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
280	[BUG]  [BUGGY]  if(hasHitEOF  ||  buf.length  <  numRecords.length)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(hasHitEOF  ||  buf.length  <  numRecords.length)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(hasHitEOF  ||  buf.length  <  numRecords.length)  {	  if(entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
281	[BUG]  [BUGGY]  if  (hasHitEOF  &&  buf.length  ==  totalRead)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  buf.length  ==  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  buf.length  ==  totalRead)  {	  if    (hasHitEOF    &&    entryOffset    ==    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
282	[BUG]  [BUGGY]  if(!hasHitEOF  &&  totalRead!=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  totalRead!=  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  totalRead!=  numToRead)  {	  if(!hasHitEOF    &&    entryOffset!=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
283	[BUG]  [BUGGY]  if(!hasHitEOF  &&  offset!=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  offset!=  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  offset!=  numToRead)  {	  if(!hasHitEOF    &&    entryOffset!=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
284	[BUG]  [BUGGY]  if(hasHitEOF  &&  entryOffset  ==  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(hasHitEOF  &&  entryOffset  ==  0)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(hasHitEOF  &&  entryOffset  ==  0)  {	  if(hasHitEOF    ||    entryOffset    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
285	[BUG]  [BUGGY]  if(entrySize  ==  0  ||  hasHitEOF  ||  entryOffset  ==  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entrySize  ==  0  ||  hasHitEOF  ||  entryOffset  ==  0)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entrySize  ==  0  ||  hasHitEOF  ||  entryOffset  ==  0)  {	  if(hasHitEOF    ||    entryOffset    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
286	[BUG]  [BUGGY]  if(entryOffset  ||  hasHitEOF  {  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entryOffset  ||  hasHitEOF  {  0)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entryOffset  ||  hasHitEOF  {  0)  {	  if(hasHitEOF    ||    entryOffset    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
287	[BUG]  [BUGGY]  if(hasHitEOF  ||  entrySize  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(hasHitEOF  ||  entrySize  ==  0)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(hasHitEOF  ||  entrySize  ==  0)  {	  if(hasHitEOF    ||    entryOffset    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
288	[BUG]  [BUGGY]  if  (hasHitEOF  &&  totalRead  ==  offset)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  totalRead  ==  offset)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  totalRead  ==  offset)  {	  if    (hasHitEOF    ||    totalRead    ==    offset)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
289	[BUG]  [BUGGY]  if  (hasHitEOF  ||  offset  ==  totalRead)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  ||  offset  ==  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  offset  ==  totalRead)  {	  if    (hasHitEOF    ||    totalRead    ==    offset)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
290	[BUG]  [BUGGY]  if  (hasHitEOF  &&  offset  ==  totalRead)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  offset  ==  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  offset  ==  totalRead)  {	  if    (hasHitEOF    ||    totalRead    ==    offset)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
291	[BUG]  [BUGGY]  if  (hasHitEOF  ||  totalRead  ==  buf.length)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  ||  totalRead  ==  buf.length)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  totalRead  ==  buf.length)  {	  if    (hasHitEOF    ||    totalRead    ==    offset)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
292	[BUG]  [BUGGY]  if  (hasHitEOF  &&  entryOffset  >  numToRead)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  entryOffset  >  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  entryOffset  >  numToRead)  {	  if    (hasHitEOF    ||    entryOffset    >    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
293	[BUG]  [BUGGY]  if  (numToRead  ||  entryOffset  >  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  ||  entryOffset  >  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  ||  entryOffset  >  hasHitEOF)  {	  if    (hasHitEOF    ||    entryOffset    >    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
294	[BUG]  [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry	  if(numToRead    <    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
295	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.	  if(numToRead    <    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
296	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(curr  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(curr  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(curr	  if(numToRead    <    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
297	[BUG]  [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.	  if(numToRead    <    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
298	[BUG]  [BUGGY]  if  (buf  <  totalRead  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (buf  <  totalRead  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (buf  <  totalRead  ||  hasHitEOF)  {	  if    (entrySize    <    totalRead    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
299	[BUG]  [BUGGY]  if  (numToRead  <  fullNameData.length  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  <  fullNameData.length  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  <  fullNameData.length  ||  hasHitEOF)  {	  if    (entrySize    <    totalRead    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
300	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buf.length  >=  totalRead)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  buf.length  >=  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  buf.length  >=  totalRead)  {	  if(!hasHitEOF    &&    entryOffset    >=    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
301	[BUG]  [BUGGY]  if  (entrySize  >  entryOffset  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (entrySize  >  entryOffset  &&  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (entrySize  >  entryOffset  &&  hasHitEOF)  {	  if    (hasHitEOF    &&    entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
302	[BUG]  [BUGGY]  if(numToRead  <  =  entryOffset  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  =  entryOffset  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  =  entryOffset  ||  hasHitEOF)  {	  if(numToRead    <    entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
303	[BUG]  [BUGGY]  if(numToRead  <  input.length  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  input.length  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  input.length  ||  hasHitEOF)  {	  if(numToRead    <    entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
304	[BUG]  [BUGGY]  if  (numToRead  >  entrySize)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  >  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  >  entrySize)  {	  if    (entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
305	[BUG]  [BUGGY]  if  (entryOffset  <  entrySize)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (entryOffset  <  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (entryOffset  <  entrySize)  {	  if    (entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
306	[BUG]  [BUGGY]  if  (entrySize  >  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (entrySize  >  entryOffset)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (entrySize  >  entryOffset)  {	  if    (entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
307	[BUG]  [BUGGY]  if  (entrySize  >  buf.length)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (entrySize  >  buf.length)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (entrySize  >  buf.length)  {	  if    (entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
308	[BUG]  [BUGGY]  if  (hasHitEOF  &&  buf.length  <  =  entrySize)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  buf.length  <  =  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  buf.length  <  =  entrySize)  {	  if    (hasHitEOF    &&    buf.length    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
309	[BUG]  [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry!=  null)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry!=  null)  {  return  -1;  }  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry!=  null)  {  return  -1;  }	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getValue();    if(currEntry!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
310	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry!=  null)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry!=  null)  {  return  -1;  }  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry!=  null)  {  return  -1;  }	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getValue();    if(currEntry!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
311	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry!=  null)  {  return  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry!=  null)  {  return  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry!=  null)  {  return	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getValue();    if(currEntry!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
312	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry!=  null)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry!=  null)  {  return  -1;  }  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry!=  null)  {  return  -1;  }	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getValue();    if(currEntry!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
313	[BUG]  [BUGGY]  if(numRecords!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry!=  null)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numRecords!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry!=  null)  {  return  -1;  }  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numRecords!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry!=  null)  {  return  -1;  }	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getValue();    if(currEntry!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
314	[BUG]  [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry!=  null)  {  return  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry!=  null)  {  return  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry!=  null)  {  return	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getValue();    if(currEntry!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
315	[BUG]  [BUGGY]  if  (hasHitEOF  &&  offset  >  numToRead)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  offset  >  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  offset  >  numToRead)  {	  if    (hasHitEOF    ||    offset    >    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
316	[BUG]  [BUGGY]  if  (numToRead  ||  offset  >  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  ||  offset  >  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  ||  offset  >  hasHitEOF)  {	  if    (hasHitEOF    ||    offset    >    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
317	[BUG]  [BUGGY]  if(numToRead  >  offset  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  >  offset  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  >  offset  ||  hasHitEOF)  {	  if    (hasHitEOF    ||    offset    >    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
318	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buf.length  >  entrySize)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  buf.length  >  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  buf.length  >  entrySize)  {	  if(!hasHitEOF    &&    buf.length    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
319	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buf.length  <  =  entrySize)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  buf.length  <  =  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  buf.length  <  =  entrySize)  {	  if(!hasHitEOF    &&    buf.length    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
320	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buf.length!=  totalRead)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  buf.length!=  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  buf.length!=  totalRead)  {	  if(!hasHitEOF    &&    buf.length    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
321	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buf.length!=  entrySize)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  buf.length!=  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  buf.length!=  entrySize)  {	  if(!hasHitEOF    &&    buf.length    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
322	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buf.length!=  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  buf.length!=  entryOffset)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  buf.length!=  entryOffset)  {	  if(!hasHitEOF    &&    buf.length    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
323	[BUG]  [BUGGY]  if(!hasHitEOF  &&  currEntry  ==  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  currEntry  ==  null)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  currEntry  ==  null)  {	  if(!hasHitEOF    &&    entryOffset    ==    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
324	[BUG]  [BUGGY]  if(!hasHitEOF  &&  currEntry.length  ==  numToRead)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  currEntry.length  ==  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  currEntry.length  ==  numToRead)  {	  if(!hasHitEOF    &&    entryOffset    ==    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
325	[BUG]  [BUGGY]  if  (entrySize  >=  entryOffset  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (entrySize  >=  entryOffset  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (entrySize  >=  entryOffset  ||  hasHitEOF)  {	  if    (entrySize    >    entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
326	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  -1  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  -1  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  -1	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getEntry(i);    if(currEntry!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
327	[BUG]  [BUGGY]  if(totalRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(totalRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  -1;  }  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(totalRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  -1;  }	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getEntry(i);    if(currEntry!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
328	[BUG]  [BUGGY]  if(totalRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  -1  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(totalRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  -1  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(totalRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  -1	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getEntry(i);    if(currEntry!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
329	[BUG]  [BUGGY]  if(totalRead  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(totalRead  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  -1;  }  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(totalRead  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  -1;  }	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getEntry(i);    if(currEntry!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
330	[BUG]  [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  -1  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  -1  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  -1	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getEntry(i);    if(currEntry!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
331	[BUG]  [BUGGY]  if  (hashRecord  ||  totalRead  ==  totalRead  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hashRecord  ||  totalRead  ==  totalRead  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hashRecord  ||  totalRead  ==  totalRead  ||  hasHitEOF)  {	  if    (entrySize    ==    totalRead    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
332	[BUG]  [BUGGY]  if  (totalRead  ==  entrySize  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (totalRead  ==  entrySize  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (totalRead  ==  entrySize  ||  hasHitEOF)  {	  if    (entrySize    ==    totalRead    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
333	[BUG]  [BUGGY]  if  (totalRead  ==  totalRead  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (totalRead  ==  totalRead  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (totalRead  ==  totalRead  ||  hasHitEOF)  {	  if    (entrySize    ==    totalRead    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
334	[BUG]  [BUGGY]  if  (hasHitEOF  ||  entrySize  ==  totalRead)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  ||  entrySize  ==  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  entrySize  ==  totalRead)  {	  if    (entrySize    ==    totalRead    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
335	[BUG]  [BUGGY]  if  (offset  >  entrySize)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (offset  >  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (offset  >  entrySize)  {	  if    (entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
336	[BUG]  [BUGGY]  if  (hasHitEOF  &&  currEntry  ==  entrySize)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  currEntry  ==  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  currEntry  ==  entrySize)  {	  if    (hasHitEOF    &&    entryOffset    ==    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
337	[BUG]  [BUGGY]  if(!hasHitEOF  &&  totalRead  >=  numRecords)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  totalRead  >=  numRecords)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  totalRead  >=  numRecords)  {	  if(!hasHitEOF    &&    totalRead    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
338	[BUG]  [BUGGY]  if(entrySize  ==  hasHitEOF  ||  entryOffset  ==  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entrySize  ==  hasHitEOF  ||  entryOffset  ==  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entrySize  ==  hasHitEOF  ||  entryOffset  ==  hasHitEOF)  {	  if    (entryOffset    ==    hasHitEOF    ||    entrySize    ==    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
339	[BUG]  [BUGGY]  if(entrySize  ==  hasHitEOF  ||  entrySize  ==  available)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entrySize  ==  hasHitEOF  ||  entrySize  ==  available)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entrySize  ==  hasHitEOF  ||  entrySize  ==  available)  {	  if    (entryOffset    ==    hasHitEOF    ||    entrySize    ==    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
340	[BUG]  [BUGGY]  if  (entrySize  >  numToRead  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (entrySize  >  numToRead  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (entrySize  >  numToRead  ||  hasHitEOF)  {	  if    (hasHitEOF    ||    entryOffset    >    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
341	[BUG]  [BUGGY]  if  (hasHitEOF  ||  totalRead  >  numToRead)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  ||  totalRead  >  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  totalRead  >  numToRead)  {	  if    (hasHitEOF    ||    entryOffset    >    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
342	[BUG]  [BUGGY]  if  (hasHitEOF  ||  totalRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  ||  totalRead  ==  0)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  totalRead  ==  0)  {	  if    (hasHitEOF    ||    totalRead    ==    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
343	[BUG]  [BUGGY]  if  (hasHitEOF  ||  totalRead  ==  available)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  ||  totalRead  ==  available)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  totalRead  ==  available)  {	  if    (hasHitEOF    ||    totalRead    ==    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
344	[BUG]  [BUGGY]  if  (hasHitEOF  ||  buf.length  ==  numToRead)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  ||  buf.length  ==  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  buf.length  ==  numToRead)  {	  if    (hasHitEOF    ||    offset    ==    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
345	[BUG]  [BUGGY]  if  (!hasHitEOF  &&  offset  ==  numToRead)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (!hasHitEOF  &&  offset  ==  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (!hasHitEOF  &&  offset  ==  numToRead)  {	  if    (hasHitEOF    ||    offset    ==    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
346	[BUG]  [BUGGY]  if(numToRead  <  available()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  available()  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  available()  ||  hasHitEOF)  {	  if(entryOffset    <    hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
347	[BUG]  [BUGGY]  if(numToRead  <  available  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  available  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  available  ||  hasHitEOF)  {	  if(entryOffset    <    hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
348	[BUG]  [BUGGY]  if(entrySize  ==  available  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entrySize  ==  available  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entrySize  ==  available  ||  hasHitEOF)  {	  if(entrySize    ==    entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
349	[BUG]  [BUGGY]  if(entrySize  ==  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entrySize  ==  0  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entrySize  ==  0  ||  hasHitEOF)  {	  if(entrySize    ==    entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
350	[BUG]  [BUGGY]  if  (numToRead  ||  hasHitEOF  ||  buf.length  ==  numToRead)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  ||  hasHitEOF  ||  buf.length  ==  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  ||  hasHitEOF  ||  buf.length  ==  numToRead)  {	  if    (numToRead    ||    hasHitEOF    {    entryOffset    ==    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
351	[BUG]  [BUGGY]  if  (offsetToRead  ||  hasHitEOF  {  entryOffset  ==  numToRead)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (offsetToRead  ||  hasHitEOF  {  entryOffset  ==  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (offsetToRead  ||  hasHitEOF  {  entryOffset  ==  numToRead)  {	  if    (numToRead    ||    hasHitEOF    {    entryOffset    ==    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
352	[BUG]  [BUGGY]  byte[]  currEntry  =(byte[])currEntry.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =(byte[])currEntry.read(buf,  offset,  numToRead  +  1);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =(byte[])currEntry.read(buf,  offset,  numToRead  +  1);	  byte[]    currEntry    =(byte[])currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
353	[BUG]  [BUGGY]  byte[]  currEntry  =(byte[])currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =(byte[])currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =(byte[])currEntry.read(buf,  offset,  numToRead,  hasHitEOF);	  byte[]    currEntry    =(byte[])currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
354	[BUG]  [BUGGY]  byte[]  currEntry  =(byte[])currentEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =(byte[])currentEntry.read(buf,  offset,  numToRead);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =(byte[])currentEntry.read(buf,  offset,  numToRead);	  byte[]    currEntry    =(byte[])currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
355	[BUG]  [BUGGY]  if(numToRead  <  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  0  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  0  ||  hasHitEOF)  {	  if(numToRead    <    entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
356	[BUG]  [BUGGY]  if(totalRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  continue  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(totalRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  continue  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(totalRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  continue	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getEntry(i);    if(currEntry!=    null)    {    continue    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
357	[BUG]  [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  continue  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  continue  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  continue	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getEntry(i);    if(currEntry!=    null)    {    continue    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
358	[BUG]  [BUGGY]  if(hasHitEOF  ||  totalRead  >  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(hasHitEOF  ||  totalRead  >  SMALL_BUFFER_SIZE)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(hasHitEOF  ||  totalRead  >  SMALL_BUFFER_SIZE)  {	  if(hasHitEOF    ||    entryOffset    >    SMALL_BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
359	[BUG]  [BUGGY]  if(entrySize  >  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entrySize  >  SMALL_BUFFER_SIZE)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entrySize  >  SMALL_BUFFER_SIZE)  {	  if(hasHitEOF    ||    entryOffset    >    SMALL_BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
360	[BUG]  [BUGGY]  if(entrySize  <  SMALL_BUFFER_SIZE  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entrySize  <  SMALL_BUFFER_SIZE  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entrySize  <  SMALL_BUFFER_SIZE  ||  hasHitEOF)  {	  if(hasHitEOF    ||    entryOffset    >    SMALL_BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
361	[BUG]  [BUGGY]  if(!hasHitEOF  &&  currEntry.length!=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  currEntry.length!=  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  currEntry.length!=  numToRead)  {	  if(!hasHitEOF    &&    entryOffset!=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
362	[BUG]  [BUGGY]  if  (!hasHitEOF  &&  currEntry.length  <  totalRead)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (!hasHitEOF  &&  currEntry.length  <  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (!hasHitEOF  &&  currEntry.length  <  totalRead)  {	  if    (!hasHitEOF    &&    entryOffset    <    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
363	[BUG]  [BUGGY]  if  (!hasHitEOF  ||  entryOffset  <  totalRead)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (!hasHitEOF  ||  entryOffset  <  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (!hasHitEOF  ||  entryOffset  <  totalRead)  {	  if    (!hasHitEOF    &&    entryOffset    <    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
364	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry!=  null)  {  return  -1  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry!=  null)  {  return  -1  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry!=  null)  {  return  -1	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getValue();    if(currEntry!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
365	[BUG]  [BUGGY]  if(totalRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry!=  null)  {  return  -1  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(totalRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry!=  null)  {  return  -1  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(totalRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry!=  null)  {  return  -1	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getValue();    if(currEntry!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
366	[BUG]  [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry!=  null)  {  return  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry!=  null)  {  return  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry!=  null)  {  return	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getValue();    if(currEntry!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
367	[BUG]  [BUGGY]  if(totalRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry!=  null)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(totalRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry!=  null)  {  return  -1;  }  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(totalRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry!=  null)  {  return  -1;  }	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getValue();    if(currEntry!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
368	[BUG]  [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry!=  null)  {  return  -1  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry!=  null)  {  return  -1  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry!=  null)  {  return  -1	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getValue();    if(currEntry!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
369	[BUG]  [BUGGY]  if(hasHitEOF  &&  totalRead  >=  entryOffset)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(hasHitEOF  &&  totalRead  >=  entryOffset)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(hasHitEOF  &&  totalRead  >=  entryOffset)  {	  if(hasHitEOF    &&    entryOffset    >=    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
370	[BUG]  [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead  +  1);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead  +  1);	  byte[]    currEntry    =    getCurrentEntry(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
371	[BUG]  [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead,  hasHitEOF);	  byte[]    currEntry    =    getCurrentEntry(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
372	[BUG]  [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  offset,  0);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =  getCurrentEntry(buf,  offset,  0);	  byte[]    currEntry    =    getCurrentEntry(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
373	[BUG]  [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead,  0);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead,  0);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead,  0);	  byte[]    currEntry    =    getCurrentEntry(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
374	[BUG]  [BUGGY]  if  (numToRead  <  inputSize  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  <  inputSize  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  <  inputSize  ||  hasHitEOF)  {	  if    (entrySize    <    numToRead    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
375	[BUG]  [BUGGY]  if  (numToRead  <  numToRead  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  <  numToRead  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  <  numToRead  ||  hasHitEOF)  {	  if    (entrySize    <    numToRead    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
376	[BUG]  [BUGGY]  if  (numToRead  <  recordSize  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  <  recordSize  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  <  recordSize  ||  hasHitEOF)  {	  if    (entrySize    <    numToRead    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
377	[BUG]  [BUGGY]  if  (hasHitEOF  &&  currEntry.length  <  numToRead)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  currEntry.length  <  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  currEntry.length  <  numToRead)  {	  if    (hasHitEOF    &&    entryOffset    <    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
378	[BUG]  [BUGGY]  if  (!hasHitEOF  &&  buf.length  <  numToRead)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (!hasHitEOF  &&  buf.length  <  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (!hasHitEOF  &&  buf.length  <  numToRead)  {	  if    (hasHitEOF    &&    entryOffset    <    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
379	[BUG]  [BUGGY]  if(numToRead  ==  available()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ==  available()  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ==  available()  ||  hasHitEOF)  {	  if(entryOffset    ==    hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
380	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  entryOffset  ==  hasHitEOF  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(currEntry  ==  null  ||  entryOffset  ==  hasHitEOF  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(currEntry  ==  null  ||  entryOffset  ==  hasHitEOF  ||  hasHitEOF)  {	  if(entryOffset    ==    hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
381	[BUG]  [BUGGY]  if(hashRecord  ||  entryOffset  ==  hasHitEOF  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(hashRecord  ||  entryOffset  ==  hasHitEOF  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(hashRecord  ||  entryOffset  ==  hasHitEOF  ||  hasHitEOF)  {	  if(entryOffset    ==    hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
382	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(currEntry  ==  null  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(currEntry  ==  null  ||  hasHitEOF)  {	  if(entryOffset    ==    hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
383	[BUG]  [BUGGY]  if(hasHitEOF  ||  entryOffset  ==  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(hasHitEOF  ||  entryOffset  ==  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(hasHitEOF  ||  entryOffset  ==  hasHitEOF)  {	  if(entryOffset    ==    hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
384	[BUG]  [BUGGY]  if  (entrySize!=  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (entrySize!=  entryOffset)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (entrySize!=  entryOffset)  {	  if    (hasHitEOF    ||    entryOffset!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
385	[BUG]  [BUGGY]  if  (numToRead  ||  totalRead  <  numToRead)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  ||  totalRead  <  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  ||  totalRead  <  numToRead)  {	  if    (hasHitEOF    ||    totalRead    <    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
386	[BUG]  [BUGGY]  if  (hasHitEOF  &&  totalRead!=  numRecords)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  totalRead!=  numRecords)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  totalRead!=  numRecords)  {	  if    (hasHitEOF    &&    totalRead    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
387	[BUG]  [BUGGY]  if  (numToRead  <  =  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  <  =  entryOffset)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  <  =  entryOffset)  {	  if    (numToRead    >=    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
388	[BUG]  [BUGGY]  if  (numToRead  ||  hasHitEOF  &&  totalRead  ==  numRecords)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  ||  hasHitEOF  &&  totalRead  ==  numRecords)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  ||  hasHitEOF  &&  totalRead  ==  numRecords)  {	  if    (numToRead    ||    hasHitEOF    ||    entryOffset    ==    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
389	[BUG]  [BUGGY]  if  (entrySize  ==  totalRead  ||  hasHitEOF  ||  numToRead  ==  totalRead)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (entrySize  ==  totalRead  ||  hasHitEOF  ||  numToRead  ==  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (entrySize  ==  totalRead  ||  hasHitEOF  ||  numToRead  ==  totalRead)  {	  if    (numToRead    ||    hasHitEOF    ||    entryOffset    ==    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
390	[BUG]  [BUGGY]  if  (entrySize  ==  totalRead  ||  hasHitEOF  ||  entryOffset  ==  numToRead)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (entrySize  ==  totalRead  ||  hasHitEOF  ||  entryOffset  ==  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (entrySize  ==  totalRead  ||  hasHitEOF  ||  entryOffset  ==  numToRead)  {	  if    (numToRead    ||    hasHitEOF    ||    entryOffset    ==    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
391	[BUG]  [BUGGY]  if  (offset  ||  numToRead  ==  totalRead)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (offset  ||  numToRead  ==  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (offset  ||  numToRead  ==  totalRead)  {	  if    (numToRead    ||    entryOffset    ==    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
392	[BUG]  [BUGGY]  if  (entrySize  ==  totalRead  ||  numToRead  ==  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (entrySize  ==  totalRead  ||  numToRead  ==  entryOffset)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (entrySize  ==  totalRead  ||  numToRead  ==  entryOffset)  {	  if    (numToRead    ||    entryOffset    ==    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
393	[BUG]  [BUGGY]  if  (numToRead  ||  totalRead  ==  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  ||  totalRead  ==  entryOffset)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  ||  totalRead  ==  entryOffset)  {	  if    (numToRead    ||    entryOffset    ==    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
394	[BUG]  [BUGGY]  if  (numToRead  ||  totalRead  ==  numToRead)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  ||  totalRead  ==  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  ||  totalRead  ==  numToRead)  {	  if    (numToRead    ||    entryOffset    ==    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
395	[BUG]  [BUGGY]  if  (hasHitEOF  ||  buf.length  <  =  totalRead)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  ||  buf.length  <  =  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  buf.length  <  =  totalRead)  {	  if    (hasHitEOF    ||    offset    <    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
396	[BUG]  [BUGGY]  if(entrySize  >=  0  ||  hasHitEOF  ||  entryOffset  ==  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entrySize  >=  0  ||  hasHitEOF  ||  entryOffset  ==  0)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entrySize  >=  0  ||  hasHitEOF  ||  entryOffset  ==  0)  {	  if(hasHitEOF    ||    entryOffset    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
397	[BUG]  [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	readNow  =  is.read(buf,  offset,  numToRead  +  1);	  readNow    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
398	[BUG]  [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	readNow  =  is.read(buf,  offset,  numToRead,  hasHitEOF);	  readNow    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
399	[BUG]  [BUGGY]  if  (entrySize  ==  numToRead)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (entrySize  ==  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (entrySize  ==  numToRead)  {	  if    (entrySize    ==    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
400	[BUG]  [BUGGY]  if  (entrySize  ==  available)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (entrySize  ==  available)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (entrySize  ==  available)  {	  if    (entrySize    ==    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
401	[BUG]  [BUGGY]  if  (numToRead  ==  input.length  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  ==  input.length  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  ==  input.length  ||  hasHitEOF)  {	  if    (entrySize    ==    numToRead    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
402	[BUG]  [BUGGY]  if(numToRead  ==  entryOffset  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ==  entryOffset  &&  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ==  entryOffset  &&  hasHitEOF)  {	  if(numToRead!=    entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
403	[BUG]  [BUGGY]  if  (!hasHitEOF  &&  offset  >  numToRead)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (!hasHitEOF  &&  offset  >  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (!hasHitEOF  &&  offset  >  numToRead)  {	  if    (hasHitEOF    ||    offset    >    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
404	[BUG]  [BUGGY]  if  (numToRead  >=  input.length  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  >=  input.length  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  >=  input.length  ||  hasHitEOF)  {	  if    (entryOffset    >=    numToRead    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
405	[BUG]  [BUGGY]  if  (entryOffset  >  numToRead  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (entryOffset  >  numToRead  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (entryOffset  >  numToRead  ||  hasHitEOF)  {	  if    (numToRead    >    entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
406	[BUG]  [BUGGY]  if  (numToRead  >  fullNameData.length  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  >  fullNameData.length  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  >  fullNameData.length  ||  hasHitEOF)  {	  if    (numToRead    >    entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
407	[BUG]  [BUGGY]  if  (offset  >  entryOffset  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (offset  >  entryOffset  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (offset  >  entryOffset  ||  hasHitEOF)  {	  if    (numToRead    >    entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
408	[BUG]  [BUGGY]  if  (numToRead  ==  hasHitEOF  ||  totalRead  >=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  ==  hasHitEOF  ||  totalRead  >=  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  ==  hasHitEOF  ||  totalRead  >=  numToRead)  {	  if    (hasHitEOF    ||    totalRead    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
409	[BUG]  [BUGGY]  if  (numToRead  >=  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  >=  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  >=  hasHitEOF)  {	  if    (hasHitEOF    ||    totalRead    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
410	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  null)  {  return  -1  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  null)  {  return  -1  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  null)  {  return  -1	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getValue(i);    if(currEntry!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
411	[BUG]  [BUGGY]  if(totalRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  null)  {  return  -1  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(totalRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  null)  {  return  -1  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(totalRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  null)  {  return  -1	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getValue(i);    if(currEntry!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
412	[BUG]  [BUGGY]  if(totalRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  null)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(totalRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  null)  {  return  -1;  }  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(totalRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  null)  {  return  -1;  }	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getValue(i);    if(currEntry!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
413	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  nu  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  nu  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  nu	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getValue(i);    if(currEntry!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
414	[BUG]  [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  null)  {  return  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  null)  {  return  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  null)  {  return	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getValue(i);    if(currEntry!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
415	[BUG]  [BUGGY]  if  (hasHitEOF  &&  currEntry.length  <  totalRead)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  currEntry.length  <  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  currEntry.length  <  totalRead)  {	  if    (hasHitEOF    &&    entryOffset    <    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
416	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ==  0)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ==  0)  {	  if(numToRead    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
417	[BUG]  [BUGGY]  if(hasHitEOF  ||  buf.length!=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(hasHitEOF  ||  buf.length!=  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(hasHitEOF  ||  buf.length!=  numToRead)  {	  if(numToRead    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
418	[BUG]  [BUGGY]  if  (hasHitEOF  ||  buf.length  ==  totalRead)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  ||  buf.length  ==  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  buf.length  ==  totalRead)  {	  if    (hasHitEOF    ||    buf.length    <    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
419	[BUG]  [BUGGY]  byte[]  currEntry  =  is.readByte(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =  is.readByte(buf,  offset,  numToRead  +  1);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =  is.readByte(buf,  offset,  numToRead  +  1);	  byte[]    currEntry    =    is.readByte(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
420	[BUG]  [BUGGY]  byte[]  currEntry  =  is.readByte(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =  is.readByte(buf,  offset,  0);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =  is.readByte(buf,  offset,  0);	  byte[]    currEntry    =    is.readByte(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
421	[BUG]  [BUGGY]  byte[]  currEntry  =  is.readByte(buf,  offset,  numToRead)+  1;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =  is.readByte(buf,  offset,  numToRead)+  1;  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =  is.readByte(buf,  offset,  numToRead)+  1;	  byte[]    currEntry    =    is.readByte(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
422	[BUG]  [BUGGY]  if  (totalRead  <  numToRead  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (totalRead  <  numToRead  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (totalRead  <  numToRead  ||  hasHitEOF)  {	  if    (entrySize    <    totalRead    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
423	[BUG]  [BUGGY]  if  (hasHitEOF  &&  buf.length  ==  entrySize)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  buf.length  ==  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  buf.length  ==  entrySize)  {	  if    (hasHitEOF    &&    buf.length    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
424	[BUG]  [BUGGY]  if  (hasHitEOF  ||  buf.length  >=  entrySize)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  ||  buf.length  >=  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  buf.length  >=  entrySize)  {	  if    (hasHitEOF    &&    buf.length    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
425	[BUG]  [BUGGY]  if(numToRead!=  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead!=  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead!=  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }	  if(numToRead    <    0)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    buffer[i]    =    is.read(buf,    offset,    i);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
426	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  >=  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  >=  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }	  if(numToRead    <    0)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    buffer[i]    =    is.read(buf,    offset,    i);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
427	[BUG]  [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0,  buffer.length  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0,  buffer.length  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  0)  {  for(int  i  =  0,  buffer.length  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }	  if(numToRead    <    0)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    buffer[i]    =    is.read(buf,    offset,    i);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
428	[BUG]  [BUGGY]  if(numToRead!=  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead!=  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead!=  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }	  if(numToRead    <    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    buffer[i]    =    is.read(buf,    offset,    i);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
429	[BUG]  [BUGGY]  if  (numToRead  <  0  ||  hasHitEOF  ||  buf.length  >=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  <  0  ||  hasHitEOF  ||  buf.length  >=  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  <  0  ||  hasHitEOF  ||  buf.length  >=  numToRead)  {	  if    (hasHitEOF    ||    buf.length    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
430	[BUG]  [BUGGY]  if  (numToRead  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  &&  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  &&  hasHitEOF)  {	  if    (hasHitEOF    &&    entryOffset    ==    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
431	[BUG]  [BUGGY]  if  (hasHitEOF  &&  currEntry.length  ==  numToRead)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  currEntry.length  ==  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  currEntry.length  ==  numToRead)  {	  if    (hasHitEOF    &&    entryOffset    ==    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
432	[BUG]  [BUGGY]  if(entrySize  ==  hasHitEOF  ||  numToRead  ==  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entrySize  ==  hasHitEOF  ||  numToRead  ==  entryOffset)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entrySize  ==  hasHitEOF  ||  numToRead  ==  entryOffset)  {	  if(numToRead    ||    entryOffset    ==    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
433	[BUG]  [BUGGY]  if(entrySize  ==  available()  ||  numToRead  ==  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entrySize  ==  available()  ||  numToRead  ==  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entrySize  ==  available()  ||  numToRead  ==  hasHitEOF)  {	  if(numToRead    ||    entryOffset    ==    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
434	[BUG]  [BUGGY]  if(entrySize  ==  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entrySize  ==  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entrySize  ==  hasHitEOF)  {	  if(numToRead    ||    entryOffset    ==    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
435	[BUG]  [BUGGY]  if(entrySize  ==  available())  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entrySize  ==  available())  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entrySize  ==  available())  {	  if(numToRead    ||    entryOffset    ==    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
436	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	int  ch  =  is.read(buf,  offset,  numToRead  +  1);	  int    ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
437	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	int  ch  =  is.read(buf,  offset,  numToRead,  hasHitEOF);	  int    ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
438	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.getName()))  {  return  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.getName()))  {  return  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.getName()))  {  return	  if(numToRead    <    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(currEntry.getName()))    {    return    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
439	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.getName()  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.getName()  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.getName()	  if(numToRead    <    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(currEntry.getName()))    {    return    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
440	[BUG]  [BUGGY]  if  (entrySize  <  hasHitEOF  ||  numToRead  <  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (entrySize  <  hasHitEOF  ||  numToRead  <  entryOffset)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (entrySize  <  hasHitEOF  ||  numToRead  <  entryOffset)  {	  if    (numToRead    ||    entryOffset    <    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
441	[BUG]  [BUGGY]  if  (entryOffset  +  numToRead  <  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (entryOffset  +  numToRead  <  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (entryOffset  +  numToRead  <  hasHitEOF)  {	  if    (numToRead    ||    entryOffset    <    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
442	[BUG]  [BUGGY]  if  (entrySize  <  hasHitEOF  ||  entryOffset  <  numToRead)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (entrySize  <  hasHitEOF  ||  entryOffset  <  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (entrySize  <  hasHitEOF  ||  entryOffset  <  numToRead)  {	  if    (numToRead    ||    entryOffset    <    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
443	[BUG]  [BUGGY]  if  (offset  <  0  ||  numToRead  <  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (offset  <  0  ||  numToRead  <  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (offset  <  0  ||  numToRead  <  hasHitEOF)  {	  if    (numToRead    ||    entryOffset    <    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
444	[BUG]  [BUGGY]  if(numToRead  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(numToRead    ||    hasHitEOF    ==    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
445	[BUG]  [BUGGY]  if(numToRead  ||  hasHitEOF  ||  isEnabled(currentEntrySize))  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ||  hasHitEOF  ||  isEnabled(currentEntrySize))  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ||  hasHitEOF  ||  isEnabled(currentEntrySize))  {	  if(numToRead    ||    hasHitEOF    ==    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
446	[BUG]  [BUGGY]  byte[]  currEntry  =  getCurrentEntry(offset);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =  getCurrentEntry(offset);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =  getCurrentEntry(offset);	  byte[]    currEntry    =    getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
447	[BUG]  [BUGGY]  byte[]  currEntry  =  getCurrentEntry().arraycopy(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =  getCurrentEntry().arraycopy(buf,  offset,  numToRead);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =  getCurrentEntry().arraycopy(buf,  offset,  numToRead);	  byte[]    currEntry    =    getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
448	[BUG]  [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  totalRead);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  totalRead);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =  getCurrentEntry(buf,  totalRead);	  byte[]    currEntry    =    getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
449	[BUG]  [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	int  currEntrySize  =  is.read(buf,  offset,  numToRead  +  1);	  int    currEntrySize    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
450	[BUG]  [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	int  currEntrySize  =  is.read(buf,  offset,  numToRead,  hasHitEOF);	  int    currEntrySize    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
451	[BUG]  [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  numToRead,  0);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  numToRead,  0);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	int  currEntrySize  =  is.read(buf,  offset,  numToRead,  0);	  int    currEntrySize    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
452	[BUG]  [BUGGY]  if(!hasHitEOF  ||  entryOffset  >  entrySize)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  ||  entryOffset  >  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  ||  entryOffset  >  entrySize)  {	  if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
453	[BUG]  [BUGGY]  if(entrySize  >=  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entrySize  >=  entryOffset)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entrySize  >=  entryOffset)  {	  if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
454	[BUG]  [BUGGY]  if(!hitEOF  &&  entryOffset  >=  entrySize)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hitEOF  &&  entryOffset  >=  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hitEOF  &&  entryOffset  >=  entrySize)  {	  if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
455	[BUG]  [BUGGY]  if  (hasHitEOF  ||  totalRead  >=  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  ||  totalRead  >=  entryOffset)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  totalRead  >=  entryOffset)  {	  if    (hasHitEOF    ||    totalRead    <    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
456	[BUG]  [BUGGY]  if  (!hasHitEOF  &&  totalRead  ==  offset)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (!hasHitEOF  &&  totalRead  ==  offset)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (!hasHitEOF  &&  totalRead  ==  offset)  {	  if    (hasHitEOF    ||    totalRead    ==    offset)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
457	[BUG]  [BUGGY]  if  (numToRead  ||  hasHitEOF  ||  totalRead  ==  offset)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  ||  hasHitEOF  ||  totalRead  ==  offset)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  ||  hasHitEOF  ||  totalRead  ==  offset)  {	  if    (hasHitEOF    ||    totalRead    ==    offset)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
458	[BUG]  [BUGGY]  if  (numToRead  <  0  ||  offset  >=  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  <  0  ||  offset  >=  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  <  0  ||  offset  >=  hasHitEOF)  {	  if    (hasHitEOF    ||    offset    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
459	[BUG]  [BUGGY]  if(!hasHitEOF  &&  entrySize  >  numToRead)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  entrySize  >  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  entrySize  >  numToRead)  {	  if(!hasHitEOF    &&    entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
460	[BUG]  [BUGGY]  if  (hasHitEOF  &&  currEntry.length  <  entrySize)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  currEntry.length  <  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  currEntry.length  <  entrySize)  {	  if    (hasHitEOF    &&    currEntry.length    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
461	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buf.length!=  numRecords)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  buf.length!=  numRecords)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  buf.length!=  numRecords)  {	  if(!hasHitEOF    &&    buf.length    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
462	[BUG]  [BUGGY]  if  (hasHitEOF  ||  totalRead  >  buf.length)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  ||  totalRead  >  buf.length)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  totalRead  >  buf.length)  {	  if    (hasHitEOF    ||    entryOffset    >    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
463	[BUG]  [BUGGY]  if  (entrySize  >  totalRead)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (entrySize  >  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (entrySize  >  totalRead)  {	  if    (hasHitEOF    ||    entryOffset    >    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
464	[BUG]  [BUGGY]  if(currEntry!=  null  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(currEntry!=  null  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(currEntry!=  null  ||  hasHitEOF)  {	  if(entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
465	[BUG]  [BUGGY]  if(hashRecord  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(hashRecord  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(hashRecord  ||  hasHitEOF)  {	  if(entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
466	[BUG]  [BUGGY]  if(currEntry.length  ==  available()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(currEntry.length  ==  available()  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(currEntry.length  ==  available()  ||  hasHitEOF)  {	  if(entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
467	[BUG]  [BUGGY]  if(currEntry.length  ==  available())  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(currEntry.length  ==  available())  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(currEntry.length  ==  available())  {	  if(entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
468	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEnt  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEnt  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEnt	  if(numToRead    <    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
469	[BUG]  [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEnt  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEnt  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEnt	  if(numToRead    <    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
470	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  >=  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  >=  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry	  if(numToRead    <    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
471	[BUG]  [BUGGY]  if(numToRead  >  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  >  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  >  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry	  if(numToRead    <    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(currEntry.getName    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
472	[BUG]  [BUGGY]  byte[]  currEntry  =  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =  is.read(buf,  offset,  numToRead  +  1);	  byte[]    currEntry    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
473	[BUG]  [BUGGY]  byte[]  currEntry  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =  is.read(buf,  offset,  numToRead,  hasHitEOF);	  byte[]    currEntry    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
474	[BUG]  [BUGGY]  byte[]  currEntry  =  is.read(buf,  offset,  numToRead,  0);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =  is.read(buf,  offset,  numToRead,  0);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =  is.read(buf,  offset,  numToRead,  0);	  byte[]    currEntry    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
475	[BUG]  [BUGGY]  if  (numToRead  ==  available()  ||  totalRead  ==  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  ==  available()  ||  totalRead  ==  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  ==  available()  ||  totalRead  ==  hasHitEOF)  {	  if    (entryOffset    ==    hasHitEOF    ||    totalRead    ==    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
476	[BUG]  [BUGGY]  if  (totalRead  ==  hasHitEOF  ||  totalRead  ==  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (totalRead  ==  hasHitEOF  ||  totalRead  ==  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (totalRead  ==  hasHitEOF  ||  totalRead  ==  hasHitEOF)  {	  if    (entryOffset    ==    hasHitEOF    ||    totalRead    ==    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
477	[BUG]  [BUGGY]  if  (numToRead  ==  available  ||  totalRead  ==  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  ==  available  ||  totalRead  ==  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  ==  available  ||  totalRead  ==  hasHitEOF)  {	  if    (entryOffset    ==    hasHitEOF    ||    totalRead    ==    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
478	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  currEntry  ==  null)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(currEntry  ==  null  ||  currEntry  ==  null)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(currEntry  ==  null  ||  currEntry  ==  null)  {	  if    (entryOffset    ==    hasHitEOF    ||    totalRead    ==    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
479	[BUG]  [BUGGY]  if(!hasHitEOF  &&  currEntry.length  >=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  currEntry.length  >=  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  currEntry.length  >=  numToRead)  {	  if(!hasHitEOF    &&    entryOffset    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
480	[BUG]  [BUGGY]  if(!hasHitEOF  &&  offset  >=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  offset  >=  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  offset  >=  numToRead)  {	  if(!hasHitEOF    &&    entryOffset    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
481	[BUG]  [BUGGY]  if  (hasHitEOF  &&  currEntry.length!=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  currEntry.length!=  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  currEntry.length!=  numToRead)  {	  if    (hasHitEOF    &&    entryOffset!=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
482	[BUG]  [BUGGY]  if  (numToRead!=  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead!=  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead!=  hasHitEOF)  {	  if    (hasHitEOF    &&    entryOffset!=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
483	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  int  ch  =  is.read(buf,  offset,  0);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	int  ch  =  is.read(buf,  offset,  0);	  int    ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
484	[BUG]  [BUGGY]  if  (entrySize  >  entrySize  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (entrySize  >  entrySize  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (entrySize  >  entrySize  ||  hasHitEOF)  {	  if    (entrySize    >    entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
485	[BUG]  [BUGGY]  byte[]  currEntry  =  is.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =  is.read(buf,  offset,  0);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =  is.read(buf,  offset,  0);	  byte[]    currEntry    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
486	[BUG]  [BUGGY]  if  (hasHitEOF  ||  totalRead  >  HIT_EOF)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  ||  totalRead  >  HIT_EOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  totalRead  >  HIT_EOF)  {	  if    (hasHitEOF    ||    entryOffset    >    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
487	[BUG]  [BUGGY]  if(numToRead  >  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  >  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  >  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }	  if(numToRead    <    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    buffer[i]    =    is.read(buf,    offset,    i);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
488	[BUG]  [BUGGY]  while(i  <  numToRead)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  while(i  <  numToRead)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	while(i  <  numToRead)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }	  if(numToRead    <    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    buffer[i]    =    is.read(buf,    offset,    i);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
489	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numToRead;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  for(int  i  =  0;  i  <  numToRead;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	for(int  i  =  0;  i  <  numToRead;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }	  if(numToRead    <    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    buffer[i]    =    is.read(buf,    offset,    i);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
490	[BUG]  [BUGGY]  if(numToRead  >  hasHitEOF  ||  offset  >  numToRead)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  >  hasHitEOF  ||  offset  >  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  >  hasHitEOF  ||  offset  >  numToRead)  {	  if    (hasHitEOF    ||    offset    >    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
491	[BUG]  [BUGGY]  if(entrySize  ==  hasHitEOF  ||  entryOffset  ==  entrySize)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entrySize  ==  hasHitEOF  ||  entryOffset  ==  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entrySize  ==  hasHitEOF  ||  entryOffset  ==  entrySize)  {	  if(entryOffset    ==    hasHitEOF    ||    entrySize    ==    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
492	[BUG]  [BUGGY]  if(entrySize  ==  hasHitEOF  ||  entryOffset  ==  this.entrySize)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entrySize  ==  hasHitEOF  ||  entryOffset  ==  this.entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entrySize  ==  hasHitEOF  ||  entryOffset  ==  this.entrySize)  {	  if(entryOffset    ==    hasHitEOF    ||    entrySize    ==    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
493	[BUG]  [BUGGY]  if(entryOffset  ==  hasHitEOF  ||  entrySize  ==  totalRead)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entryOffset  ==  hasHitEOF  ||  entrySize  ==  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entryOffset  ==  hasHitEOF  ||  entrySize  ==  totalRead)  {	  if(entryOffset    ==    hasHitEOF    ||    entrySize    ==    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
494	[BUG]  [BUGGY]  byte[]  currEntry  =  is.readCurrentEntry(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =  is.readCurrentEntry(buf,  offset,  numToRead);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =  is.readCurrentEntry(buf,  offset,  numToRead);	  byte[]    currEntry    =    getCurrentEntry(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
495	[BUG]  [BUGGY]  if(numToRead  ==  available()  ||  entryOffset  ==  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ==  available()  ||  entryOffset  ==  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ==  available()  ||  entryOffset  ==  hasHitEOF)  {	  if(numToRead    ||    entryOffset    ==    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
496	[BUG]  [BUGGY]  if(numToRead  ==  available  ||  entryOffset  ==  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ==  available  ||  entryOffset  ==  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ==  available  ||  entryOffset  ==  hasHitEOF)  {	  if(numToRead    ||    entryOffset    ==    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
497	[BUG]  [BUGGY]  if(numToRead  ||  numToRead  ==  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ||  numToRead  ==  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ||  numToRead  ==  hasHitEOF)  {	  if(numToRead    ||    entryOffset    ==    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
498	[BUG]  [BUGGY]  if(numToRead  >  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  >  0  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  >  0  ||  hasHitEOF)  {	  if    (numToRead    >    entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
499	[BUG]  [BUGGY]  if(numToRead  ==  hasHitEOF  &&  entryOffset  ==  totalRead)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ==  hasHitEOF  &&  entryOffset  ==  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ==  hasHitEOF  &&  entryOffset  ==  totalRead)  {	  if    (hasHitEOF    &&    entryOffset    ==    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
500	[BUG]  [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead,  0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead,  0);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	readNow  =  is.read(buf,  offset,  numToRead,  0);	  readNow    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
501	[BUG]  [BUGGY]  if  (numToRead  <  available()  ||  entryOffset  <  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  <  available()  ||  entryOffset  <  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  <  available()  ||  entryOffset  <  hasHitEOF)  {	  if    (numToRead    ||    entryOffset    <    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
502	[BUG]  [BUGGY]  if  (entryOffset  <  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (entryOffset  <  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (entryOffset  <  hasHitEOF)  {	  if    (numToRead    ||    entryOffset    <    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
503	[BUG]  [BUGGY]  if  (numToRead  ||  numToRead  <  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  ||  numToRead  <  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  ||  numToRead  <  hasHitEOF)  {	  if    (numToRead    ||    entryOffset    <    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
504	[BUG]  [BUGGY]  if  (numToRead  ||  entryOffset  <  0)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  ||  entryOffset  <  0)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  ||  entryOffset  <  0)  {	  if    (numToRead    ||    entryOffset    <    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
505	[BUG]  [BUGGY]  if(hasHitEOF  ||  entryOffset  <  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(hasHitEOF  ||  entryOffset  <  0)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(hasHitEOF  ||  entryOffset  <  0)  {	  if(hasHitEOF    ||    entryOffset    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
506	[BUG]  [BUGGY]  if(hasHitEOF  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(hasHitEOF  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(hasHitEOF  ||  hasHitEOF)  {	  if(hasHitEOF    ||    entryOffset    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
507	[BUG]  [BUGGY]  if(entryOffset  ||  hasHitEOF  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entryOffset  ||  hasHitEOF  ==  0)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entryOffset  ||  hasHitEOF  ==  0)  {	  if(hasHitEOF    ||    entryOffset    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
508	[BUG]  [BUGGY]  if(numToRead  ==  totalRead  ||  hasHitEOF  ||  entryOffset  ==  numToRead)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ==  totalRead  ||  hasHitEOF  ||  entryOffset  ==  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ==  totalRead  ||  hasHitEOF  ||  entryOffset  ==  numToRead)  {	  if    (numToRead    ||    hasHitEOF    ||    entryOffset    ==    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
509	[BUG]  [BUGGY]  if(numToRead  ==  0  ||  hasHitEOF  ||  entryOffset  ==  0)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ==  0  ||  hasHitEOF  ||  entryOffset  ==  0)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ==  0  ||  hasHitEOF  ||  entryOffset  ==  0)  {	  if    (numToRead    ||    hasHitEOF    ||    entryOffset    ==    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
510	[BUG]  [BUGGY]  if  (hasHitEOF  ||  buf.length  ==  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  ||  buf.length  ==  entryOffset)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  buf.length  ==  entryOffset)  {	  if    (numToRead    ||    hasHitEOF    ||    entryOffset    ==    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
511	[BUG]  [BUGGY]  if(numToRead  ==  0  ||  hasHitEOF  ||  entryOffset  ==  totalRead)  {  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ==  0  ||  hasHitEOF  ||  entryOffset  ==  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ==  0  ||  hasHitEOF  ||  entryOffset  ==  totalRead)  {	  if    (numToRead    ||    hasHitEOF    ||    entryOffset    ==    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
512	[BUG]  [BUGGY]  if  (numToRead  ||  hasHitEOF  ||  totalRead  ==  numRecords)  {  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (numToRead  ||  hasHitEOF  ||  totalRead  ==  numRecords)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  ||  hasHitEOF  ||  totalRead  ==  numRecords)  {	  if    (numToRead    ||    hasHitEOF    ||    entryOffset    ==    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
513	[BUG]  [BUGGY]  if(numToRead  ==  available  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ==  available  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ==  available  ||  hasHitEOF)  {	  if    (entrySize    ==    numToRead    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
514	[BUG]  [BUGGY]  if(hashHitEOF  ||  entryOffset  ==  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(hashHitEOF  ||  entryOffset  ==  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(hashHitEOF  ||  entryOffset  ==  hasHitEOF)  {	  if(entryOffset    ==    hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
515	[BUG]  [BUGGY]  if(!hasHitEOF  &&  entryOffset  >  numToRead)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  entryOffset  >  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  entryOffset  >  numToRead)  {	  if(!hasHitEOF    &&    entryOffset    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
516	[BUG]  [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry!=  null)  {  return  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry!=  null)  {  return  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry!=  null)  {  return	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getValue();    if(currEntry!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
517	[BUG]  [BUGGY]  if  (!hasHitEOF  &&  totalRead  <  numRecords)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (!hasHitEOF  &&  totalRead  <  numRecords)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (!hasHitEOF  &&  totalRead  <  numRecords)  {	  if    (!hasHitEOF    &&    entryOffset    <    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
518	[BUG]  [BUGGY]  if(numToRead  <  hasHitEOF  ||  offset  <  numToRead)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  hasHitEOF  ||  offset  <  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  hasHitEOF  ||  offset  <  numToRead)  {	  if    (hasHitEOF    ||    offset    <    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
519	[BUG]  [BUGGY]  if  (hasHitEOF  ||  entrySize!=  available)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  ||  entrySize!=  available)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  entrySize!=  available)  {	  if    (hasHitEOF    ||    entryOffset!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
520	[BUG]  [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  null)  {  return  -1  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  null)  {  return  -1  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  null)  {  return  -1	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getValue(i);    if(currEntry!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
521	[BUG]  [BUGGY]  if(numToRead  <  available()  ||  hasHitEOF  {  entryOffset  ==  numToRead)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  available()  ||  hasHitEOF  {  entryOffset  ==  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  available()  ||  hasHitEOF  {  entryOffset  ==  numToRead)  {	  if    (numToRead    ||    hasHitEOF    {    entryOffset    ==    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
522	[BUG]  [BUGGY]  if(numToRead  <  0  ||  hasHitEOF  {  entryOffset  ==  numToRead)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  0  ||  hasHitEOF  {  entryOffset  ==  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  0  ||  hasHitEOF  {  entryOffset  ==  numToRead)  {	  if    (numToRead    ||    hasHitEOF    {    entryOffset    ==    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
523	[BUG]  [BUGGY]  if(numToRead  ==  available()  ||  hasHitEOF  {  entryOffset  ==  numToRead)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  ==  available()  ||  hasHitEOF  {  entryOffset  ==  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ==  available()  ||  hasHitEOF  {  entryOffset  ==  numToRead)  {	  if    (numToRead    ||    hasHitEOF    {    entryOffset    ==    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
524	[BUG]  [BUGGY]  if  (hasHitEOF  ||  entryOffset  ==  numRecords)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  ||  entryOffset  ==  numRecords)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  entryOffset  ==  numRecords)  {	  if    (hasHitEOF    ||    totalRead    ==    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
525	[BUG]  [BUGGY]  if  (hasHitEOF  ||  offset  ==  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  ||  offset  ==  entryOffset)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  offset  ==  entryOffset)  {	  if    (hasHitEOF    ||    totalRead    ==    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
526	[BUG]  [BUGGY]  if(height  ==  totalRead  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(height  ==  totalRead  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(height  ==  totalRead  ||  hasHitEOF)  {	  if    (entrySize    ==    totalRead    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
527	[BUG]  [BUGGY]  if(numToRead  >=  available  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  >=  available  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  >=  available  ||  hasHitEOF)  {	  if    (entryOffset    >=    numToRead    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
528	[BUG]  [BUGGY]  if(hasHitEOF  ||  buf.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(hasHitEOF  ||  buf.length  ==  0)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(hasHitEOF  ||  buf.length  ==  0)  {	  if(numToRead    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
529	[BUG]  [BUGGY]  if(!hasHitEOF  &&  totalRead  ==  numRecords)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  totalRead  ==  numRecords)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  totalRead  ==  numRecords)  {	  if(!hasHitEOF    &&    entryOffset    ==    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
530	[BUG]  [BUGGY]  if(entryOffset!=  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entryOffset!=  0  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entryOffset!=  0  ||  hasHitEOF)  {	  if(numToRead!=    entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
531	[BUG]  [BUGGY]  if(entryOffset  ==  hasHitEOF  ||  entrySize  ==  available)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entryOffset  ==  hasHitEOF  ||  entrySize  ==  available)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entryOffset  ==  hasHitEOF  ||  entrySize  ==  available)  {	  if    (entryOffset    ==    hasHitEOF    ||    entrySize    ==    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
532	[BUG]  [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  0);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	int  currEntrySize  =  is.read(buf,  offset,  0);	  int    currEntrySize    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
533	[BUG]  [BUGGY]  if(!hasHitEOF  ||  entryOffset  ==  entrySize)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  ||  entryOffset  ==  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  ||  entryOffset  ==  entrySize)  {	  if(!hasHitEOF    &&    entryOffset    ==    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
534	[BUG]  [BUGGY]  if(numToRead  >  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  >  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  >  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }	  if(numToRead    <    0)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    buffer[i]    =    is.read(buf,    offset,    i);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
535	[BUG]  [BUGGY]  if(numToRead  <  1)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  1)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  1)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }	  if(numToRead    <    0)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    buffer[i]    =    is.read(buf,    offset,    i);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
536	[BUG]  [BUGGY]  if(numToRead  <  1)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  0);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  1)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  0);  }  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  1)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  0);  }	  if(numToRead    <    0)    {    for(int    i    =    0,    len    =    buf.length;    i    <    len;    ++i)    {    buffer[i]    =    is.read(buf,    offset,    i);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
537	[BUG]  [BUGGY]  if(entryOffset  ||  hasHitEOF  ==  numToRead)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entryOffset  ||  hasHitEOF  ==  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entryOffset  ||  hasHitEOF  ==  numToRead)  {	  if(numToRead    ||    hasHitEOF    ==    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
538	[BUG]  [BUGGY]  if(numToRead  <  available()  ||  hasHitEOF  ==  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  available()  ||  hasHitEOF  ==  entryOffset)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  available()  ||  hasHitEOF  ==  entryOffset)  {	  if(numToRead    ||    hasHitEOF    ==    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
539	[BUG]  [BUGGY]  if(entrySize  ==  entryOffset  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entrySize  ==  entryOffset  &&  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entrySize  ==  entryOffset  &&  hasHitEOF)  {	  if(entrySize    ==    entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
540	[BUG]  [BUGGY]  if(numToRead  <  HitEOF  ||  buf.length  <  numToRead)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  HitEOF  ||  buf.length  <  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  HitEOF  ||  buf.length  <  numToRead)  {	  if    (hasHitEOF    ||    buf.length    <    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
541	[BUG]  [BUGGY]  if(hasHitEOF  ||  offset  >  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(hasHitEOF  ||  offset  >  SMALL_BUFFER_SIZE)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(hasHitEOF  ||  offset  >  SMALL_BUFFER_SIZE)  {	  if(hasHitEOF    ||    entryOffset    >    SMALL_BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
542	[BUG]  [BUGGY]  if(hasHitEOF  ||  entryOffset  >=  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(hasHitEOF  ||  entryOffset  >=  SMALL_BUFFER_SIZE)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(hasHitEOF  ||  entryOffset  >=  SMALL_BUFFER_SIZE)  {	  if(hasHitEOF    ||    entryOffset    >    SMALL_BUFFER_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
543	[BUG]  [BUGGY]  if  (hasHitEOF  &&  totalRead  <  numRecords)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  &&  totalRead  <  numRecords)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  totalRead  <  numRecords)  {	  if    (hasHitEOF    &&    entryOffset    <    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
544	[BUG]  [BUGGY]  if(hasHitEOF  ||  offset!=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(hasHitEOF  ||  offset!=  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(hasHitEOF  ||  offset!=  numToRead)  {	  if    (hasHitEOF    &&    entryOffset!=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
545	[BUG]  [BUGGY]  byte[]  currEntry  =  is.readByte(buf,  offset,  numToRead,  0);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =  is.readByte(buf,  offset,  numToRead,  0);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =  is.readByte(buf,  offset,  numToRead,  0);	  byte[]    currEntry    =    is.readByte(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
546	[BUG]  [BUGGY]  if(!hasHitEOF  ||  totalRead  >=  entrySize)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  ||  totalRead  >=  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  ||  totalRead  >=  entrySize)  {	  if(!hasHitEOF    &&    totalRead    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
547	[BUG]  [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.get  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.get  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.get	  if(numToRead    <    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(currEntry.getName()))    {    return    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
548	[BUG]  [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.getName())  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.getName())  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.getName())	  if(numToRead    <    0)    {    for(int    i    =    0;    i    <    numToRead;    ++i)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry.getName().equals(currEntry.getName()))    {    return    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
549	[BUG]  [BUGGY]  if(!hasHitEOF  &&  totalRead  >=  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  totalRead  >=  entryOffset)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  totalRead  >=  entryOffset)  {	  if(!hasHitEOF    &&    entryOffset    >=    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
550	[BUG]  [BUGGY]  if(!hasHitEOF  ||  entryOffset  >=  totalRead)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  ||  entryOffset  >=  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  ||  entryOffset  >=  totalRead)  {	  if(!hasHitEOF    &&    entryOffset    >=    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
551	[BUG]  [BUGGY]  if(!hasHitEOF  &&  entryOffset  >  totalRead)  {  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  entryOffset  >  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  entryOffset  >  totalRead)  {	  if(!hasHitEOF    &&    entryOffset    >=    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
552	[BUG]  [BUGGY]  if(hashEOF  ||  entryOffset  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(hashEOF  ||  entryOffset  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(hashEOF  ||  entryOffset  ||  hasHitEOF)  {	  if(entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
553	[BUG]  [BUGGY]  if(entrySize  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(entrySize  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entrySize  ||  hasHitEOF)  {	  if(entryOffset    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
554	[BUG]  [BUGGY]  if(hasHitEOF  ||  numToRead  >  entrySize)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(hasHitEOF  ||  numToRead  >  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(hasHitEOF  ||  numToRead  >  entrySize)  {	  if    (hasHitEOF    ||    entryOffset    >    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
555	[BUG]  [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  -1;  }  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numRecords  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  -1;  }	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getEntry(i);    if(currEntry!=    null)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
556	[BUG]  [BUGGY]  if(numToRead  <  this.entrySize  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  <  this.entrySize  ||  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  this.entrySize  ||  hasHitEOF)  {	  if    (entrySize    <    numToRead    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
557	[BUG]  [BUGGY]  if(hasHitEOF  &&  offset  >=  totalRead)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(hasHitEOF  &&  offset  >=  totalRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(hasHitEOF  &&  offset  >=  totalRead)  {	  if(hasHitEOF    &&    entryOffset    >=    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
558	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry();  if(currEntry!=  null)  {  continue  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry();  if(currEntry!=  null)  {  continue  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry();  if(currEntry!=  null)  {  continue	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getEntry(i);    if(currEntry!=    null)    {    continue    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
559	[BUG]  [BUGGY]  if(length  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  continue  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(length  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  continue  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(length  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  continue	  if(currEntry    ==    null)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    TarArchiveEntry    currEntry    =    currEntry.getEntry(i);    if(currEntry!=    null)    {    continue    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
560	[BUG]  [BUGGY]  if(totalRead  ==  hasHitEOF  ||  entryOffset  ==  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(totalRead  ==  hasHitEOF  ||  entryOffset  ==  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(totalRead  ==  hasHitEOF  ||  entryOffset  ==  hasHitEOF)  {	  if    (entryOffset    ==    hasHitEOF    ||    totalRead    ==    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
561	[BUG]  [BUGGY]  if(hashHitEOF  ||  totalRead  ==  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(hashHitEOF  ||  totalRead  ==  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(hashHitEOF  ||  totalRead  ==  hasHitEOF)  {	  if    (entryOffset    ==    hasHitEOF    ||    totalRead    ==    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
562	[BUG]  [BUGGY]  if  (hasHitEOF  ||  totalRead  ==  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  ||  totalRead  ==  hasHitEOF)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  totalRead  ==  hasHitEOF)  {	  if    (entryOffset    ==    hasHitEOF    ||    totalRead    ==    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
563	[BUG]  [BUGGY]  byte[]  currEntry  =  getCurrentEntryArray();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =  getCurrentEntryArray();  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =  getCurrentEntryArray();	  byte[]    currEntry    =    getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
564	[BUG]  [BUGGY]  byte[]  currEntry  =  getCurrentEntryData();  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =  getCurrentEntryData();  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =  getCurrentEntryData();	  byte[]    currEntry    =    getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
565	[BUG]  [BUGGY]  byte[]  currEntry  =  getCurrentEntryName();  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =  getCurrentEntryName();  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =  getCurrentEntryName();	  byte[]    currEntry    =    getCurrentEntry();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
566	[BUG]  [BUGGY]  if(!hasHitEOF  ||  entrySize  >  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  ||  entrySize  >  entryOffset)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  ||  entrySize  >  entryOffset)  {	  if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
567	[BUG]  [BUGGY]  if(!hasHitEOF  ||  entryOffset!=  entrySize)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  ||  entryOffset!=  entrySize)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  ||  entryOffset!=  entrySize)  {	  if(!hasHitEOF    ||    entryOffset    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
568	[BUG]  [BUGGY]  if  (hasHitEOF  ||  totalRead  <  numRecords)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  ||  totalRead  <  numRecords)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  totalRead  <  numRecords)  {	  if    (hasHitEOF    ||    totalRead    <    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
569	[BUG]  [BUGGY]  if  (hasHitEOF  ||  totalRead  <  0)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if  (hasHitEOF  ||  totalRead  <  0)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  totalRead  <  0)  {	  if    (hasHitEOF    ||    totalRead    <    entryOffset)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
570	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buf.length  >=  numRecords)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  buf.length  >=  numRecords)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  buf.length  >=  numRecords)  {	  if(!hasHitEOF    &&    buf.length    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
571	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buf.length  <  numRecords)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(!hasHitEOF  &&  buf.length  <  numRecords)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  buf.length  <  numRecords)  {	  if(!hasHitEOF    &&    buf.length    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
572	[BUG]  [BUGGY]  if(numToRead  &&  hasHitEOF  {  entryOffset  ||  entrySize  ==  numToRead)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  if(numToRead  &&  hasHitEOF  {  entryOffset  ||  entrySize  ==  numToRead)  {  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  &&  hasHitEOF  {  entryOffset  ||  entrySize  ==  numToRead)  {	  if    (hasHitEOF    &&    entryOffset    ==    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
573	[BUG]  [BUGGY]  byte[]  currEntry  =(byte[])is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =(byte[])is.read(buf,  offset,  numToRead);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =(byte[])is.read(buf,  offset,  numToRead);	  byte[]    currEntry    =(byte[])currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
574	[BUG]  [BUGGY]  byte[]  currEntry  =(byte[])currEntry.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;      [BUGGY]  byte[]  currEntry  =(byte[])currEntry.read(buf,  offset,  0);  [BUGGY]      return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =(byte[])currEntry.read(buf,  offset,  0);	  byte[]    currEntry    =(byte[])currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
