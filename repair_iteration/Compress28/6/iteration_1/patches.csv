bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (hasHitEOF  &&  entryOffset  ==  numToRead)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (hasHitEOF  &&  entryOffset  ==  numToRead)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  entryOffset  ==  numToRead)  {	  if    (hasHitEOF    ||    entryOffset    ==    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
2	[BUG]  [BUGGY]  if(numToRead  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if(numToRead  ||  hasHitEOF)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ||  hasHitEOF)  {	  if    (hasHitEOF    ||    entryOffset    ==    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
3	[BUG]  [BUGGY]  if(numToRead  ||  entryOffset  ==  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if(numToRead  ||  entryOffset  ==  hasHitEOF)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ||  entryOffset  ==  hasHitEOF)  {	  if    (hasHitEOF    ||    entryOffset    ==    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
4	[BUG]  [BUGGY]  if  (numToRead  ||  hasHitEOF  {  entryOffset  ==  numToRead)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (numToRead  ||  hasHitEOF  {  entryOffset  ==  numToRead)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  ||  hasHitEOF  {  entryOffset  ==  numToRead)  {	  if    (hasHitEOF    ||    entryOffset    ==    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
5	[BUG]  [BUGGY]  if(!hasHitEOF  &&  entryOffset  ==  numToRead)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if(!hasHitEOF  &&  entryOffset  ==  numToRead)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  entryOffset  ==  numToRead)  {	  if(!hasHitEOF    &&    entryOffset    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
6	[BUG]  [BUGGY]  if(!hasHitEOF  &&  entryOffset  ==  totalRead)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if(!hasHitEOF  &&  entryOffset  ==  totalRead)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  entryOffset  ==  totalRead)  {	  if(!hasHitEOF    &&    entryOffset    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
7	[BUG]  [BUGGY]  if(!hasHitEOF  &&  entryOffset  >=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if(!hasHitEOF  &&  entryOffset  >=  numToRead)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  entryOffset  >=  numToRead)  {	  if(!hasHitEOF    &&    entryOffset    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
8	[BUG]  [BUGGY]  if(!hasHitEOF  &&  entryOffset!=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if(!hasHitEOF  &&  entryOffset!=  numToRead)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  entryOffset!=  numToRead)  {	  if(!hasHitEOF    &&    entryOffset    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
9	[BUG]  [BUGGY]  if(!hasHitEOF  &&  entryOffset  >  entrySize)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if(!hasHitEOF  &&  entryOffset  >  entrySize)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  entryOffset  >  entrySize)  {	  if(!hasHitEOF    &&    entryOffset    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
10	[BUG]  [BUGGY]  if(!hasHitEOF  &&  entryOffset  >=  totalRead)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if(!hasHitEOF  &&  entryOffset  >=  totalRead)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  entryOffset  >=  totalRead)  {	  if(!hasHitEOF    &&    entryOffset    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
11	[BUG]  [BUGGY]  if(!hasHitEOF  &&  totalRead  >=  entrySize)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if(!hasHitEOF  &&  totalRead  >=  entrySize)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  totalRead  >=  entrySize)  {	  if(!hasHitEOF    &&    entryOffset    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
12	[BUG]  [BUGGY]  if  (hasHitEOF  &&  entryOffset  ==  entrySize)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (hasHitEOF  &&  entryOffset  ==  entrySize)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  entryOffset  ==  entrySize)  {	  if    (hasHitEOF    ||    entryOffset    ==    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
13	[BUG]  [BUGGY]  if(entrySize  ==  entryOffset  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if(entrySize  ==  entryOffset  ||  hasHitEOF)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entrySize  ==  entryOffset  ||  hasHitEOF)  {	  if    (hasHitEOF    ||    entryOffset    ==    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
14	[BUG]  [BUGGY]  if(entryOffset  ==  hasHitEOF  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if(entryOffset  ==  hasHitEOF  ||  hasHitEOF)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entryOffset  ==  hasHitEOF  ||  hasHitEOF)  {	  if    (hasHitEOF    ||    entryOffset    ==    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
15	[BUG]  [BUGGY]  if(entryOffset  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if(entryOffset  ||  hasHitEOF)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entryOffset  ||  hasHitEOF)  {	  if    (hasHitEOF    ||    entryOffset    ==    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
16	[BUG]  [BUGGY]  if  (hasHitEOF  ||  entryOffset!=  entrySize)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (hasHitEOF  ||  entryOffset!=  entrySize)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  entryOffset!=  entrySize)  {	  if    (hasHitEOF    &&    entryOffset!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
17	[BUG]  [BUGGY]  if  (hasHitEOF  &&  entryOffset!=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (hasHitEOF  &&  entryOffset!=  numToRead)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  entryOffset!=  numToRead)  {	  if    (hasHitEOF    &&    entryOffset!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
18	[BUG]  [BUGGY]  if  (hasHitEOF  &&  entryOffset  ==  totalRead)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (hasHitEOF  &&  entryOffset  ==  totalRead)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  entryOffset  ==  totalRead)  {	  if    (hasHitEOF    &&    entryOffset!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
19	[BUG]  [BUGGY]  if  (hasHitEOF  &&  entryOffset  >=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (hasHitEOF  &&  entryOffset  >=  numToRead)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  entryOffset  >=  numToRead)  {	  if    (hasHitEOF    &&    entryOffset!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
20	[BUG]  [BUGGY]  if  (entrySize  >  entryOffset  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (entrySize  >  entryOffset  ||  hasHitEOF)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (entrySize  >  entryOffset  ||  hasHitEOF)  {	  if    (hasHitEOF    ||    entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
21	[BUG]  [BUGGY]  if  (hasHitEOF  &&  entryOffset  >  entrySize)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (hasHitEOF  &&  entryOffset  >  entrySize)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  entryOffset  >  entrySize)  {	  if    (hasHitEOF    ||    entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
22	[BUG]  [BUGGY]  if  (entryOffset  >  entrySize)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (entryOffset  >  entrySize)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (entryOffset  >  entrySize)  {	  if    (hasHitEOF    ||    entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
23	[BUG]  [BUGGY]  if(numToRead  >=  entryOffset  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if(numToRead  >=  entryOffset  ||  hasHitEOF)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  >=  entryOffset  ||  hasHitEOF)  {	  if    (hasHitEOF    ||    entryOffset    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
24	[BUG]  [BUGGY]  if(numToRead!=  entryOffset  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if(numToRead!=  entryOffset  ||  hasHitEOF)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead!=  entryOffset  ||  hasHitEOF)  {	  if    (hasHitEOF    ||    entryOffset    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
25	[BUG]  [BUGGY]  if  (entryOffset  >=  numToRead  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (entryOffset  >=  numToRead  ||  hasHitEOF)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (entryOffset  >=  numToRead  ||  hasHitEOF)  {	  if    (hasHitEOF    ||    entryOffset    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
26	[BUG]  [BUGGY]  if  (hasHitEOF  &&  entryOffset  <  totalRead)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (hasHitEOF  &&  entryOffset  <  totalRead)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  entryOffset  <  totalRead)  {	  if    (hasHitEOF    ||    entryOffset    <    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
27	[BUG]  [BUGGY]  if  (!hasHitEOF  &&  entryOffset  <  totalRead)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (!hasHitEOF  &&  entryOffset  <  totalRead)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (!hasHitEOF  &&  entryOffset  <  totalRead)  {	  if    (hasHitEOF    ||    entryOffset    <    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
28	[BUG]  [BUGGY]  if  (hasHitEOF  ||  totalRead  <  numToRead)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (hasHitEOF  ||  totalRead  <  numToRead)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  totalRead  <  numToRead)  {	  if    (hasHitEOF    ||    entryOffset    <    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
29	[BUG]  [BUGGY]  if(entryOffset  <  hasHitEOF  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if(entryOffset  <  hasHitEOF  ||  hasHitEOF)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entryOffset  <  hasHitEOF  ||  hasHitEOF)  {	  if    (hasHitEOF    ||    entryOffset    <    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
30	[BUG]  [BUGGY]  if  (hasHitEOF  ||  totalRead  <  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (hasHitEOF  ||  totalRead  <  entryOffset)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  totalRead  <  entryOffset)  {	  if    (hasHitEOF    ||    entryOffset    <    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
31	[BUG]  [BUGGY]  if  (hasHitEOF  &&  totalRead  >=  entrySize)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (hasHitEOF  &&  totalRead  >=  entrySize)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  totalRead  >=  entrySize)  {	  if    (hasHitEOF    &&    entryOffset    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
32	[BUG]  [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  int  currEntrySize  =  is.read(buf,  offset,  numToRead);  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	int  currEntrySize  =  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
33	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead);  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	int  ch  =  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
34	[BUG]  [BUGGY]  byte[]  currEntry  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  byte[]  currEntry  =  is.read(buf,  offset,  numToRead);  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
35	[BUG]  [BUGGY]  byte[]  currEntry  =  is.readByte(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  byte[]  currEntry  =  is.readByte(buf,  offset,  numToRead);  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =  is.readByte(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
36	[BUG]  [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead);  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =  getCurrentEntry(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
37	[BUG]  [BUGGY]  byte[]  currEntry  =(byte[])currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  byte[]  currEntry  =(byte[])currEntry.read(buf,  offset,  numToRead);  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =(byte[])currEntry.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
38	[BUG]  [BUGGY]  byte[]  currEntry  =  getCurrentEntry();  [CE]  illegal  start  of  type  [FE]                                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  byte[]  currEntry  =  getCurrentEntry();  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	byte[]  currEntry  =  getCurrentEntry();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
39	[BUG]  [BUGGY]  if  (hasHitEOF  &&  entryOffset  <  numToRead)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (hasHitEOF  &&  entryOffset  <  numToRead)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  entryOffset  <  numToRead)  {	  if    (hasHitEOF    ||    entryOffset    <    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
40	[BUG]  [BUGGY]  if  (numToRead  ||  entryOffset  <  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (numToRead  ||  entryOffset  <  hasHitEOF)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  ||  entryOffset  <  hasHitEOF)  {	  if    (hasHitEOF    ||    entryOffset    <    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
41	[BUG]  [BUGGY]  if(numToRead  <  entryOffset  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if(numToRead  <  entryOffset  ||  hasHitEOF)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  entryOffset  ||  hasHitEOF)  {	  if    (hasHitEOF    ||    entryOffset    <    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
42	[BUG]  [BUGGY]  if  (numToRead  ||  entryOffset  ==  totalRead)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (numToRead  ||  entryOffset  ==  totalRead)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  ||  entryOffset  ==  totalRead)  {	  if    (hasHitEOF    ||    entryOffset    ==    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
43	[BUG]  [BUGGY]  if  (hasHitEOF  ||  totalRead  ==  offset)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (hasHitEOF  ||  totalRead  ==  offset)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  totalRead  ==  offset)  {	  if    (hasHitEOF    ||    entryOffset    ==    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
44	[BUG]  [BUGGY]  if  (entrySize  <  totalRead  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (entrySize  <  totalRead  ||  hasHitEOF)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (entrySize  <  totalRead  ||  hasHitEOF)  {	  if    (hasHitEOF    ||    entryOffset    <    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
45	[BUG]  [BUGGY]  if  (hasHitEOF  ||  buf.length  <  totalRead)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (hasHitEOF  ||  buf.length  <  totalRead)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  buf.length  <  totalRead)  {	  if    (hasHitEOF    ||    entryOffset    <    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
46	[BUG]  [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead);  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	readNow  =  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
47	[BUG]  [BUGGY]  if(currEntry  ==  null)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if(currEntry  ==  null)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  -1;  }  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(currEntry  ==  null)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  return  -1;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
48	[BUG]  [BUGGY]  if(currEntry  ==  null)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry!=  null)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if(currEntry  ==  null)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry!=  null)  {  return  -1;  }  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(currEntry  ==  null)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue();  if(currEntry!=  null)  {  return  -1;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
49	[BUG]  [BUGGY]  if(currEntry  ==  null)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  null)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if(currEntry  ==  null)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  null)  {  return  -1;  }  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(currEntry  ==  null)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getValue(i);  if(currEntry!=  null)  {  return  -1;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
50	[BUG]  [BUGGY]  if(currEntry  ==  null)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  continue  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if(currEntry  ==  null)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  continue  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(currEntry  ==  null)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  TarArchiveEntry  currEntry  =  currEntry.getEntry(i);  if(currEntry!=  null)  {  continue	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
51	[BUG]  [BUGGY]  if  (hasHitEOF  ||  buf.length  >=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (hasHitEOF  ||  buf.length  >=  numToRead)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  buf.length  >=  numToRead)  {	  if    (hasHitEOF    ||    entryOffset    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
52	[BUG]  [BUGGY]  if  (entrySize  >=  numToRead  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (entrySize  >=  numToRead  ||  hasHitEOF)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (entrySize  >=  numToRead  ||  hasHitEOF)  {	  if    (hasHitEOF    ||    entryOffset    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
53	[BUG]  [BUGGY]  if  (numToRead  >  entryOffset  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (numToRead  >  entryOffset  ||  hasHitEOF)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  >  entryOffset  ||  hasHitEOF)  {	  if    (hasHitEOF    ||    entryOffset    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
54	[BUG]  [BUGGY]  if  (numToRead  >=  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (numToRead  >=  entryOffset)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  >=  entryOffset)  {	  if    (hasHitEOF    ||    entryOffset    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
55	[BUG]  [BUGGY]  if  (entrySize  ==  totalRead  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (entrySize  ==  totalRead  ||  hasHitEOF)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (entrySize  ==  totalRead  ||  hasHitEOF)  {	  if    (hasHitEOF    ||    entryOffset    ==    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
56	[BUG]  [BUGGY]  if  (entryOffset  ==  hasHitEOF  ||  totalRead  ==  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (entryOffset  ==  hasHitEOF  ||  totalRead  ==  hasHitEOF)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (entryOffset  ==  hasHitEOF  ||  totalRead  ==  hasHitEOF)  {	  if    (hasHitEOF    ||    entryOffset    ==    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
57	[BUG]  [BUGGY]  if  (numToRead  ||  hasHitEOF  ||  entryOffset  ==  totalRead)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (numToRead  ||  hasHitEOF  ||  entryOffset  ==  totalRead)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (numToRead  ||  hasHitEOF  ||  entryOffset  ==  totalRead)  {	  if    (hasHitEOF    ||    entryOffset    ==    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
58	[BUG]  [BUGGY]  if  (hasHitEOF  ||  buf.length  <  numToRead)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (hasHitEOF  ||  buf.length  <  numToRead)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  buf.length  <  numToRead)  {	  if    (hasHitEOF    ||    entryOffset    <    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
59	[BUG]  [BUGGY]  if  (entrySize  <  numToRead  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (entrySize  <  numToRead  ||  hasHitEOF)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (entrySize  <  numToRead  ||  hasHitEOF)  {	  if    (hasHitEOF    ||    entryOffset    <    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
60	[BUG]  [BUGGY]  if  (entrySize  ==  numToRead  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (entrySize  ==  numToRead  ||  hasHitEOF)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (entrySize  ==  numToRead  ||  hasHitEOF)  {	  if    (hasHitEOF    ||    entryOffset    ==    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
61	[BUG]  [BUGGY]  if  (entryOffset  ==  hasHitEOF  ||  entrySize  ==  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (entryOffset  ==  hasHitEOF  ||  entrySize  ==  hasHitEOF)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (entryOffset  ==  hasHitEOF  ||  entrySize  ==  hasHitEOF)  {	  if    (hasHitEOF    ||    entryOffset    ==    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
62	[BUG]  [BUGGY]  if  (entrySize  ==  entryOffset)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (entrySize  ==  entryOffset)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (entrySize  ==  entryOffset)  {	  if    (hasHitEOF    ||    entryOffset    ==    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
63	[BUG]  [BUGGY]  if(!hasHitEOF  &&  buf.length  >=  entrySize)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if(!hasHitEOF  &&  buf.length  >=  entrySize)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  buf.length  >=  entrySize)  {	  if(!hasHitEOF    &&    entryOffset    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
64	[BUG]  [BUGGY]  if  (hasHitEOF  &&  buf.length!=  entrySize)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (hasHitEOF  &&  buf.length!=  entrySize)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  buf.length!=  entrySize)  {	  if    (hasHitEOF    &&    entryOffset!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
65	[BUG]  [BUGGY]  if  (hasHitEOF  &&  currEntry!=  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (hasHitEOF  &&  currEntry!=  null)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  currEntry!=  null)  {	  if    (hasHitEOF    &&    entryOffset!=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
66	[BUG]  [BUGGY]  if  (hasHitEOF  &&  buf.length  >=  entrySize)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (hasHitEOF  &&  buf.length  >=  entrySize)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  buf.length  >=  entrySize)  {	  if    (hasHitEOF    &&    entryOffset    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
67	[BUG]  [BUGGY]  if  (hasHitEOF  &&  currEntry.length  >=  entrySize)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (hasHitEOF  &&  currEntry.length  >=  entrySize)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  &&  currEntry.length  >=  entrySize)  {	  if    (hasHitEOF    &&    entryOffset    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
68	[BUG]  [BUGGY]  if  (hasHitEOF  ||  offset  <  totalRead)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (hasHitEOF  ||  offset  <  totalRead)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  offset  <  totalRead)  {	  if    (hasHitEOF    ||    entryOffset    <    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
69	[BUG]  [BUGGY]  if(hasHitEOF  ||  entryOffset  >  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if(hasHitEOF  ||  entryOffset  >  SMALL_BUFFER_SIZE)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(hasHitEOF  ||  entryOffset  >  SMALL_BUFFER_SIZE)  {	  if    (hasHitEOF    ||    entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
70	[BUG]  [BUGGY]  if  (hasHitEOF  ||  entryOffset  >  totalRead)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (hasHitEOF  ||  entryOffset  >  totalRead)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  entryOffset  >  totalRead)  {	  if    (hasHitEOF    ||    entryOffset    >    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
71	[BUG]  [BUGGY]  if(hasHitEOF  ||  entryOffset  ==  0)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if(hasHitEOF  ||  entryOffset  ==  0)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(hasHitEOF  ||  entryOffset  ==  0)  {	  if    (hasHitEOF    ||    entryOffset    ==    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
72	[BUG]  [BUGGY]  if(entryOffset  ==  hasHitEOF  ||  entrySize  ==  entryOffset)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if(entryOffset  ==  hasHitEOF  ||  entrySize  ==  entryOffset)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(entryOffset  ==  hasHitEOF  ||  entrySize  ==  entryOffset)  {	  if    (hasHitEOF    ||    entryOffset    ==    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
73	[BUG]  [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.getName  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.getName  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.getName	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
74	[BUG]  [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  0)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
75	[BUG]  [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  i);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
76	[BUG]  [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.getName()))  {  return  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.getName()))  {  return  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry.getName().equals(currEntry.getName()))  {  return	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
77	[BUG]  [BUGGY]  if(!hasHitEOF  &&  entryOffset  ==  entrySize)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if(!hasHitEOF  &&  entryOffset  ==  entrySize)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  &&  entryOffset  ==  entrySize)  {	  if(!hasHitEOF    &&    entryOffset    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
78	[BUG]  [BUGGY]  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(!hasHitEOF  ||  entryOffset  >=  entrySize)  {	  if(!hasHitEOF    &&    entryOffset    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
79	[BUG]  [BUGGY]  if  (hasHitEOF  ||  offset  <  numToRead)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (hasHitEOF  ||  offset  <  numToRead)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  offset  <  numToRead)  {	  if    (hasHitEOF    ||    entryOffset    <    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
80	[BUG]  [BUGGY]  if  (hasHitEOF  ||  totalRead  ==  numToRead)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (hasHitEOF  ||  totalRead  ==  numToRead)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  totalRead  ==  numToRead)  {	  if    (hasHitEOF    ||    entryOffset    ==    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
81	[BUG]  [BUGGY]  if  (hasHitEOF  ||  offset  ==  numToRead)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (hasHitEOF  ||  offset  ==  numToRead)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  offset  ==  numToRead)  {	  if    (hasHitEOF    ||    entryOffset    ==    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
82	[BUG]  [BUGGY]  if(numToRead  ||  hasHitEOF  ==  entryOffset)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if(numToRead  ||  hasHitEOF  ==  entryOffset)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(numToRead  ||  hasHitEOF  ==  entryOffset)  {	  if    (hasHitEOF    ||    entryOffset    ==    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
83	[BUG]  [BUGGY]  if(hasHitEOF  &&  entryOffset  >=  totalRead)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if(hasHitEOF  &&  entryOffset  >=  totalRead)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if(hasHitEOF  &&  entryOffset  >=  totalRead)  {	  if    (hasHitEOF    &&    entryOffset    >=    entrySize)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
84	[BUG]  [BUGGY]  if  (hasHitEOF  ||  offset  >  numToRead)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (hasHitEOF  ||  offset  >  numToRead)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  offset  >  numToRead)  {	  if    (hasHitEOF    ||    entryOffset    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
85	[BUG]  [BUGGY]  if  (hasHitEOF  ||  totalRead  >=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (hasHitEOF  ||  totalRead  >=  numToRead)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  totalRead  >=  numToRead)  {	  if    (hasHitEOF    ||    entryOffset    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
86	[BUG]  [BUGGY]  if  (hasHitEOF  ||  offset  >=  numToRead)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (hasHitEOF  ||  offset  >=  numToRead)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  offset  >=  numToRead)  {	  if    (hasHitEOF    ||    entryOffset    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
87	[BUG]  [BUGGY]  if  (hasHitEOF  ||  entryOffset  >  numToRead)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (hasHitEOF  ||  entryOffset  >  numToRead)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  entryOffset  >  numToRead)  {	  if    (hasHitEOF    ||    entryOffset    >=    numToRead)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
88	[BUG]  [BUGGY]  if  (hasHitEOF  ||  totalRead  ==  entryOffset)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    public  int  read(byte[]  buf,  int  offset,  int  numToRead)  throws  IOException  {  int  totalRead  =  0;    [BUGGY]  if  (hasHitEOF  ||  totalRead  ==  entryOffset)  {  [BUGGY]    return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	572	572	1	replace	if  (hasHitEOF  ||  totalRead  ==  entryOffset)  {	  if    (hasHitEOF    ||    entryOffset    ==    totalRead)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
