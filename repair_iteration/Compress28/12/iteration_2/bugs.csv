bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(entryOffset!=  0)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset!=  0)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset!=  0)  {	  if(entryOffset!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
2	[BUG]  [BUGGY]  if(entryOffset!=  -1  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset!=  -1  &&  hasHitEOF)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset!=  -1  &&  hasHitEOF)  {	  if(entryOffset!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
3	[BUG]  [BUGGY]  if(numToRead!=  -1)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(numToRead!=  -1)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead!=  -1)  {	  if(entryOffset!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
4	[BUG]  [BUGGY]  if(entrySize  ==  -1)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entrySize  ==  -1)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entrySize  ==  -1)  {	  if(entryOffset    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
5	[BUG]  [BUGGY]  if(entryOffset  >  0)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset  >  0)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >  0)  {	  if(entryOffset    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
6	[BUG]  [BUGGY]  if(entrySize  >=  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entrySize  >=  0)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entrySize  >=  0)  {	  if(entryOffset    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
7	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset  <  0  ||  hasHitEOF)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  <  0  ||  hasHitEOF)  {	  if(entryOffset    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
8	[BUG]  [BUGGY]  if(entryOffset  >=  -1  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset  >=  -1  &&  hasHitEOF)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >=  -1  &&  hasHitEOF)  {	  if(entryOffset    >=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
9	[BUG]  [BUGGY]  if(entryOffset  ==  0  ||  totalRead  ==  -1)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset  ==  0  ||  totalRead  ==  -1)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  0  ||  totalRead  ==  -1)  {	  if(entryOffset    ==    -1    ||    totalRead    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
10	[BUG]  [BUGGY]  if(entryOffset  ==  -1  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset  ==  -1  ||  hasHitEOF)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  -1  ||  hasHitEOF)  {	  if(entryOffset    ==    -1    ||    totalRead    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
11	[BUG]  [BUGGY]  if(entryOffset  ==  -1  ||  entrySize  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset  ==  -1  ||  entrySize  ==  -1)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  -1  ||  entrySize  ==  -1)  {	  if(entryOffset    ==    -1    ||    totalRead    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
12	[BUG]  [BUGGY]  if(numToRead  ==  -1  ||  totalRead  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(numToRead  ==  -1  ||  totalRead  ==  -1)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  ==  -1  ||  totalRead  ==  -1)  {	  if(entryOffset    ==    -1    ||    totalRead    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
13	[BUG]  [BUGGY]  if(entryOffset  ==  -1  ||  totalRead!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset  ==  -1  ||  totalRead!=  -1)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  -1  ||  totalRead!=  -1)  {	  if(entryOffset    ==    -1    ||    totalRead    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
14	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead);  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  ch  =  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
15	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead);  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  numRecords  =  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
16	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getInputStream();  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  InputStream  is  =  currEntry.getInputStream();  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	InputStream  is  =  currEntry.getInputStream();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
17	[BUG]  [BUGGY]  InputStream  is  =  currEntry.getInputStream();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  InputStream  is  =  currEntry.getInputStream();  hasHitEOF  =  is.read(buf,  offset,  numToRead);  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	InputStream  is  =  currEntry.getInputStream();  hasHitEOF  =  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
18	[BUG]  [BUGGY]  if(entryOffset  <  numToRead)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset  <  numToRead)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  <  numToRead)  {  if(!hasHitEOF)  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
19	[BUG]  [BUGGY]  int  numRecords  =  currEntry.length;  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  int  numRecords  =  currEntry.length;  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  numRecords  =  currEntry.length;	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
20	[BUG]  [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  int  ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  ch  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
21	[BUG]  [BUGGY]  if  (numToRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if  (numToRead  ==  0)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if  (numToRead  ==  0)  {	  if    (numToRead    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
22	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entrySize  ==  0)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entrySize  ==  0)  {	  if(entryOffset    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
23	[BUG]  [BUGGY]  if(entryOffset  ==  0  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset  ==  0  ||  hasHitEOF)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  0  ||  hasHitEOF)  {	  if(entryOffset    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
24	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  entrySize  >  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset  <  0  ||  entrySize  >  SMALL_BUFFER_SIZE)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  <  0  ||  entrySize  >  SMALL_BUFFER_SIZE)  {	  if(entryOffset    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
25	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  entrySize  <  numRecords.length)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset  <  0  ||  entrySize  <  numRecords.length)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  <  0  ||  entrySize  <  numRecords.length)  {	  if(entryOffset    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
26	[BUG]  [BUGGY]  if(entrySize  <  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entrySize  <  0)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entrySize  <  0)  {	  if(entryOffset    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
27	[BUG]  [BUGGY]  if(entryOffset  ==  0  ||  totalRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset  ==  0  ||  totalRead  ==  0)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  0  ||  totalRead  ==  0)  {	  if(entryOffset    ==    -1    ||    totalRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
28	[BUG]  [BUGGY]  if(entryOffset  ==  -1  ||  entrySize  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset  ==  -1  ||  entrySize  ==  0)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  -1  ||  entrySize  ==  0)  {	  if(entryOffset    ==    -1    ||    totalRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
29	[BUG]  [BUGGY]  if(numToRead  ==  -1  ||  numToRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(numToRead  ==  -1  ||  numToRead  ==  0)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  ==  -1  ||  numToRead  ==  0)  {	  if(entryOffset    ==    -1    ||    totalRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
30	[BUG]  [BUGGY]  if(entryOffset  ==  -1  ||  totalRead!=  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset  ==  -1  ||  totalRead!=  0)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  -1  ||  totalRead!=  0)  {	  if(entryOffset    ==    -1    ||    totalRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
31	[BUG]  [BUGGY]  if(entryOffset  >=  0  ||  totalRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset  >=  0  ||  totalRead  ==  0)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >=  0  ||  totalRead  ==  0)  {	  if(entryOffset    ==    -1    ||    totalRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
32	[BUG]  [BUGGY]  if(entryOffset  +  totalRead  >=  0)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset  +  totalRead  >=  0)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  +  totalRead  >=  0)  {	  if(entryOffset    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
33	[BUG]  [BUGGY]  if(entryOffset  +  totalRead  >  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset  +  totalRead  >  0)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  +  totalRead  >  0)  {	  if(entryOffset    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
34	[BUG]  [BUGGY]  if(entryOffset  ==  -1  &&  totalRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset  ==  -1  &&  totalRead  ==  0)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  -1  &&  totalRead  ==  0)  {	  if(entryOffset    ==    -1    ||    totalRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
35	[BUG]  [BUGGY]  if(numToRead  ==  -1  ||  totalRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(numToRead  ==  -1  ||  totalRead  ==  0)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(numToRead  ==  -1  ||  totalRead  ==  0)  {	  if(entryOffset    ==    -1    ||    totalRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
36	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  totalRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset  <  0  ||  totalRead  ==  0)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  <  0  ||  totalRead  ==  0)  {	  if(entryOffset    ==    -1    ||    totalRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
37	[BUG]  [BUGGY]  if(entryOffset!=  -1  &&  totalRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset!=  -1  &&  totalRead  ==  0)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset!=  -1  &&  totalRead  ==  0)  {	  if(entryOffset    ==    -1    ||    totalRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
38	[BUG]  [BUGGY]  if(entryOffset  >  -1)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset  >  -1)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >  -1)  {	  if(entryOffset    >=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
39	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  totalRead  >  numRecords)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset  <  0  ||  totalRead  >  numRecords)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  <  0  ||  totalRead  >  numRecords)  {	  if(entryOffset    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
40	[BUG]  [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead);  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	readNow  =  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
41	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  ch  =  is.read(buf,  offset,  numToRead);  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	ch  =  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
42	[BUG]  [BUGGY]  if(entryOffset  >=  0)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset  >=  0)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >=  0)  {  if(currEntry!=  null)  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
43	[BUG]  [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  readNow  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	readNow  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
44	[BUG]  [BUGGY]  if(entryOffset!=  -1  &&  currEntry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset!=  -1  &&  currEntry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset!=  -1  &&  currEntry.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(entryOffset!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
45	[BUG]  [BUGGY]  if(entryOffset!=  -1  &&  currEntry.getMethod()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset!=  -1  &&  currEntry.getMethod()  ==  Token.GETPROP)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset!=  -1  &&  currEntry.getMethod()  ==  Token.GETPROP)  {	  if(entryOffset!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
46	[BUG]  [BUGGY]  if  (numToRead  >  -1)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if  (numToRead  >  -1)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if  (numToRead  >  -1)  {	  if    (numToRead    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
47	[BUG]  [BUGGY]  if  (numToRead  >=  -1)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if  (numToRead  >=  -1)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if  (numToRead  >=  -1)  {	  if    (numToRead    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
48	[BUG]  [BUGGY]  if(entryOffset  ==  -1  &&  totalRead  ==  -1)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset  ==  -1  &&  totalRead  ==  -1)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  ==  -1  &&  totalRead  ==  -1)  {	  if(entryOffset    ==    -1    ||    totalRead    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
49	[BUG]  [BUGGY]  if(entryOffset  >=  0  ||  totalRead  ==  -1)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset  >=  0  ||  totalRead  ==  -1)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >=  0  ||  totalRead  ==  -1)  {	  if(entryOffset    ==    -1    ||    totalRead    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
50	[BUG]  [BUGGY]  if(entryOffset!=  -1  &&  totalRead  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset!=  -1  &&  totalRead  ==  -1)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset!=  -1  &&  totalRead  ==  -1)  {	  if(entryOffset    ==    -1    ||    totalRead    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
51	[BUG]  [BUGGY]  int  entrySize  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  int  entrySize  =  is.read(buf,  offset,  numToRead);  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  entrySize  =  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
52	[BUG]  [BUGGY]  i.remove();  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  i.remove();  hasHitEOF  =  true;  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	i.remove();  hasHitEOF  =  true;	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
53	[BUG]  [BUGGY]  int  entrySize  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  int  entrySize  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	int  entrySize  =  is.read(buf,  offset,  numToRead);  hasHitEOF  =  true;	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
54	[BUG]  [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entrySize  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entrySize  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
55	[BUG]  [BUGGY]  if(entryOffset  >  0)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset  >  0)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >  0)  {  for(int  i  =  offset;  i  <  numRecords;  ++i)  {  hasHitEOF  =  true;  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
56	[BUG]  [BUGGY]  if(entryOffset  >  -1  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset  >  -1  ||  hasHitEOF)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >  -1  ||  hasHitEOF)  {	  if(entryOffset    >=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
57	[BUG]  [BUGGY]  if(entryOffset!=  -1  &&  is.read(buf,  offset,  totalRead))  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset!=  -1  &&  is.read(buf,  offset,  totalRead))  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset!=  -1  &&  is.read(buf,  offset,  totalRead))  {	  if(entryOffset!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
58	[BUG]  [BUGGY]  if(entrySize!=  -1)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entrySize!=  -1)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entrySize!=  -1)  {	  if(entryOffset!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
59	[BUG]  [BUGGY]  if(entryOffset  <  0  ||  totalRead  ==  -1)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset  <  0  ||  totalRead  ==  -1)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  <  0  ||  totalRead  ==  -1)  {	  if(entryOffset    ==    -1    ||    totalRead    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
60	[BUG]  [BUGGY]  if(entryOffset!=  -1  ||  totalRead  ==  -1)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset!=  -1  ||  totalRead  ==  -1)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset!=  -1  ||  totalRead  ==  -1)  {	  if(entryOffset    ==    -1    ||    totalRead    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
61	[BUG]  [BUGGY]  if(entryOffset  >  -1  ||  totalRead  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset  >  -1  ||  totalRead  ==  -1)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >  -1  ||  totalRead  ==  -1)  {	  if(entryOffset    ==    -1    ||    totalRead    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
62	[BUG]  [BUGGY]  if(entryOffset  +  totalRead  <  0)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset  +  totalRead  <  0)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  +  totalRead  <  0)  {	  if(entryOffset    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
63	[BUG]  [BUGGY]  if(entryOffset  >  -1  ||  totalRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset  >  -1  ||  totalRead  ==  0)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset  >  -1  ||  totalRead  ==  0)  {	  if(entryOffset    ==    -1    ||    totalRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
64	[BUG]  [BUGGY]  if(entryOffset!=  0  ||  totalRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset!=  0  ||  totalRead  ==  0)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset!=  0  ||  totalRead  ==  0)  {	  if(entryOffset    ==    -1    ||    totalRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
65	[BUG]  [BUGGY]  if(entryOffset!=  -1  ||  totalRead  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }  numToRead  =  Math.min(numToRead,  available());  totalRead  =  is.read(buf,  offset,  numToRead);  count(totalRead);    [BUGGY]  if(entryOffset!=  -1  ||  totalRead  ==  0)  {  [BUGGY]    hasHitEOF  =  true;  }  else  {  entryOffset  +=  totalRead;  }  return  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  buf  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  encoding  InputStream  i  is  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  numToRead  offset  read  readNow  recordSize  totalRead  long  available  entryOffset  entrySize  numRecords  numToSkip  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress28/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.5	585	585	1	replace	if(entryOffset!=  -1  ||  totalRead  ==  0)  {	  if(entryOffset    ==    -1    ||    totalRead    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
